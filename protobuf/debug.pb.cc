// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/debug.proto

#include "tensorflow/core/protobuf/debug.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR DebugTensorWatch::DebugTensorWatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.debug_ops_)*/{}
  , /*decltype(_impl_.debug_urls_)*/{}
  , /*decltype(_impl_.node_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.output_slot_)*/0
  , /*decltype(_impl_.tolerate_debug_op_creation_failures_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DebugTensorWatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugTensorWatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugTensorWatchDefaultTypeInternal() {}
  union {
    DebugTensorWatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugTensorWatchDefaultTypeInternal _DebugTensorWatch_default_instance_;
PROTOBUF_CONSTEXPR DebugOptions::DebugOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.debug_tensor_watch_opts_)*/{}
  , /*decltype(_impl_.global_step_)*/int64_t{0}
  , /*decltype(_impl_.reset_disk_byte_usage_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DebugOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugOptionsDefaultTypeInternal() {}
  union {
    DebugOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugOptionsDefaultTypeInternal _DebugOptions_default_instance_;
PROTOBUF_CONSTEXPR DebuggedSourceFile::DebuggedSourceFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lines_)*/{}
  , /*decltype(_impl_.host_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_modified_)*/int64_t{0}
  , /*decltype(_impl_.bytes_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DebuggedSourceFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebuggedSourceFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebuggedSourceFileDefaultTypeInternal() {}
  union {
    DebuggedSourceFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebuggedSourceFileDefaultTypeInternal _DebuggedSourceFile_default_instance_;
PROTOBUF_CONSTEXPR DebuggedSourceFiles::DebuggedSourceFiles(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_files_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DebuggedSourceFilesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebuggedSourceFilesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebuggedSourceFilesDefaultTypeInternal() {}
  union {
    DebuggedSourceFiles _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebuggedSourceFilesDefaultTypeInternal _DebuggedSourceFiles_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugTensorWatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugTensorWatch, _impl_.node_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugTensorWatch, _impl_.output_slot_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugTensorWatch, _impl_.debug_ops_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugTensorWatch, _impl_.debug_urls_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugTensorWatch, _impl_.tolerate_debug_op_creation_failures_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugOptions, _impl_.debug_tensor_watch_opts_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugOptions, _impl_.global_step_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugOptions, _impl_.reset_disk_byte_usage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedSourceFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedSourceFile, _impl_.host_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedSourceFile, _impl_.file_path_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedSourceFile, _impl_.last_modified_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedSourceFile, _impl_.bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedSourceFile, _impl_.lines_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedSourceFiles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedSourceFiles, _impl_.source_files_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::DebugTensorWatch)},
  { 11, -1, -1, sizeof(::tensorflow::DebugOptions)},
  { 20, -1, -1, sizeof(::tensorflow::DebuggedSourceFile)},
  { 31, -1, -1, sizeof(::tensorflow::DebuggedSourceFiles)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_DebugTensorWatch_default_instance_._instance,
  &::tensorflow::_DebugOptions_default_instance_._instance,
  &::tensorflow::_DebuggedSourceFile_default_instance_._instance,
  &::tensorflow::_DebuggedSourceFiles_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$tensorflow/core/protobuf/debug.proto\022\n"
  "tensorflow\"\216\001\n\020DebugTensorWatch\022\021\n\tnode_"
  "name\030\001 \001(\t\022\023\n\013output_slot\030\002 \001(\005\022\021\n\tdebug"
  "_ops\030\003 \003(\t\022\022\n\ndebug_urls\030\004 \003(\t\022+\n#tolera"
  "te_debug_op_creation_failures\030\005 \001(\010\"\201\001\n\014"
  "DebugOptions\022=\n\027debug_tensor_watch_opts\030"
  "\004 \003(\0132\034.tensorflow.DebugTensorWatch\022\023\n\013g"
  "lobal_step\030\n \001(\003\022\035\n\025reset_disk_byte_usag"
  "e\030\013 \001(\010\"j\n\022DebuggedSourceFile\022\014\n\004host\030\001 "
  "\001(\t\022\021\n\tfile_path\030\002 \001(\t\022\025\n\rlast_modified\030"
  "\003 \001(\003\022\r\n\005bytes\030\004 \001(\003\022\r\n\005lines\030\005 \003(\t\"K\n\023D"
  "ebuggedSourceFiles\0224\n\014source_files\030\001 \003(\013"
  "2\036.tensorflow.DebuggedSourceFileB\203\001\n\030org"
  ".tensorflow.frameworkB\013DebugProtosP\001ZUgi"
  "thub.com/tensorflow/tensorflow/tensorflo"
  "w/go/core/protobuf/for_core_protos_go_pr"
  "oto\370\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto = {
    false, false, 654, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto,
    "tensorflow/core/protobuf/debug.proto",
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto);
namespace tensorflow {

// ===================================================================

class DebugTensorWatch::_Internal {
 public:
};

DebugTensorWatch::DebugTensorWatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DebugTensorWatch)
}
DebugTensorWatch::DebugTensorWatch(const DebugTensorWatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugTensorWatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.debug_ops_){from._impl_.debug_ops_}
    , decltype(_impl_.debug_urls_){from._impl_.debug_urls_}
    , decltype(_impl_.node_name_){}
    , decltype(_impl_.output_slot_){}
    , decltype(_impl_.tolerate_debug_op_creation_failures_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.output_slot_, &from._impl_.output_slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tolerate_debug_op_creation_failures_) -
    reinterpret_cast<char*>(&_impl_.output_slot_)) + sizeof(_impl_.tolerate_debug_op_creation_failures_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.DebugTensorWatch)
}

inline void DebugTensorWatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.debug_ops_){arena}
    , decltype(_impl_.debug_urls_){arena}
    , decltype(_impl_.node_name_){}
    , decltype(_impl_.output_slot_){0}
    , decltype(_impl_.tolerate_debug_op_creation_failures_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DebugTensorWatch::~DebugTensorWatch() {
  // @@protoc_insertion_point(destructor:tensorflow.DebugTensorWatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugTensorWatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.debug_ops_.~RepeatedPtrField();
  _impl_.debug_urls_.~RepeatedPtrField();
  _impl_.node_name_.Destroy();
}

void DebugTensorWatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugTensorWatch::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DebugTensorWatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.debug_ops_.Clear();
  _impl_.debug_urls_.Clear();
  _impl_.node_name_.ClearToEmpty();
  ::memset(&_impl_.output_slot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tolerate_debug_op_creation_failures_) -
      reinterpret_cast<char*>(&_impl_.output_slot_)) + sizeof(_impl_.tolerate_debug_op_creation_failures_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugTensorWatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string node_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_node_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.DebugTensorWatch.node_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 output_slot = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.output_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string debug_ops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_debug_ops();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.DebugTensorWatch.debug_ops"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string debug_urls = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_debug_urls();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.DebugTensorWatch.debug_urls"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool tolerate_debug_op_creation_failures = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.tolerate_debug_op_creation_failures_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugTensorWatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DebugTensorWatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string node_name = 1;
  if (!this->_internal_node_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_name().data(), static_cast<int>(this->_internal_node_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugTensorWatch.node_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_node_name(), target);
  }

  // int32 output_slot = 2;
  if (this->_internal_output_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_output_slot(), target);
  }

  // repeated string debug_ops = 3;
  for (int i = 0, n = this->_internal_debug_ops_size(); i < n; i++) {
    const auto& s = this->_internal_debug_ops(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugTensorWatch.debug_ops");
    target = stream->WriteString(3, s, target);
  }

  // repeated string debug_urls = 4;
  for (int i = 0, n = this->_internal_debug_urls_size(); i < n; i++) {
    const auto& s = this->_internal_debug_urls(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugTensorWatch.debug_urls");
    target = stream->WriteString(4, s, target);
  }

  // bool tolerate_debug_op_creation_failures = 5;
  if (this->_internal_tolerate_debug_op_creation_failures() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_tolerate_debug_op_creation_failures(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DebugTensorWatch)
  return target;
}

size_t DebugTensorWatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DebugTensorWatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string debug_ops = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.debug_ops_.size());
  for (int i = 0, n = _impl_.debug_ops_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.debug_ops_.Get(i));
  }

  // repeated string debug_urls = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.debug_urls_.size());
  for (int i = 0, n = _impl_.debug_urls_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.debug_urls_.Get(i));
  }

  // string node_name = 1;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_name());
  }

  // int32 output_slot = 2;
  if (this->_internal_output_slot() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_output_slot());
  }

  // bool tolerate_debug_op_creation_failures = 5;
  if (this->_internal_tolerate_debug_op_creation_failures() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugTensorWatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugTensorWatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugTensorWatch::GetClassData() const { return &_class_data_; }


void DebugTensorWatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugTensorWatch*>(&to_msg);
  auto& from = static_cast<const DebugTensorWatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DebugTensorWatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.debug_ops_.MergeFrom(from._impl_.debug_ops_);
  _this->_impl_.debug_urls_.MergeFrom(from._impl_.debug_urls_);
  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (from._internal_output_slot() != 0) {
    _this->_internal_set_output_slot(from._internal_output_slot());
  }
  if (from._internal_tolerate_debug_op_creation_failures() != 0) {
    _this->_internal_set_tolerate_debug_op_creation_failures(from._internal_tolerate_debug_op_creation_failures());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugTensorWatch::CopyFrom(const DebugTensorWatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DebugTensorWatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugTensorWatch::IsInitialized() const {
  return true;
}

void DebugTensorWatch::InternalSwap(DebugTensorWatch* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.debug_ops_.InternalSwap(&other->_impl_.debug_ops_);
  _impl_.debug_urls_.InternalSwap(&other->_impl_.debug_urls_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_name_, lhs_arena,
      &other->_impl_.node_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugTensorWatch, _impl_.tolerate_debug_op_creation_failures_)
      + sizeof(DebugTensorWatch::_impl_.tolerate_debug_op_creation_failures_)
      - PROTOBUF_FIELD_OFFSET(DebugTensorWatch, _impl_.output_slot_)>(
          reinterpret_cast<char*>(&_impl_.output_slot_),
          reinterpret_cast<char*>(&other->_impl_.output_slot_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugTensorWatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto[0]);
}

// ===================================================================

class DebugOptions::_Internal {
 public:
};

DebugOptions::DebugOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DebugOptions)
}
DebugOptions::DebugOptions(const DebugOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.debug_tensor_watch_opts_){from._impl_.debug_tensor_watch_opts_}
    , decltype(_impl_.global_step_){}
    , decltype(_impl_.reset_disk_byte_usage_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.global_step_, &from._impl_.global_step_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reset_disk_byte_usage_) -
    reinterpret_cast<char*>(&_impl_.global_step_)) + sizeof(_impl_.reset_disk_byte_usage_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.DebugOptions)
}

inline void DebugOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.debug_tensor_watch_opts_){arena}
    , decltype(_impl_.global_step_){int64_t{0}}
    , decltype(_impl_.reset_disk_byte_usage_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DebugOptions::~DebugOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.DebugOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.debug_tensor_watch_opts_.~RepeatedPtrField();
}

void DebugOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DebugOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.debug_tensor_watch_opts_.Clear();
  ::memset(&_impl_.global_step_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reset_disk_byte_usage_) -
      reinterpret_cast<char*>(&_impl_.global_step_)) + sizeof(_impl_.reset_disk_byte_usage_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.DebugTensorWatch debug_tensor_watch_opts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_debug_tensor_watch_opts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 global_step = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.global_step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool reset_disk_byte_usage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.reset_disk_byte_usage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DebugOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.DebugTensorWatch debug_tensor_watch_opts = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_debug_tensor_watch_opts_size()); i < n; i++) {
    const auto& repfield = this->_internal_debug_tensor_watch_opts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 global_step = 10;
  if (this->_internal_global_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_global_step(), target);
  }

  // bool reset_disk_byte_usage = 11;
  if (this->_internal_reset_disk_byte_usage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_reset_disk_byte_usage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DebugOptions)
  return target;
}

size_t DebugOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DebugOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.DebugTensorWatch debug_tensor_watch_opts = 4;
  total_size += 1UL * this->_internal_debug_tensor_watch_opts_size();
  for (const auto& msg : this->_impl_.debug_tensor_watch_opts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 global_step = 10;
  if (this->_internal_global_step() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_global_step());
  }

  // bool reset_disk_byte_usage = 11;
  if (this->_internal_reset_disk_byte_usage() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugOptions::GetClassData() const { return &_class_data_; }


void DebugOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugOptions*>(&to_msg);
  auto& from = static_cast<const DebugOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DebugOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.debug_tensor_watch_opts_.MergeFrom(from._impl_.debug_tensor_watch_opts_);
  if (from._internal_global_step() != 0) {
    _this->_internal_set_global_step(from._internal_global_step());
  }
  if (from._internal_reset_disk_byte_usage() != 0) {
    _this->_internal_set_reset_disk_byte_usage(from._internal_reset_disk_byte_usage());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugOptions::CopyFrom(const DebugOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DebugOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugOptions::IsInitialized() const {
  return true;
}

void DebugOptions::InternalSwap(DebugOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.debug_tensor_watch_opts_.InternalSwap(&other->_impl_.debug_tensor_watch_opts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.reset_disk_byte_usage_)
      + sizeof(DebugOptions::_impl_.reset_disk_byte_usage_)
      - PROTOBUF_FIELD_OFFSET(DebugOptions, _impl_.global_step_)>(
          reinterpret_cast<char*>(&_impl_.global_step_),
          reinterpret_cast<char*>(&other->_impl_.global_step_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto[1]);
}

// ===================================================================

class DebuggedSourceFile::_Internal {
 public:
};

DebuggedSourceFile::DebuggedSourceFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DebuggedSourceFile)
}
DebuggedSourceFile::DebuggedSourceFile(const DebuggedSourceFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebuggedSourceFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lines_){from._impl_.lines_}
    , decltype(_impl_.host_){}
    , decltype(_impl_.file_path_){}
    , decltype(_impl_.last_modified_){}
    , decltype(_impl_.bytes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host().empty()) {
    _this->_impl_.host_.Set(from._internal_host(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_path().empty()) {
    _this->_impl_.file_path_.Set(from._internal_file_path(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.last_modified_, &from._impl_.last_modified_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bytes_) -
    reinterpret_cast<char*>(&_impl_.last_modified_)) + sizeof(_impl_.bytes_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.DebuggedSourceFile)
}

inline void DebuggedSourceFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lines_){arena}
    , decltype(_impl_.host_){}
    , decltype(_impl_.file_path_){}
    , decltype(_impl_.last_modified_){int64_t{0}}
    , decltype(_impl_.bytes_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.host_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DebuggedSourceFile::~DebuggedSourceFile() {
  // @@protoc_insertion_point(destructor:tensorflow.DebuggedSourceFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebuggedSourceFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lines_.~RepeatedPtrField();
  _impl_.host_.Destroy();
  _impl_.file_path_.Destroy();
}

void DebuggedSourceFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebuggedSourceFile::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DebuggedSourceFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lines_.Clear();
  _impl_.host_.ClearToEmpty();
  _impl_.file_path_.ClearToEmpty();
  ::memset(&_impl_.last_modified_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bytes_) -
      reinterpret_cast<char*>(&_impl_.last_modified_)) + sizeof(_impl_.bytes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebuggedSourceFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string host = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.DebuggedSourceFile.host"));
        } else
          goto handle_unusual;
        continue;
      // string file_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.DebuggedSourceFile.file_path"));
        } else
          goto handle_unusual;
        continue;
      // int64 last_modified = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.last_modified_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string lines = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_lines();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.DebuggedSourceFile.lines"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebuggedSourceFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DebuggedSourceFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string host = 1;
  if (!this->_internal_host().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host().data(), static_cast<int>(this->_internal_host().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedSourceFile.host");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host(), target);
  }

  // string file_path = 2;
  if (!this->_internal_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_path().data(), static_cast<int>(this->_internal_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedSourceFile.file_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_path(), target);
  }

  // int64 last_modified = 3;
  if (this->_internal_last_modified() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_last_modified(), target);
  }

  // int64 bytes = 4;
  if (this->_internal_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_bytes(), target);
  }

  // repeated string lines = 5;
  for (int i = 0, n = this->_internal_lines_size(); i < n; i++) {
    const auto& s = this->_internal_lines(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedSourceFile.lines");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DebuggedSourceFile)
  return target;
}

size_t DebuggedSourceFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DebuggedSourceFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string lines = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.lines_.size());
  for (int i = 0, n = _impl_.lines_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.lines_.Get(i));
  }

  // string host = 1;
  if (!this->_internal_host().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host());
  }

  // string file_path = 2;
  if (!this->_internal_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());
  }

  // int64 last_modified = 3;
  if (this->_internal_last_modified() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_last_modified());
  }

  // int64 bytes = 4;
  if (this->_internal_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebuggedSourceFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebuggedSourceFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebuggedSourceFile::GetClassData() const { return &_class_data_; }


void DebuggedSourceFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebuggedSourceFile*>(&to_msg);
  auto& from = static_cast<const DebuggedSourceFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DebuggedSourceFile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lines_.MergeFrom(from._impl_.lines_);
  if (!from._internal_host().empty()) {
    _this->_internal_set_host(from._internal_host());
  }
  if (!from._internal_file_path().empty()) {
    _this->_internal_set_file_path(from._internal_file_path());
  }
  if (from._internal_last_modified() != 0) {
    _this->_internal_set_last_modified(from._internal_last_modified());
  }
  if (from._internal_bytes() != 0) {
    _this->_internal_set_bytes(from._internal_bytes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebuggedSourceFile::CopyFrom(const DebuggedSourceFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DebuggedSourceFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebuggedSourceFile::IsInitialized() const {
  return true;
}

void DebuggedSourceFile::InternalSwap(DebuggedSourceFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lines_.InternalSwap(&other->_impl_.lines_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_, lhs_arena,
      &other->_impl_.host_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_path_, lhs_arena,
      &other->_impl_.file_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebuggedSourceFile, _impl_.bytes_)
      + sizeof(DebuggedSourceFile::_impl_.bytes_)
      - PROTOBUF_FIELD_OFFSET(DebuggedSourceFile, _impl_.last_modified_)>(
          reinterpret_cast<char*>(&_impl_.last_modified_),
          reinterpret_cast<char*>(&other->_impl_.last_modified_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DebuggedSourceFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto[2]);
}

// ===================================================================

class DebuggedSourceFiles::_Internal {
 public:
};

DebuggedSourceFiles::DebuggedSourceFiles(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DebuggedSourceFiles)
}
DebuggedSourceFiles::DebuggedSourceFiles(const DebuggedSourceFiles& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebuggedSourceFiles* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_files_){from._impl_.source_files_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DebuggedSourceFiles)
}

inline void DebuggedSourceFiles::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_files_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DebuggedSourceFiles::~DebuggedSourceFiles() {
  // @@protoc_insertion_point(destructor:tensorflow.DebuggedSourceFiles)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebuggedSourceFiles::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_files_.~RepeatedPtrField();
}

void DebuggedSourceFiles::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebuggedSourceFiles::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DebuggedSourceFiles)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.source_files_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebuggedSourceFiles::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.DebuggedSourceFile source_files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebuggedSourceFiles::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DebuggedSourceFiles)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.DebuggedSourceFile source_files = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_source_files_size()); i < n; i++) {
    const auto& repfield = this->_internal_source_files(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DebuggedSourceFiles)
  return target;
}

size_t DebuggedSourceFiles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DebuggedSourceFiles)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.DebuggedSourceFile source_files = 1;
  total_size += 1UL * this->_internal_source_files_size();
  for (const auto& msg : this->_impl_.source_files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebuggedSourceFiles::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebuggedSourceFiles::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebuggedSourceFiles::GetClassData() const { return &_class_data_; }


void DebuggedSourceFiles::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebuggedSourceFiles*>(&to_msg);
  auto& from = static_cast<const DebuggedSourceFiles&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DebuggedSourceFiles)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.source_files_.MergeFrom(from._impl_.source_files_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebuggedSourceFiles::CopyFrom(const DebuggedSourceFiles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DebuggedSourceFiles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebuggedSourceFiles::IsInitialized() const {
  return true;
}

void DebuggedSourceFiles::InternalSwap(DebuggedSourceFiles* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.source_files_.InternalSwap(&other->_impl_.source_files_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebuggedSourceFiles::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdebug_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::DebugTensorWatch*
Arena::CreateMaybeMessage< ::tensorflow::DebugTensorWatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DebugTensorWatch >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DebugOptions*
Arena::CreateMaybeMessage< ::tensorflow::DebugOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DebugOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DebuggedSourceFile*
Arena::CreateMaybeMessage< ::tensorflow::DebuggedSourceFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DebuggedSourceFile >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DebuggedSourceFiles*
Arena::CreateMaybeMessage< ::tensorflow::DebuggedSourceFiles >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DebuggedSourceFiles >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
