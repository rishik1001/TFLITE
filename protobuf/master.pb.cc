// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/master.proto

#include "tensorflow/core/protobuf/master.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR CreateSessionRequest::CreateSessionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.graph_def_)*/nullptr
  , /*decltype(_impl_.config_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateSessionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateSessionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateSessionRequestDefaultTypeInternal() {}
  union {
    CreateSessionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateSessionRequestDefaultTypeInternal _CreateSessionRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateSessionResponse::CreateSessionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.session_handle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.graph_version_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateSessionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateSessionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateSessionResponseDefaultTypeInternal() {}
  union {
    CreateSessionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateSessionResponseDefaultTypeInternal _CreateSessionResponse_default_instance_;
PROTOBUF_CONSTEXPR ExtendSessionRequest::ExtendSessionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.session_handle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.graph_def_)*/nullptr
  , /*decltype(_impl_.current_graph_version_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExtendSessionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtendSessionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtendSessionRequestDefaultTypeInternal() {}
  union {
    ExtendSessionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtendSessionRequestDefaultTypeInternal _ExtendSessionRequest_default_instance_;
PROTOBUF_CONSTEXPR ExtendSessionResponse::ExtendSessionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.new_graph_version_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExtendSessionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtendSessionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtendSessionResponseDefaultTypeInternal() {}
  union {
    ExtendSessionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtendSessionResponseDefaultTypeInternal _ExtendSessionResponse_default_instance_;
PROTOBUF_CONSTEXPR RunStepRequest::RunStepRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feed_)*/{}
  , /*decltype(_impl_.fetch_)*/{}
  , /*decltype(_impl_.target_)*/{}
  , /*decltype(_impl_.session_handle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.partial_run_handle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_.request_id_)*/int64_t{0}
  , /*decltype(_impl_.store_errors_in_response_body_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RunStepRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunStepRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunStepRequestDefaultTypeInternal() {}
  union {
    RunStepRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunStepRequestDefaultTypeInternal _RunStepRequest_default_instance_;
PROTOBUF_CONSTEXPR RunStepResponse::RunStepResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tensor_)*/{}
  , /*decltype(_impl_.status_error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.status_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RunStepResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunStepResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunStepResponseDefaultTypeInternal() {}
  union {
    RunStepResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunStepResponseDefaultTypeInternal _RunStepResponse_default_instance_;
PROTOBUF_CONSTEXPR PartialRunSetupRequest::PartialRunSetupRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feed_)*/{}
  , /*decltype(_impl_.fetch_)*/{}
  , /*decltype(_impl_.target_)*/{}
  , /*decltype(_impl_.session_handle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.request_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PartialRunSetupRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartialRunSetupRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartialRunSetupRequestDefaultTypeInternal() {}
  union {
    PartialRunSetupRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartialRunSetupRequestDefaultTypeInternal _PartialRunSetupRequest_default_instance_;
PROTOBUF_CONSTEXPR PartialRunSetupResponse::PartialRunSetupResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.partial_run_handle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PartialRunSetupResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PartialRunSetupResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PartialRunSetupResponseDefaultTypeInternal() {}
  union {
    PartialRunSetupResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PartialRunSetupResponseDefaultTypeInternal _PartialRunSetupResponse_default_instance_;
PROTOBUF_CONSTEXPR CloseSessionRequest::CloseSessionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.session_handle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CloseSessionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloseSessionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloseSessionRequestDefaultTypeInternal() {}
  union {
    CloseSessionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloseSessionRequestDefaultTypeInternal _CloseSessionRequest_default_instance_;
PROTOBUF_CONSTEXPR CloseSessionResponse::CloseSessionResponse(
    ::_pbi::ConstantInitialized) {}
struct CloseSessionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloseSessionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloseSessionResponseDefaultTypeInternal() {}
  union {
    CloseSessionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloseSessionResponseDefaultTypeInternal _CloseSessionResponse_default_instance_;
PROTOBUF_CONSTEXPR ResetRequest::ResetRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.container_)*/{}
  , /*decltype(_impl_.device_filters_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResetRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResetRequestDefaultTypeInternal() {}
  union {
    ResetRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResetRequestDefaultTypeInternal _ResetRequest_default_instance_;
PROTOBUF_CONSTEXPR ResetResponse::ResetResponse(
    ::_pbi::ConstantInitialized) {}
struct ResetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResetResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResetResponseDefaultTypeInternal() {}
  union {
    ResetResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResetResponseDefaultTypeInternal _ResetResponse_default_instance_;
PROTOBUF_CONSTEXPR ListDevicesRequest::ListDevicesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.session_handle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListDevicesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDevicesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDevicesRequestDefaultTypeInternal() {}
  union {
    ListDevicesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDevicesRequestDefaultTypeInternal _ListDevicesRequest_default_instance_;
PROTOBUF_CONSTEXPR ListDevicesResponse::ListDevicesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.local_device_)*/{}
  , /*decltype(_impl_.remote_device_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListDevicesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListDevicesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListDevicesResponseDefaultTypeInternal() {}
  union {
    ListDevicesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListDevicesResponseDefaultTypeInternal _ListDevicesResponse_default_instance_;
PROTOBUF_CONSTEXPR MakeCallableRequest::MakeCallableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.session_handle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.options_)*/nullptr
  , /*decltype(_impl_.request_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MakeCallableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MakeCallableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MakeCallableRequestDefaultTypeInternal() {}
  union {
    MakeCallableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MakeCallableRequestDefaultTypeInternal _MakeCallableRequest_default_instance_;
PROTOBUF_CONSTEXPR MakeCallableResponse::MakeCallableResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.handle_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MakeCallableResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MakeCallableResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MakeCallableResponseDefaultTypeInternal() {}
  union {
    MakeCallableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MakeCallableResponseDefaultTypeInternal _MakeCallableResponse_default_instance_;
PROTOBUF_CONSTEXPR RunCallableRequest::RunCallableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feed_)*/{}
  , /*decltype(_impl_.session_handle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.handle_)*/int64_t{0}
  , /*decltype(_impl_.request_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RunCallableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunCallableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunCallableRequestDefaultTypeInternal() {}
  union {
    RunCallableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunCallableRequestDefaultTypeInternal _RunCallableRequest_default_instance_;
PROTOBUF_CONSTEXPR RunCallableResponse::RunCallableResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fetch_)*/{}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RunCallableResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunCallableResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunCallableResponseDefaultTypeInternal() {}
  union {
    RunCallableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunCallableResponseDefaultTypeInternal _RunCallableResponse_default_instance_;
PROTOBUF_CONSTEXPR ReleaseCallableRequest::ReleaseCallableRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.session_handle_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.handle_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReleaseCallableRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReleaseCallableRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReleaseCallableRequestDefaultTypeInternal() {}
  union {
    ReleaseCallableRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReleaseCallableRequestDefaultTypeInternal _ReleaseCallableRequest_default_instance_;
PROTOBUF_CONSTEXPR ReleaseCallableResponse::ReleaseCallableResponse(
    ::_pbi::ConstantInitialized) {}
struct ReleaseCallableResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReleaseCallableResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReleaseCallableResponseDefaultTypeInternal() {}
  union {
    ReleaseCallableResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReleaseCallableResponseDefaultTypeInternal _ReleaseCallableResponse_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto[20];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CreateSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CreateSessionRequest, _impl_.graph_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CreateSessionRequest, _impl_.config_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CreateSessionRequest, _impl_.target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CreateSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CreateSessionResponse, _impl_.session_handle_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CreateSessionResponse, _impl_.graph_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ExtendSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ExtendSessionRequest, _impl_.session_handle_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ExtendSessionRequest, _impl_.graph_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ExtendSessionRequest, _impl_.current_graph_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ExtendSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ExtendSessionResponse, _impl_.new_graph_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunStepRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunStepRequest, _impl_.session_handle_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunStepRequest, _impl_.feed_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunStepRequest, _impl_.fetch_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunStepRequest, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunStepRequest, _impl_.options_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunStepRequest, _impl_.partial_run_handle_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunStepRequest, _impl_.store_errors_in_response_body_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunStepRequest, _impl_.request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunStepResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunStepResponse, _impl_.tensor_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunStepResponse, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunStepResponse, _impl_.status_code_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunStepResponse, _impl_.status_error_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::PartialRunSetupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::PartialRunSetupRequest, _impl_.session_handle_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::PartialRunSetupRequest, _impl_.feed_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::PartialRunSetupRequest, _impl_.fetch_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::PartialRunSetupRequest, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::PartialRunSetupRequest, _impl_.request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::PartialRunSetupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::PartialRunSetupResponse, _impl_.partial_run_handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CloseSessionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CloseSessionRequest, _impl_.session_handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CloseSessionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ResetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ResetRequest, _impl_.container_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ResetRequest, _impl_.device_filters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ResetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ListDevicesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ListDevicesRequest, _impl_.session_handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ListDevicesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ListDevicesResponse, _impl_.local_device_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ListDevicesResponse, _impl_.remote_device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MakeCallableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MakeCallableRequest, _impl_.session_handle_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MakeCallableRequest, _impl_.options_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MakeCallableRequest, _impl_.request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MakeCallableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MakeCallableResponse, _impl_.handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunCallableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunCallableRequest, _impl_.session_handle_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunCallableRequest, _impl_.handle_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunCallableRequest, _impl_.feed_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunCallableRequest, _impl_.request_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunCallableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunCallableResponse, _impl_.fetch_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunCallableResponse, _impl_.metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReleaseCallableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReleaseCallableRequest, _impl_.session_handle_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReleaseCallableRequest, _impl_.handle_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReleaseCallableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::CreateSessionRequest)},
  { 9, -1, -1, sizeof(::tensorflow::CreateSessionResponse)},
  { 17, -1, -1, sizeof(::tensorflow::ExtendSessionRequest)},
  { 26, -1, -1, sizeof(::tensorflow::ExtendSessionResponse)},
  { 33, -1, -1, sizeof(::tensorflow::RunStepRequest)},
  { 47, -1, -1, sizeof(::tensorflow::RunStepResponse)},
  { 57, -1, -1, sizeof(::tensorflow::PartialRunSetupRequest)},
  { 68, -1, -1, sizeof(::tensorflow::PartialRunSetupResponse)},
  { 75, -1, -1, sizeof(::tensorflow::CloseSessionRequest)},
  { 82, -1, -1, sizeof(::tensorflow::CloseSessionResponse)},
  { 88, -1, -1, sizeof(::tensorflow::ResetRequest)},
  { 96, -1, -1, sizeof(::tensorflow::ResetResponse)},
  { 102, -1, -1, sizeof(::tensorflow::ListDevicesRequest)},
  { 109, -1, -1, sizeof(::tensorflow::ListDevicesResponse)},
  { 117, -1, -1, sizeof(::tensorflow::MakeCallableRequest)},
  { 126, -1, -1, sizeof(::tensorflow::MakeCallableResponse)},
  { 133, -1, -1, sizeof(::tensorflow::RunCallableRequest)},
  { 143, -1, -1, sizeof(::tensorflow::RunCallableResponse)},
  { 151, -1, -1, sizeof(::tensorflow::ReleaseCallableRequest)},
  { 159, -1, -1, sizeof(::tensorflow::ReleaseCallableResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_CreateSessionRequest_default_instance_._instance,
  &::tensorflow::_CreateSessionResponse_default_instance_._instance,
  &::tensorflow::_ExtendSessionRequest_default_instance_._instance,
  &::tensorflow::_ExtendSessionResponse_default_instance_._instance,
  &::tensorflow::_RunStepRequest_default_instance_._instance,
  &::tensorflow::_RunStepResponse_default_instance_._instance,
  &::tensorflow::_PartialRunSetupRequest_default_instance_._instance,
  &::tensorflow::_PartialRunSetupResponse_default_instance_._instance,
  &::tensorflow::_CloseSessionRequest_default_instance_._instance,
  &::tensorflow::_CloseSessionResponse_default_instance_._instance,
  &::tensorflow::_ResetRequest_default_instance_._instance,
  &::tensorflow::_ResetResponse_default_instance_._instance,
  &::tensorflow::_ListDevicesRequest_default_instance_._instance,
  &::tensorflow::_ListDevicesResponse_default_instance_._instance,
  &::tensorflow::_MakeCallableRequest_default_instance_._instance,
  &::tensorflow::_MakeCallableResponse_default_instance_._instance,
  &::tensorflow::_RunCallableRequest_default_instance_._instance,
  &::tensorflow::_RunCallableResponse_default_instance_._instance,
  &::tensorflow::_ReleaseCallableRequest_default_instance_._instance,
  &::tensorflow::_ReleaseCallableResponse_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%tensorflow/core/protobuf/master.proto\022"
  "\ntensorflow\0321tensorflow/core/framework/d"
  "evice_attributes.proto\032%tensorflow/core/"
  "framework/graph.proto\032&tensorflow/core/f"
  "ramework/tensor.proto\032%tensorflow/core/p"
  "rotobuf/config.proto\032*tensorflow/core/pr"
  "otobuf/error_codes.proto\032+tensorflow/cor"
  "e/protobuf/named_tensor.proto\"x\n\024CreateS"
  "essionRequest\022\'\n\tgraph_def\030\001 \001(\0132\024.tenso"
  "rflow.GraphDef\022\'\n\006config\030\002 \001(\0132\027.tensorf"
  "low.ConfigProto\022\016\n\006target\030\003 \001(\t\"F\n\025Creat"
  "eSessionResponse\022\026\n\016session_handle\030\001 \001(\t"
  "\022\025\n\rgraph_version\030\002 \001(\003\"v\n\024ExtendSession"
  "Request\022\026\n\016session_handle\030\001 \001(\t\022\'\n\tgraph"
  "_def\030\002 \001(\0132\024.tensorflow.GraphDef\022\035\n\025curr"
  "ent_graph_version\030\003 \001(\003\"2\n\025ExtendSession"
  "Response\022\031\n\021new_graph_version\030\004 \001(\003\"\363\001\n\016"
  "RunStepRequest\022\026\n\016session_handle\030\001 \001(\t\022*"
  "\n\004feed\030\002 \003(\0132\034.tensorflow.NamedTensorPro"
  "to\022\r\n\005fetch\030\003 \003(\t\022\016\n\006target\030\004 \003(\t\022\'\n\007opt"
  "ions\030\005 \001(\0132\026.tensorflow.RunOptions\022\032\n\022pa"
  "rtial_run_handle\030\006 \001(\t\022%\n\035store_errors_i"
  "n_response_body\030\007 \001(\010\022\022\n\nrequest_id\030\010 \001("
  "\003\"\265\001\n\017RunStepResponse\022,\n\006tensor\030\001 \003(\0132\034."
  "tensorflow.NamedTensorProto\022)\n\010metadata\030"
  "\002 \001(\0132\027.tensorflow.RunMetadata\022+\n\013status"
  "_code\030\003 \001(\0162\026.tensorflow.error.Code\022\034\n\024s"
  "tatus_error_message\030\004 \001(\t\"q\n\026PartialRunS"
  "etupRequest\022\026\n\016session_handle\030\001 \001(\t\022\014\n\004f"
  "eed\030\002 \003(\t\022\r\n\005fetch\030\003 \003(\t\022\016\n\006target\030\004 \003(\t"
  "\022\022\n\nrequest_id\030\005 \001(\003\"5\n\027PartialRunSetupR"
  "esponse\022\032\n\022partial_run_handle\030\001 \001(\t\"-\n\023C"
  "loseSessionRequest\022\026\n\016session_handle\030\001 \001"
  "(\t\"\026\n\024CloseSessionResponse\"9\n\014ResetReque"
  "st\022\021\n\tcontainer\030\001 \003(\t\022\026\n\016device_filters\030"
  "\002 \003(\t\"\017\n\rResetResponse\",\n\022ListDevicesReq"
  "uest\022\026\n\016session_handle\030\001 \001(\t\"~\n\023ListDevi"
  "cesResponse\0222\n\014local_device\030\001 \003(\0132\034.tens"
  "orflow.DeviceAttributes\0223\n\rremote_device"
  "\030\002 \003(\0132\034.tensorflow.DeviceAttributes\"o\n\023"
  "MakeCallableRequest\022\026\n\016session_handle\030\001 "
  "\001(\t\022,\n\007options\030\002 \001(\0132\033.tensorflow.Callab"
  "leOptions\022\022\n\nrequest_id\030\003 \001(\003\"&\n\024MakeCal"
  "lableResponse\022\016\n\006handle\030\001 \001(\003\"w\n\022RunCall"
  "ableRequest\022\026\n\016session_handle\030\001 \001(\t\022\016\n\006h"
  "andle\030\002 \001(\003\022%\n\004feed\030\003 \003(\0132\027.tensorflow.T"
  "ensorProto\022\022\n\nrequest_id\030\004 \001(\003\"h\n\023RunCal"
  "lableResponse\022&\n\005fetch\030\001 \003(\0132\027.tensorflo"
  "w.TensorProto\022)\n\010metadata\030\002 \001(\0132\027.tensor"
  "flow.RunMetadata\"@\n\026ReleaseCallableReque"
  "st\022\026\n\016session_handle\030\001 \001(\t\022\016\n\006handle\030\002 \001"
  "(\003\"\031\n\027ReleaseCallableResponseB\222\001\n\032org.te"
  "nsorflow.distruntimeB\030DistributedRuntime"
  "ProtosP\001ZUgithub.com/tensorflow/tensorfl"
  "ow/tensorflow/go/core/protobuf/for_core_"
  "protos_go_proto\370\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_deps[6] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2fgraph_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fconfig_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2ferror_5fcodes_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fnamed_5ftensor_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto = {
    false, false, 2226, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto,
    "tensorflow/core/protobuf/master.proto",
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_deps, 6, 20,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto);
namespace tensorflow {

// ===================================================================

class CreateSessionRequest::_Internal {
 public:
  static const ::tensorflow::GraphDef& graph_def(const CreateSessionRequest* msg);
  static const ::tensorflow::ConfigProto& config(const CreateSessionRequest* msg);
};

const ::tensorflow::GraphDef&
CreateSessionRequest::_Internal::graph_def(const CreateSessionRequest* msg) {
  return *msg->_impl_.graph_def_;
}
const ::tensorflow::ConfigProto&
CreateSessionRequest::_Internal::config(const CreateSessionRequest* msg) {
  return *msg->_impl_.config_;
}
void CreateSessionRequest::clear_graph_def() {
  if (GetArenaForAllocation() == nullptr && _impl_.graph_def_ != nullptr) {
    delete _impl_.graph_def_;
  }
  _impl_.graph_def_ = nullptr;
}
void CreateSessionRequest::clear_config() {
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
}
CreateSessionRequest::CreateSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CreateSessionRequest)
}
CreateSessionRequest::CreateSessionRequest(const CreateSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateSessionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_){}
    , decltype(_impl_.graph_def_){nullptr}
    , decltype(_impl_.config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target().empty()) {
    _this->_impl_.target_.Set(from._internal_target(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_graph_def()) {
    _this->_impl_.graph_def_ = new ::tensorflow::GraphDef(*from._impl_.graph_def_);
  }
  if (from._internal_has_config()) {
    _this->_impl_.config_ = new ::tensorflow::ConfigProto(*from._impl_.config_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.CreateSessionRequest)
}

inline void CreateSessionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_){}
    , decltype(_impl_.graph_def_){nullptr}
    , decltype(_impl_.config_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateSessionRequest::~CreateSessionRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.CreateSessionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateSessionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_.Destroy();
  if (this != internal_default_instance()) delete _impl_.graph_def_;
  if (this != internal_default_instance()) delete _impl_.config_;
}

void CreateSessionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CreateSessionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.graph_def_ != nullptr) {
    delete _impl_.graph_def_;
  }
  _impl_.graph_def_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.config_ != nullptr) {
    delete _impl_.config_;
  }
  _impl_.config_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSessionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.GraphDef graph_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph_def(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.ConfigProto config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_target();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.CreateSessionRequest.target"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateSessionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CreateSessionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.GraphDef graph_def = 1;
  if (this->_internal_has_graph_def()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::graph_def(this),
        _Internal::graph_def(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.ConfigProto config = 2;
  if (this->_internal_has_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::config(this),
        _Internal::config(this).GetCachedSize(), target, stream);
  }

  // string target = 3;
  if (!this->_internal_target().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CreateSessionRequest.target");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CreateSessionRequest)
  return target;
}

size_t CreateSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CreateSessionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 3;
  if (!this->_internal_target().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // .tensorflow.GraphDef graph_def = 1;
  if (this->_internal_has_graph_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.graph_def_);
  }

  // .tensorflow.ConfigProto config = 2;
  if (this->_internal_has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.config_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateSessionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateSessionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateSessionRequest::GetClassData() const { return &_class_data_; }


void CreateSessionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateSessionRequest*>(&to_msg);
  auto& from = static_cast<const CreateSessionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CreateSessionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target().empty()) {
    _this->_internal_set_target(from._internal_target());
  }
  if (from._internal_has_graph_def()) {
    _this->_internal_mutable_graph_def()->::tensorflow::GraphDef::MergeFrom(
        from._internal_graph_def());
  }
  if (from._internal_has_config()) {
    _this->_internal_mutable_config()->::tensorflow::ConfigProto::MergeFrom(
        from._internal_config());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateSessionRequest::CopyFrom(const CreateSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CreateSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSessionRequest::IsInitialized() const {
  return true;
}

void CreateSessionRequest::InternalSwap(CreateSessionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_, lhs_arena,
      &other->_impl_.target_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateSessionRequest, _impl_.config_)
      + sizeof(CreateSessionRequest::_impl_.config_)
      - PROTOBUF_FIELD_OFFSET(CreateSessionRequest, _impl_.graph_def_)>(
          reinterpret_cast<char*>(&_impl_.graph_def_),
          reinterpret_cast<char*>(&other->_impl_.graph_def_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSessionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto[0]);
}

// ===================================================================

class CreateSessionResponse::_Internal {
 public:
};

CreateSessionResponse::CreateSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CreateSessionResponse)
}
CreateSessionResponse::CreateSessionResponse(const CreateSessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateSessionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.session_handle_){}
    , decltype(_impl_.graph_version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_handle().empty()) {
    _this->_impl_.session_handle_.Set(from._internal_session_handle(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.graph_version_ = from._impl_.graph_version_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.CreateSessionResponse)
}

inline void CreateSessionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.session_handle_){}
    , decltype(_impl_.graph_version_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.session_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CreateSessionResponse::~CreateSessionResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.CreateSessionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateSessionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.session_handle_.Destroy();
}

void CreateSessionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CreateSessionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_handle_.ClearToEmpty();
  _impl_.graph_version_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSessionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string session_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.CreateSessionResponse.session_handle"));
        } else
          goto handle_unusual;
        continue;
      // int64 graph_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.graph_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateSessionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CreateSessionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_handle = 1;
  if (!this->_internal_session_handle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_handle().data(), static_cast<int>(this->_internal_session_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CreateSessionResponse.session_handle");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_handle(), target);
  }

  // int64 graph_version = 2;
  if (this->_internal_graph_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_graph_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CreateSessionResponse)
  return target;
}

size_t CreateSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CreateSessionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_handle = 1;
  if (!this->_internal_session_handle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_handle());
  }

  // int64 graph_version = 2;
  if (this->_internal_graph_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_graph_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateSessionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateSessionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateSessionResponse::GetClassData() const { return &_class_data_; }


void CreateSessionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateSessionResponse*>(&to_msg);
  auto& from = static_cast<const CreateSessionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CreateSessionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_handle().empty()) {
    _this->_internal_set_session_handle(from._internal_session_handle());
  }
  if (from._internal_graph_version() != 0) {
    _this->_internal_set_graph_version(from._internal_graph_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateSessionResponse::CopyFrom(const CreateSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CreateSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSessionResponse::IsInitialized() const {
  return true;
}

void CreateSessionResponse::InternalSwap(CreateSessionResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_handle_, lhs_arena,
      &other->_impl_.session_handle_, rhs_arena
  );
  swap(_impl_.graph_version_, other->_impl_.graph_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSessionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto[1]);
}

// ===================================================================

class ExtendSessionRequest::_Internal {
 public:
  static const ::tensorflow::GraphDef& graph_def(const ExtendSessionRequest* msg);
};

const ::tensorflow::GraphDef&
ExtendSessionRequest::_Internal::graph_def(const ExtendSessionRequest* msg) {
  return *msg->_impl_.graph_def_;
}
void ExtendSessionRequest::clear_graph_def() {
  if (GetArenaForAllocation() == nullptr && _impl_.graph_def_ != nullptr) {
    delete _impl_.graph_def_;
  }
  _impl_.graph_def_ = nullptr;
}
ExtendSessionRequest::ExtendSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ExtendSessionRequest)
}
ExtendSessionRequest::ExtendSessionRequest(const ExtendSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtendSessionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.session_handle_){}
    , decltype(_impl_.graph_def_){nullptr}
    , decltype(_impl_.current_graph_version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_handle().empty()) {
    _this->_impl_.session_handle_.Set(from._internal_session_handle(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_graph_def()) {
    _this->_impl_.graph_def_ = new ::tensorflow::GraphDef(*from._impl_.graph_def_);
  }
  _this->_impl_.current_graph_version_ = from._impl_.current_graph_version_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.ExtendSessionRequest)
}

inline void ExtendSessionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.session_handle_){}
    , decltype(_impl_.graph_def_){nullptr}
    , decltype(_impl_.current_graph_version_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.session_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ExtendSessionRequest::~ExtendSessionRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.ExtendSessionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtendSessionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.session_handle_.Destroy();
  if (this != internal_default_instance()) delete _impl_.graph_def_;
}

void ExtendSessionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtendSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ExtendSessionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_handle_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.graph_def_ != nullptr) {
    delete _impl_.graph_def_;
  }
  _impl_.graph_def_ = nullptr;
  _impl_.current_graph_version_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtendSessionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string session_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.ExtendSessionRequest.session_handle"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.GraphDef graph_def = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph_def(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 current_graph_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.current_graph_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtendSessionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ExtendSessionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_handle = 1;
  if (!this->_internal_session_handle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_handle().data(), static_cast<int>(this->_internal_session_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ExtendSessionRequest.session_handle");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_handle(), target);
  }

  // .tensorflow.GraphDef graph_def = 2;
  if (this->_internal_has_graph_def()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::graph_def(this),
        _Internal::graph_def(this).GetCachedSize(), target, stream);
  }

  // int64 current_graph_version = 3;
  if (this->_internal_current_graph_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_current_graph_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ExtendSessionRequest)
  return target;
}

size_t ExtendSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ExtendSessionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_handle = 1;
  if (!this->_internal_session_handle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_handle());
  }

  // .tensorflow.GraphDef graph_def = 2;
  if (this->_internal_has_graph_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.graph_def_);
  }

  // int64 current_graph_version = 3;
  if (this->_internal_current_graph_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_current_graph_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtendSessionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtendSessionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtendSessionRequest::GetClassData() const { return &_class_data_; }


void ExtendSessionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtendSessionRequest*>(&to_msg);
  auto& from = static_cast<const ExtendSessionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ExtendSessionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_handle().empty()) {
    _this->_internal_set_session_handle(from._internal_session_handle());
  }
  if (from._internal_has_graph_def()) {
    _this->_internal_mutable_graph_def()->::tensorflow::GraphDef::MergeFrom(
        from._internal_graph_def());
  }
  if (from._internal_current_graph_version() != 0) {
    _this->_internal_set_current_graph_version(from._internal_current_graph_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtendSessionRequest::CopyFrom(const ExtendSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ExtendSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendSessionRequest::IsInitialized() const {
  return true;
}

void ExtendSessionRequest::InternalSwap(ExtendSessionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_handle_, lhs_arena,
      &other->_impl_.session_handle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ExtendSessionRequest, _impl_.current_graph_version_)
      + sizeof(ExtendSessionRequest::_impl_.current_graph_version_)
      - PROTOBUF_FIELD_OFFSET(ExtendSessionRequest, _impl_.graph_def_)>(
          reinterpret_cast<char*>(&_impl_.graph_def_),
          reinterpret_cast<char*>(&other->_impl_.graph_def_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtendSessionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto[2]);
}

// ===================================================================

class ExtendSessionResponse::_Internal {
 public:
};

ExtendSessionResponse::ExtendSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ExtendSessionResponse)
}
ExtendSessionResponse::ExtendSessionResponse(const ExtendSessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtendSessionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.new_graph_version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.new_graph_version_ = from._impl_.new_graph_version_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.ExtendSessionResponse)
}

inline void ExtendSessionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.new_graph_version_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExtendSessionResponse::~ExtendSessionResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.ExtendSessionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtendSessionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExtendSessionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtendSessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ExtendSessionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.new_graph_version_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtendSessionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 new_graph_version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.new_graph_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtendSessionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ExtendSessionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 new_graph_version = 4;
  if (this->_internal_new_graph_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_new_graph_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ExtendSessionResponse)
  return target;
}

size_t ExtendSessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ExtendSessionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 new_graph_version = 4;
  if (this->_internal_new_graph_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_new_graph_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtendSessionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtendSessionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtendSessionResponse::GetClassData() const { return &_class_data_; }


void ExtendSessionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtendSessionResponse*>(&to_msg);
  auto& from = static_cast<const ExtendSessionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ExtendSessionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_new_graph_version() != 0) {
    _this->_internal_set_new_graph_version(from._internal_new_graph_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtendSessionResponse::CopyFrom(const ExtendSessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ExtendSessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtendSessionResponse::IsInitialized() const {
  return true;
}

void ExtendSessionResponse::InternalSwap(ExtendSessionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.new_graph_version_, other->_impl_.new_graph_version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtendSessionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto[3]);
}

// ===================================================================

class RunStepRequest::_Internal {
 public:
  static const ::tensorflow::RunOptions& options(const RunStepRequest* msg);
};

const ::tensorflow::RunOptions&
RunStepRequest::_Internal::options(const RunStepRequest* msg) {
  return *msg->_impl_.options_;
}
void RunStepRequest::clear_feed() {
  _impl_.feed_.Clear();
}
void RunStepRequest::clear_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
}
RunStepRequest::RunStepRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunStepRequest)
}
RunStepRequest::RunStepRequest(const RunStepRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RunStepRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feed_){from._impl_.feed_}
    , decltype(_impl_.fetch_){from._impl_.fetch_}
    , decltype(_impl_.target_){from._impl_.target_}
    , decltype(_impl_.session_handle_){}
    , decltype(_impl_.partial_run_handle_){}
    , decltype(_impl_.options_){nullptr}
    , decltype(_impl_.request_id_){}
    , decltype(_impl_.store_errors_in_response_body_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_handle().empty()) {
    _this->_impl_.session_handle_.Set(from._internal_session_handle(), 
      _this->GetArenaForAllocation());
  }
  _impl_.partial_run_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partial_run_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partial_run_handle().empty()) {
    _this->_impl_.partial_run_handle_.Set(from._internal_partial_run_handle(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::tensorflow::RunOptions(*from._impl_.options_);
  }
  ::memcpy(&_impl_.request_id_, &from._impl_.request_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.store_errors_in_response_body_) -
    reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.store_errors_in_response_body_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunStepRequest)
}

inline void RunStepRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.feed_){arena}
    , decltype(_impl_.fetch_){arena}
    , decltype(_impl_.target_){arena}
    , decltype(_impl_.session_handle_){}
    , decltype(_impl_.partial_run_handle_){}
    , decltype(_impl_.options_){nullptr}
    , decltype(_impl_.request_id_){int64_t{0}}
    , decltype(_impl_.store_errors_in_response_body_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.session_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.partial_run_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partial_run_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RunStepRequest::~RunStepRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.RunStepRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RunStepRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feed_.~RepeatedPtrField();
  _impl_.fetch_.~RepeatedPtrField();
  _impl_.target_.~RepeatedPtrField();
  _impl_.session_handle_.Destroy();
  _impl_.partial_run_handle_.Destroy();
  if (this != internal_default_instance()) delete _impl_.options_;
}

void RunStepRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RunStepRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunStepRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feed_.Clear();
  _impl_.fetch_.Clear();
  _impl_.target_.Clear();
  _impl_.session_handle_.ClearToEmpty();
  _impl_.partial_run_handle_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
  ::memset(&_impl_.request_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.store_errors_in_response_body_) -
      reinterpret_cast<char*>(&_impl_.request_id_)) + sizeof(_impl_.store_errors_in_response_body_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunStepRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string session_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.RunStepRequest.session_handle"));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.NamedTensorProto feed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string fetch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_fetch();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.RunStepRequest.fetch"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string target = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_target();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.RunStepRequest.target"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.RunOptions options = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string partial_run_handle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_partial_run_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.RunStepRequest.partial_run_handle"));
        } else
          goto handle_unusual;
        continue;
      // bool store_errors_in_response_body = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.store_errors_in_response_body_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 request_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RunStepRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunStepRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_handle = 1;
  if (!this->_internal_session_handle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_handle().data(), static_cast<int>(this->_internal_session_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepRequest.session_handle");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_handle(), target);
  }

  // repeated .tensorflow.NamedTensorProto feed = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_feed_size()); i < n; i++) {
    const auto& repfield = this->_internal_feed(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string fetch = 3;
  for (int i = 0, n = this->_internal_fetch_size(); i < n; i++) {
    const auto& s = this->_internal_fetch(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepRequest.fetch");
    target = stream->WriteString(3, s, target);
  }

  // repeated string target = 4;
  for (int i = 0, n = this->_internal_target_size(); i < n; i++) {
    const auto& s = this->_internal_target(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepRequest.target");
    target = stream->WriteString(4, s, target);
  }

  // .tensorflow.RunOptions options = 5;
  if (this->_internal_has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  // string partial_run_handle = 6;
  if (!this->_internal_partial_run_handle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partial_run_handle().data(), static_cast<int>(this->_internal_partial_run_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepRequest.partial_run_handle");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_partial_run_handle(), target);
  }

  // bool store_errors_in_response_body = 7;
  if (this->_internal_store_errors_in_response_body() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_store_errors_in_response_body(), target);
  }

  // int64 request_id = 8;
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunStepRequest)
  return target;
}

size_t RunStepRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunStepRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.NamedTensorProto feed = 2;
  total_size += 1UL * this->_internal_feed_size();
  for (const auto& msg : this->_impl_.feed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string fetch = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.fetch_.size());
  for (int i = 0, n = _impl_.fetch_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.fetch_.Get(i));
  }

  // repeated string target = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.target_.size());
  for (int i = 0, n = _impl_.target_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.target_.Get(i));
  }

  // string session_handle = 1;
  if (!this->_internal_session_handle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_handle());
  }

  // string partial_run_handle = 6;
  if (!this->_internal_partial_run_handle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partial_run_handle());
  }

  // .tensorflow.RunOptions options = 5;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);
  }

  // int64 request_id = 8;
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_request_id());
  }

  // bool store_errors_in_response_body = 7;
  if (this->_internal_store_errors_in_response_body() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunStepRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RunStepRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunStepRequest::GetClassData() const { return &_class_data_; }


void RunStepRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RunStepRequest*>(&to_msg);
  auto& from = static_cast<const RunStepRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunStepRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.feed_.MergeFrom(from._impl_.feed_);
  _this->_impl_.fetch_.MergeFrom(from._impl_.fetch_);
  _this->_impl_.target_.MergeFrom(from._impl_.target_);
  if (!from._internal_session_handle().empty()) {
    _this->_internal_set_session_handle(from._internal_session_handle());
  }
  if (!from._internal_partial_run_handle().empty()) {
    _this->_internal_set_partial_run_handle(from._internal_partial_run_handle());
  }
  if (from._internal_has_options()) {
    _this->_internal_mutable_options()->::tensorflow::RunOptions::MergeFrom(
        from._internal_options());
  }
  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  if (from._internal_store_errors_in_response_body() != 0) {
    _this->_internal_set_store_errors_in_response_body(from._internal_store_errors_in_response_body());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunStepRequest::CopyFrom(const RunStepRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunStepRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunStepRequest::IsInitialized() const {
  return true;
}

void RunStepRequest::InternalSwap(RunStepRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.feed_.InternalSwap(&other->_impl_.feed_);
  _impl_.fetch_.InternalSwap(&other->_impl_.fetch_);
  _impl_.target_.InternalSwap(&other->_impl_.target_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_handle_, lhs_arena,
      &other->_impl_.session_handle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partial_run_handle_, lhs_arena,
      &other->_impl_.partial_run_handle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RunStepRequest, _impl_.store_errors_in_response_body_)
      + sizeof(RunStepRequest::_impl_.store_errors_in_response_body_)
      - PROTOBUF_FIELD_OFFSET(RunStepRequest, _impl_.options_)>(
          reinterpret_cast<char*>(&_impl_.options_),
          reinterpret_cast<char*>(&other->_impl_.options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RunStepRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto[4]);
}

// ===================================================================

class RunStepResponse::_Internal {
 public:
  static const ::tensorflow::RunMetadata& metadata(const RunStepResponse* msg);
};

const ::tensorflow::RunMetadata&
RunStepResponse::_Internal::metadata(const RunStepResponse* msg) {
  return *msg->_impl_.metadata_;
}
void RunStepResponse::clear_tensor() {
  _impl_.tensor_.Clear();
}
void RunStepResponse::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
RunStepResponse::RunStepResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunStepResponse)
}
RunStepResponse::RunStepResponse(const RunStepResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RunStepResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tensor_){from._impl_.tensor_}
    , decltype(_impl_.status_error_message_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.status_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.status_error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status_error_message().empty()) {
    _this->_impl_.status_error_message_.Set(from._internal_status_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::tensorflow::RunMetadata(*from._impl_.metadata_);
  }
  _this->_impl_.status_code_ = from._impl_.status_code_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunStepResponse)
}

inline void RunStepResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tensor_){arena}
    , decltype(_impl_.status_error_message_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.status_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.status_error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.status_error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RunStepResponse::~RunStepResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.RunStepResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RunStepResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tensor_.~RepeatedPtrField();
  _impl_.status_error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void RunStepResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RunStepResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunStepResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tensor_.Clear();
  _impl_.status_error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  _impl_.status_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunStepResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.NamedTensorProto tensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.RunMetadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.error.Code status_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status_code(static_cast<::tensorflow::error::Code>(val));
        } else
          goto handle_unusual;
        continue;
      // string status_error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_status_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.RunStepResponse.status_error_message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RunStepResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunStepResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.NamedTensorProto tensor = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tensor_size()); i < n; i++) {
    const auto& repfield = this->_internal_tensor(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tensorflow.RunMetadata metadata = 2;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.error.Code status_code = 3;
  if (this->_internal_status_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_status_code(), target);
  }

  // string status_error_message = 4;
  if (!this->_internal_status_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status_error_message().data(), static_cast<int>(this->_internal_status_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunStepResponse.status_error_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_status_error_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunStepResponse)
  return target;
}

size_t RunStepResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunStepResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.NamedTensorProto tensor = 1;
  total_size += 1UL * this->_internal_tensor_size();
  for (const auto& msg : this->_impl_.tensor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string status_error_message = 4;
  if (!this->_internal_status_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status_error_message());
  }

  // .tensorflow.RunMetadata metadata = 2;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  // .tensorflow.error.Code status_code = 3;
  if (this->_internal_status_code() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunStepResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RunStepResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunStepResponse::GetClassData() const { return &_class_data_; }


void RunStepResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RunStepResponse*>(&to_msg);
  auto& from = static_cast<const RunStepResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunStepResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tensor_.MergeFrom(from._impl_.tensor_);
  if (!from._internal_status_error_message().empty()) {
    _this->_internal_set_status_error_message(from._internal_status_error_message());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::tensorflow::RunMetadata::MergeFrom(
        from._internal_metadata());
  }
  if (from._internal_status_code() != 0) {
    _this->_internal_set_status_code(from._internal_status_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunStepResponse::CopyFrom(const RunStepResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunStepResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunStepResponse::IsInitialized() const {
  return true;
}

void RunStepResponse::InternalSwap(RunStepResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tensor_.InternalSwap(&other->_impl_.tensor_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.status_error_message_, lhs_arena,
      &other->_impl_.status_error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RunStepResponse, _impl_.status_code_)
      + sizeof(RunStepResponse::_impl_.status_code_)
      - PROTOBUF_FIELD_OFFSET(RunStepResponse, _impl_.metadata_)>(
          reinterpret_cast<char*>(&_impl_.metadata_),
          reinterpret_cast<char*>(&other->_impl_.metadata_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RunStepResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto[5]);
}

// ===================================================================

class PartialRunSetupRequest::_Internal {
 public:
};

PartialRunSetupRequest::PartialRunSetupRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.PartialRunSetupRequest)
}
PartialRunSetupRequest::PartialRunSetupRequest(const PartialRunSetupRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PartialRunSetupRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feed_){from._impl_.feed_}
    , decltype(_impl_.fetch_){from._impl_.fetch_}
    , decltype(_impl_.target_){from._impl_.target_}
    , decltype(_impl_.session_handle_){}
    , decltype(_impl_.request_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_handle().empty()) {
    _this->_impl_.session_handle_.Set(from._internal_session_handle(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.request_id_ = from._impl_.request_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.PartialRunSetupRequest)
}

inline void PartialRunSetupRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.feed_){arena}
    , decltype(_impl_.fetch_){arena}
    , decltype(_impl_.target_){arena}
    , decltype(_impl_.session_handle_){}
    , decltype(_impl_.request_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.session_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PartialRunSetupRequest::~PartialRunSetupRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.PartialRunSetupRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PartialRunSetupRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feed_.~RepeatedPtrField();
  _impl_.fetch_.~RepeatedPtrField();
  _impl_.target_.~RepeatedPtrField();
  _impl_.session_handle_.Destroy();
}

void PartialRunSetupRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PartialRunSetupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.PartialRunSetupRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feed_.Clear();
  _impl_.fetch_.Clear();
  _impl_.target_.Clear();
  _impl_.session_handle_.ClearToEmpty();
  _impl_.request_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartialRunSetupRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string session_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.PartialRunSetupRequest.session_handle"));
        } else
          goto handle_unusual;
        continue;
      // repeated string feed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_feed();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.PartialRunSetupRequest.feed"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string fetch = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_fetch();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.PartialRunSetupRequest.fetch"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string target = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_target();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.PartialRunSetupRequest.target"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 request_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartialRunSetupRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.PartialRunSetupRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_handle = 1;
  if (!this->_internal_session_handle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_handle().data(), static_cast<int>(this->_internal_session_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupRequest.session_handle");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_handle(), target);
  }

  // repeated string feed = 2;
  for (int i = 0, n = this->_internal_feed_size(); i < n; i++) {
    const auto& s = this->_internal_feed(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupRequest.feed");
    target = stream->WriteString(2, s, target);
  }

  // repeated string fetch = 3;
  for (int i = 0, n = this->_internal_fetch_size(); i < n; i++) {
    const auto& s = this->_internal_fetch(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupRequest.fetch");
    target = stream->WriteString(3, s, target);
  }

  // repeated string target = 4;
  for (int i = 0, n = this->_internal_target_size(); i < n; i++) {
    const auto& s = this->_internal_target(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupRequest.target");
    target = stream->WriteString(4, s, target);
  }

  // int64 request_id = 5;
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.PartialRunSetupRequest)
  return target;
}

size_t PartialRunSetupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.PartialRunSetupRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string feed = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.feed_.size());
  for (int i = 0, n = _impl_.feed_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.feed_.Get(i));
  }

  // repeated string fetch = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.fetch_.size());
  for (int i = 0, n = _impl_.fetch_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.fetch_.Get(i));
  }

  // repeated string target = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.target_.size());
  for (int i = 0, n = _impl_.target_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.target_.Get(i));
  }

  // string session_handle = 1;
  if (!this->_internal_session_handle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_handle());
  }

  // int64 request_id = 5;
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartialRunSetupRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PartialRunSetupRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartialRunSetupRequest::GetClassData() const { return &_class_data_; }


void PartialRunSetupRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PartialRunSetupRequest*>(&to_msg);
  auto& from = static_cast<const PartialRunSetupRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.PartialRunSetupRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.feed_.MergeFrom(from._impl_.feed_);
  _this->_impl_.fetch_.MergeFrom(from._impl_.fetch_);
  _this->_impl_.target_.MergeFrom(from._impl_.target_);
  if (!from._internal_session_handle().empty()) {
    _this->_internal_set_session_handle(from._internal_session_handle());
  }
  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartialRunSetupRequest::CopyFrom(const PartialRunSetupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.PartialRunSetupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartialRunSetupRequest::IsInitialized() const {
  return true;
}

void PartialRunSetupRequest::InternalSwap(PartialRunSetupRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.feed_.InternalSwap(&other->_impl_.feed_);
  _impl_.fetch_.InternalSwap(&other->_impl_.fetch_);
  _impl_.target_.InternalSwap(&other->_impl_.target_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_handle_, lhs_arena,
      &other->_impl_.session_handle_, rhs_arena
  );
  swap(_impl_.request_id_, other->_impl_.request_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PartialRunSetupRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto[6]);
}

// ===================================================================

class PartialRunSetupResponse::_Internal {
 public:
};

PartialRunSetupResponse::PartialRunSetupResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.PartialRunSetupResponse)
}
PartialRunSetupResponse::PartialRunSetupResponse(const PartialRunSetupResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PartialRunSetupResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.partial_run_handle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.partial_run_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partial_run_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_partial_run_handle().empty()) {
    _this->_impl_.partial_run_handle_.Set(from._internal_partial_run_handle(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.PartialRunSetupResponse)
}

inline void PartialRunSetupResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.partial_run_handle_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.partial_run_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.partial_run_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PartialRunSetupResponse::~PartialRunSetupResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.PartialRunSetupResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PartialRunSetupResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.partial_run_handle_.Destroy();
}

void PartialRunSetupResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PartialRunSetupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.PartialRunSetupResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.partial_run_handle_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PartialRunSetupResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string partial_run_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_partial_run_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.PartialRunSetupResponse.partial_run_handle"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PartialRunSetupResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.PartialRunSetupResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string partial_run_handle = 1;
  if (!this->_internal_partial_run_handle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_partial_run_handle().data(), static_cast<int>(this->_internal_partial_run_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PartialRunSetupResponse.partial_run_handle");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_partial_run_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.PartialRunSetupResponse)
  return target;
}

size_t PartialRunSetupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.PartialRunSetupResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string partial_run_handle = 1;
  if (!this->_internal_partial_run_handle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_partial_run_handle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PartialRunSetupResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PartialRunSetupResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PartialRunSetupResponse::GetClassData() const { return &_class_data_; }


void PartialRunSetupResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PartialRunSetupResponse*>(&to_msg);
  auto& from = static_cast<const PartialRunSetupResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.PartialRunSetupResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_partial_run_handle().empty()) {
    _this->_internal_set_partial_run_handle(from._internal_partial_run_handle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PartialRunSetupResponse::CopyFrom(const PartialRunSetupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.PartialRunSetupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartialRunSetupResponse::IsInitialized() const {
  return true;
}

void PartialRunSetupResponse::InternalSwap(PartialRunSetupResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.partial_run_handle_, lhs_arena,
      &other->_impl_.partial_run_handle_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PartialRunSetupResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto[7]);
}

// ===================================================================

class CloseSessionRequest::_Internal {
 public:
};

CloseSessionRequest::CloseSessionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CloseSessionRequest)
}
CloseSessionRequest::CloseSessionRequest(const CloseSessionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CloseSessionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.session_handle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_handle().empty()) {
    _this->_impl_.session_handle_.Set(from._internal_session_handle(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.CloseSessionRequest)
}

inline void CloseSessionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.session_handle_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.session_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CloseSessionRequest::~CloseSessionRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.CloseSessionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloseSessionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.session_handle_.Destroy();
}

void CloseSessionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CloseSessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CloseSessionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_handle_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseSessionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string session_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.CloseSessionRequest.session_handle"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseSessionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CloseSessionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_handle = 1;
  if (!this->_internal_session_handle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_handle().data(), static_cast<int>(this->_internal_session_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CloseSessionRequest.session_handle");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CloseSessionRequest)
  return target;
}

size_t CloseSessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CloseSessionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_handle = 1;
  if (!this->_internal_session_handle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_handle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseSessionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CloseSessionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseSessionRequest::GetClassData() const { return &_class_data_; }


void CloseSessionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CloseSessionRequest*>(&to_msg);
  auto& from = static_cast<const CloseSessionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CloseSessionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_handle().empty()) {
    _this->_internal_set_session_handle(from._internal_session_handle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseSessionRequest::CopyFrom(const CloseSessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CloseSessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseSessionRequest::IsInitialized() const {
  return true;
}

void CloseSessionRequest::InternalSwap(CloseSessionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_handle_, lhs_arena,
      &other->_impl_.session_handle_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseSessionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto[8]);
}

// ===================================================================

class CloseSessionResponse::_Internal {
 public:
};

CloseSessionResponse::CloseSessionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tensorflow.CloseSessionResponse)
}
CloseSessionResponse::CloseSessionResponse(const CloseSessionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CloseSessionResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CloseSessionResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseSessionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseSessionResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CloseSessionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto[9]);
}

// ===================================================================

class ResetRequest::_Internal {
 public:
};

ResetRequest::ResetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ResetRequest)
}
ResetRequest::ResetRequest(const ResetRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResetRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.container_){from._impl_.container_}
    , decltype(_impl_.device_filters_){from._impl_.device_filters_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ResetRequest)
}

inline void ResetRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.container_){arena}
    , decltype(_impl_.device_filters_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResetRequest::~ResetRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.ResetRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResetRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.container_.~RepeatedPtrField();
  _impl_.device_filters_.~RepeatedPtrField();
}

void ResetRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ResetRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.container_.Clear();
  _impl_.device_filters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResetRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string container = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_container();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.ResetRequest.container"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string device_filters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_device_filters();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.ResetRequest.device_filters"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResetRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ResetRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string container = 1;
  for (int i = 0, n = this->_internal_container_size(); i < n; i++) {
    const auto& s = this->_internal_container(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ResetRequest.container");
    target = stream->WriteString(1, s, target);
  }

  // repeated string device_filters = 2;
  for (int i = 0, n = this->_internal_device_filters_size(); i < n; i++) {
    const auto& s = this->_internal_device_filters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ResetRequest.device_filters");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ResetRequest)
  return target;
}

size_t ResetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ResetRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string container = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.container_.size());
  for (int i = 0, n = _impl_.container_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.container_.Get(i));
  }

  // repeated string device_filters = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.device_filters_.size());
  for (int i = 0, n = _impl_.device_filters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.device_filters_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResetRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResetRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResetRequest::GetClassData() const { return &_class_data_; }


void ResetRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResetRequest*>(&to_msg);
  auto& from = static_cast<const ResetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ResetRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.container_.MergeFrom(from._impl_.container_);
  _this->_impl_.device_filters_.MergeFrom(from._impl_.device_filters_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResetRequest::CopyFrom(const ResetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ResetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetRequest::IsInitialized() const {
  return true;
}

void ResetRequest::InternalSwap(ResetRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.container_.InternalSwap(&other->_impl_.container_);
  _impl_.device_filters_.InternalSwap(&other->_impl_.device_filters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto[10]);
}

// ===================================================================

class ResetResponse::_Internal {
 public:
};

ResetResponse::ResetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tensorflow.ResetResponse)
}
ResetResponse::ResetResponse(const ResetResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ResetResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ResetResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResetResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResetResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResetResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto[11]);
}

// ===================================================================

class ListDevicesRequest::_Internal {
 public:
};

ListDevicesRequest::ListDevicesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ListDevicesRequest)
}
ListDevicesRequest::ListDevicesRequest(const ListDevicesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListDevicesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.session_handle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_handle().empty()) {
    _this->_impl_.session_handle_.Set(from._internal_session_handle(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.ListDevicesRequest)
}

inline void ListDevicesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.session_handle_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.session_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListDevicesRequest::~ListDevicesRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.ListDevicesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListDevicesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.session_handle_.Destroy();
}

void ListDevicesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListDevicesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ListDevicesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_handle_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDevicesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string session_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.ListDevicesRequest.session_handle"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDevicesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ListDevicesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_handle = 1;
  if (!this->_internal_session_handle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_handle().data(), static_cast<int>(this->_internal_session_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ListDevicesRequest.session_handle");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ListDevicesRequest)
  return target;
}

size_t ListDevicesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ListDevicesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_handle = 1;
  if (!this->_internal_session_handle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_handle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDevicesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListDevicesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDevicesRequest::GetClassData() const { return &_class_data_; }


void ListDevicesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListDevicesRequest*>(&to_msg);
  auto& from = static_cast<const ListDevicesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ListDevicesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_handle().empty()) {
    _this->_internal_set_session_handle(from._internal_session_handle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDevicesRequest::CopyFrom(const ListDevicesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ListDevicesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDevicesRequest::IsInitialized() const {
  return true;
}

void ListDevicesRequest::InternalSwap(ListDevicesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_handle_, lhs_arena,
      &other->_impl_.session_handle_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDevicesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto[12]);
}

// ===================================================================

class ListDevicesResponse::_Internal {
 public:
};

void ListDevicesResponse::clear_local_device() {
  _impl_.local_device_.Clear();
}
void ListDevicesResponse::clear_remote_device() {
  _impl_.remote_device_.Clear();
}
ListDevicesResponse::ListDevicesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ListDevicesResponse)
}
ListDevicesResponse::ListDevicesResponse(const ListDevicesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListDevicesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.local_device_){from._impl_.local_device_}
    , decltype(_impl_.remote_device_){from._impl_.remote_device_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ListDevicesResponse)
}

inline void ListDevicesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.local_device_){arena}
    , decltype(_impl_.remote_device_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListDevicesResponse::~ListDevicesResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.ListDevicesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListDevicesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.local_device_.~RepeatedPtrField();
  _impl_.remote_device_.~RepeatedPtrField();
}

void ListDevicesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListDevicesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ListDevicesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.local_device_.Clear();
  _impl_.remote_device_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListDevicesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.DeviceAttributes local_device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_local_device(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.DeviceAttributes remote_device = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_remote_device(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListDevicesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ListDevicesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceAttributes local_device = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_local_device_size()); i < n; i++) {
    const auto& repfield = this->_internal_local_device(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tensorflow.DeviceAttributes remote_device = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_remote_device_size()); i < n; i++) {
    const auto& repfield = this->_internal_remote_device(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ListDevicesResponse)
  return target;
}

size_t ListDevicesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ListDevicesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceAttributes local_device = 1;
  total_size += 1UL * this->_internal_local_device_size();
  for (const auto& msg : this->_impl_.local_device_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.DeviceAttributes remote_device = 2;
  total_size += 1UL * this->_internal_remote_device_size();
  for (const auto& msg : this->_impl_.remote_device_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListDevicesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListDevicesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListDevicesResponse::GetClassData() const { return &_class_data_; }


void ListDevicesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListDevicesResponse*>(&to_msg);
  auto& from = static_cast<const ListDevicesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ListDevicesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.local_device_.MergeFrom(from._impl_.local_device_);
  _this->_impl_.remote_device_.MergeFrom(from._impl_.remote_device_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListDevicesResponse::CopyFrom(const ListDevicesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ListDevicesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListDevicesResponse::IsInitialized() const {
  return true;
}

void ListDevicesResponse::InternalSwap(ListDevicesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.local_device_.InternalSwap(&other->_impl_.local_device_);
  _impl_.remote_device_.InternalSwap(&other->_impl_.remote_device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListDevicesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto[13]);
}

// ===================================================================

class MakeCallableRequest::_Internal {
 public:
  static const ::tensorflow::CallableOptions& options(const MakeCallableRequest* msg);
};

const ::tensorflow::CallableOptions&
MakeCallableRequest::_Internal::options(const MakeCallableRequest* msg) {
  return *msg->_impl_.options_;
}
void MakeCallableRequest::clear_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
}
MakeCallableRequest::MakeCallableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MakeCallableRequest)
}
MakeCallableRequest::MakeCallableRequest(const MakeCallableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MakeCallableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.session_handle_){}
    , decltype(_impl_.options_){nullptr}
    , decltype(_impl_.request_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_handle().empty()) {
    _this->_impl_.session_handle_.Set(from._internal_session_handle(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_options()) {
    _this->_impl_.options_ = new ::tensorflow::CallableOptions(*from._impl_.options_);
  }
  _this->_impl_.request_id_ = from._impl_.request_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.MakeCallableRequest)
}

inline void MakeCallableRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.session_handle_){}
    , decltype(_impl_.options_){nullptr}
    , decltype(_impl_.request_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.session_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MakeCallableRequest::~MakeCallableRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.MakeCallableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MakeCallableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.session_handle_.Destroy();
  if (this != internal_default_instance()) delete _impl_.options_;
}

void MakeCallableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MakeCallableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MakeCallableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_handle_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
  _impl_.request_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MakeCallableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string session_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.MakeCallableRequest.session_handle"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.CallableOptions options = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 request_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MakeCallableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MakeCallableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_handle = 1;
  if (!this->_internal_session_handle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_handle().data(), static_cast<int>(this->_internal_session_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MakeCallableRequest.session_handle");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_handle(), target);
  }

  // .tensorflow.CallableOptions options = 2;
  if (this->_internal_has_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::options(this),
        _Internal::options(this).GetCachedSize(), target, stream);
  }

  // int64 request_id = 3;
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MakeCallableRequest)
  return target;
}

size_t MakeCallableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MakeCallableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_handle = 1;
  if (!this->_internal_session_handle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_handle());
  }

  // .tensorflow.CallableOptions options = 2;
  if (this->_internal_has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.options_);
  }

  // int64 request_id = 3;
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MakeCallableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MakeCallableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MakeCallableRequest::GetClassData() const { return &_class_data_; }


void MakeCallableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MakeCallableRequest*>(&to_msg);
  auto& from = static_cast<const MakeCallableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MakeCallableRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_handle().empty()) {
    _this->_internal_set_session_handle(from._internal_session_handle());
  }
  if (from._internal_has_options()) {
    _this->_internal_mutable_options()->::tensorflow::CallableOptions::MergeFrom(
        from._internal_options());
  }
  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MakeCallableRequest::CopyFrom(const MakeCallableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MakeCallableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeCallableRequest::IsInitialized() const {
  return true;
}

void MakeCallableRequest::InternalSwap(MakeCallableRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_handle_, lhs_arena,
      &other->_impl_.session_handle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MakeCallableRequest, _impl_.request_id_)
      + sizeof(MakeCallableRequest::_impl_.request_id_)
      - PROTOBUF_FIELD_OFFSET(MakeCallableRequest, _impl_.options_)>(
          reinterpret_cast<char*>(&_impl_.options_),
          reinterpret_cast<char*>(&other->_impl_.options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MakeCallableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto[14]);
}

// ===================================================================

class MakeCallableResponse::_Internal {
 public:
};

MakeCallableResponse::MakeCallableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MakeCallableResponse)
}
MakeCallableResponse::MakeCallableResponse(const MakeCallableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MakeCallableResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.handle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.handle_ = from._impl_.handle_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.MakeCallableResponse)
}

inline void MakeCallableResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.handle_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MakeCallableResponse::~MakeCallableResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.MakeCallableResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MakeCallableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MakeCallableResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MakeCallableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MakeCallableResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.handle_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MakeCallableResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MakeCallableResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MakeCallableResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 handle = 1;
  if (this->_internal_handle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MakeCallableResponse)
  return target;
}

size_t MakeCallableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MakeCallableResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 handle = 1;
  if (this->_internal_handle() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_handle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MakeCallableResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MakeCallableResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MakeCallableResponse::GetClassData() const { return &_class_data_; }


void MakeCallableResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MakeCallableResponse*>(&to_msg);
  auto& from = static_cast<const MakeCallableResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MakeCallableResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_handle() != 0) {
    _this->_internal_set_handle(from._internal_handle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MakeCallableResponse::CopyFrom(const MakeCallableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MakeCallableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeCallableResponse::IsInitialized() const {
  return true;
}

void MakeCallableResponse::InternalSwap(MakeCallableResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.handle_, other->_impl_.handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MakeCallableResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto[15]);
}

// ===================================================================

class RunCallableRequest::_Internal {
 public:
};

void RunCallableRequest::clear_feed() {
  _impl_.feed_.Clear();
}
RunCallableRequest::RunCallableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunCallableRequest)
}
RunCallableRequest::RunCallableRequest(const RunCallableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RunCallableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feed_){from._impl_.feed_}
    , decltype(_impl_.session_handle_){}
    , decltype(_impl_.handle_){}
    , decltype(_impl_.request_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_handle().empty()) {
    _this->_impl_.session_handle_.Set(from._internal_session_handle(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.handle_, &from._impl_.handle_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.request_id_) -
    reinterpret_cast<char*>(&_impl_.handle_)) + sizeof(_impl_.request_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunCallableRequest)
}

inline void RunCallableRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.feed_){arena}
    , decltype(_impl_.session_handle_){}
    , decltype(_impl_.handle_){int64_t{0}}
    , decltype(_impl_.request_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.session_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RunCallableRequest::~RunCallableRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.RunCallableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RunCallableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.feed_.~RepeatedPtrField();
  _impl_.session_handle_.Destroy();
}

void RunCallableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RunCallableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunCallableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.feed_.Clear();
  _impl_.session_handle_.ClearToEmpty();
  ::memset(&_impl_.handle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.request_id_) -
      reinterpret_cast<char*>(&_impl_.handle_)) + sizeof(_impl_.request_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunCallableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string session_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.RunCallableRequest.session_handle"));
        } else
          goto handle_unusual;
        continue;
      // int64 handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.TensorProto feed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feed(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 request_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.request_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RunCallableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunCallableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_handle = 1;
  if (!this->_internal_session_handle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_handle().data(), static_cast<int>(this->_internal_session_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunCallableRequest.session_handle");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_handle(), target);
  }

  // int64 handle = 2;
  if (this->_internal_handle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_handle(), target);
  }

  // repeated .tensorflow.TensorProto feed = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_feed_size()); i < n; i++) {
    const auto& repfield = this->_internal_feed(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 request_id = 4;
  if (this->_internal_request_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_request_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunCallableRequest)
  return target;
}

size_t RunCallableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunCallableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.TensorProto feed = 3;
  total_size += 1UL * this->_internal_feed_size();
  for (const auto& msg : this->_impl_.feed_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string session_handle = 1;
  if (!this->_internal_session_handle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_handle());
  }

  // int64 handle = 2;
  if (this->_internal_handle() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_handle());
  }

  // int64 request_id = 4;
  if (this->_internal_request_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_request_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunCallableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RunCallableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunCallableRequest::GetClassData() const { return &_class_data_; }


void RunCallableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RunCallableRequest*>(&to_msg);
  auto& from = static_cast<const RunCallableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunCallableRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.feed_.MergeFrom(from._impl_.feed_);
  if (!from._internal_session_handle().empty()) {
    _this->_internal_set_session_handle(from._internal_session_handle());
  }
  if (from._internal_handle() != 0) {
    _this->_internal_set_handle(from._internal_handle());
  }
  if (from._internal_request_id() != 0) {
    _this->_internal_set_request_id(from._internal_request_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunCallableRequest::CopyFrom(const RunCallableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunCallableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunCallableRequest::IsInitialized() const {
  return true;
}

void RunCallableRequest::InternalSwap(RunCallableRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.feed_.InternalSwap(&other->_impl_.feed_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_handle_, lhs_arena,
      &other->_impl_.session_handle_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RunCallableRequest, _impl_.request_id_)
      + sizeof(RunCallableRequest::_impl_.request_id_)
      - PROTOBUF_FIELD_OFFSET(RunCallableRequest, _impl_.handle_)>(
          reinterpret_cast<char*>(&_impl_.handle_),
          reinterpret_cast<char*>(&other->_impl_.handle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RunCallableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto[16]);
}

// ===================================================================

class RunCallableResponse::_Internal {
 public:
  static const ::tensorflow::RunMetadata& metadata(const RunCallableResponse* msg);
};

const ::tensorflow::RunMetadata&
RunCallableResponse::_Internal::metadata(const RunCallableResponse* msg) {
  return *msg->_impl_.metadata_;
}
void RunCallableResponse::clear_fetch() {
  _impl_.fetch_.Clear();
}
void RunCallableResponse::clear_metadata() {
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
}
RunCallableResponse::RunCallableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunCallableResponse)
}
RunCallableResponse::RunCallableResponse(const RunCallableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RunCallableResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fetch_){from._impl_.fetch_}
    , decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::tensorflow::RunMetadata(*from._impl_.metadata_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunCallableResponse)
}

inline void RunCallableResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fetch_){arena}
    , decltype(_impl_.metadata_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RunCallableResponse::~RunCallableResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.RunCallableResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RunCallableResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fetch_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.metadata_;
}

void RunCallableResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RunCallableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunCallableResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fetch_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunCallableResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.TensorProto fetch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fetch(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.RunMetadata metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RunCallableResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunCallableResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.TensorProto fetch = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_fetch_size()); i < n; i++) {
    const auto& repfield = this->_internal_fetch(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tensorflow.RunMetadata metadata = 2;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunCallableResponse)
  return target;
}

size_t RunCallableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunCallableResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.TensorProto fetch = 1;
  total_size += 1UL * this->_internal_fetch_size();
  for (const auto& msg : this->_impl_.fetch_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tensorflow.RunMetadata metadata = 2;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunCallableResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RunCallableResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunCallableResponse::GetClassData() const { return &_class_data_; }


void RunCallableResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RunCallableResponse*>(&to_msg);
  auto& from = static_cast<const RunCallableResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunCallableResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fetch_.MergeFrom(from._impl_.fetch_);
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::tensorflow::RunMetadata::MergeFrom(
        from._internal_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunCallableResponse::CopyFrom(const RunCallableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunCallableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunCallableResponse::IsInitialized() const {
  return true;
}

void RunCallableResponse::InternalSwap(RunCallableResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fetch_.InternalSwap(&other->_impl_.fetch_);
  swap(_impl_.metadata_, other->_impl_.metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunCallableResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto[17]);
}

// ===================================================================

class ReleaseCallableRequest::_Internal {
 public:
};

ReleaseCallableRequest::ReleaseCallableRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ReleaseCallableRequest)
}
ReleaseCallableRequest::ReleaseCallableRequest(const ReleaseCallableRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReleaseCallableRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.session_handle_){}
    , decltype(_impl_.handle_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.session_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_session_handle().empty()) {
    _this->_impl_.session_handle_.Set(from._internal_session_handle(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.handle_ = from._impl_.handle_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.ReleaseCallableRequest)
}

inline void ReleaseCallableRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.session_handle_){}
    , decltype(_impl_.handle_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.session_handle_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.session_handle_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReleaseCallableRequest::~ReleaseCallableRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.ReleaseCallableRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReleaseCallableRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.session_handle_.Destroy();
}

void ReleaseCallableRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReleaseCallableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ReleaseCallableRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.session_handle_.ClearToEmpty();
  _impl_.handle_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReleaseCallableRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string session_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_session_handle();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.ReleaseCallableRequest.session_handle"));
        } else
          goto handle_unusual;
        continue;
      // int64 handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.handle_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReleaseCallableRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ReleaseCallableRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string session_handle = 1;
  if (!this->_internal_session_handle().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_handle().data(), static_cast<int>(this->_internal_session_handle().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ReleaseCallableRequest.session_handle");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_session_handle(), target);
  }

  // int64 handle = 2;
  if (this->_internal_handle() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_handle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ReleaseCallableRequest)
  return target;
}

size_t ReleaseCallableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ReleaseCallableRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_handle = 1;
  if (!this->_internal_session_handle().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_handle());
  }

  // int64 handle = 2;
  if (this->_internal_handle() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_handle());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReleaseCallableRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReleaseCallableRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReleaseCallableRequest::GetClassData() const { return &_class_data_; }


void ReleaseCallableRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReleaseCallableRequest*>(&to_msg);
  auto& from = static_cast<const ReleaseCallableRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ReleaseCallableRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_session_handle().empty()) {
    _this->_internal_set_session_handle(from._internal_session_handle());
  }
  if (from._internal_handle() != 0) {
    _this->_internal_set_handle(from._internal_handle());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReleaseCallableRequest::CopyFrom(const ReleaseCallableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ReleaseCallableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReleaseCallableRequest::IsInitialized() const {
  return true;
}

void ReleaseCallableRequest::InternalSwap(ReleaseCallableRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.session_handle_, lhs_arena,
      &other->_impl_.session_handle_, rhs_arena
  );
  swap(_impl_.handle_, other->_impl_.handle_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReleaseCallableRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto[18]);
}

// ===================================================================

class ReleaseCallableResponse::_Internal {
 public:
};

ReleaseCallableResponse::ReleaseCallableResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tensorflow.ReleaseCallableResponse)
}
ReleaseCallableResponse::ReleaseCallableResponse(const ReleaseCallableResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ReleaseCallableResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ReleaseCallableResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReleaseCallableResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReleaseCallableResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReleaseCallableResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fmaster_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::CreateSessionRequest*
Arena::CreateMaybeMessage< ::tensorflow::CreateSessionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CreateSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CreateSessionResponse*
Arena::CreateMaybeMessage< ::tensorflow::CreateSessionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CreateSessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ExtendSessionRequest*
Arena::CreateMaybeMessage< ::tensorflow::ExtendSessionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ExtendSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ExtendSessionResponse*
Arena::CreateMaybeMessage< ::tensorflow::ExtendSessionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ExtendSessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RunStepRequest*
Arena::CreateMaybeMessage< ::tensorflow::RunStepRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RunStepRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RunStepResponse*
Arena::CreateMaybeMessage< ::tensorflow::RunStepResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RunStepResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::PartialRunSetupRequest*
Arena::CreateMaybeMessage< ::tensorflow::PartialRunSetupRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::PartialRunSetupRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::PartialRunSetupResponse*
Arena::CreateMaybeMessage< ::tensorflow::PartialRunSetupResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::PartialRunSetupResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CloseSessionRequest*
Arena::CreateMaybeMessage< ::tensorflow::CloseSessionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CloseSessionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CloseSessionResponse*
Arena::CreateMaybeMessage< ::tensorflow::CloseSessionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CloseSessionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ResetRequest*
Arena::CreateMaybeMessage< ::tensorflow::ResetRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ResetRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ResetResponse*
Arena::CreateMaybeMessage< ::tensorflow::ResetResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ResetResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ListDevicesRequest*
Arena::CreateMaybeMessage< ::tensorflow::ListDevicesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ListDevicesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ListDevicesResponse*
Arena::CreateMaybeMessage< ::tensorflow::ListDevicesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ListDevicesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MakeCallableRequest*
Arena::CreateMaybeMessage< ::tensorflow::MakeCallableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MakeCallableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MakeCallableResponse*
Arena::CreateMaybeMessage< ::tensorflow::MakeCallableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MakeCallableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RunCallableRequest*
Arena::CreateMaybeMessage< ::tensorflow::RunCallableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RunCallableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RunCallableResponse*
Arena::CreateMaybeMessage< ::tensorflow::RunCallableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RunCallableResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ReleaseCallableRequest*
Arena::CreateMaybeMessage< ::tensorflow::ReleaseCallableRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ReleaseCallableRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ReleaseCallableResponse*
Arena::CreateMaybeMessage< ::tensorflow::ReleaseCallableResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ReleaseCallableResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
