// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tsl/protobuf/rpc_options.proto

#include "tsl/protobuf/rpc_options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR RPCOptions::RPCOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.compression_algorithm_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.compression_level_)*/0
  , /*decltype(_impl_.use_rpc_for_inprocess_master_)*/false
  , /*decltype(_impl_.cache_rpc_response_)*/false
  , /*decltype(_impl_.disable_session_connection_sharing_)*/false
  , /*decltype(_impl_.num_channels_per_target_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RPCOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RPCOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RPCOptionsDefaultTypeInternal() {}
  union {
    RPCOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RPCOptionsDefaultTypeInternal _RPCOptions_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tsl_2fprotobuf_2frpc_5foptions_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tsl_2fprotobuf_2frpc_5foptions_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tsl_2fprotobuf_2frpc_5foptions_2eproto = nullptr;

const uint32_t TableStruct_tsl_2fprotobuf_2frpc_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RPCOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RPCOptions, _impl_.use_rpc_for_inprocess_master_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RPCOptions, _impl_.compression_algorithm_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RPCOptions, _impl_.compression_level_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RPCOptions, _impl_.cache_rpc_response_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RPCOptions, _impl_.disable_session_connection_sharing_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RPCOptions, _impl_.num_channels_per_target_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::RPCOptions)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_RPCOptions_default_instance_._instance,
};

const char descriptor_table_protodef_tsl_2fprotobuf_2frpc_5foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\036tsl/protobuf/rpc_options.proto\022\ntensor"
  "flow\"\325\001\n\nRPCOptions\022$\n\034use_rpc_for_inpro"
  "cess_master\030\001 \001(\010\022\035\n\025compression_algorit"
  "hm\030\002 \001(\t\022\031\n\021compression_level\030\003 \001(\005\022\032\n\022c"
  "ache_rpc_response\030\004 \001(\010\022*\n\"disable_sessi"
  "on_connection_sharing\030\005 \001(\010\022\037\n\027num_chann"
  "els_per_target\030\006 \001(\005B@Z>github.com/googl"
  "e/tsl/tsl/go/protobuf/for_core_protos_go"
  "_protob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_tsl_2fprotobuf_2frpc_5foptions_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tsl_2fprotobuf_2frpc_5foptions_2eproto = {
    false, false, 334, descriptor_table_protodef_tsl_2fprotobuf_2frpc_5foptions_2eproto,
    "tsl/protobuf/rpc_options.proto",
    &descriptor_table_tsl_2fprotobuf_2frpc_5foptions_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_tsl_2fprotobuf_2frpc_5foptions_2eproto::offsets,
    file_level_metadata_tsl_2fprotobuf_2frpc_5foptions_2eproto, file_level_enum_descriptors_tsl_2fprotobuf_2frpc_5foptions_2eproto,
    file_level_service_descriptors_tsl_2fprotobuf_2frpc_5foptions_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tsl_2fprotobuf_2frpc_5foptions_2eproto_getter() {
  return &descriptor_table_tsl_2fprotobuf_2frpc_5foptions_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tsl_2fprotobuf_2frpc_5foptions_2eproto(&descriptor_table_tsl_2fprotobuf_2frpc_5foptions_2eproto);
namespace tensorflow {

// ===================================================================

class RPCOptions::_Internal {
 public:
};

RPCOptions::RPCOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RPCOptions)
}
RPCOptions::RPCOptions(const RPCOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RPCOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.compression_algorithm_){}
    , decltype(_impl_.compression_level_){}
    , decltype(_impl_.use_rpc_for_inprocess_master_){}
    , decltype(_impl_.cache_rpc_response_){}
    , decltype(_impl_.disable_session_connection_sharing_){}
    , decltype(_impl_.num_channels_per_target_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.compression_algorithm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.compression_algorithm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_compression_algorithm().empty()) {
    _this->_impl_.compression_algorithm_.Set(from._internal_compression_algorithm(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.compression_level_, &from._impl_.compression_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_channels_per_target_) -
    reinterpret_cast<char*>(&_impl_.compression_level_)) + sizeof(_impl_.num_channels_per_target_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.RPCOptions)
}

inline void RPCOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.compression_algorithm_){}
    , decltype(_impl_.compression_level_){0}
    , decltype(_impl_.use_rpc_for_inprocess_master_){false}
    , decltype(_impl_.cache_rpc_response_){false}
    , decltype(_impl_.disable_session_connection_sharing_){false}
    , decltype(_impl_.num_channels_per_target_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.compression_algorithm_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.compression_algorithm_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RPCOptions::~RPCOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.RPCOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RPCOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.compression_algorithm_.Destroy();
}

void RPCOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RPCOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RPCOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.compression_algorithm_.ClearToEmpty();
  ::memset(&_impl_.compression_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_channels_per_target_) -
      reinterpret_cast<char*>(&_impl_.compression_level_)) + sizeof(_impl_.num_channels_per_target_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RPCOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool use_rpc_for_inprocess_master = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.use_rpc_for_inprocess_master_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string compression_algorithm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_compression_algorithm();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.RPCOptions.compression_algorithm"));
        } else
          goto handle_unusual;
        continue;
      // int32 compression_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.compression_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool cache_rpc_response = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.cache_rpc_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool disable_session_connection_sharing = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.disable_session_connection_sharing_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num_channels_per_target = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.num_channels_per_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RPCOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RPCOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool use_rpc_for_inprocess_master = 1;
  if (this->_internal_use_rpc_for_inprocess_master() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_use_rpc_for_inprocess_master(), target);
  }

  // string compression_algorithm = 2;
  if (!this->_internal_compression_algorithm().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_compression_algorithm().data(), static_cast<int>(this->_internal_compression_algorithm().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RPCOptions.compression_algorithm");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_compression_algorithm(), target);
  }

  // int32 compression_level = 3;
  if (this->_internal_compression_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_compression_level(), target);
  }

  // bool cache_rpc_response = 4;
  if (this->_internal_cache_rpc_response() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_cache_rpc_response(), target);
  }

  // bool disable_session_connection_sharing = 5;
  if (this->_internal_disable_session_connection_sharing() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_disable_session_connection_sharing(), target);
  }

  // int32 num_channels_per_target = 6;
  if (this->_internal_num_channels_per_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_num_channels_per_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RPCOptions)
  return target;
}

size_t RPCOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RPCOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string compression_algorithm = 2;
  if (!this->_internal_compression_algorithm().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_compression_algorithm());
  }

  // int32 compression_level = 3;
  if (this->_internal_compression_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_compression_level());
  }

  // bool use_rpc_for_inprocess_master = 1;
  if (this->_internal_use_rpc_for_inprocess_master() != 0) {
    total_size += 1 + 1;
  }

  // bool cache_rpc_response = 4;
  if (this->_internal_cache_rpc_response() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_session_connection_sharing = 5;
  if (this->_internal_disable_session_connection_sharing() != 0) {
    total_size += 1 + 1;
  }

  // int32 num_channels_per_target = 6;
  if (this->_internal_num_channels_per_target() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_channels_per_target());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RPCOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RPCOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RPCOptions::GetClassData() const { return &_class_data_; }


void RPCOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RPCOptions*>(&to_msg);
  auto& from = static_cast<const RPCOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RPCOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_compression_algorithm().empty()) {
    _this->_internal_set_compression_algorithm(from._internal_compression_algorithm());
  }
  if (from._internal_compression_level() != 0) {
    _this->_internal_set_compression_level(from._internal_compression_level());
  }
  if (from._internal_use_rpc_for_inprocess_master() != 0) {
    _this->_internal_set_use_rpc_for_inprocess_master(from._internal_use_rpc_for_inprocess_master());
  }
  if (from._internal_cache_rpc_response() != 0) {
    _this->_internal_set_cache_rpc_response(from._internal_cache_rpc_response());
  }
  if (from._internal_disable_session_connection_sharing() != 0) {
    _this->_internal_set_disable_session_connection_sharing(from._internal_disable_session_connection_sharing());
  }
  if (from._internal_num_channels_per_target() != 0) {
    _this->_internal_set_num_channels_per_target(from._internal_num_channels_per_target());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RPCOptions::CopyFrom(const RPCOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RPCOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCOptions::IsInitialized() const {
  return true;
}

void RPCOptions::InternalSwap(RPCOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.compression_algorithm_, lhs_arena,
      &other->_impl_.compression_algorithm_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RPCOptions, _impl_.num_channels_per_target_)
      + sizeof(RPCOptions::_impl_.num_channels_per_target_)
      - PROTOBUF_FIELD_OFFSET(RPCOptions, _impl_.compression_level_)>(
          reinterpret_cast<char*>(&_impl_.compression_level_),
          reinterpret_cast<char*>(&other->_impl_.compression_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RPCOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2frpc_5foptions_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2frpc_5foptions_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2frpc_5foptions_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::RPCOptions*
Arena::CreateMaybeMessage< ::tensorflow::RPCOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RPCOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
