// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tsl/protobuf/bfc_memory_map.proto

#include "tsl/protobuf/bfc_memory_map.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR MemAllocatorStats::MemAllocatorStats(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.num_allocs_)*/int64_t{0}
  , /*decltype(_impl_.bytes_in_use_)*/int64_t{0}
  , /*decltype(_impl_.peak_bytes_in_use_)*/int64_t{0}
  , /*decltype(_impl_.largest_alloc_size_)*/int64_t{0}
  , /*decltype(_impl_.fragmentation_metric_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MemAllocatorStatsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemAllocatorStatsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemAllocatorStatsDefaultTypeInternal() {}
  union {
    MemAllocatorStats _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemAllocatorStatsDefaultTypeInternal _MemAllocatorStats_default_instance_;
PROTOBUF_CONSTEXPR MemChunk::MemChunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.op_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.address_)*/uint64_t{0u}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_.requested_size_)*/int64_t{0}
  , /*decltype(_impl_.freed_at_count_)*/uint64_t{0u}
  , /*decltype(_impl_.bin_)*/0
  , /*decltype(_impl_.in_use_)*/false
  , /*decltype(_impl_.action_count_)*/uint64_t{0u}
  , /*decltype(_impl_.step_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MemChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemChunkDefaultTypeInternal() {}
  union {
    MemChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemChunkDefaultTypeInternal _MemChunk_default_instance_;
PROTOBUF_CONSTEXPR BinSummary::BinSummary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.total_bytes_in_use_)*/int64_t{0}
  , /*decltype(_impl_.total_bytes_in_bin_)*/int64_t{0}
  , /*decltype(_impl_.total_chunks_in_use_)*/int64_t{0}
  , /*decltype(_impl_.total_chunks_in_bin_)*/int64_t{0}
  , /*decltype(_impl_.bin_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BinSummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BinSummaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BinSummaryDefaultTypeInternal() {}
  union {
    BinSummary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BinSummaryDefaultTypeInternal _BinSummary_default_instance_;
PROTOBUF_CONSTEXPR SnapShot::SnapShot(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.action_count_)*/uint64_t{0u}
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SnapShotDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapShotDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapShotDefaultTypeInternal() {}
  union {
    SnapShot _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapShotDefaultTypeInternal _SnapShot_default_instance_;
PROTOBUF_CONSTEXPR MemoryDump::MemoryDump(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bin_summary_)*/{}
  , /*decltype(_impl_.chunk_)*/{}
  , /*decltype(_impl_.snap_shot_)*/{}
  , /*decltype(_impl_.allocator_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.stats_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MemoryDumpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryDumpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryDumpDefaultTypeInternal() {}
  union {
    MemoryDump _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryDumpDefaultTypeInternal _MemoryDump_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto = nullptr;

const uint32_t TableStruct_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemAllocatorStats, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemAllocatorStats, _impl_.num_allocs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemAllocatorStats, _impl_.bytes_in_use_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemAllocatorStats, _impl_.peak_bytes_in_use_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemAllocatorStats, _impl_.largest_alloc_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemAllocatorStats, _impl_.fragmentation_metric_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, _impl_.address_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, _impl_.requested_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, _impl_.bin_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, _impl_.op_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, _impl_.freed_at_count_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, _impl_.action_count_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, _impl_.in_use_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemChunk, _impl_.step_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BinSummary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BinSummary, _impl_.bin_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BinSummary, _impl_.total_bytes_in_use_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BinSummary, _impl_.total_bytes_in_bin_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BinSummary, _impl_.total_chunks_in_use_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BinSummary, _impl_.total_chunks_in_bin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SnapShot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SnapShot, _impl_.action_count_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SnapShot, _impl_.size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryDump, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryDump, _impl_.allocator_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryDump, _impl_.bin_summary_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryDump, _impl_.chunk_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryDump, _impl_.snap_shot_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryDump, _impl_.stats_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::MemAllocatorStats)},
  { 11, -1, -1, sizeof(::tensorflow::MemChunk)},
  { 26, -1, -1, sizeof(::tensorflow::BinSummary)},
  { 37, -1, -1, sizeof(::tensorflow::SnapShot)},
  { 45, -1, -1, sizeof(::tensorflow::MemoryDump)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_MemAllocatorStats_default_instance_._instance,
  &::tensorflow::_MemChunk_default_instance_._instance,
  &::tensorflow::_BinSummary_default_instance_._instance,
  &::tensorflow::_SnapShot_default_instance_._instance,
  &::tensorflow::_MemoryDump_default_instance_._instance,
};

const char descriptor_table_protodef_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!tsl/protobuf/bfc_memory_map.proto\022\nten"
  "sorflow\"\222\001\n\021MemAllocatorStats\022\022\n\nnum_all"
  "ocs\030\001 \001(\003\022\024\n\014bytes_in_use\030\002 \001(\003\022\031\n\021peak_"
  "bytes_in_use\030\003 \001(\003\022\032\n\022largest_alloc_size"
  "\030\004 \001(\003\022\034\n\024fragmentation_metric\030\005 \001(\002\"\256\001\n"
  "\010MemChunk\022\017\n\007address\030\001 \001(\004\022\014\n\004size\030\002 \001(\003"
  "\022\026\n\016requested_size\030\003 \001(\003\022\013\n\003bin\030\004 \001(\005\022\017\n"
  "\007op_name\030\005 \001(\t\022\026\n\016freed_at_count\030\006 \001(\004\022\024"
  "\n\014action_count\030\007 \001(\004\022\016\n\006in_use\030\010 \001(\010\022\017\n\007"
  "step_id\030\t \001(\004\"\213\001\n\nBinSummary\022\013\n\003bin\030\001 \001("
  "\005\022\032\n\022total_bytes_in_use\030\002 \001(\003\022\032\n\022total_b"
  "ytes_in_bin\030\003 \001(\003\022\033\n\023total_chunks_in_use"
  "\030\004 \001(\003\022\033\n\023total_chunks_in_bin\030\005 \001(\003\".\n\010S"
  "napShot\022\024\n\014action_count\030\001 \001(\004\022\014\n\004size\030\002 "
  "\001(\003\"\315\001\n\nMemoryDump\022\026\n\016allocator_name\030\001 \001"
  "(\t\022+\n\013bin_summary\030\002 \003(\0132\026.tensorflow.Bin"
  "Summary\022#\n\005chunk\030\003 \003(\0132\024.tensorflow.MemC"
  "hunk\022\'\n\tsnap_shot\030\004 \003(\0132\024.tensorflow.Sna"
  "pShot\022,\n\005stats\030\005 \001(\0132\035.tensorflow.MemAll"
  "ocatorStatsB@Z>github.com/google/tsl/tsl"
  "/go/protobuf/for_core_protos_go_protob\006p"
  "roto3"
  ;
static ::_pbi::once_flag descriptor_table_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto = {
    false, false, 845, descriptor_table_protodef_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto,
    "tsl/protobuf/bfc_memory_map.proto",
    &descriptor_table_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto::offsets,
    file_level_metadata_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto, file_level_enum_descriptors_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto,
    file_level_service_descriptors_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_getter() {
  return &descriptor_table_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto(&descriptor_table_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto);
namespace tensorflow {

// ===================================================================

class MemAllocatorStats::_Internal {
 public:
};

MemAllocatorStats::MemAllocatorStats(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemAllocatorStats)
}
MemAllocatorStats::MemAllocatorStats(const MemAllocatorStats& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MemAllocatorStats* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.num_allocs_){}
    , decltype(_impl_.bytes_in_use_){}
    , decltype(_impl_.peak_bytes_in_use_){}
    , decltype(_impl_.largest_alloc_size_){}
    , decltype(_impl_.fragmentation_metric_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.num_allocs_, &from._impl_.num_allocs_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fragmentation_metric_) -
    reinterpret_cast<char*>(&_impl_.num_allocs_)) + sizeof(_impl_.fragmentation_metric_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemAllocatorStats)
}

inline void MemAllocatorStats::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.num_allocs_){int64_t{0}}
    , decltype(_impl_.bytes_in_use_){int64_t{0}}
    , decltype(_impl_.peak_bytes_in_use_){int64_t{0}}
    , decltype(_impl_.largest_alloc_size_){int64_t{0}}
    , decltype(_impl_.fragmentation_metric_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MemAllocatorStats::~MemAllocatorStats() {
  // @@protoc_insertion_point(destructor:tensorflow.MemAllocatorStats)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemAllocatorStats::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MemAllocatorStats::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemAllocatorStats::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemAllocatorStats)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.num_allocs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fragmentation_metric_) -
      reinterpret_cast<char*>(&_impl_.num_allocs_)) + sizeof(_impl_.fragmentation_metric_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemAllocatorStats::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 num_allocs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.num_allocs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 bytes_in_use = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bytes_in_use_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 peak_bytes_in_use = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.peak_bytes_in_use_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 largest_alloc_size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.largest_alloc_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float fragmentation_metric = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.fragmentation_metric_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemAllocatorStats::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemAllocatorStats)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 num_allocs = 1;
  if (this->_internal_num_allocs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_num_allocs(), target);
  }

  // int64 bytes_in_use = 2;
  if (this->_internal_bytes_in_use() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_bytes_in_use(), target);
  }

  // int64 peak_bytes_in_use = 3;
  if (this->_internal_peak_bytes_in_use() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_peak_bytes_in_use(), target);
  }

  // int64 largest_alloc_size = 4;
  if (this->_internal_largest_alloc_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_largest_alloc_size(), target);
  }

  // float fragmentation_metric = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fragmentation_metric = this->_internal_fragmentation_metric();
  uint32_t raw_fragmentation_metric;
  memcpy(&raw_fragmentation_metric, &tmp_fragmentation_metric, sizeof(tmp_fragmentation_metric));
  if (raw_fragmentation_metric != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_fragmentation_metric(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemAllocatorStats)
  return target;
}

size_t MemAllocatorStats::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemAllocatorStats)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 num_allocs = 1;
  if (this->_internal_num_allocs() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_allocs());
  }

  // int64 bytes_in_use = 2;
  if (this->_internal_bytes_in_use() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bytes_in_use());
  }

  // int64 peak_bytes_in_use = 3;
  if (this->_internal_peak_bytes_in_use() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_peak_bytes_in_use());
  }

  // int64 largest_alloc_size = 4;
  if (this->_internal_largest_alloc_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_largest_alloc_size());
  }

  // float fragmentation_metric = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fragmentation_metric = this->_internal_fragmentation_metric();
  uint32_t raw_fragmentation_metric;
  memcpy(&raw_fragmentation_metric, &tmp_fragmentation_metric, sizeof(tmp_fragmentation_metric));
  if (raw_fragmentation_metric != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemAllocatorStats::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MemAllocatorStats::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemAllocatorStats::GetClassData() const { return &_class_data_; }


void MemAllocatorStats::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MemAllocatorStats*>(&to_msg);
  auto& from = static_cast<const MemAllocatorStats&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemAllocatorStats)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_num_allocs() != 0) {
    _this->_internal_set_num_allocs(from._internal_num_allocs());
  }
  if (from._internal_bytes_in_use() != 0) {
    _this->_internal_set_bytes_in_use(from._internal_bytes_in_use());
  }
  if (from._internal_peak_bytes_in_use() != 0) {
    _this->_internal_set_peak_bytes_in_use(from._internal_peak_bytes_in_use());
  }
  if (from._internal_largest_alloc_size() != 0) {
    _this->_internal_set_largest_alloc_size(from._internal_largest_alloc_size());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fragmentation_metric = from._internal_fragmentation_metric();
  uint32_t raw_fragmentation_metric;
  memcpy(&raw_fragmentation_metric, &tmp_fragmentation_metric, sizeof(tmp_fragmentation_metric));
  if (raw_fragmentation_metric != 0) {
    _this->_internal_set_fragmentation_metric(from._internal_fragmentation_metric());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemAllocatorStats::CopyFrom(const MemAllocatorStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemAllocatorStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemAllocatorStats::IsInitialized() const {
  return true;
}

void MemAllocatorStats::InternalSwap(MemAllocatorStats* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemAllocatorStats, _impl_.fragmentation_metric_)
      + sizeof(MemAllocatorStats::_impl_.fragmentation_metric_)
      - PROTOBUF_FIELD_OFFSET(MemAllocatorStats, _impl_.num_allocs_)>(
          reinterpret_cast<char*>(&_impl_.num_allocs_),
          reinterpret_cast<char*>(&other->_impl_.num_allocs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemAllocatorStats::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto[0]);
}

// ===================================================================

class MemChunk::_Internal {
 public:
};

MemChunk::MemChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemChunk)
}
MemChunk::MemChunk(const MemChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MemChunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.op_name_){}
    , decltype(_impl_.address_){}
    , decltype(_impl_.size_){}
    , decltype(_impl_.requested_size_){}
    , decltype(_impl_.freed_at_count_){}
    , decltype(_impl_.bin_){}
    , decltype(_impl_.in_use_){}
    , decltype(_impl_.action_count_){}
    , decltype(_impl_.step_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.op_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_op_name().empty()) {
    _this->_impl_.op_name_.Set(from._internal_op_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.address_, &from._impl_.address_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.step_id_) -
    reinterpret_cast<char*>(&_impl_.address_)) + sizeof(_impl_.step_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemChunk)
}

inline void MemChunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.op_name_){}
    , decltype(_impl_.address_){uint64_t{0u}}
    , decltype(_impl_.size_){int64_t{0}}
    , decltype(_impl_.requested_size_){int64_t{0}}
    , decltype(_impl_.freed_at_count_){uint64_t{0u}}
    , decltype(_impl_.bin_){0}
    , decltype(_impl_.in_use_){false}
    , decltype(_impl_.action_count_){uint64_t{0u}}
    , decltype(_impl_.step_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.op_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MemChunk::~MemChunk() {
  // @@protoc_insertion_point(destructor:tensorflow.MemChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.op_name_.Destroy();
}

void MemChunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.op_name_.ClearToEmpty();
  ::memset(&_impl_.address_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.step_id_) -
      reinterpret_cast<char*>(&_impl_.address_)) + sizeof(_impl_.step_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 requested_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.requested_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bin = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.bin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string op_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_op_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.MemChunk.op_name"));
        } else
          goto handle_unusual;
        continue;
      // uint64 freed_at_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.freed_at_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 action_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.action_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool in_use = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.in_use_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 step_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.step_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 address = 1;
  if (this->_internal_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_address(), target);
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  // int64 requested_size = 3;
  if (this->_internal_requested_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_requested_size(), target);
  }

  // int32 bin = 4;
  if (this->_internal_bin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_bin(), target);
  }

  // string op_name = 5;
  if (!this->_internal_op_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op_name().data(), static_cast<int>(this->_internal_op_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemChunk.op_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_op_name(), target);
  }

  // uint64 freed_at_count = 6;
  if (this->_internal_freed_at_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_freed_at_count(), target);
  }

  // uint64 action_count = 7;
  if (this->_internal_action_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_action_count(), target);
  }

  // bool in_use = 8;
  if (this->_internal_in_use() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_in_use(), target);
  }

  // uint64 step_id = 9;
  if (this->_internal_step_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_step_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemChunk)
  return target;
}

size_t MemChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string op_name = 5;
  if (!this->_internal_op_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_name());
  }

  // uint64 address = 1;
  if (this->_internal_address() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_address());
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // int64 requested_size = 3;
  if (this->_internal_requested_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_requested_size());
  }

  // uint64 freed_at_count = 6;
  if (this->_internal_freed_at_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_freed_at_count());
  }

  // int32 bin = 4;
  if (this->_internal_bin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bin());
  }

  // bool in_use = 8;
  if (this->_internal_in_use() != 0) {
    total_size += 1 + 1;
  }

  // uint64 action_count = 7;
  if (this->_internal_action_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_action_count());
  }

  // uint64 step_id = 9;
  if (this->_internal_step_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_step_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MemChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemChunk::GetClassData() const { return &_class_data_; }


void MemChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MemChunk*>(&to_msg);
  auto& from = static_cast<const MemChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemChunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_op_name().empty()) {
    _this->_internal_set_op_name(from._internal_op_name());
  }
  if (from._internal_address() != 0) {
    _this->_internal_set_address(from._internal_address());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_requested_size() != 0) {
    _this->_internal_set_requested_size(from._internal_requested_size());
  }
  if (from._internal_freed_at_count() != 0) {
    _this->_internal_set_freed_at_count(from._internal_freed_at_count());
  }
  if (from._internal_bin() != 0) {
    _this->_internal_set_bin(from._internal_bin());
  }
  if (from._internal_in_use() != 0) {
    _this->_internal_set_in_use(from._internal_in_use());
  }
  if (from._internal_action_count() != 0) {
    _this->_internal_set_action_count(from._internal_action_count());
  }
  if (from._internal_step_id() != 0) {
    _this->_internal_set_step_id(from._internal_step_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemChunk::CopyFrom(const MemChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemChunk::IsInitialized() const {
  return true;
}

void MemChunk::InternalSwap(MemChunk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.op_name_, lhs_arena,
      &other->_impl_.op_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemChunk, _impl_.step_id_)
      + sizeof(MemChunk::_impl_.step_id_)
      - PROTOBUF_FIELD_OFFSET(MemChunk, _impl_.address_)>(
          reinterpret_cast<char*>(&_impl_.address_),
          reinterpret_cast<char*>(&other->_impl_.address_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemChunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto[1]);
}

// ===================================================================

class BinSummary::_Internal {
 public:
};

BinSummary::BinSummary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.BinSummary)
}
BinSummary::BinSummary(const BinSummary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BinSummary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.total_bytes_in_use_){}
    , decltype(_impl_.total_bytes_in_bin_){}
    , decltype(_impl_.total_chunks_in_use_){}
    , decltype(_impl_.total_chunks_in_bin_){}
    , decltype(_impl_.bin_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.total_bytes_in_use_, &from._impl_.total_bytes_in_use_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bin_) -
    reinterpret_cast<char*>(&_impl_.total_bytes_in_use_)) + sizeof(_impl_.bin_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.BinSummary)
}

inline void BinSummary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.total_bytes_in_use_){int64_t{0}}
    , decltype(_impl_.total_bytes_in_bin_){int64_t{0}}
    , decltype(_impl_.total_chunks_in_use_){int64_t{0}}
    , decltype(_impl_.total_chunks_in_bin_){int64_t{0}}
    , decltype(_impl_.bin_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BinSummary::~BinSummary() {
  // @@protoc_insertion_point(destructor:tensorflow.BinSummary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BinSummary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void BinSummary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BinSummary::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.BinSummary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.total_bytes_in_use_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bin_) -
      reinterpret_cast<char*>(&_impl_.total_bytes_in_use_)) + sizeof(_impl_.bin_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BinSummary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 bin = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_bytes_in_use = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.total_bytes_in_use_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_bytes_in_bin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.total_bytes_in_bin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_chunks_in_use = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.total_chunks_in_use_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 total_chunks_in_bin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.total_chunks_in_bin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BinSummary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.BinSummary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bin = 1;
  if (this->_internal_bin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_bin(), target);
  }

  // int64 total_bytes_in_use = 2;
  if (this->_internal_total_bytes_in_use() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_total_bytes_in_use(), target);
  }

  // int64 total_bytes_in_bin = 3;
  if (this->_internal_total_bytes_in_bin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_total_bytes_in_bin(), target);
  }

  // int64 total_chunks_in_use = 4;
  if (this->_internal_total_chunks_in_use() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_total_chunks_in_use(), target);
  }

  // int64 total_chunks_in_bin = 5;
  if (this->_internal_total_chunks_in_bin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_total_chunks_in_bin(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.BinSummary)
  return target;
}

size_t BinSummary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.BinSummary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 total_bytes_in_use = 2;
  if (this->_internal_total_bytes_in_use() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_bytes_in_use());
  }

  // int64 total_bytes_in_bin = 3;
  if (this->_internal_total_bytes_in_bin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_bytes_in_bin());
  }

  // int64 total_chunks_in_use = 4;
  if (this->_internal_total_chunks_in_use() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_chunks_in_use());
  }

  // int64 total_chunks_in_bin = 5;
  if (this->_internal_total_chunks_in_bin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total_chunks_in_bin());
  }

  // int32 bin = 1;
  if (this->_internal_bin() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bin());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BinSummary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BinSummary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BinSummary::GetClassData() const { return &_class_data_; }


void BinSummary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BinSummary*>(&to_msg);
  auto& from = static_cast<const BinSummary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.BinSummary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_total_bytes_in_use() != 0) {
    _this->_internal_set_total_bytes_in_use(from._internal_total_bytes_in_use());
  }
  if (from._internal_total_bytes_in_bin() != 0) {
    _this->_internal_set_total_bytes_in_bin(from._internal_total_bytes_in_bin());
  }
  if (from._internal_total_chunks_in_use() != 0) {
    _this->_internal_set_total_chunks_in_use(from._internal_total_chunks_in_use());
  }
  if (from._internal_total_chunks_in_bin() != 0) {
    _this->_internal_set_total_chunks_in_bin(from._internal_total_chunks_in_bin());
  }
  if (from._internal_bin() != 0) {
    _this->_internal_set_bin(from._internal_bin());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BinSummary::CopyFrom(const BinSummary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.BinSummary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BinSummary::IsInitialized() const {
  return true;
}

void BinSummary::InternalSwap(BinSummary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BinSummary, _impl_.bin_)
      + sizeof(BinSummary::_impl_.bin_)
      - PROTOBUF_FIELD_OFFSET(BinSummary, _impl_.total_bytes_in_use_)>(
          reinterpret_cast<char*>(&_impl_.total_bytes_in_use_),
          reinterpret_cast<char*>(&other->_impl_.total_bytes_in_use_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BinSummary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto[2]);
}

// ===================================================================

class SnapShot::_Internal {
 public:
};

SnapShot::SnapShot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SnapShot)
}
SnapShot::SnapShot(const SnapShot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SnapShot* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.action_count_){}
    , decltype(_impl_.size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.action_count_, &from._impl_.action_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.size_) -
    reinterpret_cast<char*>(&_impl_.action_count_)) + sizeof(_impl_.size_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.SnapShot)
}

inline void SnapShot::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.action_count_){uint64_t{0u}}
    , decltype(_impl_.size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SnapShot::~SnapShot() {
  // @@protoc_insertion_point(destructor:tensorflow.SnapShot)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SnapShot::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SnapShot::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SnapShot::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SnapShot)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.action_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.size_) -
      reinterpret_cast<char*>(&_impl_.action_count_)) + sizeof(_impl_.size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapShot::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 action_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.action_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnapShot::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SnapShot)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 action_count = 1;
  if (this->_internal_action_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_action_count(), target);
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SnapShot)
  return target;
}

size_t SnapShot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SnapShot)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 action_count = 1;
  if (this->_internal_action_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_action_count());
  }

  // int64 size = 2;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapShot::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SnapShot::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapShot::GetClassData() const { return &_class_data_; }


void SnapShot::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SnapShot*>(&to_msg);
  auto& from = static_cast<const SnapShot&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SnapShot)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_action_count() != 0) {
    _this->_internal_set_action_count(from._internal_action_count());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnapShot::CopyFrom(const SnapShot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SnapShot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapShot::IsInitialized() const {
  return true;
}

void SnapShot::InternalSwap(SnapShot* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnapShot, _impl_.size_)
      + sizeof(SnapShot::_impl_.size_)
      - PROTOBUF_FIELD_OFFSET(SnapShot, _impl_.action_count_)>(
          reinterpret_cast<char*>(&_impl_.action_count_),
          reinterpret_cast<char*>(&other->_impl_.action_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapShot::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto[3]);
}

// ===================================================================

class MemoryDump::_Internal {
 public:
  static const ::tensorflow::MemAllocatorStats& stats(const MemoryDump* msg);
};

const ::tensorflow::MemAllocatorStats&
MemoryDump::_Internal::stats(const MemoryDump* msg) {
  return *msg->_impl_.stats_;
}
MemoryDump::MemoryDump(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryDump)
}
MemoryDump::MemoryDump(const MemoryDump& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MemoryDump* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bin_summary_){from._impl_.bin_summary_}
    , decltype(_impl_.chunk_){from._impl_.chunk_}
    , decltype(_impl_.snap_shot_){from._impl_.snap_shot_}
    , decltype(_impl_.allocator_name_){}
    , decltype(_impl_.stats_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.allocator_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.allocator_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_allocator_name().empty()) {
    _this->_impl_.allocator_name_.Set(from._internal_allocator_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_stats()) {
    _this->_impl_.stats_ = new ::tensorflow::MemAllocatorStats(*from._impl_.stats_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryDump)
}

inline void MemoryDump::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bin_summary_){arena}
    , decltype(_impl_.chunk_){arena}
    , decltype(_impl_.snap_shot_){arena}
    , decltype(_impl_.allocator_name_){}
    , decltype(_impl_.stats_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.allocator_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.allocator_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MemoryDump::~MemoryDump() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryDump)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemoryDump::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bin_summary_.~RepeatedPtrField();
  _impl_.chunk_.~RepeatedPtrField();
  _impl_.snap_shot_.~RepeatedPtrField();
  _impl_.allocator_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.stats_;
}

void MemoryDump::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemoryDump::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryDump)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bin_summary_.Clear();
  _impl_.chunk_.Clear();
  _impl_.snap_shot_.Clear();
  _impl_.allocator_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.stats_ != nullptr) {
    delete _impl_.stats_;
  }
  _impl_.stats_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoryDump::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string allocator_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_allocator_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.MemoryDump.allocator_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.BinSummary bin_summary = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bin_summary(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.MemChunk chunk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_chunk(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.SnapShot snap_shot = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_snap_shot(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.MemAllocatorStats stats = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_stats(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoryDump::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryDump)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string allocator_name = 1;
  if (!this->_internal_allocator_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_allocator_name().data(), static_cast<int>(this->_internal_allocator_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MemoryDump.allocator_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_allocator_name(), target);
  }

  // repeated .tensorflow.BinSummary bin_summary = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bin_summary_size()); i < n; i++) {
    const auto& repfield = this->_internal_bin_summary(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tensorflow.MemChunk chunk = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_chunk_size()); i < n; i++) {
    const auto& repfield = this->_internal_chunk(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tensorflow.SnapShot snap_shot = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_snap_shot_size()); i < n; i++) {
    const auto& repfield = this->_internal_snap_shot(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tensorflow.MemAllocatorStats stats = 5;
  if (this->_internal_has_stats()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::stats(this),
        _Internal::stats(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryDump)
  return target;
}

size_t MemoryDump::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryDump)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.BinSummary bin_summary = 2;
  total_size += 1UL * this->_internal_bin_summary_size();
  for (const auto& msg : this->_impl_.bin_summary_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.MemChunk chunk = 3;
  total_size += 1UL * this->_internal_chunk_size();
  for (const auto& msg : this->_impl_.chunk_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.SnapShot snap_shot = 4;
  total_size += 1UL * this->_internal_snap_shot_size();
  for (const auto& msg : this->_impl_.snap_shot_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string allocator_name = 1;
  if (!this->_internal_allocator_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_allocator_name());
  }

  // .tensorflow.MemAllocatorStats stats = 5;
  if (this->_internal_has_stats()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.stats_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemoryDump::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MemoryDump::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemoryDump::GetClassData() const { return &_class_data_; }


void MemoryDump::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MemoryDump*>(&to_msg);
  auto& from = static_cast<const MemoryDump&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryDump)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bin_summary_.MergeFrom(from._impl_.bin_summary_);
  _this->_impl_.chunk_.MergeFrom(from._impl_.chunk_);
  _this->_impl_.snap_shot_.MergeFrom(from._impl_.snap_shot_);
  if (!from._internal_allocator_name().empty()) {
    _this->_internal_set_allocator_name(from._internal_allocator_name());
  }
  if (from._internal_has_stats()) {
    _this->_internal_mutable_stats()->::tensorflow::MemAllocatorStats::MergeFrom(
        from._internal_stats());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemoryDump::CopyFrom(const MemoryDump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryDump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryDump::IsInitialized() const {
  return true;
}

void MemoryDump::InternalSwap(MemoryDump* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bin_summary_.InternalSwap(&other->_impl_.bin_summary_);
  _impl_.chunk_.InternalSwap(&other->_impl_.chunk_);
  _impl_.snap_shot_.InternalSwap(&other->_impl_.snap_shot_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.allocator_name_, lhs_arena,
      &other->_impl_.allocator_name_, rhs_arena
  );
  swap(_impl_.stats_, other->_impl_.stats_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryDump::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fbfc_5fmemory_5fmap_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::MemAllocatorStats*
Arena::CreateMaybeMessage< ::tensorflow::MemAllocatorStats >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MemAllocatorStats >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MemChunk*
Arena::CreateMaybeMessage< ::tensorflow::MemChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MemChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::BinSummary*
Arena::CreateMaybeMessage< ::tensorflow::BinSummary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::BinSummary >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SnapShot*
Arena::CreateMaybeMessage< ::tensorflow::SnapShot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SnapShot >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MemoryDump*
Arena::CreateMaybeMessage< ::tensorflow::MemoryDump >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MemoryDump >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
