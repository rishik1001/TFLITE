// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tsl/protobuf/coordination_service.proto

#include "tsl/protobuf/coordination_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR CoordinatedTask::CoordinatedTask(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.job_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.task_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CoordinatedTaskDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoordinatedTaskDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoordinatedTaskDefaultTypeInternal() {}
  union {
    CoordinatedTask _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoordinatedTaskDefaultTypeInternal _CoordinatedTask_default_instance_;
PROTOBUF_CONSTEXPR CoordinationServiceError::CoordinationServiceError(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_task_)*/nullptr
  , /*decltype(_impl_.is_reported_error_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CoordinationServiceErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoordinationServiceErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoordinationServiceErrorDefaultTypeInternal() {}
  union {
    CoordinationServiceError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoordinationServiceErrorDefaultTypeInternal _CoordinationServiceError_default_instance_;
PROTOBUF_CONSTEXPR CoordinatedTaskStateInfo::CoordinatedTaskStateInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.task_)*/nullptr
  , /*decltype(_impl_.error_payload_)*/nullptr
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.error_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CoordinatedTaskStateInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoordinatedTaskStateInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoordinatedTaskStateInfoDefaultTypeInternal() {}
  union {
    CoordinatedTaskStateInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoordinatedTaskStateInfoDefaultTypeInternal _CoordinatedTaskStateInfo_default_instance_;
PROTOBUF_CONSTEXPR DeviceInfo::DeviceInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceInfoDefaultTypeInternal() {}
  union {
    DeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
PROTOBUF_CONSTEXPR RegisterTaskRequest::RegisterTaskRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_task_)*/nullptr
  , /*decltype(_impl_.incarnation_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterTaskRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterTaskRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterTaskRequestDefaultTypeInternal() {}
  union {
    RegisterTaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterTaskRequestDefaultTypeInternal _RegisterTaskRequest_default_instance_;
PROTOBUF_CONSTEXPR RegisterTaskResponse::RegisterTaskResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.leader_incarnation_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterTaskResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterTaskResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterTaskResponseDefaultTypeInternal() {}
  union {
    RegisterTaskResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterTaskResponseDefaultTypeInternal _RegisterTaskResponse_default_instance_;
PROTOBUF_CONSTEXPR HeartbeatRequest::HeartbeatRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_task_)*/nullptr
  , /*decltype(_impl_.incarnation_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartbeatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatRequestDefaultTypeInternal() {}
  union {
    HeartbeatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatRequestDefaultTypeInternal _HeartbeatRequest_default_instance_;
PROTOBUF_CONSTEXPR HeartbeatResponse::HeartbeatResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.leader_incarnation_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HeartbeatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeartbeatResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeartbeatResponseDefaultTypeInternal() {}
  union {
    HeartbeatResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeartbeatResponseDefaultTypeInternal _HeartbeatResponse_default_instance_;
PROTOBUF_CONSTEXPR WaitForAllTasksRequest::WaitForAllTasksRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_task_)*/nullptr
  , /*decltype(_impl_.device_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WaitForAllTasksRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitForAllTasksRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitForAllTasksRequestDefaultTypeInternal() {}
  union {
    WaitForAllTasksRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitForAllTasksRequestDefaultTypeInternal _WaitForAllTasksRequest_default_instance_;
PROTOBUF_CONSTEXPR WaitForAllTasksResponse::WaitForAllTasksResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_info_)*/nullptr
  , /*decltype(_impl_.leader_incarnation_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WaitForAllTasksResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitForAllTasksResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitForAllTasksResponseDefaultTypeInternal() {}
  union {
    WaitForAllTasksResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitForAllTasksResponseDefaultTypeInternal _WaitForAllTasksResponse_default_instance_;
PROTOBUF_CONSTEXPR ShutdownTaskRequest::ShutdownTaskRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_task_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShutdownTaskRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShutdownTaskRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShutdownTaskRequestDefaultTypeInternal() {}
  union {
    ShutdownTaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShutdownTaskRequestDefaultTypeInternal _ShutdownTaskRequest_default_instance_;
PROTOBUF_CONSTEXPR ShutdownTaskResponse::ShutdownTaskResponse(
    ::_pbi::ConstantInitialized) {}
struct ShutdownTaskResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShutdownTaskResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShutdownTaskResponseDefaultTypeInternal() {}
  union {
    ShutdownTaskResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShutdownTaskResponseDefaultTypeInternal _ShutdownTaskResponse_default_instance_;
PROTOBUF_CONSTEXPR ResetTaskRequest::ResetTaskRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_task_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResetTaskRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResetTaskRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResetTaskRequestDefaultTypeInternal() {}
  union {
    ResetTaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResetTaskRequestDefaultTypeInternal _ResetTaskRequest_default_instance_;
PROTOBUF_CONSTEXPR ResetTaskResponse::ResetTaskResponse(
    ::_pbi::ConstantInitialized) {}
struct ResetTaskResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResetTaskResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResetTaskResponseDefaultTypeInternal() {}
  union {
    ResetTaskResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResetTaskResponseDefaultTypeInternal _ResetTaskResponse_default_instance_;
PROTOBUF_CONSTEXPR ReportErrorToTaskRequest::ReportErrorToTaskRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_payload_)*/nullptr
  , /*decltype(_impl_.error_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReportErrorToTaskRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportErrorToTaskRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportErrorToTaskRequestDefaultTypeInternal() {}
  union {
    ReportErrorToTaskRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportErrorToTaskRequestDefaultTypeInternal _ReportErrorToTaskRequest_default_instance_;
PROTOBUF_CONSTEXPR ReportErrorToTaskResponse::ReportErrorToTaskResponse(
    ::_pbi::ConstantInitialized) {}
struct ReportErrorToTaskResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportErrorToTaskResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportErrorToTaskResponseDefaultTypeInternal() {}
  union {
    ReportErrorToTaskResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportErrorToTaskResponseDefaultTypeInternal _ReportErrorToTaskResponse_default_instance_;
PROTOBUF_CONSTEXPR ReportErrorToServiceRequest::ReportErrorToServiceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_origin_)*/nullptr
  , /*decltype(_impl_.error_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ReportErrorToServiceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportErrorToServiceRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportErrorToServiceRequestDefaultTypeInternal() {}
  union {
    ReportErrorToServiceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportErrorToServiceRequestDefaultTypeInternal _ReportErrorToServiceRequest_default_instance_;
PROTOBUF_CONSTEXPR ReportErrorToServiceResponse::ReportErrorToServiceResponse(
    ::_pbi::ConstantInitialized) {}
struct ReportErrorToServiceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ReportErrorToServiceResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ReportErrorToServiceResponseDefaultTypeInternal() {}
  union {
    ReportErrorToServiceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ReportErrorToServiceResponseDefaultTypeInternal _ReportErrorToServiceResponse_default_instance_;
PROTOBUF_CONSTEXPR GetTaskStateRequest::GetTaskStateRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_task_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTaskStateRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTaskStateRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTaskStateRequestDefaultTypeInternal() {}
  union {
    GetTaskStateRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTaskStateRequestDefaultTypeInternal _GetTaskStateRequest_default_instance_;
PROTOBUF_CONSTEXPR GetTaskStateResponse::GetTaskStateResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.task_state_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetTaskStateResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetTaskStateResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetTaskStateResponseDefaultTypeInternal() {}
  union {
    GetTaskStateResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetTaskStateResponseDefaultTypeInternal _GetTaskStateResponse_default_instance_;
PROTOBUF_CONSTEXPR KeyValueEntry::KeyValueEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeyValueEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeyValueEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeyValueEntryDefaultTypeInternal() {}
  union {
    KeyValueEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeyValueEntryDefaultTypeInternal _KeyValueEntry_default_instance_;
PROTOBUF_CONSTEXPR InsertKeyValueRequest::InsertKeyValueRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kv_)*/nullptr
  , /*decltype(_impl_.allow_overwrite_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InsertKeyValueRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertKeyValueRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertKeyValueRequestDefaultTypeInternal() {}
  union {
    InsertKeyValueRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertKeyValueRequestDefaultTypeInternal _InsertKeyValueRequest_default_instance_;
PROTOBUF_CONSTEXPR InsertKeyValueResponse::InsertKeyValueResponse(
    ::_pbi::ConstantInitialized) {}
struct InsertKeyValueResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InsertKeyValueResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InsertKeyValueResponseDefaultTypeInternal() {}
  union {
    InsertKeyValueResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InsertKeyValueResponseDefaultTypeInternal _InsertKeyValueResponse_default_instance_;
PROTOBUF_CONSTEXPR GetKeyValueRequest::GetKeyValueRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetKeyValueRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetKeyValueRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetKeyValueRequestDefaultTypeInternal() {}
  union {
    GetKeyValueRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetKeyValueRequestDefaultTypeInternal _GetKeyValueRequest_default_instance_;
PROTOBUF_CONSTEXPR GetKeyValueResponse::GetKeyValueResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kv_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetKeyValueResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetKeyValueResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetKeyValueResponseDefaultTypeInternal() {}
  union {
    GetKeyValueResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetKeyValueResponseDefaultTypeInternal _GetKeyValueResponse_default_instance_;
PROTOBUF_CONSTEXPR TryGetKeyValueRequest::TryGetKeyValueRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TryGetKeyValueRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TryGetKeyValueRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TryGetKeyValueRequestDefaultTypeInternal() {}
  union {
    TryGetKeyValueRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TryGetKeyValueRequestDefaultTypeInternal _TryGetKeyValueRequest_default_instance_;
PROTOBUF_CONSTEXPR TryGetKeyValueResponse::TryGetKeyValueResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kv_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TryGetKeyValueResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TryGetKeyValueResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TryGetKeyValueResponseDefaultTypeInternal() {}
  union {
    TryGetKeyValueResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TryGetKeyValueResponseDefaultTypeInternal _TryGetKeyValueResponse_default_instance_;
PROTOBUF_CONSTEXPR GetKeyValueDirRequest::GetKeyValueDirRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.directory_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetKeyValueDirRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetKeyValueDirRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetKeyValueDirRequestDefaultTypeInternal() {}
  union {
    GetKeyValueDirRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetKeyValueDirRequestDefaultTypeInternal _GetKeyValueDirRequest_default_instance_;
PROTOBUF_CONSTEXPR GetKeyValueDirResponse::GetKeyValueDirResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kv_)*/{}
  , /*decltype(_impl_.directory_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GetKeyValueDirResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetKeyValueDirResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetKeyValueDirResponseDefaultTypeInternal() {}
  union {
    GetKeyValueDirResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetKeyValueDirResponseDefaultTypeInternal _GetKeyValueDirResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteKeyValueRequest::DeleteKeyValueRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.is_directory_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeleteKeyValueRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteKeyValueRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteKeyValueRequestDefaultTypeInternal() {}
  union {
    DeleteKeyValueRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteKeyValueRequestDefaultTypeInternal _DeleteKeyValueRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteKeyValueResponse::DeleteKeyValueResponse(
    ::_pbi::ConstantInitialized) {}
struct DeleteKeyValueResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteKeyValueResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteKeyValueResponseDefaultTypeInternal() {}
  union {
    DeleteKeyValueResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteKeyValueResponseDefaultTypeInternal _DeleteKeyValueResponse_default_instance_;
PROTOBUF_CONSTEXPR BarrierRequest::BarrierRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tasks_)*/{}
  , /*decltype(_impl_.barrier_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_task_)*/nullptr
  , /*decltype(_impl_.barrier_timeout_in_ms_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BarrierRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BarrierRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BarrierRequestDefaultTypeInternal() {}
  union {
    BarrierRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BarrierRequestDefaultTypeInternal _BarrierRequest_default_instance_;
PROTOBUF_CONSTEXPR BarrierResponse::BarrierResponse(
    ::_pbi::ConstantInitialized) {}
struct BarrierResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BarrierResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BarrierResponseDefaultTypeInternal() {}
  union {
    BarrierResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BarrierResponseDefaultTypeInternal _BarrierResponse_default_instance_;
PROTOBUF_CONSTEXPR CancelBarrierRequest::CancelBarrierRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.barrier_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_task_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CancelBarrierRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelBarrierRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelBarrierRequestDefaultTypeInternal() {}
  union {
    CancelBarrierRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelBarrierRequestDefaultTypeInternal _CancelBarrierRequest_default_instance_;
PROTOBUF_CONSTEXPR CancelBarrierResponse::CancelBarrierResponse(
    ::_pbi::ConstantInitialized) {}
struct CancelBarrierResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CancelBarrierResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CancelBarrierResponseDefaultTypeInternal() {}
  union {
    CancelBarrierResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CancelBarrierResponseDefaultTypeInternal _CancelBarrierResponse_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[35];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tsl_2fprotobuf_2fcoordination_5fservice_2eproto = nullptr;

const uint32_t TableStruct_tsl_2fprotobuf_2fcoordination_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinatedTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinatedTask, _impl_.job_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinatedTask, _impl_.task_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceError, _impl_.is_reported_error_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceError, _impl_.source_task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinatedTaskStateInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinatedTaskStateInfo, _impl_.task_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinatedTaskStateInfo, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinatedTaskStateInfo, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinatedTaskStateInfo, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinatedTaskStateInfo, _impl_.error_payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceInfo, _impl_.device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RegisterTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RegisterTaskRequest, _impl_.incarnation_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RegisterTaskRequest, _impl_.source_task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RegisterTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RegisterTaskResponse, _impl_.leader_incarnation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::HeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::HeartbeatRequest, _impl_.incarnation_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::HeartbeatRequest, _impl_.source_task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::HeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::HeartbeatResponse, _impl_.leader_incarnation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::WaitForAllTasksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::WaitForAllTasksRequest, _impl_.source_task_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WaitForAllTasksRequest, _impl_.device_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::WaitForAllTasksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::WaitForAllTasksResponse, _impl_.leader_incarnation_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WaitForAllTasksResponse, _impl_.device_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ShutdownTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ShutdownTaskRequest, _impl_.source_task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ShutdownTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ResetTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ResetTaskRequest, _impl_.source_task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ResetTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReportErrorToTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReportErrorToTaskRequest, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReportErrorToTaskRequest, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReportErrorToTaskRequest, _impl_.error_payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReportErrorToTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReportErrorToServiceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReportErrorToServiceRequest, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReportErrorToServiceRequest, _impl_.error_message_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReportErrorToServiceRequest, _impl_.error_origin_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ReportErrorToServiceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GetTaskStateRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GetTaskStateRequest, _impl_.source_task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GetTaskStateResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GetTaskStateResponse, _impl_.task_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::KeyValueEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::KeyValueEntry, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::KeyValueEntry, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::InsertKeyValueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::InsertKeyValueRequest, _impl_.kv_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::InsertKeyValueRequest, _impl_.allow_overwrite_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::InsertKeyValueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GetKeyValueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GetKeyValueRequest, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GetKeyValueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GetKeyValueResponse, _impl_.kv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TryGetKeyValueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TryGetKeyValueRequest, _impl_.key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TryGetKeyValueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TryGetKeyValueResponse, _impl_.kv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GetKeyValueDirRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GetKeyValueDirRequest, _impl_.directory_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GetKeyValueDirResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GetKeyValueDirResponse, _impl_.directory_key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GetKeyValueDirResponse, _impl_.kv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeleteKeyValueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeleteKeyValueRequest, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeleteKeyValueRequest, _impl_.is_directory_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeleteKeyValueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BarrierRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BarrierRequest, _impl_.barrier_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BarrierRequest, _impl_.barrier_timeout_in_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BarrierRequest, _impl_.tasks_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BarrierRequest, _impl_.source_task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BarrierResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CancelBarrierRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CancelBarrierRequest, _impl_.barrier_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CancelBarrierRequest, _impl_.source_task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CancelBarrierResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::CoordinatedTask)},
  { 8, -1, -1, sizeof(::tensorflow::CoordinationServiceError)},
  { 16, -1, -1, sizeof(::tensorflow::CoordinatedTaskStateInfo)},
  { 27, -1, -1, sizeof(::tensorflow::DeviceInfo)},
  { 34, -1, -1, sizeof(::tensorflow::RegisterTaskRequest)},
  { 42, -1, -1, sizeof(::tensorflow::RegisterTaskResponse)},
  { 49, -1, -1, sizeof(::tensorflow::HeartbeatRequest)},
  { 57, -1, -1, sizeof(::tensorflow::HeartbeatResponse)},
  { 64, -1, -1, sizeof(::tensorflow::WaitForAllTasksRequest)},
  { 72, -1, -1, sizeof(::tensorflow::WaitForAllTasksResponse)},
  { 80, -1, -1, sizeof(::tensorflow::ShutdownTaskRequest)},
  { 87, -1, -1, sizeof(::tensorflow::ShutdownTaskResponse)},
  { 93, -1, -1, sizeof(::tensorflow::ResetTaskRequest)},
  { 100, -1, -1, sizeof(::tensorflow::ResetTaskResponse)},
  { 106, -1, -1, sizeof(::tensorflow::ReportErrorToTaskRequest)},
  { 115, -1, -1, sizeof(::tensorflow::ReportErrorToTaskResponse)},
  { 121, -1, -1, sizeof(::tensorflow::ReportErrorToServiceRequest)},
  { 130, -1, -1, sizeof(::tensorflow::ReportErrorToServiceResponse)},
  { 136, -1, -1, sizeof(::tensorflow::GetTaskStateRequest)},
  { 143, -1, -1, sizeof(::tensorflow::GetTaskStateResponse)},
  { 150, -1, -1, sizeof(::tensorflow::KeyValueEntry)},
  { 158, -1, -1, sizeof(::tensorflow::InsertKeyValueRequest)},
  { 166, -1, -1, sizeof(::tensorflow::InsertKeyValueResponse)},
  { 172, -1, -1, sizeof(::tensorflow::GetKeyValueRequest)},
  { 179, -1, -1, sizeof(::tensorflow::GetKeyValueResponse)},
  { 186, -1, -1, sizeof(::tensorflow::TryGetKeyValueRequest)},
  { 193, -1, -1, sizeof(::tensorflow::TryGetKeyValueResponse)},
  { 200, -1, -1, sizeof(::tensorflow::GetKeyValueDirRequest)},
  { 207, -1, -1, sizeof(::tensorflow::GetKeyValueDirResponse)},
  { 215, -1, -1, sizeof(::tensorflow::DeleteKeyValueRequest)},
  { 223, -1, -1, sizeof(::tensorflow::DeleteKeyValueResponse)},
  { 229, -1, -1, sizeof(::tensorflow::BarrierRequest)},
  { 239, -1, -1, sizeof(::tensorflow::BarrierResponse)},
  { 245, -1, -1, sizeof(::tensorflow::CancelBarrierRequest)},
  { 253, -1, -1, sizeof(::tensorflow::CancelBarrierResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_CoordinatedTask_default_instance_._instance,
  &::tensorflow::_CoordinationServiceError_default_instance_._instance,
  &::tensorflow::_CoordinatedTaskStateInfo_default_instance_._instance,
  &::tensorflow::_DeviceInfo_default_instance_._instance,
  &::tensorflow::_RegisterTaskRequest_default_instance_._instance,
  &::tensorflow::_RegisterTaskResponse_default_instance_._instance,
  &::tensorflow::_HeartbeatRequest_default_instance_._instance,
  &::tensorflow::_HeartbeatResponse_default_instance_._instance,
  &::tensorflow::_WaitForAllTasksRequest_default_instance_._instance,
  &::tensorflow::_WaitForAllTasksResponse_default_instance_._instance,
  &::tensorflow::_ShutdownTaskRequest_default_instance_._instance,
  &::tensorflow::_ShutdownTaskResponse_default_instance_._instance,
  &::tensorflow::_ResetTaskRequest_default_instance_._instance,
  &::tensorflow::_ResetTaskResponse_default_instance_._instance,
  &::tensorflow::_ReportErrorToTaskRequest_default_instance_._instance,
  &::tensorflow::_ReportErrorToTaskResponse_default_instance_._instance,
  &::tensorflow::_ReportErrorToServiceRequest_default_instance_._instance,
  &::tensorflow::_ReportErrorToServiceResponse_default_instance_._instance,
  &::tensorflow::_GetTaskStateRequest_default_instance_._instance,
  &::tensorflow::_GetTaskStateResponse_default_instance_._instance,
  &::tensorflow::_KeyValueEntry_default_instance_._instance,
  &::tensorflow::_InsertKeyValueRequest_default_instance_._instance,
  &::tensorflow::_InsertKeyValueResponse_default_instance_._instance,
  &::tensorflow::_GetKeyValueRequest_default_instance_._instance,
  &::tensorflow::_GetKeyValueResponse_default_instance_._instance,
  &::tensorflow::_TryGetKeyValueRequest_default_instance_._instance,
  &::tensorflow::_TryGetKeyValueResponse_default_instance_._instance,
  &::tensorflow::_GetKeyValueDirRequest_default_instance_._instance,
  &::tensorflow::_GetKeyValueDirResponse_default_instance_._instance,
  &::tensorflow::_DeleteKeyValueRequest_default_instance_._instance,
  &::tensorflow::_DeleteKeyValueResponse_default_instance_._instance,
  &::tensorflow::_BarrierRequest_default_instance_._instance,
  &::tensorflow::_BarrierResponse_default_instance_._instance,
  &::tensorflow::_CancelBarrierRequest_default_instance_._instance,
  &::tensorflow::_CancelBarrierResponse_default_instance_._instance,
};

const char descriptor_table_protodef_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'tsl/protobuf/coordination_service.prot"
  "o\022\ntensorflow\032\031google/protobuf/any.proto"
  "\"4\n\017CoordinatedTask\022\020\n\010job_name\030\001 \001(\t\022\017\n"
  "\007task_id\030\002 \001(\005\"s\n\030CoordinationServiceErr"
  "or\022\031\n\021is_reported_error\030\003 \001(\010\0220\n\013source_"
  "task\030\004 \001(\0132\033.tensorflow.CoordinatedTaskJ"
  "\004\010\001\020\002J\004\010\002\020\003\"\336\001\n\030CoordinatedTaskStateInfo"
  "\022)\n\004task\030\001 \001(\0132\033.tensorflow.CoordinatedT"
  "ask\022/\n\005state\030\002 \001(\0162 .tensorflow.Coordina"
  "tedTaskState\022\022\n\nerror_code\030\003 \001(\005\022\025\n\rerro"
  "r_message\030\004 \001(\t\022;\n\rerror_payload\030\005 \001(\0132$"
  ".tensorflow.CoordinationServiceError\"2\n\n"
  "DeviceInfo\022$\n\006device\030\001 \003(\0132\024.google.prot"
  "obuf.Any\"n\n\023RegisterTaskRequest\022\023\n\013incar"
  "nation\030\003 \001(\006\0220\n\013source_task\030\005 \001(\0132\033.tens"
  "orflow.CoordinatedTaskJ\004\010\001\020\002J\004\010\002\020\003J\004\010\004\020\005"
  "\"2\n\024RegisterTaskResponse\022\032\n\022leader_incar"
  "nation\030\001 \001(\006\"e\n\020HeartbeatRequest\022\023\n\013inca"
  "rnation\030\003 \001(\006\0220\n\013source_task\030\004 \001(\0132\033.ten"
  "sorflow.CoordinatedTaskJ\004\010\001\020\002J\004\010\002\020\003\"/\n\021H"
  "eartbeatResponse\022\032\n\022leader_incarnation\030\001"
  " \001(\006\"\217\001\n\026WaitForAllTasksRequest\0220\n\013sourc"
  "e_task\030\005 \001(\0132\033.tensorflow.CoordinatedTas"
  "k\022+\n\013device_info\030\006 \001(\0132\026.tensorflow.Devi"
  "ceInfoJ\004\010\001\020\002J\004\010\002\020\003J\004\010\003\020\004J\004\010\004\020\005\"n\n\027WaitFo"
  "rAllTasksResponse\022\032\n\022leader_incarnation\030"
  "\001 \001(\006\022+\n\013device_info\030\004 \001(\0132\026.tensorflow."
  "DeviceInfoJ\004\010\002\020\003J\004\010\003\020\004\"G\n\023ShutdownTaskRe"
  "quest\0220\n\013source_task\030\001 \001(\0132\033.tensorflow."
  "CoordinatedTask\"\026\n\024ShutdownTaskResponse\""
  "D\n\020ResetTaskRequest\0220\n\013source_task\030\001 \001(\013"
  "2\033.tensorflow.CoordinatedTask\"\023\n\021ResetTa"
  "skResponse\"\216\001\n\030ReportErrorToTaskRequest\022"
  "\022\n\nerror_code\030\001 \001(\005\022\025\n\rerror_message\030\002 \001"
  "(\t\022;\n\rerror_payload\030\005 \001(\0132$.tensorflow.C"
  "oordinationServiceErrorJ\004\010\003\020\004J\004\010\004\020\005\"\033\n\031R"
  "eportErrorToTaskResponse\"\207\001\n\033ReportError"
  "ToServiceRequest\022\022\n\nerror_code\030\001 \001(\005\022\025\n\r"
  "error_message\030\002 \001(\t\0221\n\014error_origin\030\005 \001("
  "\0132\033.tensorflow.CoordinatedTaskJ\004\010\003\020\004J\004\010\004"
  "\020\005\"\036\n\034ReportErrorToServiceResponse\"G\n\023Ge"
  "tTaskStateRequest\0220\n\013source_task\030\001 \003(\0132\033"
  ".tensorflow.CoordinatedTask\"P\n\024GetTaskSt"
  "ateResponse\0228\n\ntask_state\030\001 \003(\0132$.tensor"
  "flow.CoordinatedTaskStateInfo\"+\n\rKeyValu"
  "eEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\014\"W\n\025In"
  "sertKeyValueRequest\022%\n\002kv\030\001 \001(\0132\031.tensor"
  "flow.KeyValueEntry\022\027\n\017allow_overwrite\030\002 "
  "\001(\010\"\030\n\026InsertKeyValueResponse\"!\n\022GetKeyV"
  "alueRequest\022\013\n\003key\030\001 \001(\t\"<\n\023GetKeyValueR"
  "esponse\022%\n\002kv\030\001 \001(\0132\031.tensorflow.KeyValu"
  "eEntry\"$\n\025TryGetKeyValueRequest\022\013\n\003key\030\001"
  " \001(\t\"\?\n\026TryGetKeyValueResponse\022%\n\002kv\030\001 \001"
  "(\0132\031.tensorflow.KeyValueEntry\".\n\025GetKeyV"
  "alueDirRequest\022\025\n\rdirectory_key\030\001 \001(\t\"V\n"
  "\026GetKeyValueDirResponse\022\025\n\rdirectory_key"
  "\030\001 \001(\t\022%\n\002kv\030\002 \003(\0132\031.tensorflow.KeyValue"
  "Entry\":\n\025DeleteKeyValueRequest\022\013\n\003key\030\001 "
  "\001(\t\022\024\n\014is_directory\030\002 \001(\010\"\030\n\026DeleteKeyVa"
  "lueResponse\"\241\001\n\016BarrierRequest\022\022\n\nbarrie"
  "r_id\030\001 \001(\t\022\035\n\025barrier_timeout_in_ms\030\002 \001("
  "\003\022*\n\005tasks\030\003 \003(\0132\033.tensorflow.Coordinate"
  "dTask\0220\n\013source_task\030\004 \001(\0132\033.tensorflow."
  "CoordinatedTask\"\021\n\017BarrierResponse\"\\\n\024Ca"
  "ncelBarrierRequest\022\022\n\nbarrier_id\030\001 \001(\t\0220"
  "\n\013source_task\030\002 \001(\0132\033.tensorflow.Coordin"
  "atedTask\"\027\n\025CancelBarrierResponse*\230\001\n\024Co"
  "ordinatedTaskState\022\031\n\025TASKSTATE_UNSPECIF"
  "IED\020\000\022\033\n\027TASKSTATE_UNINITIALIZED\020\001\022\032\n\026TA"
  "SKSTATE_DISCONNECTED\020\002\022\027\n\023TASKSTATE_CONN"
  "ECTED\020\003\022\023\n\017TASKSTATE_ERROR\020\0042\247\n\n\023Coordin"
  "ationService\022S\n\014RegisterTask\022\037.tensorflo"
  "w.RegisterTaskRequest\032 .tensorflow.Regis"
  "terTaskResponse\"\000\022J\n\tHeartbeat\022\034.tensorf"
  "low.HeartbeatRequest\032\035.tensorflow.Heartb"
  "eatResponse\"\000\022Z\n\017WaitForAllTasks\022\".tenso"
  "rflow.WaitForAllTasksRequest\032#.tensorflo"
  "w.WaitForAllTasksResponse\022S\n\014ShutdownTas"
  "k\022\037.tensorflow.ShutdownTaskRequest\032 .ten"
  "sorflow.ShutdownTaskResponse\"\000\022H\n\tResetT"
  "ask\022\034.tensorflow.ResetTaskRequest\032\035.tens"
  "orflow.ResetTaskResponse\022`\n\021ReportErrorT"
  "oTask\022$.tensorflow.ReportErrorToTaskRequ"
  "est\032%.tensorflow.ReportErrorToTaskRespon"
  "se\022i\n\024ReportErrorToService\022\'.tensorflow."
  "ReportErrorToServiceRequest\032(.tensorflow"
  ".ReportErrorToServiceResponse\022Q\n\014GetTask"
  "State\022\037.tensorflow.GetTaskStateRequest\032 "
  ".tensorflow.GetTaskStateResponse\022Y\n\016Inse"
  "rtKeyValue\022!.tensorflow.InsertKeyValueRe"
  "quest\032\".tensorflow.InsertKeyValueRespons"
  "e\"\000\022P\n\013GetKeyValue\022\036.tensorflow.GetKeyVa"
  "lueRequest\032\037.tensorflow.GetKeyValueRespo"
  "nse\"\000\022W\n\016TryGetKeyValue\022!.tensorflow.Try"
  "GetKeyValueRequest\032\".tensorflow.TryGetKe"
  "yValueResponse\022Y\n\016GetKeyValueDir\022!.tenso"
  "rflow.GetKeyValueDirRequest\032\".tensorflow"
  ".GetKeyValueDirResponse\"\000\022W\n\016DeleteKeyVa"
  "lue\022!.tensorflow.DeleteKeyValueRequest\032\""
  ".tensorflow.DeleteKeyValueResponse\022D\n\007Ba"
  "rrier\022\032.tensorflow.BarrierRequest\032\033.tens"
  "orflow.BarrierResponse\"\000\022T\n\rCancelBarrie"
  "r\022 .tensorflow.CancelBarrierRequest\032!.te"
  "nsorflow.CancelBarrierResponseBWZUgithub"
  ".com/tensorflow/tensorflow/tensorflow/go"
  "/core/protobuf/for_core_protos_go_protob"
  "\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
};
static ::_pbi::once_flag descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto = {
    false, false, 4247, descriptor_table_protodef_tsl_2fprotobuf_2fcoordination_5fservice_2eproto,
    "tsl/protobuf/coordination_service.proto",
    &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once, descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_deps, 1, 35,
    schemas, file_default_instances, TableStruct_tsl_2fprotobuf_2fcoordination_5fservice_2eproto::offsets,
    file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto, file_level_enum_descriptors_tsl_2fprotobuf_2fcoordination_5fservice_2eproto,
    file_level_service_descriptors_tsl_2fprotobuf_2fcoordination_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter() {
  return &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tsl_2fprotobuf_2fcoordination_5fservice_2eproto(&descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CoordinatedTaskState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto);
  return file_level_enum_descriptors_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[0];
}
bool CoordinatedTaskState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class CoordinatedTask::_Internal {
 public:
};

CoordinatedTask::CoordinatedTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CoordinatedTask)
}
CoordinatedTask::CoordinatedTask(const CoordinatedTask& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CoordinatedTask* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.job_name_){}
    , decltype(_impl_.task_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.job_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_job_name().empty()) {
    _this->_impl_.job_name_.Set(from._internal_job_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.task_id_ = from._impl_.task_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.CoordinatedTask)
}

inline void CoordinatedTask::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.job_name_){}
    , decltype(_impl_.task_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.job_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.job_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CoordinatedTask::~CoordinatedTask() {
  // @@protoc_insertion_point(destructor:tensorflow.CoordinatedTask)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CoordinatedTask::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.job_name_.Destroy();
}

void CoordinatedTask::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CoordinatedTask::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CoordinatedTask)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.job_name_.ClearToEmpty();
  _impl_.task_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoordinatedTask::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string job_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_job_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.CoordinatedTask.job_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 task_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.task_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CoordinatedTask::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CoordinatedTask)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string job_name = 1;
  if (!this->_internal_job_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_job_name().data(), static_cast<int>(this->_internal_job_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CoordinatedTask.job_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_job_name(), target);
  }

  // int32 task_id = 2;
  if (this->_internal_task_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_task_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CoordinatedTask)
  return target;
}

size_t CoordinatedTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CoordinatedTask)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string job_name = 1;
  if (!this->_internal_job_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_job_name());
  }

  // int32 task_id = 2;
  if (this->_internal_task_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_task_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoordinatedTask::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CoordinatedTask::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoordinatedTask::GetClassData() const { return &_class_data_; }


void CoordinatedTask::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CoordinatedTask*>(&to_msg);
  auto& from = static_cast<const CoordinatedTask&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CoordinatedTask)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_job_name().empty()) {
    _this->_internal_set_job_name(from._internal_job_name());
  }
  if (from._internal_task_id() != 0) {
    _this->_internal_set_task_id(from._internal_task_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoordinatedTask::CopyFrom(const CoordinatedTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CoordinatedTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinatedTask::IsInitialized() const {
  return true;
}

void CoordinatedTask::InternalSwap(CoordinatedTask* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.job_name_, lhs_arena,
      &other->_impl_.job_name_, rhs_arena
  );
  swap(_impl_.task_id_, other->_impl_.task_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoordinatedTask::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[0]);
}

// ===================================================================

class CoordinationServiceError::_Internal {
 public:
  static const ::tensorflow::CoordinatedTask& source_task(const CoordinationServiceError* msg);
};

const ::tensorflow::CoordinatedTask&
CoordinationServiceError::_Internal::source_task(const CoordinationServiceError* msg) {
  return *msg->_impl_.source_task_;
}
CoordinationServiceError::CoordinationServiceError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CoordinationServiceError)
}
CoordinationServiceError::CoordinationServiceError(const CoordinationServiceError& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CoordinationServiceError* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_task_){nullptr}
    , decltype(_impl_.is_reported_error_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_task()) {
    _this->_impl_.source_task_ = new ::tensorflow::CoordinatedTask(*from._impl_.source_task_);
  }
  _this->_impl_.is_reported_error_ = from._impl_.is_reported_error_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.CoordinationServiceError)
}

inline void CoordinationServiceError::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_task_){nullptr}
    , decltype(_impl_.is_reported_error_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CoordinationServiceError::~CoordinationServiceError() {
  // @@protoc_insertion_point(destructor:tensorflow.CoordinationServiceError)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CoordinationServiceError::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.source_task_;
}

void CoordinationServiceError::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CoordinationServiceError::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CoordinationServiceError)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.source_task_ != nullptr) {
    delete _impl_.source_task_;
  }
  _impl_.source_task_ = nullptr;
  _impl_.is_reported_error_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoordinationServiceError::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_reported_error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.is_reported_error_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.CoordinatedTask source_task = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CoordinationServiceError::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CoordinationServiceError)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_reported_error = 3;
  if (this->_internal_is_reported_error() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_is_reported_error(), target);
  }

  // .tensorflow.CoordinatedTask source_task = 4;
  if (this->_internal_has_source_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::source_task(this),
        _Internal::source_task(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CoordinationServiceError)
  return target;
}

size_t CoordinationServiceError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CoordinationServiceError)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.CoordinatedTask source_task = 4;
  if (this->_internal_has_source_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_task_);
  }

  // bool is_reported_error = 3;
  if (this->_internal_is_reported_error() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoordinationServiceError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CoordinationServiceError::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoordinationServiceError::GetClassData() const { return &_class_data_; }


void CoordinationServiceError::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CoordinationServiceError*>(&to_msg);
  auto& from = static_cast<const CoordinationServiceError&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CoordinationServiceError)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source_task()) {
    _this->_internal_mutable_source_task()->::tensorflow::CoordinatedTask::MergeFrom(
        from._internal_source_task());
  }
  if (from._internal_is_reported_error() != 0) {
    _this->_internal_set_is_reported_error(from._internal_is_reported_error());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoordinationServiceError::CopyFrom(const CoordinationServiceError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CoordinationServiceError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinationServiceError::IsInitialized() const {
  return true;
}

void CoordinationServiceError::InternalSwap(CoordinationServiceError* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CoordinationServiceError, _impl_.is_reported_error_)
      + sizeof(CoordinationServiceError::_impl_.is_reported_error_)
      - PROTOBUF_FIELD_OFFSET(CoordinationServiceError, _impl_.source_task_)>(
          reinterpret_cast<char*>(&_impl_.source_task_),
          reinterpret_cast<char*>(&other->_impl_.source_task_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CoordinationServiceError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[1]);
}

// ===================================================================

class CoordinatedTaskStateInfo::_Internal {
 public:
  static const ::tensorflow::CoordinatedTask& task(const CoordinatedTaskStateInfo* msg);
  static const ::tensorflow::CoordinationServiceError& error_payload(const CoordinatedTaskStateInfo* msg);
};

const ::tensorflow::CoordinatedTask&
CoordinatedTaskStateInfo::_Internal::task(const CoordinatedTaskStateInfo* msg) {
  return *msg->_impl_.task_;
}
const ::tensorflow::CoordinationServiceError&
CoordinatedTaskStateInfo::_Internal::error_payload(const CoordinatedTaskStateInfo* msg) {
  return *msg->_impl_.error_payload_;
}
CoordinatedTaskStateInfo::CoordinatedTaskStateInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CoordinatedTaskStateInfo)
}
CoordinatedTaskStateInfo::CoordinatedTaskStateInfo(const CoordinatedTaskStateInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CoordinatedTaskStateInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.task_){nullptr}
    , decltype(_impl_.error_payload_){nullptr}
    , decltype(_impl_.state_){}
    , decltype(_impl_.error_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_task()) {
    _this->_impl_.task_ = new ::tensorflow::CoordinatedTask(*from._impl_.task_);
  }
  if (from._internal_has_error_payload()) {
    _this->_impl_.error_payload_ = new ::tensorflow::CoordinationServiceError(*from._impl_.error_payload_);
  }
  ::memcpy(&_impl_.state_, &from._impl_.state_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.error_code_) -
    reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.error_code_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.CoordinatedTaskStateInfo)
}

inline void CoordinatedTaskStateInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.task_){nullptr}
    , decltype(_impl_.error_payload_){nullptr}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.error_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CoordinatedTaskStateInfo::~CoordinatedTaskStateInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.CoordinatedTaskStateInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CoordinatedTaskStateInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.task_;
  if (this != internal_default_instance()) delete _impl_.error_payload_;
}

void CoordinatedTaskStateInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CoordinatedTaskStateInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CoordinatedTaskStateInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.task_ != nullptr) {
    delete _impl_.task_;
  }
  _impl_.task_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.error_payload_ != nullptr) {
    delete _impl_.error_payload_;
  }
  _impl_.error_payload_ = nullptr;
  ::memset(&_impl_.state_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.error_code_) -
      reinterpret_cast<char*>(&_impl_.state_)) + sizeof(_impl_.error_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoordinatedTaskStateInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.CoordinatedTask task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.CoordinatedTaskState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::tensorflow::CoordinatedTaskState>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 error_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.CoordinatedTaskStateInfo.error_message"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.CoordinationServiceError error_payload = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_error_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CoordinatedTaskStateInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CoordinatedTaskStateInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.CoordinatedTask task = 1;
  if (this->_internal_has_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::task(this),
        _Internal::task(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.CoordinatedTaskState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // int32 error_code = 3;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_error_code(), target);
  }

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CoordinatedTaskStateInfo.error_message");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_error_message(), target);
  }

  // .tensorflow.CoordinationServiceError error_payload = 5;
  if (this->_internal_has_error_payload()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::error_payload(this),
        _Internal::error_payload(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CoordinatedTaskStateInfo)
  return target;
}

size_t CoordinatedTaskStateInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CoordinatedTaskStateInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 4;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .tensorflow.CoordinatedTask task = 1;
  if (this->_internal_has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.task_);
  }

  // .tensorflow.CoordinationServiceError error_payload = 5;
  if (this->_internal_has_error_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_payload_);
  }

  // .tensorflow.CoordinatedTaskState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_state());
  }

  // int32 error_code = 3;
  if (this->_internal_error_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoordinatedTaskStateInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CoordinatedTaskStateInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoordinatedTaskStateInfo::GetClassData() const { return &_class_data_; }


void CoordinatedTaskStateInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CoordinatedTaskStateInfo*>(&to_msg);
  auto& from = static_cast<const CoordinatedTaskStateInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CoordinatedTaskStateInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_task()) {
    _this->_internal_mutable_task()->::tensorflow::CoordinatedTask::MergeFrom(
        from._internal_task());
  }
  if (from._internal_has_error_payload()) {
    _this->_internal_mutable_error_payload()->::tensorflow::CoordinationServiceError::MergeFrom(
        from._internal_error_payload());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoordinatedTaskStateInfo::CopyFrom(const CoordinatedTaskStateInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CoordinatedTaskStateInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinatedTaskStateInfo::IsInitialized() const {
  return true;
}

void CoordinatedTaskStateInfo::InternalSwap(CoordinatedTaskStateInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CoordinatedTaskStateInfo, _impl_.error_code_)
      + sizeof(CoordinatedTaskStateInfo::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(CoordinatedTaskStateInfo, _impl_.task_)>(
          reinterpret_cast<char*>(&_impl_.task_),
          reinterpret_cast<char*>(&other->_impl_.task_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CoordinatedTaskStateInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[2]);
}

// ===================================================================

class DeviceInfo::_Internal {
 public:
};

void DeviceInfo::clear_device() {
  _impl_.device_.Clear();
}
DeviceInfo::DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){from._impl_.device_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeviceInfo)
}

inline void DeviceInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.DeviceInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_.~RepeatedPtrField();
}

void DeviceInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeviceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .google.protobuf.Any device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_device(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeviceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any device = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_device_size()); i < n; i++) {
    const auto& repfield = this->_internal_device(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeviceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any device = 1;
  total_size += 1UL * this->_internal_device_size();
  for (const auto& msg : this->_impl_.device_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceInfo::GetClassData() const { return &_class_data_; }


void DeviceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceInfo*>(&to_msg);
  auto& from = static_cast<const DeviceInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.device_.MergeFrom(from._impl_.device_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.device_.InternalSwap(&other->_impl_.device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[3]);
}

// ===================================================================

class RegisterTaskRequest::_Internal {
 public:
  static const ::tensorflow::CoordinatedTask& source_task(const RegisterTaskRequest* msg);
};

const ::tensorflow::CoordinatedTask&
RegisterTaskRequest::_Internal::source_task(const RegisterTaskRequest* msg) {
  return *msg->_impl_.source_task_;
}
RegisterTaskRequest::RegisterTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RegisterTaskRequest)
}
RegisterTaskRequest::RegisterTaskRequest(const RegisterTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterTaskRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_task_){nullptr}
    , decltype(_impl_.incarnation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_task()) {
    _this->_impl_.source_task_ = new ::tensorflow::CoordinatedTask(*from._impl_.source_task_);
  }
  _this->_impl_.incarnation_ = from._impl_.incarnation_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.RegisterTaskRequest)
}

inline void RegisterTaskRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_task_){nullptr}
    , decltype(_impl_.incarnation_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegisterTaskRequest::~RegisterTaskRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.RegisterTaskRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.source_task_;
}

void RegisterTaskRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RegisterTaskRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.source_task_ != nullptr) {
    delete _impl_.source_task_;
  }
  _impl_.source_task_ = nullptr;
  _impl_.incarnation_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterTaskRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 incarnation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.incarnation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.CoordinatedTask source_task = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterTaskRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RegisterTaskRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 incarnation = 3;
  if (this->_internal_incarnation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_incarnation(), target);
  }

  // .tensorflow.CoordinatedTask source_task = 5;
  if (this->_internal_has_source_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::source_task(this),
        _Internal::source_task(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RegisterTaskRequest)
  return target;
}

size_t RegisterTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RegisterTaskRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.CoordinatedTask source_task = 5;
  if (this->_internal_has_source_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_task_);
  }

  // fixed64 incarnation = 3;
  if (this->_internal_incarnation() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterTaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterTaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterTaskRequest::GetClassData() const { return &_class_data_; }


void RegisterTaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterTaskRequest*>(&to_msg);
  auto& from = static_cast<const RegisterTaskRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RegisterTaskRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source_task()) {
    _this->_internal_mutable_source_task()->::tensorflow::CoordinatedTask::MergeFrom(
        from._internal_source_task());
  }
  if (from._internal_incarnation() != 0) {
    _this->_internal_set_incarnation(from._internal_incarnation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterTaskRequest::CopyFrom(const RegisterTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RegisterTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterTaskRequest::IsInitialized() const {
  return true;
}

void RegisterTaskRequest::InternalSwap(RegisterTaskRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterTaskRequest, _impl_.incarnation_)
      + sizeof(RegisterTaskRequest::_impl_.incarnation_)
      - PROTOBUF_FIELD_OFFSET(RegisterTaskRequest, _impl_.source_task_)>(
          reinterpret_cast<char*>(&_impl_.source_task_),
          reinterpret_cast<char*>(&other->_impl_.source_task_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterTaskRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[4]);
}

// ===================================================================

class RegisterTaskResponse::_Internal {
 public:
};

RegisterTaskResponse::RegisterTaskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RegisterTaskResponse)
}
RegisterTaskResponse::RegisterTaskResponse(const RegisterTaskResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterTaskResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_incarnation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.leader_incarnation_ = from._impl_.leader_incarnation_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.RegisterTaskResponse)
}

inline void RegisterTaskResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_incarnation_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegisterTaskResponse::~RegisterTaskResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.RegisterTaskResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterTaskResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RegisterTaskResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RegisterTaskResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.leader_incarnation_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterTaskResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 leader_incarnation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.leader_incarnation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterTaskResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RegisterTaskResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 leader_incarnation = 1;
  if (this->_internal_leader_incarnation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_leader_incarnation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RegisterTaskResponse)
  return target;
}

size_t RegisterTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RegisterTaskResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 leader_incarnation = 1;
  if (this->_internal_leader_incarnation() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterTaskResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterTaskResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterTaskResponse::GetClassData() const { return &_class_data_; }


void RegisterTaskResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterTaskResponse*>(&to_msg);
  auto& from = static_cast<const RegisterTaskResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RegisterTaskResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_leader_incarnation() != 0) {
    _this->_internal_set_leader_incarnation(from._internal_leader_incarnation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterTaskResponse::CopyFrom(const RegisterTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RegisterTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterTaskResponse::IsInitialized() const {
  return true;
}

void RegisterTaskResponse::InternalSwap(RegisterTaskResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.leader_incarnation_, other->_impl_.leader_incarnation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterTaskResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[5]);
}

// ===================================================================

class HeartbeatRequest::_Internal {
 public:
  static const ::tensorflow::CoordinatedTask& source_task(const HeartbeatRequest* msg);
};

const ::tensorflow::CoordinatedTask&
HeartbeatRequest::_Internal::source_task(const HeartbeatRequest* msg) {
  return *msg->_impl_.source_task_;
}
HeartbeatRequest::HeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.HeartbeatRequest)
}
HeartbeatRequest::HeartbeatRequest(const HeartbeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartbeatRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_task_){nullptr}
    , decltype(_impl_.incarnation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_task()) {
    _this->_impl_.source_task_ = new ::tensorflow::CoordinatedTask(*from._impl_.source_task_);
  }
  _this->_impl_.incarnation_ = from._impl_.incarnation_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.HeartbeatRequest)
}

inline void HeartbeatRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_task_){nullptr}
    , decltype(_impl_.incarnation_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeartbeatRequest::~HeartbeatRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.HeartbeatRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartbeatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.source_task_;
}

void HeartbeatRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.HeartbeatRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.source_task_ != nullptr) {
    delete _impl_.source_task_;
  }
  _impl_.source_task_ = nullptr;
  _impl_.incarnation_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 incarnation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.incarnation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.CoordinatedTask source_task = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartbeatRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.HeartbeatRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 incarnation = 3;
  if (this->_internal_incarnation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_incarnation(), target);
  }

  // .tensorflow.CoordinatedTask source_task = 4;
  if (this->_internal_has_source_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::source_task(this),
        _Internal::source_task(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.HeartbeatRequest)
  return target;
}

size_t HeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.HeartbeatRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.CoordinatedTask source_task = 4;
  if (this->_internal_has_source_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_task_);
  }

  // fixed64 incarnation = 3;
  if (this->_internal_incarnation() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartbeatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartbeatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartbeatRequest::GetClassData() const { return &_class_data_; }


void HeartbeatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartbeatRequest*>(&to_msg);
  auto& from = static_cast<const HeartbeatRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.HeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source_task()) {
    _this->_internal_mutable_source_task()->::tensorflow::CoordinatedTask::MergeFrom(
        from._internal_source_task());
  }
  if (from._internal_incarnation() != 0) {
    _this->_internal_set_incarnation(from._internal_incarnation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartbeatRequest::CopyFrom(const HeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.HeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatRequest::IsInitialized() const {
  return true;
}

void HeartbeatRequest::InternalSwap(HeartbeatRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeartbeatRequest, _impl_.incarnation_)
      + sizeof(HeartbeatRequest::_impl_.incarnation_)
      - PROTOBUF_FIELD_OFFSET(HeartbeatRequest, _impl_.source_task_)>(
          reinterpret_cast<char*>(&_impl_.source_task_),
          reinterpret_cast<char*>(&other->_impl_.source_task_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[6]);
}

// ===================================================================

class HeartbeatResponse::_Internal {
 public:
};

HeartbeatResponse::HeartbeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.HeartbeatResponse)
}
HeartbeatResponse::HeartbeatResponse(const HeartbeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HeartbeatResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_incarnation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.leader_incarnation_ = from._impl_.leader_incarnation_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.HeartbeatResponse)
}

inline void HeartbeatResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.leader_incarnation_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HeartbeatResponse::~HeartbeatResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.HeartbeatResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeartbeatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeartbeatResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.HeartbeatResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.leader_incarnation_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartbeatResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 leader_incarnation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.leader_incarnation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeartbeatResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.HeartbeatResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 leader_incarnation = 1;
  if (this->_internal_leader_incarnation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_leader_incarnation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.HeartbeatResponse)
  return target;
}

size_t HeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.HeartbeatResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 leader_incarnation = 1;
  if (this->_internal_leader_incarnation() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeartbeatResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HeartbeatResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeartbeatResponse::GetClassData() const { return &_class_data_; }


void HeartbeatResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HeartbeatResponse*>(&to_msg);
  auto& from = static_cast<const HeartbeatResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.HeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_leader_incarnation() != 0) {
    _this->_internal_set_leader_incarnation(from._internal_leader_incarnation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeartbeatResponse::CopyFrom(const HeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.HeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartbeatResponse::IsInitialized() const {
  return true;
}

void HeartbeatResponse::InternalSwap(HeartbeatResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.leader_incarnation_, other->_impl_.leader_incarnation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartbeatResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[7]);
}

// ===================================================================

class WaitForAllTasksRequest::_Internal {
 public:
  static const ::tensorflow::CoordinatedTask& source_task(const WaitForAllTasksRequest* msg);
  static const ::tensorflow::DeviceInfo& device_info(const WaitForAllTasksRequest* msg);
};

const ::tensorflow::CoordinatedTask&
WaitForAllTasksRequest::_Internal::source_task(const WaitForAllTasksRequest* msg) {
  return *msg->_impl_.source_task_;
}
const ::tensorflow::DeviceInfo&
WaitForAllTasksRequest::_Internal::device_info(const WaitForAllTasksRequest* msg) {
  return *msg->_impl_.device_info_;
}
WaitForAllTasksRequest::WaitForAllTasksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.WaitForAllTasksRequest)
}
WaitForAllTasksRequest::WaitForAllTasksRequest(const WaitForAllTasksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WaitForAllTasksRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_task_){nullptr}
    , decltype(_impl_.device_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_task()) {
    _this->_impl_.source_task_ = new ::tensorflow::CoordinatedTask(*from._impl_.source_task_);
  }
  if (from._internal_has_device_info()) {
    _this->_impl_.device_info_ = new ::tensorflow::DeviceInfo(*from._impl_.device_info_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.WaitForAllTasksRequest)
}

inline void WaitForAllTasksRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_task_){nullptr}
    , decltype(_impl_.device_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WaitForAllTasksRequest::~WaitForAllTasksRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.WaitForAllTasksRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WaitForAllTasksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.source_task_;
  if (this != internal_default_instance()) delete _impl_.device_info_;
}

void WaitForAllTasksRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WaitForAllTasksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.WaitForAllTasksRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.source_task_ != nullptr) {
    delete _impl_.source_task_;
  }
  _impl_.source_task_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.device_info_ != nullptr) {
    delete _impl_.device_info_;
  }
  _impl_.device_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaitForAllTasksRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.CoordinatedTask source_task = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.DeviceInfo device_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WaitForAllTasksRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.WaitForAllTasksRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.CoordinatedTask source_task = 5;
  if (this->_internal_has_source_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::source_task(this),
        _Internal::source_task(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.DeviceInfo device_info = 6;
  if (this->_internal_has_device_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::device_info(this),
        _Internal::device_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.WaitForAllTasksRequest)
  return target;
}

size_t WaitForAllTasksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.WaitForAllTasksRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.CoordinatedTask source_task = 5;
  if (this->_internal_has_source_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_task_);
  }

  // .tensorflow.DeviceInfo device_info = 6;
  if (this->_internal_has_device_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.device_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaitForAllTasksRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WaitForAllTasksRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaitForAllTasksRequest::GetClassData() const { return &_class_data_; }


void WaitForAllTasksRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WaitForAllTasksRequest*>(&to_msg);
  auto& from = static_cast<const WaitForAllTasksRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.WaitForAllTasksRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source_task()) {
    _this->_internal_mutable_source_task()->::tensorflow::CoordinatedTask::MergeFrom(
        from._internal_source_task());
  }
  if (from._internal_has_device_info()) {
    _this->_internal_mutable_device_info()->::tensorflow::DeviceInfo::MergeFrom(
        from._internal_device_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WaitForAllTasksRequest::CopyFrom(const WaitForAllTasksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.WaitForAllTasksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitForAllTasksRequest::IsInitialized() const {
  return true;
}

void WaitForAllTasksRequest::InternalSwap(WaitForAllTasksRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WaitForAllTasksRequest, _impl_.device_info_)
      + sizeof(WaitForAllTasksRequest::_impl_.device_info_)
      - PROTOBUF_FIELD_OFFSET(WaitForAllTasksRequest, _impl_.source_task_)>(
          reinterpret_cast<char*>(&_impl_.source_task_),
          reinterpret_cast<char*>(&other->_impl_.source_task_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitForAllTasksRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[8]);
}

// ===================================================================

class WaitForAllTasksResponse::_Internal {
 public:
  static const ::tensorflow::DeviceInfo& device_info(const WaitForAllTasksResponse* msg);
};

const ::tensorflow::DeviceInfo&
WaitForAllTasksResponse::_Internal::device_info(const WaitForAllTasksResponse* msg) {
  return *msg->_impl_.device_info_;
}
WaitForAllTasksResponse::WaitForAllTasksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.WaitForAllTasksResponse)
}
WaitForAllTasksResponse::WaitForAllTasksResponse(const WaitForAllTasksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WaitForAllTasksResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_info_){nullptr}
    , decltype(_impl_.leader_incarnation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_device_info()) {
    _this->_impl_.device_info_ = new ::tensorflow::DeviceInfo(*from._impl_.device_info_);
  }
  _this->_impl_.leader_incarnation_ = from._impl_.leader_incarnation_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.WaitForAllTasksResponse)
}

inline void WaitForAllTasksResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_info_){nullptr}
    , decltype(_impl_.leader_incarnation_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WaitForAllTasksResponse::~WaitForAllTasksResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.WaitForAllTasksResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WaitForAllTasksResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.device_info_;
}

void WaitForAllTasksResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WaitForAllTasksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.WaitForAllTasksResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.device_info_ != nullptr) {
    delete _impl_.device_info_;
  }
  _impl_.device_info_ = nullptr;
  _impl_.leader_incarnation_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaitForAllTasksResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 leader_incarnation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.leader_incarnation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.DeviceInfo device_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WaitForAllTasksResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.WaitForAllTasksResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 leader_incarnation = 1;
  if (this->_internal_leader_incarnation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_leader_incarnation(), target);
  }

  // .tensorflow.DeviceInfo device_info = 4;
  if (this->_internal_has_device_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::device_info(this),
        _Internal::device_info(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.WaitForAllTasksResponse)
  return target;
}

size_t WaitForAllTasksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.WaitForAllTasksResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.DeviceInfo device_info = 4;
  if (this->_internal_has_device_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.device_info_);
  }

  // fixed64 leader_incarnation = 1;
  if (this->_internal_leader_incarnation() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaitForAllTasksResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WaitForAllTasksResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaitForAllTasksResponse::GetClassData() const { return &_class_data_; }


void WaitForAllTasksResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WaitForAllTasksResponse*>(&to_msg);
  auto& from = static_cast<const WaitForAllTasksResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.WaitForAllTasksResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_device_info()) {
    _this->_internal_mutable_device_info()->::tensorflow::DeviceInfo::MergeFrom(
        from._internal_device_info());
  }
  if (from._internal_leader_incarnation() != 0) {
    _this->_internal_set_leader_incarnation(from._internal_leader_incarnation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WaitForAllTasksResponse::CopyFrom(const WaitForAllTasksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.WaitForAllTasksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitForAllTasksResponse::IsInitialized() const {
  return true;
}

void WaitForAllTasksResponse::InternalSwap(WaitForAllTasksResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WaitForAllTasksResponse, _impl_.leader_incarnation_)
      + sizeof(WaitForAllTasksResponse::_impl_.leader_incarnation_)
      - PROTOBUF_FIELD_OFFSET(WaitForAllTasksResponse, _impl_.device_info_)>(
          reinterpret_cast<char*>(&_impl_.device_info_),
          reinterpret_cast<char*>(&other->_impl_.device_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitForAllTasksResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[9]);
}

// ===================================================================

class ShutdownTaskRequest::_Internal {
 public:
  static const ::tensorflow::CoordinatedTask& source_task(const ShutdownTaskRequest* msg);
};

const ::tensorflow::CoordinatedTask&
ShutdownTaskRequest::_Internal::source_task(const ShutdownTaskRequest* msg) {
  return *msg->_impl_.source_task_;
}
ShutdownTaskRequest::ShutdownTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ShutdownTaskRequest)
}
ShutdownTaskRequest::ShutdownTaskRequest(const ShutdownTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ShutdownTaskRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_task_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_task()) {
    _this->_impl_.source_task_ = new ::tensorflow::CoordinatedTask(*from._impl_.source_task_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.ShutdownTaskRequest)
}

inline void ShutdownTaskRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_task_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShutdownTaskRequest::~ShutdownTaskRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.ShutdownTaskRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShutdownTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.source_task_;
}

void ShutdownTaskRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShutdownTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ShutdownTaskRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.source_task_ != nullptr) {
    delete _impl_.source_task_;
  }
  _impl_.source_task_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShutdownTaskRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.CoordinatedTask source_task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ShutdownTaskRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ShutdownTaskRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.CoordinatedTask source_task = 1;
  if (this->_internal_has_source_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source_task(this),
        _Internal::source_task(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ShutdownTaskRequest)
  return target;
}

size_t ShutdownTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ShutdownTaskRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.CoordinatedTask source_task = 1;
  if (this->_internal_has_source_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_task_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShutdownTaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ShutdownTaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShutdownTaskRequest::GetClassData() const { return &_class_data_; }


void ShutdownTaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ShutdownTaskRequest*>(&to_msg);
  auto& from = static_cast<const ShutdownTaskRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ShutdownTaskRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source_task()) {
    _this->_internal_mutable_source_task()->::tensorflow::CoordinatedTask::MergeFrom(
        from._internal_source_task());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ShutdownTaskRequest::CopyFrom(const ShutdownTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ShutdownTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShutdownTaskRequest::IsInitialized() const {
  return true;
}

void ShutdownTaskRequest::InternalSwap(ShutdownTaskRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.source_task_, other->_impl_.source_task_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShutdownTaskRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[10]);
}

// ===================================================================

class ShutdownTaskResponse::_Internal {
 public:
};

ShutdownTaskResponse::ShutdownTaskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tensorflow.ShutdownTaskResponse)
}
ShutdownTaskResponse::ShutdownTaskResponse(const ShutdownTaskResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ShutdownTaskResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ShutdownTaskResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ShutdownTaskResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ShutdownTaskResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ShutdownTaskResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[11]);
}

// ===================================================================

class ResetTaskRequest::_Internal {
 public:
  static const ::tensorflow::CoordinatedTask& source_task(const ResetTaskRequest* msg);
};

const ::tensorflow::CoordinatedTask&
ResetTaskRequest::_Internal::source_task(const ResetTaskRequest* msg) {
  return *msg->_impl_.source_task_;
}
ResetTaskRequest::ResetTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ResetTaskRequest)
}
ResetTaskRequest::ResetTaskRequest(const ResetTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResetTaskRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_task_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_task()) {
    _this->_impl_.source_task_ = new ::tensorflow::CoordinatedTask(*from._impl_.source_task_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.ResetTaskRequest)
}

inline void ResetTaskRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_task_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResetTaskRequest::~ResetTaskRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.ResetTaskRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResetTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.source_task_;
}

void ResetTaskRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResetTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ResetTaskRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.source_task_ != nullptr) {
    delete _impl_.source_task_;
  }
  _impl_.source_task_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResetTaskRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.CoordinatedTask source_task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResetTaskRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ResetTaskRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.CoordinatedTask source_task = 1;
  if (this->_internal_has_source_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::source_task(this),
        _Internal::source_task(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ResetTaskRequest)
  return target;
}

size_t ResetTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ResetTaskRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.CoordinatedTask source_task = 1;
  if (this->_internal_has_source_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_task_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResetTaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResetTaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResetTaskRequest::GetClassData() const { return &_class_data_; }


void ResetTaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResetTaskRequest*>(&to_msg);
  auto& from = static_cast<const ResetTaskRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ResetTaskRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source_task()) {
    _this->_internal_mutable_source_task()->::tensorflow::CoordinatedTask::MergeFrom(
        from._internal_source_task());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResetTaskRequest::CopyFrom(const ResetTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ResetTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetTaskRequest::IsInitialized() const {
  return true;
}

void ResetTaskRequest::InternalSwap(ResetTaskRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.source_task_, other->_impl_.source_task_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResetTaskRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[12]);
}

// ===================================================================

class ResetTaskResponse::_Internal {
 public:
};

ResetTaskResponse::ResetTaskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tensorflow.ResetTaskResponse)
}
ResetTaskResponse::ResetTaskResponse(const ResetTaskResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ResetTaskResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ResetTaskResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResetTaskResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResetTaskResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ResetTaskResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[13]);
}

// ===================================================================

class ReportErrorToTaskRequest::_Internal {
 public:
  static const ::tensorflow::CoordinationServiceError& error_payload(const ReportErrorToTaskRequest* msg);
};

const ::tensorflow::CoordinationServiceError&
ReportErrorToTaskRequest::_Internal::error_payload(const ReportErrorToTaskRequest* msg) {
  return *msg->_impl_.error_payload_;
}
ReportErrorToTaskRequest::ReportErrorToTaskRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ReportErrorToTaskRequest)
}
ReportErrorToTaskRequest::ReportErrorToTaskRequest(const ReportErrorToTaskRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReportErrorToTaskRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.error_payload_){nullptr}
    , decltype(_impl_.error_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_error_payload()) {
    _this->_impl_.error_payload_ = new ::tensorflow::CoordinationServiceError(*from._impl_.error_payload_);
  }
  _this->_impl_.error_code_ = from._impl_.error_code_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.ReportErrorToTaskRequest)
}

inline void ReportErrorToTaskRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.error_payload_){nullptr}
    , decltype(_impl_.error_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReportErrorToTaskRequest::~ReportErrorToTaskRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.ReportErrorToTaskRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReportErrorToTaskRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.error_payload_;
}

void ReportErrorToTaskRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReportErrorToTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ReportErrorToTaskRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.error_payload_ != nullptr) {
    delete _impl_.error_payload_;
  }
  _impl_.error_payload_ = nullptr;
  _impl_.error_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportErrorToTaskRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.ReportErrorToTaskRequest.error_message"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.CoordinationServiceError error_payload = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_error_payload(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReportErrorToTaskRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ReportErrorToTaskRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_code = 1;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_error_code(), target);
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ReportErrorToTaskRequest.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  // .tensorflow.CoordinationServiceError error_payload = 5;
  if (this->_internal_has_error_payload()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::error_payload(this),
        _Internal::error_payload(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ReportErrorToTaskRequest)
  return target;
}

size_t ReportErrorToTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ReportErrorToTaskRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .tensorflow.CoordinationServiceError error_payload = 5;
  if (this->_internal_has_error_payload()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_payload_);
  }

  // int32 error_code = 1;
  if (this->_internal_error_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportErrorToTaskRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReportErrorToTaskRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportErrorToTaskRequest::GetClassData() const { return &_class_data_; }


void ReportErrorToTaskRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReportErrorToTaskRequest*>(&to_msg);
  auto& from = static_cast<const ReportErrorToTaskRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ReportErrorToTaskRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_error_payload()) {
    _this->_internal_mutable_error_payload()->::tensorflow::CoordinationServiceError::MergeFrom(
        from._internal_error_payload());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReportErrorToTaskRequest::CopyFrom(const ReportErrorToTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ReportErrorToTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportErrorToTaskRequest::IsInitialized() const {
  return true;
}

void ReportErrorToTaskRequest::InternalSwap(ReportErrorToTaskRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReportErrorToTaskRequest, _impl_.error_code_)
      + sizeof(ReportErrorToTaskRequest::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(ReportErrorToTaskRequest, _impl_.error_payload_)>(
          reinterpret_cast<char*>(&_impl_.error_payload_),
          reinterpret_cast<char*>(&other->_impl_.error_payload_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportErrorToTaskRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[14]);
}

// ===================================================================

class ReportErrorToTaskResponse::_Internal {
 public:
};

ReportErrorToTaskResponse::ReportErrorToTaskResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tensorflow.ReportErrorToTaskResponse)
}
ReportErrorToTaskResponse::ReportErrorToTaskResponse(const ReportErrorToTaskResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ReportErrorToTaskResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ReportErrorToTaskResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportErrorToTaskResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportErrorToTaskResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReportErrorToTaskResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[15]);
}

// ===================================================================

class ReportErrorToServiceRequest::_Internal {
 public:
  static const ::tensorflow::CoordinatedTask& error_origin(const ReportErrorToServiceRequest* msg);
};

const ::tensorflow::CoordinatedTask&
ReportErrorToServiceRequest::_Internal::error_origin(const ReportErrorToServiceRequest* msg) {
  return *msg->_impl_.error_origin_;
}
ReportErrorToServiceRequest::ReportErrorToServiceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ReportErrorToServiceRequest)
}
ReportErrorToServiceRequest::ReportErrorToServiceRequest(const ReportErrorToServiceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ReportErrorToServiceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.error_origin_){nullptr}
    , decltype(_impl_.error_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_message().empty()) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_error_origin()) {
    _this->_impl_.error_origin_ = new ::tensorflow::CoordinatedTask(*from._impl_.error_origin_);
  }
  _this->_impl_.error_code_ = from._impl_.error_code_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.ReportErrorToServiceRequest)
}

inline void ReportErrorToServiceRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_message_){}
    , decltype(_impl_.error_origin_){nullptr}
    , decltype(_impl_.error_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ReportErrorToServiceRequest::~ReportErrorToServiceRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.ReportErrorToServiceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ReportErrorToServiceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
  if (this != internal_default_instance()) delete _impl_.error_origin_;
}

void ReportErrorToServiceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ReportErrorToServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ReportErrorToServiceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.error_origin_ != nullptr) {
    delete _impl_.error_origin_;
  }
  _impl_.error_origin_ = nullptr;
  _impl_.error_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReportErrorToServiceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 error_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.ReportErrorToServiceRequest.error_message"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.CoordinatedTask error_origin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_error_origin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ReportErrorToServiceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ReportErrorToServiceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 error_code = 1;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_error_code(), target);
  }

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_message().data(), static_cast<int>(this->_internal_error_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ReportErrorToServiceRequest.error_message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error_message(), target);
  }

  // .tensorflow.CoordinatedTask error_origin = 5;
  if (this->_internal_has_error_origin()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::error_origin(this),
        _Internal::error_origin(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ReportErrorToServiceRequest)
  return target;
}

size_t ReportErrorToServiceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ReportErrorToServiceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error_message = 2;
  if (!this->_internal_error_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_message());
  }

  // .tensorflow.CoordinatedTask error_origin = 5;
  if (this->_internal_has_error_origin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.error_origin_);
  }

  // int32 error_code = 1;
  if (this->_internal_error_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportErrorToServiceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ReportErrorToServiceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportErrorToServiceRequest::GetClassData() const { return &_class_data_; }


void ReportErrorToServiceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ReportErrorToServiceRequest*>(&to_msg);
  auto& from = static_cast<const ReportErrorToServiceRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ReportErrorToServiceRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_has_error_origin()) {
    _this->_internal_mutable_error_origin()->::tensorflow::CoordinatedTask::MergeFrom(
        from._internal_error_origin());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ReportErrorToServiceRequest::CopyFrom(const ReportErrorToServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ReportErrorToServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReportErrorToServiceRequest::IsInitialized() const {
  return true;
}

void ReportErrorToServiceRequest::InternalSwap(ReportErrorToServiceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_message_, lhs_arena,
      &other->_impl_.error_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReportErrorToServiceRequest, _impl_.error_code_)
      + sizeof(ReportErrorToServiceRequest::_impl_.error_code_)
      - PROTOBUF_FIELD_OFFSET(ReportErrorToServiceRequest, _impl_.error_origin_)>(
          reinterpret_cast<char*>(&_impl_.error_origin_),
          reinterpret_cast<char*>(&other->_impl_.error_origin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReportErrorToServiceRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[16]);
}

// ===================================================================

class ReportErrorToServiceResponse::_Internal {
 public:
};

ReportErrorToServiceResponse::ReportErrorToServiceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tensorflow.ReportErrorToServiceResponse)
}
ReportErrorToServiceResponse::ReportErrorToServiceResponse(const ReportErrorToServiceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  ReportErrorToServiceResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ReportErrorToServiceResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ReportErrorToServiceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ReportErrorToServiceResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ReportErrorToServiceResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[17]);
}

// ===================================================================

class GetTaskStateRequest::_Internal {
 public:
};

GetTaskStateRequest::GetTaskStateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GetTaskStateRequest)
}
GetTaskStateRequest::GetTaskStateRequest(const GetTaskStateRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTaskStateRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_task_){from._impl_.source_task_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GetTaskStateRequest)
}

inline void GetTaskStateRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_task_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetTaskStateRequest::~GetTaskStateRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.GetTaskStateRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTaskStateRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.source_task_.~RepeatedPtrField();
}

void GetTaskStateRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTaskStateRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GetTaskStateRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.source_task_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTaskStateRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.CoordinatedTask source_task = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_source_task(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTaskStateRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GetTaskStateRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.CoordinatedTask source_task = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_source_task_size()); i < n; i++) {
    const auto& repfield = this->_internal_source_task(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GetTaskStateRequest)
  return target;
}

size_t GetTaskStateRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GetTaskStateRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.CoordinatedTask source_task = 1;
  total_size += 1UL * this->_internal_source_task_size();
  for (const auto& msg : this->_impl_.source_task_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTaskStateRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTaskStateRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTaskStateRequest::GetClassData() const { return &_class_data_; }


void GetTaskStateRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTaskStateRequest*>(&to_msg);
  auto& from = static_cast<const GetTaskStateRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GetTaskStateRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.source_task_.MergeFrom(from._impl_.source_task_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTaskStateRequest::CopyFrom(const GetTaskStateRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GetTaskStateRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTaskStateRequest::IsInitialized() const {
  return true;
}

void GetTaskStateRequest::InternalSwap(GetTaskStateRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.source_task_.InternalSwap(&other->_impl_.source_task_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTaskStateRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[18]);
}

// ===================================================================

class GetTaskStateResponse::_Internal {
 public:
};

GetTaskStateResponse::GetTaskStateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GetTaskStateResponse)
}
GetTaskStateResponse::GetTaskStateResponse(const GetTaskStateResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetTaskStateResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.task_state_){from._impl_.task_state_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GetTaskStateResponse)
}

inline void GetTaskStateResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.task_state_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetTaskStateResponse::~GetTaskStateResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.GetTaskStateResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetTaskStateResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.task_state_.~RepeatedPtrField();
}

void GetTaskStateResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetTaskStateResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GetTaskStateResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.task_state_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTaskStateResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.CoordinatedTaskStateInfo task_state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_task_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetTaskStateResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GetTaskStateResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.CoordinatedTaskStateInfo task_state = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_task_state_size()); i < n; i++) {
    const auto& repfield = this->_internal_task_state(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GetTaskStateResponse)
  return target;
}

size_t GetTaskStateResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GetTaskStateResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.CoordinatedTaskStateInfo task_state = 1;
  total_size += 1UL * this->_internal_task_state_size();
  for (const auto& msg : this->_impl_.task_state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTaskStateResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetTaskStateResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTaskStateResponse::GetClassData() const { return &_class_data_; }


void GetTaskStateResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetTaskStateResponse*>(&to_msg);
  auto& from = static_cast<const GetTaskStateResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GetTaskStateResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.task_state_.MergeFrom(from._impl_.task_state_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTaskStateResponse::CopyFrom(const GetTaskStateResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GetTaskStateResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTaskStateResponse::IsInitialized() const {
  return true;
}

void GetTaskStateResponse::InternalSwap(GetTaskStateResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.task_state_.InternalSwap(&other->_impl_.task_state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTaskStateResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[19]);
}

// ===================================================================

class KeyValueEntry::_Internal {
 public:
};

KeyValueEntry::KeyValueEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.KeyValueEntry)
}
KeyValueEntry::KeyValueEntry(const KeyValueEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeyValueEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    _this->_impl_.value_.Set(from._internal_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.KeyValueEntry)
}

inline void KeyValueEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KeyValueEntry::~KeyValueEntry() {
  // @@protoc_insertion_point(destructor:tensorflow.KeyValueEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeyValueEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  _impl_.value_.Destroy();
}

void KeyValueEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeyValueEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.KeyValueEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeyValueEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.KeyValueEntry.key"));
        } else
          goto handle_unusual;
        continue;
      // bytes value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeyValueEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.KeyValueEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.KeyValueEntry.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.KeyValueEntry)
  return target;
}

size_t KeyValueEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.KeyValueEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // bytes value = 2;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeyValueEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeyValueEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeyValueEntry::GetClassData() const { return &_class_data_; }


void KeyValueEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeyValueEntry*>(&to_msg);
  auto& from = static_cast<const KeyValueEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.KeyValueEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (!from._internal_value().empty()) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeyValueEntry::CopyFrom(const KeyValueEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.KeyValueEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValueEntry::IsInitialized() const {
  return true;
}

void KeyValueEntry::InternalSwap(KeyValueEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.value_, lhs_arena,
      &other->_impl_.value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KeyValueEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[20]);
}

// ===================================================================

class InsertKeyValueRequest::_Internal {
 public:
  static const ::tensorflow::KeyValueEntry& kv(const InsertKeyValueRequest* msg);
};

const ::tensorflow::KeyValueEntry&
InsertKeyValueRequest::_Internal::kv(const InsertKeyValueRequest* msg) {
  return *msg->_impl_.kv_;
}
InsertKeyValueRequest::InsertKeyValueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.InsertKeyValueRequest)
}
InsertKeyValueRequest::InsertKeyValueRequest(const InsertKeyValueRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InsertKeyValueRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kv_){nullptr}
    , decltype(_impl_.allow_overwrite_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kv()) {
    _this->_impl_.kv_ = new ::tensorflow::KeyValueEntry(*from._impl_.kv_);
  }
  _this->_impl_.allow_overwrite_ = from._impl_.allow_overwrite_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.InsertKeyValueRequest)
}

inline void InsertKeyValueRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kv_){nullptr}
    , decltype(_impl_.allow_overwrite_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InsertKeyValueRequest::~InsertKeyValueRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.InsertKeyValueRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InsertKeyValueRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.kv_;
}

void InsertKeyValueRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InsertKeyValueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.InsertKeyValueRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.kv_ != nullptr) {
    delete _impl_.kv_;
  }
  _impl_.kv_ = nullptr;
  _impl_.allow_overwrite_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertKeyValueRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.KeyValueEntry kv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_kv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool allow_overwrite = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.allow_overwrite_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertKeyValueRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.InsertKeyValueRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.KeyValueEntry kv = 1;
  if (this->_internal_has_kv()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::kv(this),
        _Internal::kv(this).GetCachedSize(), target, stream);
  }

  // bool allow_overwrite = 2;
  if (this->_internal_allow_overwrite() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_allow_overwrite(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.InsertKeyValueRequest)
  return target;
}

size_t InsertKeyValueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.InsertKeyValueRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.KeyValueEntry kv = 1;
  if (this->_internal_has_kv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kv_);
  }

  // bool allow_overwrite = 2;
  if (this->_internal_allow_overwrite() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertKeyValueRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InsertKeyValueRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertKeyValueRequest::GetClassData() const { return &_class_data_; }


void InsertKeyValueRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InsertKeyValueRequest*>(&to_msg);
  auto& from = static_cast<const InsertKeyValueRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.InsertKeyValueRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_kv()) {
    _this->_internal_mutable_kv()->::tensorflow::KeyValueEntry::MergeFrom(
        from._internal_kv());
  }
  if (from._internal_allow_overwrite() != 0) {
    _this->_internal_set_allow_overwrite(from._internal_allow_overwrite());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertKeyValueRequest::CopyFrom(const InsertKeyValueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.InsertKeyValueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertKeyValueRequest::IsInitialized() const {
  return true;
}

void InsertKeyValueRequest::InternalSwap(InsertKeyValueRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InsertKeyValueRequest, _impl_.allow_overwrite_)
      + sizeof(InsertKeyValueRequest::_impl_.allow_overwrite_)
      - PROTOBUF_FIELD_OFFSET(InsertKeyValueRequest, _impl_.kv_)>(
          reinterpret_cast<char*>(&_impl_.kv_),
          reinterpret_cast<char*>(&other->_impl_.kv_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertKeyValueRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[21]);
}

// ===================================================================

class InsertKeyValueResponse::_Internal {
 public:
};

InsertKeyValueResponse::InsertKeyValueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tensorflow.InsertKeyValueResponse)
}
InsertKeyValueResponse::InsertKeyValueResponse(const InsertKeyValueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  InsertKeyValueResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.InsertKeyValueResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertKeyValueResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertKeyValueResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata InsertKeyValueResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[22]);
}

// ===================================================================

class GetKeyValueRequest::_Internal {
 public:
};

GetKeyValueRequest::GetKeyValueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GetKeyValueRequest)
}
GetKeyValueRequest::GetKeyValueRequest(const GetKeyValueRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetKeyValueRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.GetKeyValueRequest)
}

inline void GetKeyValueRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetKeyValueRequest::~GetKeyValueRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.GetKeyValueRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetKeyValueRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void GetKeyValueRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetKeyValueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GetKeyValueRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetKeyValueRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.GetKeyValueRequest.key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetKeyValueRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GetKeyValueRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GetKeyValueRequest.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GetKeyValueRequest)
  return target;
}

size_t GetKeyValueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GetKeyValueRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetKeyValueRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetKeyValueRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetKeyValueRequest::GetClassData() const { return &_class_data_; }


void GetKeyValueRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetKeyValueRequest*>(&to_msg);
  auto& from = static_cast<const GetKeyValueRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GetKeyValueRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetKeyValueRequest::CopyFrom(const GetKeyValueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GetKeyValueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetKeyValueRequest::IsInitialized() const {
  return true;
}

void GetKeyValueRequest::InternalSwap(GetKeyValueRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetKeyValueRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[23]);
}

// ===================================================================

class GetKeyValueResponse::_Internal {
 public:
  static const ::tensorflow::KeyValueEntry& kv(const GetKeyValueResponse* msg);
};

const ::tensorflow::KeyValueEntry&
GetKeyValueResponse::_Internal::kv(const GetKeyValueResponse* msg) {
  return *msg->_impl_.kv_;
}
GetKeyValueResponse::GetKeyValueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GetKeyValueResponse)
}
GetKeyValueResponse::GetKeyValueResponse(const GetKeyValueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetKeyValueResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kv_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kv()) {
    _this->_impl_.kv_ = new ::tensorflow::KeyValueEntry(*from._impl_.kv_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.GetKeyValueResponse)
}

inline void GetKeyValueResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kv_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GetKeyValueResponse::~GetKeyValueResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.GetKeyValueResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetKeyValueResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.kv_;
}

void GetKeyValueResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetKeyValueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GetKeyValueResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.kv_ != nullptr) {
    delete _impl_.kv_;
  }
  _impl_.kv_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetKeyValueResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.KeyValueEntry kv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_kv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetKeyValueResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GetKeyValueResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.KeyValueEntry kv = 1;
  if (this->_internal_has_kv()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::kv(this),
        _Internal::kv(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GetKeyValueResponse)
  return target;
}

size_t GetKeyValueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GetKeyValueResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.KeyValueEntry kv = 1;
  if (this->_internal_has_kv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kv_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetKeyValueResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetKeyValueResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetKeyValueResponse::GetClassData() const { return &_class_data_; }


void GetKeyValueResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetKeyValueResponse*>(&to_msg);
  auto& from = static_cast<const GetKeyValueResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GetKeyValueResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_kv()) {
    _this->_internal_mutable_kv()->::tensorflow::KeyValueEntry::MergeFrom(
        from._internal_kv());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetKeyValueResponse::CopyFrom(const GetKeyValueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GetKeyValueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetKeyValueResponse::IsInitialized() const {
  return true;
}

void GetKeyValueResponse::InternalSwap(GetKeyValueResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.kv_, other->_impl_.kv_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetKeyValueResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[24]);
}

// ===================================================================

class TryGetKeyValueRequest::_Internal {
 public:
};

TryGetKeyValueRequest::TryGetKeyValueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TryGetKeyValueRequest)
}
TryGetKeyValueRequest::TryGetKeyValueRequest(const TryGetKeyValueRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TryGetKeyValueRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.TryGetKeyValueRequest)
}

inline void TryGetKeyValueRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TryGetKeyValueRequest::~TryGetKeyValueRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.TryGetKeyValueRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TryGetKeyValueRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void TryGetKeyValueRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TryGetKeyValueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TryGetKeyValueRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TryGetKeyValueRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.TryGetKeyValueRequest.key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TryGetKeyValueRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TryGetKeyValueRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TryGetKeyValueRequest.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TryGetKeyValueRequest)
  return target;
}

size_t TryGetKeyValueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TryGetKeyValueRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TryGetKeyValueRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TryGetKeyValueRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TryGetKeyValueRequest::GetClassData() const { return &_class_data_; }


void TryGetKeyValueRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TryGetKeyValueRequest*>(&to_msg);
  auto& from = static_cast<const TryGetKeyValueRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TryGetKeyValueRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TryGetKeyValueRequest::CopyFrom(const TryGetKeyValueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TryGetKeyValueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryGetKeyValueRequest::IsInitialized() const {
  return true;
}

void TryGetKeyValueRequest::InternalSwap(TryGetKeyValueRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TryGetKeyValueRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[25]);
}

// ===================================================================

class TryGetKeyValueResponse::_Internal {
 public:
  static const ::tensorflow::KeyValueEntry& kv(const TryGetKeyValueResponse* msg);
};

const ::tensorflow::KeyValueEntry&
TryGetKeyValueResponse::_Internal::kv(const TryGetKeyValueResponse* msg) {
  return *msg->_impl_.kv_;
}
TryGetKeyValueResponse::TryGetKeyValueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TryGetKeyValueResponse)
}
TryGetKeyValueResponse::TryGetKeyValueResponse(const TryGetKeyValueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TryGetKeyValueResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kv_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_kv()) {
    _this->_impl_.kv_ = new ::tensorflow::KeyValueEntry(*from._impl_.kv_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.TryGetKeyValueResponse)
}

inline void TryGetKeyValueResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kv_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TryGetKeyValueResponse::~TryGetKeyValueResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.TryGetKeyValueResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TryGetKeyValueResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.kv_;
}

void TryGetKeyValueResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TryGetKeyValueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TryGetKeyValueResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.kv_ != nullptr) {
    delete _impl_.kv_;
  }
  _impl_.kv_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TryGetKeyValueResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.KeyValueEntry kv = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_kv(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TryGetKeyValueResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TryGetKeyValueResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.KeyValueEntry kv = 1;
  if (this->_internal_has_kv()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::kv(this),
        _Internal::kv(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TryGetKeyValueResponse)
  return target;
}

size_t TryGetKeyValueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TryGetKeyValueResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.KeyValueEntry kv = 1;
  if (this->_internal_has_kv()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.kv_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TryGetKeyValueResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TryGetKeyValueResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TryGetKeyValueResponse::GetClassData() const { return &_class_data_; }


void TryGetKeyValueResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TryGetKeyValueResponse*>(&to_msg);
  auto& from = static_cast<const TryGetKeyValueResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TryGetKeyValueResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_kv()) {
    _this->_internal_mutable_kv()->::tensorflow::KeyValueEntry::MergeFrom(
        from._internal_kv());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TryGetKeyValueResponse::CopyFrom(const TryGetKeyValueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TryGetKeyValueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TryGetKeyValueResponse::IsInitialized() const {
  return true;
}

void TryGetKeyValueResponse::InternalSwap(TryGetKeyValueResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.kv_, other->_impl_.kv_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TryGetKeyValueResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[26]);
}

// ===================================================================

class GetKeyValueDirRequest::_Internal {
 public:
};

GetKeyValueDirRequest::GetKeyValueDirRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GetKeyValueDirRequest)
}
GetKeyValueDirRequest::GetKeyValueDirRequest(const GetKeyValueDirRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetKeyValueDirRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.directory_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.directory_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directory_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_directory_key().empty()) {
    _this->_impl_.directory_key_.Set(from._internal_directory_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.GetKeyValueDirRequest)
}

inline void GetKeyValueDirRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.directory_key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.directory_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directory_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetKeyValueDirRequest::~GetKeyValueDirRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.GetKeyValueDirRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetKeyValueDirRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.directory_key_.Destroy();
}

void GetKeyValueDirRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetKeyValueDirRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GetKeyValueDirRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.directory_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetKeyValueDirRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string directory_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_directory_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.GetKeyValueDirRequest.directory_key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetKeyValueDirRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GetKeyValueDirRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string directory_key = 1;
  if (!this->_internal_directory_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_directory_key().data(), static_cast<int>(this->_internal_directory_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GetKeyValueDirRequest.directory_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_directory_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GetKeyValueDirRequest)
  return target;
}

size_t GetKeyValueDirRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GetKeyValueDirRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string directory_key = 1;
  if (!this->_internal_directory_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_directory_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetKeyValueDirRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetKeyValueDirRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetKeyValueDirRequest::GetClassData() const { return &_class_data_; }


void GetKeyValueDirRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetKeyValueDirRequest*>(&to_msg);
  auto& from = static_cast<const GetKeyValueDirRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GetKeyValueDirRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_directory_key().empty()) {
    _this->_internal_set_directory_key(from._internal_directory_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetKeyValueDirRequest::CopyFrom(const GetKeyValueDirRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GetKeyValueDirRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetKeyValueDirRequest::IsInitialized() const {
  return true;
}

void GetKeyValueDirRequest::InternalSwap(GetKeyValueDirRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directory_key_, lhs_arena,
      &other->_impl_.directory_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetKeyValueDirRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[27]);
}

// ===================================================================

class GetKeyValueDirResponse::_Internal {
 public:
};

GetKeyValueDirResponse::GetKeyValueDirResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GetKeyValueDirResponse)
}
GetKeyValueDirResponse::GetKeyValueDirResponse(const GetKeyValueDirResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GetKeyValueDirResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kv_){from._impl_.kv_}
    , decltype(_impl_.directory_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.directory_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directory_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_directory_key().empty()) {
    _this->_impl_.directory_key_.Set(from._internal_directory_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.GetKeyValueDirResponse)
}

inline void GetKeyValueDirResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kv_){arena}
    , decltype(_impl_.directory_key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.directory_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.directory_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetKeyValueDirResponse::~GetKeyValueDirResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.GetKeyValueDirResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetKeyValueDirResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.kv_.~RepeatedPtrField();
  _impl_.directory_key_.Destroy();
}

void GetKeyValueDirResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GetKeyValueDirResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GetKeyValueDirResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.kv_.Clear();
  _impl_.directory_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetKeyValueDirResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string directory_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_directory_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.GetKeyValueDirResponse.directory_key"));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.KeyValueEntry kv = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_kv(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetKeyValueDirResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GetKeyValueDirResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string directory_key = 1;
  if (!this->_internal_directory_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_directory_key().data(), static_cast<int>(this->_internal_directory_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GetKeyValueDirResponse.directory_key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_directory_key(), target);
  }

  // repeated .tensorflow.KeyValueEntry kv = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_kv_size()); i < n; i++) {
    const auto& repfield = this->_internal_kv(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GetKeyValueDirResponse)
  return target;
}

size_t GetKeyValueDirResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GetKeyValueDirResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.KeyValueEntry kv = 2;
  total_size += 1UL * this->_internal_kv_size();
  for (const auto& msg : this->_impl_.kv_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string directory_key = 1;
  if (!this->_internal_directory_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_directory_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetKeyValueDirResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GetKeyValueDirResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetKeyValueDirResponse::GetClassData() const { return &_class_data_; }


void GetKeyValueDirResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GetKeyValueDirResponse*>(&to_msg);
  auto& from = static_cast<const GetKeyValueDirResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GetKeyValueDirResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.kv_.MergeFrom(from._impl_.kv_);
  if (!from._internal_directory_key().empty()) {
    _this->_internal_set_directory_key(from._internal_directory_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetKeyValueDirResponse::CopyFrom(const GetKeyValueDirResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GetKeyValueDirResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetKeyValueDirResponse::IsInitialized() const {
  return true;
}

void GetKeyValueDirResponse::InternalSwap(GetKeyValueDirResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.kv_.InternalSwap(&other->_impl_.kv_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.directory_key_, lhs_arena,
      &other->_impl_.directory_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetKeyValueDirResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[28]);
}

// ===================================================================

class DeleteKeyValueRequest::_Internal {
 public:
};

DeleteKeyValueRequest::DeleteKeyValueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeleteKeyValueRequest)
}
DeleteKeyValueRequest::DeleteKeyValueRequest(const DeleteKeyValueRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeleteKeyValueRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.is_directory_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.is_directory_ = from._impl_.is_directory_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeleteKeyValueRequest)
}

inline void DeleteKeyValueRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.is_directory_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteKeyValueRequest::~DeleteKeyValueRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.DeleteKeyValueRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteKeyValueRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
}

void DeleteKeyValueRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeleteKeyValueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeleteKeyValueRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  _impl_.is_directory_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteKeyValueRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.DeleteKeyValueRequest.key"));
        } else
          goto handle_unusual;
        continue;
      // bool is_directory = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_directory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteKeyValueRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeleteKeyValueRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeleteKeyValueRequest.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // bool is_directory = 2;
  if (this->_internal_is_directory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_directory(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeleteKeyValueRequest)
  return target;
}

size_t DeleteKeyValueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeleteKeyValueRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // bool is_directory = 2;
  if (this->_internal_is_directory() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteKeyValueRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeleteKeyValueRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteKeyValueRequest::GetClassData() const { return &_class_data_; }


void DeleteKeyValueRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeleteKeyValueRequest*>(&to_msg);
  auto& from = static_cast<const DeleteKeyValueRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeleteKeyValueRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_is_directory() != 0) {
    _this->_internal_set_is_directory(from._internal_is_directory());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteKeyValueRequest::CopyFrom(const DeleteKeyValueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeleteKeyValueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteKeyValueRequest::IsInitialized() const {
  return true;
}

void DeleteKeyValueRequest::InternalSwap(DeleteKeyValueRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.is_directory_, other->_impl_.is_directory_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteKeyValueRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[29]);
}

// ===================================================================

class DeleteKeyValueResponse::_Internal {
 public:
};

DeleteKeyValueResponse::DeleteKeyValueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeleteKeyValueResponse)
}
DeleteKeyValueResponse::DeleteKeyValueResponse(const DeleteKeyValueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  DeleteKeyValueResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeleteKeyValueResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteKeyValueResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteKeyValueResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata DeleteKeyValueResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[30]);
}

// ===================================================================

class BarrierRequest::_Internal {
 public:
  static const ::tensorflow::CoordinatedTask& source_task(const BarrierRequest* msg);
};

const ::tensorflow::CoordinatedTask&
BarrierRequest::_Internal::source_task(const BarrierRequest* msg) {
  return *msg->_impl_.source_task_;
}
BarrierRequest::BarrierRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.BarrierRequest)
}
BarrierRequest::BarrierRequest(const BarrierRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BarrierRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){from._impl_.tasks_}
    , decltype(_impl_.barrier_id_){}
    , decltype(_impl_.source_task_){nullptr}
    , decltype(_impl_.barrier_timeout_in_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.barrier_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.barrier_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_barrier_id().empty()) {
    _this->_impl_.barrier_id_.Set(from._internal_barrier_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_source_task()) {
    _this->_impl_.source_task_ = new ::tensorflow::CoordinatedTask(*from._impl_.source_task_);
  }
  _this->_impl_.barrier_timeout_in_ms_ = from._impl_.barrier_timeout_in_ms_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.BarrierRequest)
}

inline void BarrierRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tasks_){arena}
    , decltype(_impl_.barrier_id_){}
    , decltype(_impl_.source_task_){nullptr}
    , decltype(_impl_.barrier_timeout_in_ms_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.barrier_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.barrier_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BarrierRequest::~BarrierRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.BarrierRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BarrierRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tasks_.~RepeatedPtrField();
  _impl_.barrier_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.source_task_;
}

void BarrierRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BarrierRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.BarrierRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tasks_.Clear();
  _impl_.barrier_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.source_task_ != nullptr) {
    delete _impl_.source_task_;
  }
  _impl_.source_task_ = nullptr;
  _impl_.barrier_timeout_in_ms_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BarrierRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string barrier_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_barrier_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.BarrierRequest.barrier_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 barrier_timeout_in_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.barrier_timeout_in_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.CoordinatedTask tasks = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.CoordinatedTask source_task = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BarrierRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.BarrierRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string barrier_id = 1;
  if (!this->_internal_barrier_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_barrier_id().data(), static_cast<int>(this->_internal_barrier_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.BarrierRequest.barrier_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_barrier_id(), target);
  }

  // int64 barrier_timeout_in_ms = 2;
  if (this->_internal_barrier_timeout_in_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_barrier_timeout_in_ms(), target);
  }

  // repeated .tensorflow.CoordinatedTask tasks = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tasks_size()); i < n; i++) {
    const auto& repfield = this->_internal_tasks(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tensorflow.CoordinatedTask source_task = 4;
  if (this->_internal_has_source_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::source_task(this),
        _Internal::source_task(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.BarrierRequest)
  return target;
}

size_t BarrierRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.BarrierRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.CoordinatedTask tasks = 3;
  total_size += 1UL * this->_internal_tasks_size();
  for (const auto& msg : this->_impl_.tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string barrier_id = 1;
  if (!this->_internal_barrier_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_barrier_id());
  }

  // .tensorflow.CoordinatedTask source_task = 4;
  if (this->_internal_has_source_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_task_);
  }

  // int64 barrier_timeout_in_ms = 2;
  if (this->_internal_barrier_timeout_in_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_barrier_timeout_in_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BarrierRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BarrierRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BarrierRequest::GetClassData() const { return &_class_data_; }


void BarrierRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BarrierRequest*>(&to_msg);
  auto& from = static_cast<const BarrierRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.BarrierRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tasks_.MergeFrom(from._impl_.tasks_);
  if (!from._internal_barrier_id().empty()) {
    _this->_internal_set_barrier_id(from._internal_barrier_id());
  }
  if (from._internal_has_source_task()) {
    _this->_internal_mutable_source_task()->::tensorflow::CoordinatedTask::MergeFrom(
        from._internal_source_task());
  }
  if (from._internal_barrier_timeout_in_ms() != 0) {
    _this->_internal_set_barrier_timeout_in_ms(from._internal_barrier_timeout_in_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BarrierRequest::CopyFrom(const BarrierRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.BarrierRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BarrierRequest::IsInitialized() const {
  return true;
}

void BarrierRequest::InternalSwap(BarrierRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tasks_.InternalSwap(&other->_impl_.tasks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.barrier_id_, lhs_arena,
      &other->_impl_.barrier_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BarrierRequest, _impl_.barrier_timeout_in_ms_)
      + sizeof(BarrierRequest::_impl_.barrier_timeout_in_ms_)
      - PROTOBUF_FIELD_OFFSET(BarrierRequest, _impl_.source_task_)>(
          reinterpret_cast<char*>(&_impl_.source_task_),
          reinterpret_cast<char*>(&other->_impl_.source_task_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BarrierRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[31]);
}

// ===================================================================

class BarrierResponse::_Internal {
 public:
};

BarrierResponse::BarrierResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tensorflow.BarrierResponse)
}
BarrierResponse::BarrierResponse(const BarrierResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  BarrierResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.BarrierResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BarrierResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BarrierResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata BarrierResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[32]);
}

// ===================================================================

class CancelBarrierRequest::_Internal {
 public:
  static const ::tensorflow::CoordinatedTask& source_task(const CancelBarrierRequest* msg);
};

const ::tensorflow::CoordinatedTask&
CancelBarrierRequest::_Internal::source_task(const CancelBarrierRequest* msg) {
  return *msg->_impl_.source_task_;
}
CancelBarrierRequest::CancelBarrierRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CancelBarrierRequest)
}
CancelBarrierRequest::CancelBarrierRequest(const CancelBarrierRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CancelBarrierRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.barrier_id_){}
    , decltype(_impl_.source_task_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.barrier_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.barrier_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_barrier_id().empty()) {
    _this->_impl_.barrier_id_.Set(from._internal_barrier_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_source_task()) {
    _this->_impl_.source_task_ = new ::tensorflow::CoordinatedTask(*from._impl_.source_task_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.CancelBarrierRequest)
}

inline void CancelBarrierRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.barrier_id_){}
    , decltype(_impl_.source_task_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.barrier_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.barrier_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CancelBarrierRequest::~CancelBarrierRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.CancelBarrierRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CancelBarrierRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.barrier_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.source_task_;
}

void CancelBarrierRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CancelBarrierRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CancelBarrierRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.barrier_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.source_task_ != nullptr) {
    delete _impl_.source_task_;
  }
  _impl_.source_task_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelBarrierRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string barrier_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_barrier_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.CancelBarrierRequest.barrier_id"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.CoordinatedTask source_task = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_task(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CancelBarrierRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CancelBarrierRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string barrier_id = 1;
  if (!this->_internal_barrier_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_barrier_id().data(), static_cast<int>(this->_internal_barrier_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CancelBarrierRequest.barrier_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_barrier_id(), target);
  }

  // .tensorflow.CoordinatedTask source_task = 2;
  if (this->_internal_has_source_task()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::source_task(this),
        _Internal::source_task(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CancelBarrierRequest)
  return target;
}

size_t CancelBarrierRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CancelBarrierRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string barrier_id = 1;
  if (!this->_internal_barrier_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_barrier_id());
  }

  // .tensorflow.CoordinatedTask source_task = 2;
  if (this->_internal_has_source_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_task_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelBarrierRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CancelBarrierRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelBarrierRequest::GetClassData() const { return &_class_data_; }


void CancelBarrierRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CancelBarrierRequest*>(&to_msg);
  auto& from = static_cast<const CancelBarrierRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CancelBarrierRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_barrier_id().empty()) {
    _this->_internal_set_barrier_id(from._internal_barrier_id());
  }
  if (from._internal_has_source_task()) {
    _this->_internal_mutable_source_task()->::tensorflow::CoordinatedTask::MergeFrom(
        from._internal_source_task());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CancelBarrierRequest::CopyFrom(const CancelBarrierRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CancelBarrierRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelBarrierRequest::IsInitialized() const {
  return true;
}

void CancelBarrierRequest::InternalSwap(CancelBarrierRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.barrier_id_, lhs_arena,
      &other->_impl_.barrier_id_, rhs_arena
  );
  swap(_impl_.source_task_, other->_impl_.source_task_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelBarrierRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[33]);
}

// ===================================================================

class CancelBarrierResponse::_Internal {
 public:
};

CancelBarrierResponse::CancelBarrierResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tensorflow.CancelBarrierResponse)
}
CancelBarrierResponse::CancelBarrierResponse(const CancelBarrierResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CancelBarrierResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CancelBarrierResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CancelBarrierResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CancelBarrierResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CancelBarrierResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fservice_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fservice_2eproto[34]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::CoordinatedTask*
Arena::CreateMaybeMessage< ::tensorflow::CoordinatedTask >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CoordinatedTask >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CoordinationServiceError*
Arena::CreateMaybeMessage< ::tensorflow::CoordinationServiceError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CoordinationServiceError >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CoordinatedTaskStateInfo*
Arena::CreateMaybeMessage< ::tensorflow::CoordinatedTaskStateInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CoordinatedTaskStateInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DeviceInfo*
Arena::CreateMaybeMessage< ::tensorflow::DeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RegisterTaskRequest*
Arena::CreateMaybeMessage< ::tensorflow::RegisterTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RegisterTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RegisterTaskResponse*
Arena::CreateMaybeMessage< ::tensorflow::RegisterTaskResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RegisterTaskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::HeartbeatRequest*
Arena::CreateMaybeMessage< ::tensorflow::HeartbeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::HeartbeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::HeartbeatResponse*
Arena::CreateMaybeMessage< ::tensorflow::HeartbeatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::HeartbeatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::WaitForAllTasksRequest*
Arena::CreateMaybeMessage< ::tensorflow::WaitForAllTasksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::WaitForAllTasksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::WaitForAllTasksResponse*
Arena::CreateMaybeMessage< ::tensorflow::WaitForAllTasksResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::WaitForAllTasksResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ShutdownTaskRequest*
Arena::CreateMaybeMessage< ::tensorflow::ShutdownTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ShutdownTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ShutdownTaskResponse*
Arena::CreateMaybeMessage< ::tensorflow::ShutdownTaskResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ShutdownTaskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ResetTaskRequest*
Arena::CreateMaybeMessage< ::tensorflow::ResetTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ResetTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ResetTaskResponse*
Arena::CreateMaybeMessage< ::tensorflow::ResetTaskResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ResetTaskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ReportErrorToTaskRequest*
Arena::CreateMaybeMessage< ::tensorflow::ReportErrorToTaskRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ReportErrorToTaskRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ReportErrorToTaskResponse*
Arena::CreateMaybeMessage< ::tensorflow::ReportErrorToTaskResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ReportErrorToTaskResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ReportErrorToServiceRequest*
Arena::CreateMaybeMessage< ::tensorflow::ReportErrorToServiceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ReportErrorToServiceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ReportErrorToServiceResponse*
Arena::CreateMaybeMessage< ::tensorflow::ReportErrorToServiceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ReportErrorToServiceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GetTaskStateRequest*
Arena::CreateMaybeMessage< ::tensorflow::GetTaskStateRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GetTaskStateRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GetTaskStateResponse*
Arena::CreateMaybeMessage< ::tensorflow::GetTaskStateResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GetTaskStateResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::KeyValueEntry*
Arena::CreateMaybeMessage< ::tensorflow::KeyValueEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::KeyValueEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::InsertKeyValueRequest*
Arena::CreateMaybeMessage< ::tensorflow::InsertKeyValueRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::InsertKeyValueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::InsertKeyValueResponse*
Arena::CreateMaybeMessage< ::tensorflow::InsertKeyValueResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::InsertKeyValueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GetKeyValueRequest*
Arena::CreateMaybeMessage< ::tensorflow::GetKeyValueRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GetKeyValueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GetKeyValueResponse*
Arena::CreateMaybeMessage< ::tensorflow::GetKeyValueResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GetKeyValueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TryGetKeyValueRequest*
Arena::CreateMaybeMessage< ::tensorflow::TryGetKeyValueRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TryGetKeyValueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TryGetKeyValueResponse*
Arena::CreateMaybeMessage< ::tensorflow::TryGetKeyValueResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TryGetKeyValueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GetKeyValueDirRequest*
Arena::CreateMaybeMessage< ::tensorflow::GetKeyValueDirRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GetKeyValueDirRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GetKeyValueDirResponse*
Arena::CreateMaybeMessage< ::tensorflow::GetKeyValueDirResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GetKeyValueDirResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DeleteKeyValueRequest*
Arena::CreateMaybeMessage< ::tensorflow::DeleteKeyValueRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DeleteKeyValueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DeleteKeyValueResponse*
Arena::CreateMaybeMessage< ::tensorflow::DeleteKeyValueResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DeleteKeyValueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::BarrierRequest*
Arena::CreateMaybeMessage< ::tensorflow::BarrierRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::BarrierRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::BarrierResponse*
Arena::CreateMaybeMessage< ::tensorflow::BarrierResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::BarrierResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CancelBarrierRequest*
Arena::CreateMaybeMessage< ::tensorflow::CancelBarrierRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CancelBarrierRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CancelBarrierResponse*
Arena::CreateMaybeMessage< ::tensorflow::CancelBarrierResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CancelBarrierResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
