// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tsl/protobuf/dnn.proto

#include "tsl/protobuf/dnn.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace stream_executor {
namespace dnn {
PROTOBUF_CONSTEXPR TensorDescriptorProto::TensorDescriptorProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dimensions_)*/{}
  , /*decltype(_impl_._dimensions_cached_byte_size_)*/{0}
  , /*decltype(_impl_.data_type_)*/0
  , /*decltype(_impl_.layout_oneof_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct TensorDescriptorProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TensorDescriptorProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TensorDescriptorProtoDefaultTypeInternal() {}
  union {
    TensorDescriptorProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TensorDescriptorProtoDefaultTypeInternal _TensorDescriptorProto_default_instance_;
PROTOBUF_CONSTEXPR AlgorithmProto_TuningKnobsEntry_DoNotUse::AlgorithmProto_TuningKnobsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct AlgorithmProto_TuningKnobsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlgorithmProto_TuningKnobsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlgorithmProto_TuningKnobsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AlgorithmProto_TuningKnobsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlgorithmProto_TuningKnobsEntry_DoNotUseDefaultTypeInternal _AlgorithmProto_TuningKnobsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR AlgorithmProto::AlgorithmProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tuning_knobs_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.workspace_size_)*/nullptr
  , /*decltype(_impl_.algo_id_)*/int64_t{0}
  , /*decltype(_impl_.math_type_)*/0
  , /*decltype(_impl_.is_cudnn_frontend_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AlgorithmProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlgorithmProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlgorithmProtoDefaultTypeInternal() {}
  union {
    AlgorithmProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlgorithmProtoDefaultTypeInternal _AlgorithmProto_default_instance_;
PROTOBUF_CONSTEXPR AlgorithmConfigProto::AlgorithmConfigProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.optional_algorithm_)*/{}
  , /*decltype(_impl_.optional_algorithm_no_scratch_)*/{}
  , /*decltype(_impl_.optional_scratch_size_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct AlgorithmConfigProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AlgorithmConfigProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AlgorithmConfigProtoDefaultTypeInternal() {}
  union {
    AlgorithmConfigProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AlgorithmConfigProtoDefaultTypeInternal _AlgorithmConfigProto_default_instance_;
PROTOBUF_CONSTEXPR ConvolutionDescriptorProto::ConvolutionDescriptorProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.paddings_)*/{}
  , /*decltype(_impl_._paddings_cached_byte_size_)*/{0}
  , /*decltype(_impl_.strides_)*/{}
  , /*decltype(_impl_._strides_cached_byte_size_)*/{0}
  , /*decltype(_impl_.dilations_)*/{}
  , /*decltype(_impl_._dilations_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.compute_mode_)*/0
  , /*decltype(_impl_.group_count_)*/0
  , /*decltype(_impl_.convolution_mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConvolutionDescriptorProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConvolutionDescriptorProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConvolutionDescriptorProtoDefaultTypeInternal() {}
  union {
    ConvolutionDescriptorProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConvolutionDescriptorProtoDefaultTypeInternal _ConvolutionDescriptorProto_default_instance_;
}  // namespace dnn
}  // namespace stream_executor
static ::_pb::Metadata file_level_metadata_tsl_2fprotobuf_2fdnn_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tsl_2fprotobuf_2fdnn_2eproto[10];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tsl_2fprotobuf_2fdnn_2eproto = nullptr;

const uint32_t TableStruct_tsl_2fprotobuf_2fdnn_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::TensorDescriptorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::TensorDescriptorProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::TensorDescriptorProto, _impl_.dimensions_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::TensorDescriptorProto, _impl_.data_type_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::TensorDescriptorProto, _impl_.layout_oneof_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::AlgorithmProto_TuningKnobsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::AlgorithmProto_TuningKnobsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::AlgorithmProto_TuningKnobsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::AlgorithmProto_TuningKnobsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::AlgorithmProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::AlgorithmProto, _impl_.algo_id_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::AlgorithmProto, _impl_.math_type_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::AlgorithmProto, _impl_.tuning_knobs_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::AlgorithmProto, _impl_.is_cudnn_frontend_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::AlgorithmProto, _impl_.workspace_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::AlgorithmConfigProto, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::AlgorithmConfigProto, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::AlgorithmConfigProto, _impl_.optional_algorithm_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::AlgorithmConfigProto, _impl_.optional_algorithm_no_scratch_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::AlgorithmConfigProto, _impl_.optional_scratch_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::ConvolutionDescriptorProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::ConvolutionDescriptorProto, _impl_.paddings_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::ConvolutionDescriptorProto, _impl_.strides_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::ConvolutionDescriptorProto, _impl_.dilations_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::ConvolutionDescriptorProto, _impl_.compute_mode_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::ConvolutionDescriptorProto, _impl_.group_count_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::ConvolutionDescriptorProto, _impl_.convolution_mode_),
  PROTOBUF_FIELD_OFFSET(::stream_executor::dnn::ConvolutionDescriptorProto, _impl_.name_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::stream_executor::dnn::TensorDescriptorProto)},
  { 11, 19, -1, sizeof(::stream_executor::dnn::AlgorithmProto_TuningKnobsEntry_DoNotUse)},
  { 21, -1, -1, sizeof(::stream_executor::dnn::AlgorithmProto)},
  { 32, -1, -1, sizeof(::stream_executor::dnn::AlgorithmConfigProto)},
  { 44, -1, -1, sizeof(::stream_executor::dnn::ConvolutionDescriptorProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::stream_executor::dnn::_TensorDescriptorProto_default_instance_._instance,
  &::stream_executor::dnn::_AlgorithmProto_TuningKnobsEntry_DoNotUse_default_instance_._instance,
  &::stream_executor::dnn::_AlgorithmProto_default_instance_._instance,
  &::stream_executor::dnn::_AlgorithmConfigProto_default_instance_._instance,
  &::stream_executor::dnn::_ConvolutionDescriptorProto_default_instance_._instance,
};

const char descriptor_table_protodef_tsl_2fprotobuf_2fdnn_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026tsl/protobuf/dnn.proto\022\023stream_executo"
  "r.dnn\032\036google/protobuf/wrappers.proto\"\341\001"
  "\n\025TensorDescriptorProto\022\022\n\ndimensions\030\001 "
  "\003(\003\0220\n\tdata_type\030\002 \001(\0162\035.stream_executor"
  ".dnn.DataType\0226\n\013data_layout\030\003 \001(\0162\037.str"
  "eam_executor.dnn.DataLayoutH\000\022:\n\rfilter_"
  "layout\030\004 \001(\0162!.stream_executor.dnn.Filte"
  "rLayoutH\000B\016\n\014layout_oneof\"\353\002\n\016AlgorithmP"
  "roto\022\017\n\007algo_id\030\001 \001(\003\022\?\n\tmath_type\030\002 \001(\016"
  "2,.stream_executor.dnn.AlgorithmProto.Ma"
  "thType\022J\n\014tuning_knobs\030\004 \003(\01324.stream_ex"
  "ecutor.dnn.AlgorithmProto.TuningKnobsEnt"
  "ry\022\031\n\021is_cudnn_frontend\030\005 \001(\010\0224\n\016workspa"
  "ce_size\030\006 \001(\0132\034.google.protobuf.UInt64Va"
  "lue\0322\n\020TuningKnobsEntry\022\013\n\003key\030\001 \001(\003\022\r\n\005"
  "value\030\002 \001(\003:\0028\001\"0\n\010MathType\022\020\n\014DEFAULT_M"
  "ATH\020\000\022\022\n\016TENSOR_OP_MATH\020\001J\004\010\003\020\004\"\375\001\n\024Algo"
  "rithmConfigProto\0228\n\talgorithm\030\001 \001(\0132#.st"
  "ream_executor.dnn.AlgorithmProtoH\000\022C\n\024al"
  "gorithm_no_scratch\030\002 \001(\0132#.stream_execut"
  "or.dnn.AlgorithmProtoH\001\022\026\n\014scratch_size\030"
  "\003 \001(\003H\002B\024\n\022optional_algorithmB\037\n\035optiona"
  "l_algorithm_no_scratchB\027\n\025optional_scrat"
  "ch_size\"\352\001\n\032ConvolutionDescriptorProto\022\020"
  "\n\010paddings\030\001 \003(\003\022\017\n\007strides\030\002 \003(\003\022\021\n\tdil"
  "ations\030\003 \003(\003\0223\n\014compute_mode\030\004 \001(\0162\035.str"
  "eam_executor.dnn.DataType\022\023\n\013group_count"
  "\030\005 \001(\005\022>\n\020convolution_mode\030\006 \001(\0162$.strea"
  "m_executor.dnn.ConvolutionMode\022\014\n\004name\030\007"
  " \001(\t*\301\001\n\010DataType\022\n\n\006kFloat\020\000\022\013\n\007kDouble"
  "\020\001\022\t\n\005kHalf\020\002\022\t\n\005kInt8\020\003\022\n\n\006kInt32\020\004\022\021\n\r"
  "kComplexFloat\020\005\022\022\n\016kComplexDouble\020\006\022\t\n\005k"
  "BF16\020\007\022\013\n\007kF8E5M2\020\010\022\r\n\tkF8E4M3FN\020\t\022\017\n\013kF"
  "8E5M2FNUZ\020\n\022\017\n\013kF8E4M3FNUZ\020\013\022\n\n\006kInt64\020\014"
  "*\201\001\n\nDataLayout\022\021\n\rkYXDepthBatch\020\000\022\021\n\rkY"
  "XBatchDepth\020\001\022\021\n\rkBatchYXDepth\020\002\022\021\n\rkBat"
  "chDepthYX\020\003\022\022\n\016kBatchDepthYX4\020\004\022\023\n\017kBatc"
  "hDepthYX32\020\005*\256\001\n\014FilterLayout\022\022\n\016kOutput"
  "InputYX\020\000\022\022\n\016kOutputYXInput\020\001\022\023\n\017kOutput"
  "InputYX4\020\002\022\024\n\020kOutputInputYX32\020\005\022#\n\037kOut"
  "putInputYX32_CudnnReordered\020\006\022\022\n\016kInputY"
  "XOutput\020\003\022\022\n\016kYXInputOutput\020\004*\220\001\n\016Activa"
  "tionMode\022\t\n\005kNone\020\000\022\014\n\010kSigmoid\020\001\022\t\n\005kRe"
  "lu\020\002\022\n\n\006kRelu6\020\003\022\n\n\006kReluX\020\004\022\t\n\005kTanh\020\005\022"
  "\r\n\tkBandPass\020\006\022\010\n\004kElu\020\007\022\016\n\nkLeakyRelu\020\010"
  "\022\016\n\nkGeluExact\020\t*9\n\017ConvolutionMode\022\025\n\021C"
  "ROSS_CORRELATION\020\000\022\017\n\013CONVOLUTION\020\001*\203\001\n\017"
  "ConvolutionKind\022\013\n\007INVALID\020\000\022\013\n\007FORWARD\020"
  "\001\022\023\n\017BACKWARD_FILTER\020\002\022\021\n\rBACKWARD_DATA\020"
  "\003\022\033\n\027FORWARD_BIAS_ACTIVATION\020\004\022\021\n\rFORWAR"
  "D_GRAPH\020\005*C\n\010NormKind\022\023\n\017LAYER_FWD_INFER"
  "\020\000\022\023\n\017LAYER_FWD_TRAIN\020\001\022\r\n\tLAYER_BWD\020\002*Z"
  "\n\014FusedMHAKind\022\027\n\023BMM1_OUTPUT_UNKNOWN\020\000\022"
  "\032\n\026BMM1_OUTPUT_INPUT_TYPE\020\001\022\025\n\021BMM1_OUTP"
  "UT_FLOAT\020\002*S\n\014FMHAMaskKind\022\013\n\007NO_MASK\020\000\022"
  "\013\n\007PADDING\020\001\022\n\n\006CAUSAL\020\002\022\022\n\016PADDING_CAUS"
  "AL\020\003\022\t\n\005ALIBI\020\004B.Z,github.com/google/tsl"
  "/tsl/go/stream_executorb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tsl_2fprotobuf_2fdnn_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::_pbi::once_flag descriptor_table_tsl_2fprotobuf_2fdnn_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tsl_2fprotobuf_2fdnn_2eproto = {
    false, false, 2311, descriptor_table_protodef_tsl_2fprotobuf_2fdnn_2eproto,
    "tsl/protobuf/dnn.proto",
    &descriptor_table_tsl_2fprotobuf_2fdnn_2eproto_once, descriptor_table_tsl_2fprotobuf_2fdnn_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_tsl_2fprotobuf_2fdnn_2eproto::offsets,
    file_level_metadata_tsl_2fprotobuf_2fdnn_2eproto, file_level_enum_descriptors_tsl_2fprotobuf_2fdnn_2eproto,
    file_level_service_descriptors_tsl_2fprotobuf_2fdnn_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tsl_2fprotobuf_2fdnn_2eproto_getter() {
  return &descriptor_table_tsl_2fprotobuf_2fdnn_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tsl_2fprotobuf_2fdnn_2eproto(&descriptor_table_tsl_2fprotobuf_2fdnn_2eproto);
namespace stream_executor {
namespace dnn {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AlgorithmProto_MathType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tsl_2fprotobuf_2fdnn_2eproto);
  return file_level_enum_descriptors_tsl_2fprotobuf_2fdnn_2eproto[0];
}
bool AlgorithmProto_MathType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr AlgorithmProto_MathType AlgorithmProto::DEFAULT_MATH;
constexpr AlgorithmProto_MathType AlgorithmProto::TENSOR_OP_MATH;
constexpr AlgorithmProto_MathType AlgorithmProto::MathType_MIN;
constexpr AlgorithmProto_MathType AlgorithmProto::MathType_MAX;
constexpr int AlgorithmProto::MathType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tsl_2fprotobuf_2fdnn_2eproto);
  return file_level_enum_descriptors_tsl_2fprotobuf_2fdnn_2eproto[1];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataLayout_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tsl_2fprotobuf_2fdnn_2eproto);
  return file_level_enum_descriptors_tsl_2fprotobuf_2fdnn_2eproto[2];
}
bool DataLayout_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FilterLayout_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tsl_2fprotobuf_2fdnn_2eproto);
  return file_level_enum_descriptors_tsl_2fprotobuf_2fdnn_2eproto[3];
}
bool FilterLayout_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActivationMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tsl_2fprotobuf_2fdnn_2eproto);
  return file_level_enum_descriptors_tsl_2fprotobuf_2fdnn_2eproto[4];
}
bool ActivationMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConvolutionMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tsl_2fprotobuf_2fdnn_2eproto);
  return file_level_enum_descriptors_tsl_2fprotobuf_2fdnn_2eproto[5];
}
bool ConvolutionMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConvolutionKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tsl_2fprotobuf_2fdnn_2eproto);
  return file_level_enum_descriptors_tsl_2fprotobuf_2fdnn_2eproto[6];
}
bool ConvolutionKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NormKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tsl_2fprotobuf_2fdnn_2eproto);
  return file_level_enum_descriptors_tsl_2fprotobuf_2fdnn_2eproto[7];
}
bool NormKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FusedMHAKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tsl_2fprotobuf_2fdnn_2eproto);
  return file_level_enum_descriptors_tsl_2fprotobuf_2fdnn_2eproto[8];
}
bool FusedMHAKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FMHAMaskKind_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tsl_2fprotobuf_2fdnn_2eproto);
  return file_level_enum_descriptors_tsl_2fprotobuf_2fdnn_2eproto[9];
}
bool FMHAMaskKind_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TensorDescriptorProto::_Internal {
 public:
};

TensorDescriptorProto::TensorDescriptorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:stream_executor.dnn.TensorDescriptorProto)
}
TensorDescriptorProto::TensorDescriptorProto(const TensorDescriptorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TensorDescriptorProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){from._impl_.dimensions_}
    , /*decltype(_impl_._dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.data_type_){}
    , decltype(_impl_.layout_oneof_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.data_type_ = from._impl_.data_type_;
  clear_has_layout_oneof();
  switch (from.layout_oneof_case()) {
    case kDataLayout: {
      _this->_internal_set_data_layout(from._internal_data_layout());
      break;
    }
    case kFilterLayout: {
      _this->_internal_set_filter_layout(from._internal_filter_layout());
      break;
    }
    case LAYOUT_ONEOF_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:stream_executor.dnn.TensorDescriptorProto)
}

inline void TensorDescriptorProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dimensions_){arena}
    , /*decltype(_impl_._dimensions_cached_byte_size_)*/{0}
    , decltype(_impl_.data_type_){0}
    , decltype(_impl_.layout_oneof_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_layout_oneof();
}

TensorDescriptorProto::~TensorDescriptorProto() {
  // @@protoc_insertion_point(destructor:stream_executor.dnn.TensorDescriptorProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TensorDescriptorProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dimensions_.~RepeatedField();
  if (has_layout_oneof()) {
    clear_layout_oneof();
  }
}

void TensorDescriptorProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TensorDescriptorProto::clear_layout_oneof() {
// @@protoc_insertion_point(one_of_clear_start:stream_executor.dnn.TensorDescriptorProto)
  switch (layout_oneof_case()) {
    case kDataLayout: {
      // No need to clear
      break;
    }
    case kFilterLayout: {
      // No need to clear
      break;
    }
    case LAYOUT_ONEOF_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = LAYOUT_ONEOF_NOT_SET;
}


void TensorDescriptorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:stream_executor.dnn.TensorDescriptorProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dimensions_.Clear();
  _impl_.data_type_ = 0;
  clear_layout_oneof();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorDescriptorProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 dimensions = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dimensions(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_dimensions(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .stream_executor.dnn.DataType data_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_type(static_cast<::stream_executor::dnn::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // .stream_executor.dnn.DataLayout data_layout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_layout(static_cast<::stream_executor::dnn::DataLayout>(val));
        } else
          goto handle_unusual;
        continue;
      // .stream_executor.dnn.FilterLayout filter_layout = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_filter_layout(static_cast<::stream_executor::dnn::FilterLayout>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TensorDescriptorProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream_executor.dnn.TensorDescriptorProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 dimensions = 1;
  {
    int byte_size = _impl_._dimensions_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_dimensions(), byte_size, target);
    }
  }

  // .stream_executor.dnn.DataType data_type = 2;
  if (this->_internal_data_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_data_type(), target);
  }

  // .stream_executor.dnn.DataLayout data_layout = 3;
  if (_internal_has_data_layout()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_data_layout(), target);
  }

  // .stream_executor.dnn.FilterLayout filter_layout = 4;
  if (_internal_has_filter_layout()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_filter_layout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream_executor.dnn.TensorDescriptorProto)
  return target;
}

size_t TensorDescriptorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stream_executor.dnn.TensorDescriptorProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 dimensions = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.dimensions_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._dimensions_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .stream_executor.dnn.DataType data_type = 2;
  if (this->_internal_data_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_data_type());
  }

  switch (layout_oneof_case()) {
    // .stream_executor.dnn.DataLayout data_layout = 3;
    case kDataLayout: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_data_layout());
      break;
    }
    // .stream_executor.dnn.FilterLayout filter_layout = 4;
    case kFilterLayout: {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_filter_layout());
      break;
    }
    case LAYOUT_ONEOF_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TensorDescriptorProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TensorDescriptorProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TensorDescriptorProto::GetClassData() const { return &_class_data_; }


void TensorDescriptorProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TensorDescriptorProto*>(&to_msg);
  auto& from = static_cast<const TensorDescriptorProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:stream_executor.dnn.TensorDescriptorProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dimensions_.MergeFrom(from._impl_.dimensions_);
  if (from._internal_data_type() != 0) {
    _this->_internal_set_data_type(from._internal_data_type());
  }
  switch (from.layout_oneof_case()) {
    case kDataLayout: {
      _this->_internal_set_data_layout(from._internal_data_layout());
      break;
    }
    case kFilterLayout: {
      _this->_internal_set_filter_layout(from._internal_filter_layout());
      break;
    }
    case LAYOUT_ONEOF_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TensorDescriptorProto::CopyFrom(const TensorDescriptorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stream_executor.dnn.TensorDescriptorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorDescriptorProto::IsInitialized() const {
  return true;
}

void TensorDescriptorProto::InternalSwap(TensorDescriptorProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dimensions_.InternalSwap(&other->_impl_.dimensions_);
  swap(_impl_.data_type_, other->_impl_.data_type_);
  swap(_impl_.layout_oneof_, other->_impl_.layout_oneof_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorDescriptorProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fdnn_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fdnn_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fdnn_2eproto[0]);
}

// ===================================================================

AlgorithmProto_TuningKnobsEntry_DoNotUse::AlgorithmProto_TuningKnobsEntry_DoNotUse() {}
AlgorithmProto_TuningKnobsEntry_DoNotUse::AlgorithmProto_TuningKnobsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AlgorithmProto_TuningKnobsEntry_DoNotUse::MergeFrom(const AlgorithmProto_TuningKnobsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AlgorithmProto_TuningKnobsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fdnn_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fdnn_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fdnn_2eproto[1]);
}

// ===================================================================

class AlgorithmProto::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::UInt64Value& workspace_size(const AlgorithmProto* msg);
};

const ::PROTOBUF_NAMESPACE_ID::UInt64Value&
AlgorithmProto::_Internal::workspace_size(const AlgorithmProto* msg) {
  return *msg->_impl_.workspace_size_;
}
void AlgorithmProto::clear_workspace_size() {
  if (GetArenaForAllocation() == nullptr && _impl_.workspace_size_ != nullptr) {
    delete _impl_.workspace_size_;
  }
  _impl_.workspace_size_ = nullptr;
}
AlgorithmProto::AlgorithmProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &AlgorithmProto::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:stream_executor.dnn.AlgorithmProto)
}
AlgorithmProto::AlgorithmProto(const AlgorithmProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlgorithmProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.tuning_knobs_)*/{}
    , decltype(_impl_.workspace_size_){nullptr}
    , decltype(_impl_.algo_id_){}
    , decltype(_impl_.math_type_){}
    , decltype(_impl_.is_cudnn_frontend_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.tuning_knobs_.MergeFrom(from._impl_.tuning_knobs_);
  if (from._internal_has_workspace_size()) {
    _this->_impl_.workspace_size_ = new ::PROTOBUF_NAMESPACE_ID::UInt64Value(*from._impl_.workspace_size_);
  }
  ::memcpy(&_impl_.algo_id_, &from._impl_.algo_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_cudnn_frontend_) -
    reinterpret_cast<char*>(&_impl_.algo_id_)) + sizeof(_impl_.is_cudnn_frontend_));
  // @@protoc_insertion_point(copy_constructor:stream_executor.dnn.AlgorithmProto)
}

inline void AlgorithmProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.tuning_knobs_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.workspace_size_){nullptr}
    , decltype(_impl_.algo_id_){int64_t{0}}
    , decltype(_impl_.math_type_){0}
    , decltype(_impl_.is_cudnn_frontend_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AlgorithmProto::~AlgorithmProto() {
  // @@protoc_insertion_point(destructor:stream_executor.dnn.AlgorithmProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void AlgorithmProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tuning_knobs_.Destruct();
  _impl_.tuning_knobs_.~MapField();
  if (this != internal_default_instance()) delete _impl_.workspace_size_;
}

void AlgorithmProto::ArenaDtor(void* object) {
  AlgorithmProto* _this = reinterpret_cast< AlgorithmProto* >(object);
  _this->_impl_.tuning_knobs_.Destruct();
}
void AlgorithmProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlgorithmProto::Clear() {
// @@protoc_insertion_point(message_clear_start:stream_executor.dnn.AlgorithmProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tuning_knobs_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.workspace_size_ != nullptr) {
    delete _impl_.workspace_size_;
  }
  _impl_.workspace_size_ = nullptr;
  ::memset(&_impl_.algo_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_cudnn_frontend_) -
      reinterpret_cast<char*>(&_impl_.algo_id_)) + sizeof(_impl_.is_cudnn_frontend_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlgorithmProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 algo_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.algo_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .stream_executor.dnn.AlgorithmProto.MathType math_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_math_type(static_cast<::stream_executor::dnn::AlgorithmProto_MathType>(val));
        } else
          goto handle_unusual;
        continue;
      // map<int64, int64> tuning_knobs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.tuning_knobs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool is_cudnn_frontend = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_cudnn_frontend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.UInt64Value workspace_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_workspace_size(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlgorithmProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream_executor.dnn.AlgorithmProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 algo_id = 1;
  if (this->_internal_algo_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_algo_id(), target);
  }

  // .stream_executor.dnn.AlgorithmProto.MathType math_type = 2;
  if (this->_internal_math_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_math_type(), target);
  }

  // map<int64, int64> tuning_knobs = 4;
  if (!this->_internal_tuning_knobs().empty()) {
    using MapType = ::_pb::Map<int64_t, int64_t>;
    using WireHelper = AlgorithmProto_TuningKnobsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_tuning_knobs();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    }
  }

  // bool is_cudnn_frontend = 5;
  if (this->_internal_is_cudnn_frontend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_cudnn_frontend(), target);
  }

  // .google.protobuf.UInt64Value workspace_size = 6;
  if (this->_internal_has_workspace_size()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::workspace_size(this),
        _Internal::workspace_size(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream_executor.dnn.AlgorithmProto)
  return target;
}

size_t AlgorithmProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stream_executor.dnn.AlgorithmProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int64, int64> tuning_knobs = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tuning_knobs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, int64_t >::const_iterator
      it = this->_internal_tuning_knobs().begin();
      it != this->_internal_tuning_knobs().end(); ++it) {
    total_size += AlgorithmProto_TuningKnobsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .google.protobuf.UInt64Value workspace_size = 6;
  if (this->_internal_has_workspace_size()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.workspace_size_);
  }

  // int64 algo_id = 1;
  if (this->_internal_algo_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_algo_id());
  }

  // .stream_executor.dnn.AlgorithmProto.MathType math_type = 2;
  if (this->_internal_math_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_math_type());
  }

  // bool is_cudnn_frontend = 5;
  if (this->_internal_is_cudnn_frontend() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlgorithmProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlgorithmProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlgorithmProto::GetClassData() const { return &_class_data_; }


void AlgorithmProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlgorithmProto*>(&to_msg);
  auto& from = static_cast<const AlgorithmProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:stream_executor.dnn.AlgorithmProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tuning_knobs_.MergeFrom(from._impl_.tuning_knobs_);
  if (from._internal_has_workspace_size()) {
    _this->_internal_mutable_workspace_size()->::PROTOBUF_NAMESPACE_ID::UInt64Value::MergeFrom(
        from._internal_workspace_size());
  }
  if (from._internal_algo_id() != 0) {
    _this->_internal_set_algo_id(from._internal_algo_id());
  }
  if (from._internal_math_type() != 0) {
    _this->_internal_set_math_type(from._internal_math_type());
  }
  if (from._internal_is_cudnn_frontend() != 0) {
    _this->_internal_set_is_cudnn_frontend(from._internal_is_cudnn_frontend());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlgorithmProto::CopyFrom(const AlgorithmProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stream_executor.dnn.AlgorithmProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgorithmProto::IsInitialized() const {
  return true;
}

void AlgorithmProto::InternalSwap(AlgorithmProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tuning_knobs_.InternalSwap(&other->_impl_.tuning_knobs_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlgorithmProto, _impl_.is_cudnn_frontend_)
      + sizeof(AlgorithmProto::_impl_.is_cudnn_frontend_)
      - PROTOBUF_FIELD_OFFSET(AlgorithmProto, _impl_.workspace_size_)>(
          reinterpret_cast<char*>(&_impl_.workspace_size_),
          reinterpret_cast<char*>(&other->_impl_.workspace_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlgorithmProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fdnn_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fdnn_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fdnn_2eproto[2]);
}

// ===================================================================

class AlgorithmConfigProto::_Internal {
 public:
  static const ::stream_executor::dnn::AlgorithmProto& algorithm(const AlgorithmConfigProto* msg);
  static const ::stream_executor::dnn::AlgorithmProto& algorithm_no_scratch(const AlgorithmConfigProto* msg);
};

const ::stream_executor::dnn::AlgorithmProto&
AlgorithmConfigProto::_Internal::algorithm(const AlgorithmConfigProto* msg) {
  return *msg->_impl_.optional_algorithm_.algorithm_;
}
const ::stream_executor::dnn::AlgorithmProto&
AlgorithmConfigProto::_Internal::algorithm_no_scratch(const AlgorithmConfigProto* msg) {
  return *msg->_impl_.optional_algorithm_no_scratch_.algorithm_no_scratch_;
}
void AlgorithmConfigProto::set_allocated_algorithm(::stream_executor::dnn::AlgorithmProto* algorithm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_optional_algorithm();
  if (algorithm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(algorithm);
    if (message_arena != submessage_arena) {
      algorithm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, algorithm, submessage_arena);
    }
    set_has_algorithm();
    _impl_.optional_algorithm_.algorithm_ = algorithm;
  }
  // @@protoc_insertion_point(field_set_allocated:stream_executor.dnn.AlgorithmConfigProto.algorithm)
}
void AlgorithmConfigProto::set_allocated_algorithm_no_scratch(::stream_executor::dnn::AlgorithmProto* algorithm_no_scratch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_optional_algorithm_no_scratch();
  if (algorithm_no_scratch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(algorithm_no_scratch);
    if (message_arena != submessage_arena) {
      algorithm_no_scratch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, algorithm_no_scratch, submessage_arena);
    }
    set_has_algorithm_no_scratch();
    _impl_.optional_algorithm_no_scratch_.algorithm_no_scratch_ = algorithm_no_scratch;
  }
  // @@protoc_insertion_point(field_set_allocated:stream_executor.dnn.AlgorithmConfigProto.algorithm_no_scratch)
}
AlgorithmConfigProto::AlgorithmConfigProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:stream_executor.dnn.AlgorithmConfigProto)
}
AlgorithmConfigProto::AlgorithmConfigProto(const AlgorithmConfigProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AlgorithmConfigProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.optional_algorithm_){}
    , decltype(_impl_.optional_algorithm_no_scratch_){}
    , decltype(_impl_.optional_scratch_size_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_optional_algorithm();
  switch (from.optional_algorithm_case()) {
    case kAlgorithm: {
      _this->_internal_mutable_algorithm()->::stream_executor::dnn::AlgorithmProto::MergeFrom(
          from._internal_algorithm());
      break;
    }
    case OPTIONAL_ALGORITHM_NOT_SET: {
      break;
    }
  }
  clear_has_optional_algorithm_no_scratch();
  switch (from.optional_algorithm_no_scratch_case()) {
    case kAlgorithmNoScratch: {
      _this->_internal_mutable_algorithm_no_scratch()->::stream_executor::dnn::AlgorithmProto::MergeFrom(
          from._internal_algorithm_no_scratch());
      break;
    }
    case OPTIONAL_ALGORITHM_NO_SCRATCH_NOT_SET: {
      break;
    }
  }
  clear_has_optional_scratch_size();
  switch (from.optional_scratch_size_case()) {
    case kScratchSize: {
      _this->_internal_set_scratch_size(from._internal_scratch_size());
      break;
    }
    case OPTIONAL_SCRATCH_SIZE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:stream_executor.dnn.AlgorithmConfigProto)
}

inline void AlgorithmConfigProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.optional_algorithm_){}
    , decltype(_impl_.optional_algorithm_no_scratch_){}
    , decltype(_impl_.optional_scratch_size_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_optional_algorithm();
  clear_has_optional_algorithm_no_scratch();
  clear_has_optional_scratch_size();
}

AlgorithmConfigProto::~AlgorithmConfigProto() {
  // @@protoc_insertion_point(destructor:stream_executor.dnn.AlgorithmConfigProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AlgorithmConfigProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_optional_algorithm()) {
    clear_optional_algorithm();
  }
  if (has_optional_algorithm_no_scratch()) {
    clear_optional_algorithm_no_scratch();
  }
  if (has_optional_scratch_size()) {
    clear_optional_scratch_size();
  }
}

void AlgorithmConfigProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AlgorithmConfigProto::clear_optional_algorithm() {
// @@protoc_insertion_point(one_of_clear_start:stream_executor.dnn.AlgorithmConfigProto)
  switch (optional_algorithm_case()) {
    case kAlgorithm: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.optional_algorithm_.algorithm_;
      }
      break;
    }
    case OPTIONAL_ALGORITHM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONAL_ALGORITHM_NOT_SET;
}

void AlgorithmConfigProto::clear_optional_algorithm_no_scratch() {
// @@protoc_insertion_point(one_of_clear_start:stream_executor.dnn.AlgorithmConfigProto)
  switch (optional_algorithm_no_scratch_case()) {
    case kAlgorithmNoScratch: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.optional_algorithm_no_scratch_.algorithm_no_scratch_;
      }
      break;
    }
    case OPTIONAL_ALGORITHM_NO_SCRATCH_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[1] = OPTIONAL_ALGORITHM_NO_SCRATCH_NOT_SET;
}

void AlgorithmConfigProto::clear_optional_scratch_size() {
// @@protoc_insertion_point(one_of_clear_start:stream_executor.dnn.AlgorithmConfigProto)
  switch (optional_scratch_size_case()) {
    case kScratchSize: {
      // No need to clear
      break;
    }
    case OPTIONAL_SCRATCH_SIZE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[2] = OPTIONAL_SCRATCH_SIZE_NOT_SET;
}


void AlgorithmConfigProto::Clear() {
// @@protoc_insertion_point(message_clear_start:stream_executor.dnn.AlgorithmConfigProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_optional_algorithm();
  clear_optional_algorithm_no_scratch();
  clear_optional_scratch_size();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlgorithmConfigProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .stream_executor.dnn.AlgorithmProto algorithm = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_algorithm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .stream_executor.dnn.AlgorithmProto algorithm_no_scratch = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_algorithm_no_scratch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 scratch_size = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_scratch_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AlgorithmConfigProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream_executor.dnn.AlgorithmConfigProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .stream_executor.dnn.AlgorithmProto algorithm = 1;
  if (_internal_has_algorithm()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::algorithm(this),
        _Internal::algorithm(this).GetCachedSize(), target, stream);
  }

  // .stream_executor.dnn.AlgorithmProto algorithm_no_scratch = 2;
  if (_internal_has_algorithm_no_scratch()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::algorithm_no_scratch(this),
        _Internal::algorithm_no_scratch(this).GetCachedSize(), target, stream);
  }

  // int64 scratch_size = 3;
  if (_internal_has_scratch_size()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_scratch_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream_executor.dnn.AlgorithmConfigProto)
  return target;
}

size_t AlgorithmConfigProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stream_executor.dnn.AlgorithmConfigProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (optional_algorithm_case()) {
    // .stream_executor.dnn.AlgorithmProto algorithm = 1;
    case kAlgorithm: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.optional_algorithm_.algorithm_);
      break;
    }
    case OPTIONAL_ALGORITHM_NOT_SET: {
      break;
    }
  }
  switch (optional_algorithm_no_scratch_case()) {
    // .stream_executor.dnn.AlgorithmProto algorithm_no_scratch = 2;
    case kAlgorithmNoScratch: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.optional_algorithm_no_scratch_.algorithm_no_scratch_);
      break;
    }
    case OPTIONAL_ALGORITHM_NO_SCRATCH_NOT_SET: {
      break;
    }
  }
  switch (optional_scratch_size_case()) {
    // int64 scratch_size = 3;
    case kScratchSize: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_scratch_size());
      break;
    }
    case OPTIONAL_SCRATCH_SIZE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AlgorithmConfigProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AlgorithmConfigProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AlgorithmConfigProto::GetClassData() const { return &_class_data_; }


void AlgorithmConfigProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AlgorithmConfigProto*>(&to_msg);
  auto& from = static_cast<const AlgorithmConfigProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:stream_executor.dnn.AlgorithmConfigProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.optional_algorithm_case()) {
    case kAlgorithm: {
      _this->_internal_mutable_algorithm()->::stream_executor::dnn::AlgorithmProto::MergeFrom(
          from._internal_algorithm());
      break;
    }
    case OPTIONAL_ALGORITHM_NOT_SET: {
      break;
    }
  }
  switch (from.optional_algorithm_no_scratch_case()) {
    case kAlgorithmNoScratch: {
      _this->_internal_mutable_algorithm_no_scratch()->::stream_executor::dnn::AlgorithmProto::MergeFrom(
          from._internal_algorithm_no_scratch());
      break;
    }
    case OPTIONAL_ALGORITHM_NO_SCRATCH_NOT_SET: {
      break;
    }
  }
  switch (from.optional_scratch_size_case()) {
    case kScratchSize: {
      _this->_internal_set_scratch_size(from._internal_scratch_size());
      break;
    }
    case OPTIONAL_SCRATCH_SIZE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AlgorithmConfigProto::CopyFrom(const AlgorithmConfigProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stream_executor.dnn.AlgorithmConfigProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlgorithmConfigProto::IsInitialized() const {
  return true;
}

void AlgorithmConfigProto::InternalSwap(AlgorithmConfigProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.optional_algorithm_, other->_impl_.optional_algorithm_);
  swap(_impl_.optional_algorithm_no_scratch_, other->_impl_.optional_algorithm_no_scratch_);
  swap(_impl_.optional_scratch_size_, other->_impl_.optional_scratch_size_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
  swap(_impl_._oneof_case_[1], other->_impl_._oneof_case_[1]);
  swap(_impl_._oneof_case_[2], other->_impl_._oneof_case_[2]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlgorithmConfigProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fdnn_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fdnn_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fdnn_2eproto[3]);
}

// ===================================================================

class ConvolutionDescriptorProto::_Internal {
 public:
};

ConvolutionDescriptorProto::ConvolutionDescriptorProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:stream_executor.dnn.ConvolutionDescriptorProto)
}
ConvolutionDescriptorProto::ConvolutionDescriptorProto(const ConvolutionDescriptorProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConvolutionDescriptorProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.paddings_){from._impl_.paddings_}
    , /*decltype(_impl_._paddings_cached_byte_size_)*/{0}
    , decltype(_impl_.strides_){from._impl_.strides_}
    , /*decltype(_impl_._strides_cached_byte_size_)*/{0}
    , decltype(_impl_.dilations_){from._impl_.dilations_}
    , /*decltype(_impl_._dilations_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.compute_mode_){}
    , decltype(_impl_.group_count_){}
    , decltype(_impl_.convolution_mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.compute_mode_, &from._impl_.compute_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.convolution_mode_) -
    reinterpret_cast<char*>(&_impl_.compute_mode_)) + sizeof(_impl_.convolution_mode_));
  // @@protoc_insertion_point(copy_constructor:stream_executor.dnn.ConvolutionDescriptorProto)
}

inline void ConvolutionDescriptorProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.paddings_){arena}
    , /*decltype(_impl_._paddings_cached_byte_size_)*/{0}
    , decltype(_impl_.strides_){arena}
    , /*decltype(_impl_._strides_cached_byte_size_)*/{0}
    , decltype(_impl_.dilations_){arena}
    , /*decltype(_impl_._dilations_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.compute_mode_){0}
    , decltype(_impl_.group_count_){0}
    , decltype(_impl_.convolution_mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ConvolutionDescriptorProto::~ConvolutionDescriptorProto() {
  // @@protoc_insertion_point(destructor:stream_executor.dnn.ConvolutionDescriptorProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConvolutionDescriptorProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.paddings_.~RepeatedField();
  _impl_.strides_.~RepeatedField();
  _impl_.dilations_.~RepeatedField();
  _impl_.name_.Destroy();
}

void ConvolutionDescriptorProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConvolutionDescriptorProto::Clear() {
// @@protoc_insertion_point(message_clear_start:stream_executor.dnn.ConvolutionDescriptorProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.paddings_.Clear();
  _impl_.strides_.Clear();
  _impl_.dilations_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.compute_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.convolution_mode_) -
      reinterpret_cast<char*>(&_impl_.compute_mode_)) + sizeof(_impl_.convolution_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConvolutionDescriptorProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int64 paddings = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_paddings(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_paddings(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 strides = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_strides(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_strides(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 dilations = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_dilations(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_dilations(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .stream_executor.dnn.DataType compute_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_compute_mode(static_cast<::stream_executor::dnn::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 group_count = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.group_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .stream_executor.dnn.ConvolutionMode convolution_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_convolution_mode(static_cast<::stream_executor::dnn::ConvolutionMode>(val));
        } else
          goto handle_unusual;
        continue;
      // string name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "stream_executor.dnn.ConvolutionDescriptorProto.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConvolutionDescriptorProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:stream_executor.dnn.ConvolutionDescriptorProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int64 paddings = 1;
  {
    int byte_size = _impl_._paddings_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          1, _internal_paddings(), byte_size, target);
    }
  }

  // repeated int64 strides = 2;
  {
    int byte_size = _impl_._strides_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_strides(), byte_size, target);
    }
  }

  // repeated int64 dilations = 3;
  {
    int byte_size = _impl_._dilations_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_dilations(), byte_size, target);
    }
  }

  // .stream_executor.dnn.DataType compute_mode = 4;
  if (this->_internal_compute_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_compute_mode(), target);
  }

  // int32 group_count = 5;
  if (this->_internal_group_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_group_count(), target);
  }

  // .stream_executor.dnn.ConvolutionMode convolution_mode = 6;
  if (this->_internal_convolution_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_convolution_mode(), target);
  }

  // string name = 7;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "stream_executor.dnn.ConvolutionDescriptorProto.name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stream_executor.dnn.ConvolutionDescriptorProto)
  return target;
}

size_t ConvolutionDescriptorProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:stream_executor.dnn.ConvolutionDescriptorProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 paddings = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.paddings_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._paddings_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 strides = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.strides_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._strides_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 dilations = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.dilations_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._dilations_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 7;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .stream_executor.dnn.DataType compute_mode = 4;
  if (this->_internal_compute_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_compute_mode());
  }

  // int32 group_count = 5;
  if (this->_internal_group_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_group_count());
  }

  // .stream_executor.dnn.ConvolutionMode convolution_mode = 6;
  if (this->_internal_convolution_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_convolution_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConvolutionDescriptorProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConvolutionDescriptorProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConvolutionDescriptorProto::GetClassData() const { return &_class_data_; }


void ConvolutionDescriptorProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConvolutionDescriptorProto*>(&to_msg);
  auto& from = static_cast<const ConvolutionDescriptorProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:stream_executor.dnn.ConvolutionDescriptorProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.paddings_.MergeFrom(from._impl_.paddings_);
  _this->_impl_.strides_.MergeFrom(from._impl_.strides_);
  _this->_impl_.dilations_.MergeFrom(from._impl_.dilations_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_compute_mode() != 0) {
    _this->_internal_set_compute_mode(from._internal_compute_mode());
  }
  if (from._internal_group_count() != 0) {
    _this->_internal_set_group_count(from._internal_group_count());
  }
  if (from._internal_convolution_mode() != 0) {
    _this->_internal_set_convolution_mode(from._internal_convolution_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConvolutionDescriptorProto::CopyFrom(const ConvolutionDescriptorProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:stream_executor.dnn.ConvolutionDescriptorProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionDescriptorProto::IsInitialized() const {
  return true;
}

void ConvolutionDescriptorProto::InternalSwap(ConvolutionDescriptorProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.paddings_.InternalSwap(&other->_impl_.paddings_);
  _impl_.strides_.InternalSwap(&other->_impl_.strides_);
  _impl_.dilations_.InternalSwap(&other->_impl_.dilations_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConvolutionDescriptorProto, _impl_.convolution_mode_)
      + sizeof(ConvolutionDescriptorProto::_impl_.convolution_mode_)
      - PROTOBUF_FIELD_OFFSET(ConvolutionDescriptorProto, _impl_.compute_mode_)>(
          reinterpret_cast<char*>(&_impl_.compute_mode_),
          reinterpret_cast<char*>(&other->_impl_.compute_mode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConvolutionDescriptorProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fdnn_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fdnn_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fdnn_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dnn
}  // namespace stream_executor
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::stream_executor::dnn::TensorDescriptorProto*
Arena::CreateMaybeMessage< ::stream_executor::dnn::TensorDescriptorProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stream_executor::dnn::TensorDescriptorProto >(arena);
}
template<> PROTOBUF_NOINLINE ::stream_executor::dnn::AlgorithmProto_TuningKnobsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::stream_executor::dnn::AlgorithmProto_TuningKnobsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stream_executor::dnn::AlgorithmProto_TuningKnobsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::stream_executor::dnn::AlgorithmProto*
Arena::CreateMaybeMessage< ::stream_executor::dnn::AlgorithmProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stream_executor::dnn::AlgorithmProto >(arena);
}
template<> PROTOBUF_NOINLINE ::stream_executor::dnn::AlgorithmConfigProto*
Arena::CreateMaybeMessage< ::stream_executor::dnn::AlgorithmConfigProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stream_executor::dnn::AlgorithmConfigProto >(arena);
}
template<> PROTOBUF_NOINLINE ::stream_executor::dnn::ConvolutionDescriptorProto*
Arena::CreateMaybeMessage< ::stream_executor::dnn::ConvolutionDescriptorProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::stream_executor::dnn::ConvolutionDescriptorProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
