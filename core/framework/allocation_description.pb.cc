// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/allocation_description.proto

#include "tensorflow/core/framework/allocation_description.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR AllocationDescription::AllocationDescription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.allocator_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.requested_bytes_)*/int64_t{0}
  , /*decltype(_impl_.allocated_bytes_)*/int64_t{0}
  , /*decltype(_impl_.allocation_id_)*/int64_t{0}
  , /*decltype(_impl_.ptr_)*/uint64_t{0u}
  , /*decltype(_impl_.has_single_reference_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AllocationDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AllocationDescriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AllocationDescriptionDefaultTypeInternal() {}
  union {
    AllocationDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AllocationDescriptionDefaultTypeInternal _AllocationDescription_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AllocationDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AllocationDescription, _impl_.requested_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AllocationDescription, _impl_.allocated_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AllocationDescription, _impl_.allocator_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AllocationDescription, _impl_.allocation_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AllocationDescription, _impl_.has_single_reference_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AllocationDescription, _impl_.ptr_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::AllocationDescription)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_AllocationDescription_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n6tensorflow/core/framework/allocation_d"
  "escription.proto\022\ntensorflow\"\243\001\n\025Allocat"
  "ionDescription\022\027\n\017requested_bytes\030\001 \001(\003\022"
  "\027\n\017allocated_bytes\030\002 \001(\003\022\026\n\016allocator_na"
  "me\030\003 \001(\t\022\025\n\rallocation_id\030\004 \001(\003\022\034\n\024has_s"
  "ingle_reference\030\005 \001(\010\022\013\n\003ptr\030\006 \001(\004B\233\001\n\030o"
  "rg.tensorflow.frameworkB\033AllocationDescr"
  "iptionProtosP\001Z]github.com/tensorflow/te"
  "nsorflow/tensorflow/go/core/framework/al"
  "location_description_go_proto\370\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto = {
    false, false, 400, descriptor_table_protodef_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto,
    "tensorflow/core/framework/allocation_description.proto",
    &descriptor_table_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto(&descriptor_table_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto);
namespace tensorflow {

// ===================================================================

class AllocationDescription::_Internal {
 public:
};

AllocationDescription::AllocationDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.AllocationDescription)
}
AllocationDescription::AllocationDescription(const AllocationDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AllocationDescription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.allocator_name_){}
    , decltype(_impl_.requested_bytes_){}
    , decltype(_impl_.allocated_bytes_){}
    , decltype(_impl_.allocation_id_){}
    , decltype(_impl_.ptr_){}
    , decltype(_impl_.has_single_reference_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.allocator_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.allocator_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_allocator_name().empty()) {
    _this->_impl_.allocator_name_.Set(from._internal_allocator_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.requested_bytes_, &from._impl_.requested_bytes_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.has_single_reference_) -
    reinterpret_cast<char*>(&_impl_.requested_bytes_)) + sizeof(_impl_.has_single_reference_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.AllocationDescription)
}

inline void AllocationDescription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.allocator_name_){}
    , decltype(_impl_.requested_bytes_){int64_t{0}}
    , decltype(_impl_.allocated_bytes_){int64_t{0}}
    , decltype(_impl_.allocation_id_){int64_t{0}}
    , decltype(_impl_.ptr_){uint64_t{0u}}
    , decltype(_impl_.has_single_reference_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.allocator_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.allocator_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AllocationDescription::~AllocationDescription() {
  // @@protoc_insertion_point(destructor:tensorflow.AllocationDescription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AllocationDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.allocator_name_.Destroy();
}

void AllocationDescription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AllocationDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AllocationDescription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.allocator_name_.ClearToEmpty();
  ::memset(&_impl_.requested_bytes_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.has_single_reference_) -
      reinterpret_cast<char*>(&_impl_.requested_bytes_)) + sizeof(_impl_.has_single_reference_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AllocationDescription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 requested_bytes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.requested_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 allocated_bytes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.allocated_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string allocator_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_allocator_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.AllocationDescription.allocator_name"));
        } else
          goto handle_unusual;
        continue;
      // int64 allocation_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.allocation_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool has_single_reference = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.has_single_reference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ptr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.ptr_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AllocationDescription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AllocationDescription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 requested_bytes = 1;
  if (this->_internal_requested_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_requested_bytes(), target);
  }

  // int64 allocated_bytes = 2;
  if (this->_internal_allocated_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_allocated_bytes(), target);
  }

  // string allocator_name = 3;
  if (!this->_internal_allocator_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_allocator_name().data(), static_cast<int>(this->_internal_allocator_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AllocationDescription.allocator_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_allocator_name(), target);
  }

  // int64 allocation_id = 4;
  if (this->_internal_allocation_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_allocation_id(), target);
  }

  // bool has_single_reference = 5;
  if (this->_internal_has_single_reference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_has_single_reference(), target);
  }

  // uint64 ptr = 6;
  if (this->_internal_ptr() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_ptr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AllocationDescription)
  return target;
}

size_t AllocationDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AllocationDescription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string allocator_name = 3;
  if (!this->_internal_allocator_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_allocator_name());
  }

  // int64 requested_bytes = 1;
  if (this->_internal_requested_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_requested_bytes());
  }

  // int64 allocated_bytes = 2;
  if (this->_internal_allocated_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_allocated_bytes());
  }

  // int64 allocation_id = 4;
  if (this->_internal_allocation_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_allocation_id());
  }

  // uint64 ptr = 6;
  if (this->_internal_ptr() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ptr());
  }

  // bool has_single_reference = 5;
  if (this->_internal_has_single_reference() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AllocationDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AllocationDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AllocationDescription::GetClassData() const { return &_class_data_; }


void AllocationDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AllocationDescription*>(&to_msg);
  auto& from = static_cast<const AllocationDescription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AllocationDescription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_allocator_name().empty()) {
    _this->_internal_set_allocator_name(from._internal_allocator_name());
  }
  if (from._internal_requested_bytes() != 0) {
    _this->_internal_set_requested_bytes(from._internal_requested_bytes());
  }
  if (from._internal_allocated_bytes() != 0) {
    _this->_internal_set_allocated_bytes(from._internal_allocated_bytes());
  }
  if (from._internal_allocation_id() != 0) {
    _this->_internal_set_allocation_id(from._internal_allocation_id());
  }
  if (from._internal_ptr() != 0) {
    _this->_internal_set_ptr(from._internal_ptr());
  }
  if (from._internal_has_single_reference() != 0) {
    _this->_internal_set_has_single_reference(from._internal_has_single_reference());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AllocationDescription::CopyFrom(const AllocationDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AllocationDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllocationDescription::IsInitialized() const {
  return true;
}

void AllocationDescription::InternalSwap(AllocationDescription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.allocator_name_, lhs_arena,
      &other->_impl_.allocator_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AllocationDescription, _impl_.has_single_reference_)
      + sizeof(AllocationDescription::_impl_.has_single_reference_)
      - PROTOBUF_FIELD_OFFSET(AllocationDescription, _impl_.requested_bytes_)>(
          reinterpret_cast<char*>(&_impl_.requested_bytes_),
          reinterpret_cast<char*>(&other->_impl_.requested_bytes_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AllocationDescription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::AllocationDescription*
Arena::CreateMaybeMessage< ::tensorflow::AllocationDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::AllocationDescription >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
