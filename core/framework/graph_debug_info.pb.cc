// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/graph_debug_info.proto

#include "tensorflow/core/framework/graph_debug_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR GraphDebugInfo_FileLineCol::GraphDebugInfo_FileLineCol(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.func_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_index_)*/0
  , /*decltype(_impl_.line_)*/0
  , /*decltype(_impl_.col_)*/0} {}
struct GraphDebugInfo_FileLineColDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphDebugInfo_FileLineColDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphDebugInfo_FileLineColDefaultTypeInternal() {}
  union {
    GraphDebugInfo_FileLineCol _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphDebugInfo_FileLineColDefaultTypeInternal _GraphDebugInfo_FileLineCol_default_instance_;
PROTOBUF_CONSTEXPR GraphDebugInfo_StackTrace::GraphDebugInfo_StackTrace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.file_line_cols_)*/{}
  , /*decltype(_impl_.frame_id_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphDebugInfo_StackTraceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphDebugInfo_StackTraceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphDebugInfo_StackTraceDefaultTypeInternal() {}
  union {
    GraphDebugInfo_StackTrace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphDebugInfo_StackTraceDefaultTypeInternal _GraphDebugInfo_StackTrace_default_instance_;
PROTOBUF_CONSTEXPR GraphDebugInfo_FramesByIdEntry_DoNotUse::GraphDebugInfo_FramesByIdEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GraphDebugInfo_FramesByIdEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphDebugInfo_FramesByIdEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphDebugInfo_FramesByIdEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GraphDebugInfo_FramesByIdEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphDebugInfo_FramesByIdEntry_DoNotUseDefaultTypeInternal _GraphDebugInfo_FramesByIdEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GraphDebugInfo_TracesByIdEntry_DoNotUse::GraphDebugInfo_TracesByIdEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GraphDebugInfo_TracesByIdEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphDebugInfo_TracesByIdEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphDebugInfo_TracesByIdEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GraphDebugInfo_TracesByIdEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphDebugInfo_TracesByIdEntry_DoNotUseDefaultTypeInternal _GraphDebugInfo_TracesByIdEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GraphDebugInfo_TracesEntry_DoNotUse::GraphDebugInfo_TracesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GraphDebugInfo_TracesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphDebugInfo_TracesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphDebugInfo_TracesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GraphDebugInfo_TracesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphDebugInfo_TracesEntry_DoNotUseDefaultTypeInternal _GraphDebugInfo_TracesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GraphDebugInfo_NameToTraceIdEntry_DoNotUse::GraphDebugInfo_NameToTraceIdEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct GraphDebugInfo_NameToTraceIdEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphDebugInfo_NameToTraceIdEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphDebugInfo_NameToTraceIdEntry_DoNotUseDefaultTypeInternal() {}
  union {
    GraphDebugInfo_NameToTraceIdEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphDebugInfo_NameToTraceIdEntry_DoNotUseDefaultTypeInternal _GraphDebugInfo_NameToTraceIdEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR GraphDebugInfo::GraphDebugInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.files_)*/{}
  , /*decltype(_impl_.traces_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.frames_by_id_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_to_trace_id_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.traces_by_id_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphDebugInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphDebugInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphDebugInfoDefaultTypeInternal() {}
  union {
    GraphDebugInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphDebugInfoDefaultTypeInternal _GraphDebugInfo_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto[7];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_FileLineCol, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_FileLineCol, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_FileLineCol, _impl_.file_index_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_FileLineCol, _impl_.line_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_FileLineCol, _impl_.col_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_FileLineCol, _impl_.func_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_FileLineCol, _impl_.code_),
  2,
  3,
  4,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_StackTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_StackTrace, _impl_.file_line_cols_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_StackTrace, _impl_.frame_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_FramesByIdEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_FramesByIdEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_FramesByIdEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_FramesByIdEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_TracesByIdEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_TracesByIdEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_TracesByIdEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_TracesByIdEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_TracesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_TracesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_TracesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_TracesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_NameToTraceIdEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_NameToTraceIdEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_NameToTraceIdEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo_NameToTraceIdEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo, _impl_.files_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo, _impl_.frames_by_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo, _impl_.traces_by_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo, _impl_.traces_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphDebugInfo, _impl_.name_to_trace_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, -1, sizeof(::tensorflow::GraphDebugInfo_FileLineCol)},
  { 16, -1, -1, sizeof(::tensorflow::GraphDebugInfo_StackTrace)},
  { 24, 32, -1, sizeof(::tensorflow::GraphDebugInfo_FramesByIdEntry_DoNotUse)},
  { 34, 42, -1, sizeof(::tensorflow::GraphDebugInfo_TracesByIdEntry_DoNotUse)},
  { 44, 52, -1, sizeof(::tensorflow::GraphDebugInfo_TracesEntry_DoNotUse)},
  { 54, 62, -1, sizeof(::tensorflow::GraphDebugInfo_NameToTraceIdEntry_DoNotUse)},
  { 64, -1, -1, sizeof(::tensorflow::GraphDebugInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_GraphDebugInfo_FileLineCol_default_instance_._instance,
  &::tensorflow::_GraphDebugInfo_StackTrace_default_instance_._instance,
  &::tensorflow::_GraphDebugInfo_FramesByIdEntry_DoNotUse_default_instance_._instance,
  &::tensorflow::_GraphDebugInfo_TracesByIdEntry_DoNotUse_default_instance_._instance,
  &::tensorflow::_GraphDebugInfo_TracesEntry_DoNotUse_default_instance_._instance,
  &::tensorflow::_GraphDebugInfo_NameToTraceIdEntry_DoNotUse_default_instance_._instance,
  &::tensorflow::_GraphDebugInfo_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0tensorflow/core/framework/graph_debug_"
  "info.proto\022\ntensorflow\"\243\006\n\016GraphDebugInf"
  "o\022\r\n\005files\030\001 \003(\t\022@\n\014frames_by_id\030\004 \003(\0132*"
  ".tensorflow.GraphDebugInfo.FramesByIdEnt"
  "ry\022@\n\014traces_by_id\030\006 \003(\0132*.tensorflow.Gr"
  "aphDebugInfo.TracesByIdEntry\0226\n\006traces\030\002"
  " \003(\0132&.tensorflow.GraphDebugInfo.TracesE"
  "ntry\022G\n\020name_to_trace_id\030\005 \003(\0132-.tensorf"
  "low.GraphDebugInfo.NameToTraceIdEntry\032X\n"
  "\013FileLineCol\022\022\n\nfile_index\030\001 \001(\005\022\014\n\004line"
  "\030\002 \001(\005\022\013\n\003col\030\003 \001(\005\022\014\n\004func\030\004 \001(\t\022\014\n\004cod"
  "e\030\005 \001(\t\032b\n\nStackTrace\022>\n\016file_line_cols\030"
  "\001 \003(\0132&.tensorflow.GraphDebugInfo.FileLi"
  "neCol\022\024\n\010frame_id\030\002 \003(\006B\002\020\001\032Y\n\017FramesByI"
  "dEntry\022\013\n\003key\030\001 \001(\006\0225\n\005value\030\002 \001(\0132&.ten"
  "sorflow.GraphDebugInfo.FileLineCol:\0028\001\032X"
  "\n\017TracesByIdEntry\022\013\n\003key\030\001 \001(\006\0224\n\005value\030"
  "\002 \001(\0132%.tensorflow.GraphDebugInfo.StackT"
  "race:\0028\001\032T\n\013TracesEntry\022\013\n\003key\030\001 \001(\t\0224\n\005"
  "value\030\002 \001(\0132%.tensorflow.GraphDebugInfo."
  "StackTrace:\0028\001\0324\n\022NameToTraceIdEntry\022\013\n\003"
  "key\030\001 \001(\t\022\r\n\005value\030\002 \001(\006:\0028\001B\214\001\n\030org.ten"
  "sorflow.frameworkB\024GraphDebugInfoProtosP"
  "\001ZUgithub.com/tensorflow/tensorflow/tens"
  "orflow/go/core/protobuf/for_core_protos_"
  "go_proto\370\001\001"
  ;
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto = {
    false, false, 1011, descriptor_table_protodef_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto,
    "tensorflow/core/framework/graph_debug_info.proto",
    &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto_once, nullptr, 0, 7,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto(&descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto);
namespace tensorflow {

// ===================================================================

class GraphDebugInfo_FileLineCol::_Internal {
 public:
  using HasBits = decltype(std::declval<GraphDebugInfo_FileLineCol>()._impl_._has_bits_);
  static void set_has_file_index(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_line(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_col(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_func(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_code(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

GraphDebugInfo_FileLineCol::GraphDebugInfo_FileLineCol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphDebugInfo.FileLineCol)
}
GraphDebugInfo_FileLineCol::GraphDebugInfo_FileLineCol(const GraphDebugInfo_FileLineCol& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GraphDebugInfo_FileLineCol* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.func_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.file_index_){}
    , decltype(_impl_.line_){}
    , decltype(_impl_.col_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.func_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.func_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_func()) {
    _this->_impl_.func_.Set(from._internal_func(), 
      _this->GetArenaForAllocation());
  }
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_code()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.file_index_, &from._impl_.file_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.col_) -
    reinterpret_cast<char*>(&_impl_.file_index_)) + sizeof(_impl_.col_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphDebugInfo.FileLineCol)
}

inline void GraphDebugInfo_FileLineCol::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.func_){}
    , decltype(_impl_.code_){}
    , decltype(_impl_.file_index_){0}
    , decltype(_impl_.line_){0}
    , decltype(_impl_.col_){0}
  };
  _impl_.func_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.func_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GraphDebugInfo_FileLineCol::~GraphDebugInfo_FileLineCol() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphDebugInfo.FileLineCol)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphDebugInfo_FileLineCol::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.func_.Destroy();
  _impl_.code_.Destroy();
}

void GraphDebugInfo_FileLineCol::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphDebugInfo_FileLineCol::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphDebugInfo.FileLineCol)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.func_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.code_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000001cu) {
    ::memset(&_impl_.file_index_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.col_) -
        reinterpret_cast<char*>(&_impl_.file_index_)) + sizeof(_impl_.col_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphDebugInfo_FileLineCol::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 file_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_file_index(&has_bits);
          _impl_.file_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_line(&has_bits);
          _impl_.line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional int32 col = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_col(&has_bits);
          _impl_.col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string func = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_func();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tensorflow.GraphDebugInfo.FileLineCol.func");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "tensorflow.GraphDebugInfo.FileLineCol.code");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphDebugInfo_FileLineCol::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphDebugInfo.FileLineCol)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 file_index = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_file_index(), target);
  }

  // optional int32 line = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_line(), target);
  }

  // optional int32 col = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_col(), target);
  }

  // optional string func = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_func().data(), static_cast<int>(this->_internal_func().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tensorflow.GraphDebugInfo.FileLineCol.func");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_func(), target);
  }

  // optional string code = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tensorflow.GraphDebugInfo.FileLineCol.code");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphDebugInfo.FileLineCol)
  return target;
}

size_t GraphDebugInfo_FileLineCol::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphDebugInfo.FileLineCol)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string func = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_func());
    }

    // optional string code = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_code());
    }

    // optional int32 file_index = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_file_index());
    }

    // optional int32 line = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_line());
    }

    // optional int32 col = 3;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_col());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphDebugInfo_FileLineCol::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GraphDebugInfo_FileLineCol::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphDebugInfo_FileLineCol::GetClassData() const { return &_class_data_; }


void GraphDebugInfo_FileLineCol::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GraphDebugInfo_FileLineCol*>(&to_msg);
  auto& from = static_cast<const GraphDebugInfo_FileLineCol&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphDebugInfo.FileLineCol)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_func(from._internal_func());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_code(from._internal_code());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.file_index_ = from._impl_.file_index_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.line_ = from._impl_.line_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.col_ = from._impl_.col_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphDebugInfo_FileLineCol::CopyFrom(const GraphDebugInfo_FileLineCol& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphDebugInfo.FileLineCol)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphDebugInfo_FileLineCol::IsInitialized() const {
  return true;
}

void GraphDebugInfo_FileLineCol::InternalSwap(GraphDebugInfo_FileLineCol* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.func_, lhs_arena,
      &other->_impl_.func_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphDebugInfo_FileLineCol, _impl_.col_)
      + sizeof(GraphDebugInfo_FileLineCol::_impl_.col_)
      - PROTOBUF_FIELD_OFFSET(GraphDebugInfo_FileLineCol, _impl_.file_index_)>(
          reinterpret_cast<char*>(&_impl_.file_index_),
          reinterpret_cast<char*>(&other->_impl_.file_index_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphDebugInfo_FileLineCol::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto[0]);
}

// ===================================================================

class GraphDebugInfo_StackTrace::_Internal {
 public:
};

GraphDebugInfo_StackTrace::GraphDebugInfo_StackTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphDebugInfo.StackTrace)
}
GraphDebugInfo_StackTrace::GraphDebugInfo_StackTrace(const GraphDebugInfo_StackTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GraphDebugInfo_StackTrace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.file_line_cols_){from._impl_.file_line_cols_}
    , decltype(_impl_.frame_id_){from._impl_.frame_id_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphDebugInfo.StackTrace)
}

inline void GraphDebugInfo_StackTrace::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.file_line_cols_){arena}
    , decltype(_impl_.frame_id_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GraphDebugInfo_StackTrace::~GraphDebugInfo_StackTrace() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphDebugInfo.StackTrace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphDebugInfo_StackTrace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.file_line_cols_.~RepeatedPtrField();
  _impl_.frame_id_.~RepeatedField();
}

void GraphDebugInfo_StackTrace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphDebugInfo_StackTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphDebugInfo.StackTrace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.file_line_cols_.Clear();
  _impl_.frame_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphDebugInfo_StackTrace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.GraphDebugInfo.FileLineCol file_line_cols = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_file_line_cols(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated fixed64 frame_id = 2 [packed = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFixed64Parser(_internal_mutable_frame_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_frame_id(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr));
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphDebugInfo_StackTrace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphDebugInfo.StackTrace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.GraphDebugInfo.FileLineCol file_line_cols = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_file_line_cols_size()); i < n; i++) {
    const auto& repfield = this->_internal_file_line_cols(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated fixed64 frame_id = 2 [packed = true];
  if (this->_internal_frame_id_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_frame_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphDebugInfo.StackTrace)
  return target;
}

size_t GraphDebugInfo_StackTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphDebugInfo.StackTrace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.GraphDebugInfo.FileLineCol file_line_cols = 1;
  total_size += 1UL * this->_internal_file_line_cols_size();
  for (const auto& msg : this->_impl_.file_line_cols_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated fixed64 frame_id = 2 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_frame_id_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphDebugInfo_StackTrace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GraphDebugInfo_StackTrace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphDebugInfo_StackTrace::GetClassData() const { return &_class_data_; }


void GraphDebugInfo_StackTrace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GraphDebugInfo_StackTrace*>(&to_msg);
  auto& from = static_cast<const GraphDebugInfo_StackTrace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphDebugInfo.StackTrace)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.file_line_cols_.MergeFrom(from._impl_.file_line_cols_);
  _this->_impl_.frame_id_.MergeFrom(from._impl_.frame_id_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphDebugInfo_StackTrace::CopyFrom(const GraphDebugInfo_StackTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphDebugInfo.StackTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphDebugInfo_StackTrace::IsInitialized() const {
  return true;
}

void GraphDebugInfo_StackTrace::InternalSwap(GraphDebugInfo_StackTrace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.file_line_cols_.InternalSwap(&other->_impl_.file_line_cols_);
  _impl_.frame_id_.InternalSwap(&other->_impl_.frame_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphDebugInfo_StackTrace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto[1]);
}

// ===================================================================

GraphDebugInfo_FramesByIdEntry_DoNotUse::GraphDebugInfo_FramesByIdEntry_DoNotUse() {}
GraphDebugInfo_FramesByIdEntry_DoNotUse::GraphDebugInfo_FramesByIdEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GraphDebugInfo_FramesByIdEntry_DoNotUse::MergeFrom(const GraphDebugInfo_FramesByIdEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GraphDebugInfo_FramesByIdEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto[2]);
}

// ===================================================================

GraphDebugInfo_TracesByIdEntry_DoNotUse::GraphDebugInfo_TracesByIdEntry_DoNotUse() {}
GraphDebugInfo_TracesByIdEntry_DoNotUse::GraphDebugInfo_TracesByIdEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GraphDebugInfo_TracesByIdEntry_DoNotUse::MergeFrom(const GraphDebugInfo_TracesByIdEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GraphDebugInfo_TracesByIdEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto[3]);
}

// ===================================================================

GraphDebugInfo_TracesEntry_DoNotUse::GraphDebugInfo_TracesEntry_DoNotUse() {}
GraphDebugInfo_TracesEntry_DoNotUse::GraphDebugInfo_TracesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GraphDebugInfo_TracesEntry_DoNotUse::MergeFrom(const GraphDebugInfo_TracesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GraphDebugInfo_TracesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto[4]);
}

// ===================================================================

GraphDebugInfo_NameToTraceIdEntry_DoNotUse::GraphDebugInfo_NameToTraceIdEntry_DoNotUse() {}
GraphDebugInfo_NameToTraceIdEntry_DoNotUse::GraphDebugInfo_NameToTraceIdEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void GraphDebugInfo_NameToTraceIdEntry_DoNotUse::MergeFrom(const GraphDebugInfo_NameToTraceIdEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata GraphDebugInfo_NameToTraceIdEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto[5]);
}

// ===================================================================

class GraphDebugInfo::_Internal {
 public:
};

GraphDebugInfo::GraphDebugInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &GraphDebugInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphDebugInfo)
}
GraphDebugInfo::GraphDebugInfo(const GraphDebugInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GraphDebugInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.files_){from._impl_.files_}
    , /*decltype(_impl_.traces_)*/{}
    , /*decltype(_impl_.frames_by_id_)*/{}
    , /*decltype(_impl_.name_to_trace_id_)*/{}
    , /*decltype(_impl_.traces_by_id_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.traces_.MergeFrom(from._impl_.traces_);
  _this->_impl_.frames_by_id_.MergeFrom(from._impl_.frames_by_id_);
  _this->_impl_.name_to_trace_id_.MergeFrom(from._impl_.name_to_trace_id_);
  _this->_impl_.traces_by_id_.MergeFrom(from._impl_.traces_by_id_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphDebugInfo)
}

inline void GraphDebugInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.files_){arena}
    , /*decltype(_impl_.traces_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.frames_by_id_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.name_to_trace_id_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.traces_by_id_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GraphDebugInfo::~GraphDebugInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphDebugInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void GraphDebugInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.files_.~RepeatedPtrField();
  _impl_.traces_.Destruct();
  _impl_.traces_.~MapField();
  _impl_.frames_by_id_.Destruct();
  _impl_.frames_by_id_.~MapField();
  _impl_.name_to_trace_id_.Destruct();
  _impl_.name_to_trace_id_.~MapField();
  _impl_.traces_by_id_.Destruct();
  _impl_.traces_by_id_.~MapField();
}

void GraphDebugInfo::ArenaDtor(void* object) {
  GraphDebugInfo* _this = reinterpret_cast< GraphDebugInfo* >(object);
  _this->_impl_.traces_.Destruct();
  _this->_impl_.frames_by_id_.Destruct();
  _this->_impl_.name_to_trace_id_.Destruct();
  _this->_impl_.traces_by_id_.Destruct();
}
void GraphDebugInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphDebugInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphDebugInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.files_.Clear();
  _impl_.traces_.Clear();
  _impl_.frames_by_id_.Clear();
  _impl_.name_to_trace_id_.Clear();
  _impl_.traces_by_id_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphDebugInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string files = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_files();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            #ifndef NDEBUG
            ::_pbi::VerifyUTF8(str, "tensorflow.GraphDebugInfo.files");
            #endif  // !NDEBUG
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .tensorflow.GraphDebugInfo.StackTrace> traces = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.traces_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<fixed64, .tensorflow.GraphDebugInfo.FileLineCol> frames_by_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.frames_by_id_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, fixed64> name_to_trace_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.name_to_trace_id_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<fixed64, .tensorflow.GraphDebugInfo.StackTrace> traces_by_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.traces_by_id_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphDebugInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphDebugInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string files = 1;
  for (int i = 0, n = this->_internal_files_size(); i < n; i++) {
    const auto& s = this->_internal_files(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "tensorflow.GraphDebugInfo.files");
    target = stream->WriteString(1, s, target);
  }

  // map<string, .tensorflow.GraphDebugInfo.StackTrace> traces = 2;
  if (!this->_internal_traces().empty()) {
    using MapType = ::_pb::Map<std::string, ::tensorflow::GraphDebugInfo_StackTrace>;
    using WireHelper = GraphDebugInfo_TracesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_traces();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "tensorflow.GraphDebugInfo.TracesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<fixed64, .tensorflow.GraphDebugInfo.FileLineCol> frames_by_id = 4;
  if (!this->_internal_frames_by_id().empty()) {
    using MapType = ::_pb::Map<uint64_t, ::tensorflow::GraphDebugInfo_FileLineCol>;
    using WireHelper = GraphDebugInfo_FramesByIdEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_frames_by_id();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<string, fixed64> name_to_trace_id = 5;
  if (!this->_internal_name_to_trace_id().empty()) {
    using MapType = ::_pb::Map<std::string, uint64_t>;
    using WireHelper = GraphDebugInfo_NameToTraceIdEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_name_to_trace_id();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
        "tensorflow.GraphDebugInfo.NameToTraceIdEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<fixed64, .tensorflow.GraphDebugInfo.StackTrace> traces_by_id = 6;
  if (!this->_internal_traces_by_id().empty()) {
    using MapType = ::_pb::Map<uint64_t, ::tensorflow::GraphDebugInfo_StackTrace>;
    using WireHelper = GraphDebugInfo_TracesByIdEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_traces_by_id();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphDebugInfo)
  return target;
}

size_t GraphDebugInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphDebugInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string files = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.files_.size());
  for (int i = 0, n = _impl_.files_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.files_.Get(i));
  }

  // map<string, .tensorflow.GraphDebugInfo.StackTrace> traces = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_traces_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::GraphDebugInfo_StackTrace >::const_iterator
      it = this->_internal_traces().begin();
      it != this->_internal_traces().end(); ++it) {
    total_size += GraphDebugInfo_TracesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<fixed64, .tensorflow.GraphDebugInfo.FileLineCol> frames_by_id = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_frames_by_id_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::tensorflow::GraphDebugInfo_FileLineCol >::const_iterator
      it = this->_internal_frames_by_id().begin();
      it != this->_internal_frames_by_id().end(); ++it) {
    total_size += GraphDebugInfo_FramesByIdEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, fixed64> name_to_trace_id = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_name_to_trace_id_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint64_t >::const_iterator
      it = this->_internal_name_to_trace_id().begin();
      it != this->_internal_name_to_trace_id().end(); ++it) {
    total_size += GraphDebugInfo_NameToTraceIdEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<fixed64, .tensorflow.GraphDebugInfo.StackTrace> traces_by_id = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_traces_by_id_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::tensorflow::GraphDebugInfo_StackTrace >::const_iterator
      it = this->_internal_traces_by_id().begin();
      it != this->_internal_traces_by_id().end(); ++it) {
    total_size += GraphDebugInfo_TracesByIdEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphDebugInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GraphDebugInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphDebugInfo::GetClassData() const { return &_class_data_; }


void GraphDebugInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GraphDebugInfo*>(&to_msg);
  auto& from = static_cast<const GraphDebugInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphDebugInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.files_.MergeFrom(from._impl_.files_);
  _this->_impl_.traces_.MergeFrom(from._impl_.traces_);
  _this->_impl_.frames_by_id_.MergeFrom(from._impl_.frames_by_id_);
  _this->_impl_.name_to_trace_id_.MergeFrom(from._impl_.name_to_trace_id_);
  _this->_impl_.traces_by_id_.MergeFrom(from._impl_.traces_by_id_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphDebugInfo::CopyFrom(const GraphDebugInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphDebugInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphDebugInfo::IsInitialized() const {
  return true;
}

void GraphDebugInfo::InternalSwap(GraphDebugInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.files_.InternalSwap(&other->_impl_.files_);
  _impl_.traces_.InternalSwap(&other->_impl_.traces_);
  _impl_.frames_by_id_.InternalSwap(&other->_impl_.frames_by_id_);
  _impl_.name_to_trace_id_.InternalSwap(&other->_impl_.name_to_trace_id_);
  _impl_.traces_by_id_.InternalSwap(&other->_impl_.traces_by_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphDebugInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::GraphDebugInfo_FileLineCol*
Arena::CreateMaybeMessage< ::tensorflow::GraphDebugInfo_FileLineCol >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphDebugInfo_FileLineCol >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphDebugInfo_StackTrace*
Arena::CreateMaybeMessage< ::tensorflow::GraphDebugInfo_StackTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphDebugInfo_StackTrace >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphDebugInfo_FramesByIdEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tensorflow::GraphDebugInfo_FramesByIdEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphDebugInfo_FramesByIdEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphDebugInfo_TracesByIdEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tensorflow::GraphDebugInfo_TracesByIdEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphDebugInfo_TracesByIdEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphDebugInfo_TracesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tensorflow::GraphDebugInfo_TracesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphDebugInfo_TracesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphDebugInfo_NameToTraceIdEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tensorflow::GraphDebugInfo_NameToTraceIdEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphDebugInfo_NameToTraceIdEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphDebugInfo*
Arena::CreateMaybeMessage< ::tensorflow::GraphDebugInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphDebugInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
