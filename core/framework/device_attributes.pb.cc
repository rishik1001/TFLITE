// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/device_attributes.proto

#include "tensorflow/core/framework/device_attributes.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR InterconnectLink::InterconnectLink(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_id_)*/0
  , /*decltype(_impl_.strength_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InterconnectLinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InterconnectLinkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InterconnectLinkDefaultTypeInternal() {}
  union {
    InterconnectLink _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InterconnectLinkDefaultTypeInternal _InterconnectLink_default_instance_;
PROTOBUF_CONSTEXPR LocalLinks::LocalLinks(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.link_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocalLinksDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalLinksDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalLinksDefaultTypeInternal() {}
  union {
    LocalLinks _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalLinksDefaultTypeInternal _LocalLinks_default_instance_;
PROTOBUF_CONSTEXPR DeviceLocality::DeviceLocality(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.links_)*/nullptr
  , /*decltype(_impl_.bus_id_)*/0
  , /*decltype(_impl_.numa_node_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceLocalityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceLocalityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceLocalityDefaultTypeInternal() {}
  union {
    DeviceLocality _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceLocalityDefaultTypeInternal _DeviceLocality_default_instance_;
PROTOBUF_CONSTEXPR DeviceAttributes::DeviceAttributes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.physical_device_desc_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.locality_)*/nullptr
  , /*decltype(_impl_.memory_limit_)*/int64_t{0}
  , /*decltype(_impl_.incarnation_)*/uint64_t{0u}
  , /*decltype(_impl_.xla_global_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceAttributesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceAttributesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceAttributesDefaultTypeInternal() {}
  union {
    DeviceAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceAttributesDefaultTypeInternal _DeviceAttributes_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::InterconnectLink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::InterconnectLink, _impl_.device_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::InterconnectLink, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::InterconnectLink, _impl_.strength_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::LocalLinks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::LocalLinks, _impl_.link_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceLocality, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceLocality, _impl_.bus_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceLocality, _impl_.numa_node_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceLocality, _impl_.links_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceAttributes, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceAttributes, _impl_.device_type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceAttributes, _impl_.memory_limit_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceAttributes, _impl_.locality_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceAttributes, _impl_.incarnation_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceAttributes, _impl_.physical_device_desc_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceAttributes, _impl_.xla_global_id_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::InterconnectLink)},
  { 9, -1, -1, sizeof(::tensorflow::LocalLinks)},
  { 16, -1, -1, sizeof(::tensorflow::DeviceLocality)},
  { 25, -1, -1, sizeof(::tensorflow::DeviceAttributes)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_InterconnectLink_default_instance_._instance,
  &::tensorflow::_LocalLinks_default_instance_._instance,
  &::tensorflow::_DeviceLocality_default_instance_._instance,
  &::tensorflow::_DeviceAttributes_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1tensorflow/core/framework/device_attri"
  "butes.proto\022\ntensorflow\"E\n\020InterconnectL"
  "ink\022\021\n\tdevice_id\030\001 \001(\005\022\014\n\004type\030\002 \001(\t\022\020\n\010"
  "strength\030\003 \001(\005\"8\n\nLocalLinks\022*\n\004link\030\001 \003"
  "(\0132\034.tensorflow.InterconnectLink\"Z\n\016Devi"
  "ceLocality\022\016\n\006bus_id\030\001 \001(\005\022\021\n\tnuma_node\030"
  "\002 \001(\005\022%\n\005links\030\003 \001(\0132\026.tensorflow.LocalL"
  "inks\"\303\001\n\020DeviceAttributes\022\014\n\004name\030\001 \001(\t\022"
  "\023\n\013device_type\030\002 \001(\t\022\024\n\014memory_limit\030\004 \001"
  "(\003\022,\n\010locality\030\005 \001(\0132\032.tensorflow.Device"
  "Locality\022\023\n\013incarnation\030\006 \001(\006\022\034\n\024physica"
  "l_device_desc\030\007 \001(\t\022\025\n\rxla_global_id\030\010 \001"
  "(\003B\221\001\n\030org.tensorflow.frameworkB\026DeviceA"
  "ttributesProtosP\001ZXgithub.com/tensorflow"
  "/tensorflow/tensorflow/go/core/framework"
  "/device_attributes_go_proto\370\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto = {
    false, false, 638, descriptor_table_protodef_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto,
    "tensorflow/core/framework/device_attributes.proto",
    &descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto(&descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto);
namespace tensorflow {

// ===================================================================

class InterconnectLink::_Internal {
 public:
};

InterconnectLink::InterconnectLink(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.InterconnectLink)
}
InterconnectLink::InterconnectLink(const InterconnectLink& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InterconnectLink* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.device_id_){}
    , decltype(_impl_.strength_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.device_id_, &from._impl_.device_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.strength_) -
    reinterpret_cast<char*>(&_impl_.device_id_)) + sizeof(_impl_.strength_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.InterconnectLink)
}

inline void InterconnectLink::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , decltype(_impl_.device_id_){0}
    , decltype(_impl_.strength_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InterconnectLink::~InterconnectLink() {
  // @@protoc_insertion_point(destructor:tensorflow.InterconnectLink)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InterconnectLink::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_.Destroy();
}

void InterconnectLink::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InterconnectLink::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.InterconnectLink)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  ::memset(&_impl_.device_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.strength_) -
      reinterpret_cast<char*>(&_impl_.device_id_)) + sizeof(_impl_.strength_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterconnectLink::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 device_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.InterconnectLink.type"));
        } else
          goto handle_unusual;
        continue;
      // int32 strength = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InterconnectLink::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.InterconnectLink)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 device_id = 1;
  if (this->_internal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_device_id(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.InterconnectLink.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // int32 strength = 3;
  if (this->_internal_strength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_strength(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.InterconnectLink)
  return target;
}

size_t InterconnectLink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.InterconnectLink)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // int32 device_id = 1;
  if (this->_internal_device_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_device_id());
  }

  // int32 strength = 3;
  if (this->_internal_strength() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_strength());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InterconnectLink::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InterconnectLink::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InterconnectLink::GetClassData() const { return &_class_data_; }


void InterconnectLink::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InterconnectLink*>(&to_msg);
  auto& from = static_cast<const InterconnectLink&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.InterconnectLink)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_device_id() != 0) {
    _this->_internal_set_device_id(from._internal_device_id());
  }
  if (from._internal_strength() != 0) {
    _this->_internal_set_strength(from._internal_strength());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InterconnectLink::CopyFrom(const InterconnectLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.InterconnectLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterconnectLink::IsInitialized() const {
  return true;
}

void InterconnectLink::InternalSwap(InterconnectLink* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InterconnectLink, _impl_.strength_)
      + sizeof(InterconnectLink::_impl_.strength_)
      - PROTOBUF_FIELD_OFFSET(InterconnectLink, _impl_.device_id_)>(
          reinterpret_cast<char*>(&_impl_.device_id_),
          reinterpret_cast<char*>(&other->_impl_.device_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InterconnectLink::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto[0]);
}

// ===================================================================

class LocalLinks::_Internal {
 public:
};

LocalLinks::LocalLinks(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.LocalLinks)
}
LocalLinks::LocalLinks(const LocalLinks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LocalLinks* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.link_){from._impl_.link_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.LocalLinks)
}

inline void LocalLinks::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.link_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

LocalLinks::~LocalLinks() {
  // @@protoc_insertion_point(destructor:tensorflow.LocalLinks)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalLinks::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.link_.~RepeatedPtrField();
}

void LocalLinks::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalLinks::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.LocalLinks)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.link_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LocalLinks::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.InterconnectLink link = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_link(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LocalLinks::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.LocalLinks)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.InterconnectLink link = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_link_size()); i < n; i++) {
    const auto& repfield = this->_internal_link(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.LocalLinks)
  return target;
}

size_t LocalLinks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.LocalLinks)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.InterconnectLink link = 1;
  total_size += 1UL * this->_internal_link_size();
  for (const auto& msg : this->_impl_.link_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LocalLinks::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LocalLinks::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LocalLinks::GetClassData() const { return &_class_data_; }


void LocalLinks::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LocalLinks*>(&to_msg);
  auto& from = static_cast<const LocalLinks&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.LocalLinks)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.link_.MergeFrom(from._impl_.link_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LocalLinks::CopyFrom(const LocalLinks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.LocalLinks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalLinks::IsInitialized() const {
  return true;
}

void LocalLinks::InternalSwap(LocalLinks* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.link_.InternalSwap(&other->_impl_.link_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LocalLinks::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto[1]);
}

// ===================================================================

class DeviceLocality::_Internal {
 public:
  static const ::tensorflow::LocalLinks& links(const DeviceLocality* msg);
};

const ::tensorflow::LocalLinks&
DeviceLocality::_Internal::links(const DeviceLocality* msg) {
  return *msg->_impl_.links_;
}
DeviceLocality::DeviceLocality(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeviceLocality)
}
DeviceLocality::DeviceLocality(const DeviceLocality& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceLocality* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.links_){nullptr}
    , decltype(_impl_.bus_id_){}
    , decltype(_impl_.numa_node_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_links()) {
    _this->_impl_.links_ = new ::tensorflow::LocalLinks(*from._impl_.links_);
  }
  ::memcpy(&_impl_.bus_id_, &from._impl_.bus_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.numa_node_) -
    reinterpret_cast<char*>(&_impl_.bus_id_)) + sizeof(_impl_.numa_node_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeviceLocality)
}

inline void DeviceLocality::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.links_){nullptr}
    , decltype(_impl_.bus_id_){0}
    , decltype(_impl_.numa_node_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DeviceLocality::~DeviceLocality() {
  // @@protoc_insertion_point(destructor:tensorflow.DeviceLocality)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceLocality::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.links_;
}

void DeviceLocality::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceLocality::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeviceLocality)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.links_ != nullptr) {
    delete _impl_.links_;
  }
  _impl_.links_ = nullptr;
  ::memset(&_impl_.bus_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.numa_node_) -
      reinterpret_cast<char*>(&_impl_.bus_id_)) + sizeof(_impl_.numa_node_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceLocality::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 bus_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bus_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 numa_node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.numa_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.LocalLinks links = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_links(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceLocality::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeviceLocality)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bus_id = 1;
  if (this->_internal_bus_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_bus_id(), target);
  }

  // int32 numa_node = 2;
  if (this->_internal_numa_node() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_numa_node(), target);
  }

  // .tensorflow.LocalLinks links = 3;
  if (this->_internal_has_links()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::links(this),
        _Internal::links(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeviceLocality)
  return target;
}

size_t DeviceLocality::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeviceLocality)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.LocalLinks links = 3;
  if (this->_internal_has_links()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.links_);
  }

  // int32 bus_id = 1;
  if (this->_internal_bus_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bus_id());
  }

  // int32 numa_node = 2;
  if (this->_internal_numa_node() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_numa_node());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceLocality::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceLocality::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceLocality::GetClassData() const { return &_class_data_; }


void DeviceLocality::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceLocality*>(&to_msg);
  auto& from = static_cast<const DeviceLocality&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeviceLocality)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_links()) {
    _this->_internal_mutable_links()->::tensorflow::LocalLinks::MergeFrom(
        from._internal_links());
  }
  if (from._internal_bus_id() != 0) {
    _this->_internal_set_bus_id(from._internal_bus_id());
  }
  if (from._internal_numa_node() != 0) {
    _this->_internal_set_numa_node(from._internal_numa_node());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceLocality::CopyFrom(const DeviceLocality& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeviceLocality)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceLocality::IsInitialized() const {
  return true;
}

void DeviceLocality::InternalSwap(DeviceLocality* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceLocality, _impl_.numa_node_)
      + sizeof(DeviceLocality::_impl_.numa_node_)
      - PROTOBUF_FIELD_OFFSET(DeviceLocality, _impl_.links_)>(
          reinterpret_cast<char*>(&_impl_.links_),
          reinterpret_cast<char*>(&other->_impl_.links_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceLocality::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto[2]);
}

// ===================================================================

class DeviceAttributes::_Internal {
 public:
  static const ::tensorflow::DeviceLocality& locality(const DeviceAttributes* msg);
};

const ::tensorflow::DeviceLocality&
DeviceAttributes::_Internal::locality(const DeviceAttributes* msg) {
  return *msg->_impl_.locality_;
}
DeviceAttributes::DeviceAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeviceAttributes)
}
DeviceAttributes::DeviceAttributes(const DeviceAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceAttributes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.device_type_){}
    , decltype(_impl_.physical_device_desc_){}
    , decltype(_impl_.locality_){nullptr}
    , decltype(_impl_.memory_limit_){}
    , decltype(_impl_.incarnation_){}
    , decltype(_impl_.xla_global_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.device_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_type().empty()) {
    _this->_impl_.device_type_.Set(from._internal_device_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.physical_device_desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.physical_device_desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_physical_device_desc().empty()) {
    _this->_impl_.physical_device_desc_.Set(from._internal_physical_device_desc(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_locality()) {
    _this->_impl_.locality_ = new ::tensorflow::DeviceLocality(*from._impl_.locality_);
  }
  ::memcpy(&_impl_.memory_limit_, &from._impl_.memory_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.xla_global_id_) -
    reinterpret_cast<char*>(&_impl_.memory_limit_)) + sizeof(_impl_.xla_global_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeviceAttributes)
}

inline void DeviceAttributes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.device_type_){}
    , decltype(_impl_.physical_device_desc_){}
    , decltype(_impl_.locality_){nullptr}
    , decltype(_impl_.memory_limit_){int64_t{0}}
    , decltype(_impl_.incarnation_){uint64_t{0u}}
    , decltype(_impl_.xla_global_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.physical_device_desc_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.physical_device_desc_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceAttributes::~DeviceAttributes() {
  // @@protoc_insertion_point(destructor:tensorflow.DeviceAttributes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.device_type_.Destroy();
  _impl_.physical_device_desc_.Destroy();
  if (this != internal_default_instance()) delete _impl_.locality_;
}

void DeviceAttributes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeviceAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.device_type_.ClearToEmpty();
  _impl_.physical_device_desc_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.locality_ != nullptr) {
    delete _impl_.locality_;
  }
  _impl_.locality_ = nullptr;
  ::memset(&_impl_.memory_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.xla_global_id_) -
      reinterpret_cast<char*>(&_impl_.memory_limit_)) + sizeof(_impl_.xla_global_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceAttributes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.DeviceAttributes.name"));
        } else
          goto handle_unusual;
        continue;
      // string device_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_device_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.DeviceAttributes.device_type"));
        } else
          goto handle_unusual;
        continue;
      // int64 memory_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.memory_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.DeviceLocality locality = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_locality(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // fixed64 incarnation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.incarnation_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // string physical_device_desc = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_physical_device_desc();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.DeviceAttributes.physical_device_desc"));
        } else
          goto handle_unusual;
        continue;
      // int64 xla_global_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.xla_global_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeviceAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceAttributes.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string device_type = 2;
  if (!this->_internal_device_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_type().data(), static_cast<int>(this->_internal_device_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceAttributes.device_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device_type(), target);
  }

  // int64 memory_limit = 4;
  if (this->_internal_memory_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_memory_limit(), target);
  }

  // .tensorflow.DeviceLocality locality = 5;
  if (this->_internal_has_locality()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::locality(this),
        _Internal::locality(this).GetCachedSize(), target, stream);
  }

  // fixed64 incarnation = 6;
  if (this->_internal_incarnation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(6, this->_internal_incarnation(), target);
  }

  // string physical_device_desc = 7;
  if (!this->_internal_physical_device_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_physical_device_desc().data(), static_cast<int>(this->_internal_physical_device_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceAttributes.physical_device_desc");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_physical_device_desc(), target);
  }

  // int64 xla_global_id = 8;
  if (this->_internal_xla_global_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_xla_global_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeviceAttributes)
  return target;
}

size_t DeviceAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeviceAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string device_type = 2;
  if (!this->_internal_device_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_type());
  }

  // string physical_device_desc = 7;
  if (!this->_internal_physical_device_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_physical_device_desc());
  }

  // .tensorflow.DeviceLocality locality = 5;
  if (this->_internal_has_locality()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.locality_);
  }

  // int64 memory_limit = 4;
  if (this->_internal_memory_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_memory_limit());
  }

  // fixed64 incarnation = 6;
  if (this->_internal_incarnation() != 0) {
    total_size += 1 + 8;
  }

  // int64 xla_global_id = 8;
  if (this->_internal_xla_global_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_xla_global_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceAttributes::GetClassData() const { return &_class_data_; }


void DeviceAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceAttributes*>(&to_msg);
  auto& from = static_cast<const DeviceAttributes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeviceAttributes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_device_type().empty()) {
    _this->_internal_set_device_type(from._internal_device_type());
  }
  if (!from._internal_physical_device_desc().empty()) {
    _this->_internal_set_physical_device_desc(from._internal_physical_device_desc());
  }
  if (from._internal_has_locality()) {
    _this->_internal_mutable_locality()->::tensorflow::DeviceLocality::MergeFrom(
        from._internal_locality());
  }
  if (from._internal_memory_limit() != 0) {
    _this->_internal_set_memory_limit(from._internal_memory_limit());
  }
  if (from._internal_incarnation() != 0) {
    _this->_internal_set_incarnation(from._internal_incarnation());
  }
  if (from._internal_xla_global_id() != 0) {
    _this->_internal_set_xla_global_id(from._internal_xla_global_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceAttributes::CopyFrom(const DeviceAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeviceAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAttributes::IsInitialized() const {
  return true;
}

void DeviceAttributes::InternalSwap(DeviceAttributes* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_type_, lhs_arena,
      &other->_impl_.device_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.physical_device_desc_, lhs_arena,
      &other->_impl_.physical_device_desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceAttributes, _impl_.xla_global_id_)
      + sizeof(DeviceAttributes::_impl_.xla_global_id_)
      - PROTOBUF_FIELD_OFFSET(DeviceAttributes, _impl_.locality_)>(
          reinterpret_cast<char*>(&_impl_.locality_),
          reinterpret_cast<char*>(&other->_impl_.locality_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceAttributes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::InterconnectLink*
Arena::CreateMaybeMessage< ::tensorflow::InterconnectLink >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::InterconnectLink >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::LocalLinks*
Arena::CreateMaybeMessage< ::tensorflow::LocalLinks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::LocalLinks >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DeviceLocality*
Arena::CreateMaybeMessage< ::tensorflow::DeviceLocality >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DeviceLocality >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DeviceAttributes*
Arena::CreateMaybeMessage< ::tensorflow::DeviceAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DeviceAttributes >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
