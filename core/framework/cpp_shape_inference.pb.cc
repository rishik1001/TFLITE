// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/cpp_shape_inference.proto

#include "tensorflow/core/framework/cpp_shape_inference.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
namespace core {
PROTOBUF_CONSTEXPR CppShapeInferenceResult_HandleShapeAndType::CppShapeInferenceResult_HandleShapeAndType(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shape_)*/nullptr
  , /*decltype(_impl_.type_)*/nullptr
  , /*decltype(_impl_.dtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CppShapeInferenceResult_HandleShapeAndTypeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CppShapeInferenceResult_HandleShapeAndTypeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CppShapeInferenceResult_HandleShapeAndTypeDefaultTypeInternal() {}
  union {
    CppShapeInferenceResult_HandleShapeAndType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CppShapeInferenceResult_HandleShapeAndTypeDefaultTypeInternal _CppShapeInferenceResult_HandleShapeAndType_default_instance_;
PROTOBUF_CONSTEXPR CppShapeInferenceResult_HandleData::CppShapeInferenceResult_HandleData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shape_and_type_)*/{}
  , /*decltype(_impl_.is_set_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CppShapeInferenceResult_HandleDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CppShapeInferenceResult_HandleDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CppShapeInferenceResult_HandleDataDefaultTypeInternal() {}
  union {
    CppShapeInferenceResult_HandleData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CppShapeInferenceResult_HandleDataDefaultTypeInternal _CppShapeInferenceResult_HandleData_default_instance_;
PROTOBUF_CONSTEXPR CppShapeInferenceResult::CppShapeInferenceResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shape_)*/nullptr
  , /*decltype(_impl_.handle_data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CppShapeInferenceResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CppShapeInferenceResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CppShapeInferenceResultDefaultTypeInternal() {}
  union {
    CppShapeInferenceResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CppShapeInferenceResultDefaultTypeInternal _CppShapeInferenceResult_default_instance_;
PROTOBUF_CONSTEXPR CppShapeInferenceInputsNeeded::CppShapeInferenceInputsNeeded(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_tensors_needed_)*/{}
  , /*decltype(_impl_._input_tensors_needed_cached_byte_size_)*/{0}
  , /*decltype(_impl_.input_tensors_as_shapes_needed_)*/{}
  , /*decltype(_impl_._input_tensors_as_shapes_needed_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CppShapeInferenceInputsNeededDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CppShapeInferenceInputsNeededDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CppShapeInferenceInputsNeededDefaultTypeInternal() {}
  union {
    CppShapeInferenceInputsNeeded _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CppShapeInferenceInputsNeededDefaultTypeInternal _CppShapeInferenceInputsNeeded_default_instance_;
}  // namespace core
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType, _impl_.dtype_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::core::CppShapeInferenceResult_HandleData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::core::CppShapeInferenceResult_HandleData, _impl_.is_set_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::core::CppShapeInferenceResult_HandleData, _impl_.shape_and_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::core::CppShapeInferenceResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::core::CppShapeInferenceResult, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::core::CppShapeInferenceResult, _impl_.handle_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::core::CppShapeInferenceInputsNeeded, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::core::CppShapeInferenceInputsNeeded, _impl_.input_tensors_needed_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::core::CppShapeInferenceInputsNeeded, _impl_.input_tensors_as_shapes_needed_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType)},
  { 9, -1, -1, sizeof(::tensorflow::core::CppShapeInferenceResult_HandleData)},
  { 17, -1, -1, sizeof(::tensorflow::core::CppShapeInferenceResult)},
  { 25, -1, -1, sizeof(::tensorflow::core::CppShapeInferenceInputsNeeded)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::core::_CppShapeInferenceResult_HandleShapeAndType_default_instance_._instance,
  &::tensorflow::core::_CppShapeInferenceResult_HandleData_default_instance_._instance,
  &::tensorflow::core::_CppShapeInferenceResult_default_instance_._instance,
  &::tensorflow::core::_CppShapeInferenceInputsNeeded_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n3tensorflow/core/framework/cpp_shape_in"
  "ference.proto\022\017tensorflow.core\032)tensorfl"
  "ow/core/framework/full_type.proto\032,tenso"
  "rflow/core/framework/tensor_shape.proto\032"
  "%tensorflow/core/framework/types.proto\"\245"
  "\003\n\027CppShapeInferenceResult\022+\n\005shape\030\001 \001("
  "\0132\034.tensorflow.TensorShapeProto\022H\n\013handl"
  "e_data\030\004 \001(\01323.tensorflow.core.CppShapeI"
  "nferenceResult.HandleData\032\223\001\n\022HandleShap"
  "eAndType\022+\n\005shape\030\001 \001(\0132\034.tensorflow.Ten"
  "sorShapeProto\022#\n\005dtype\030\002 \001(\0162\024.tensorflo"
  "w.DataType\022%\n\004type\030\004 \001(\0132\027.tensorflow.Fu"
  "llTypeDefJ\004\010\003\020\004\032q\n\nHandleData\022\016\n\006is_set\030"
  "\001 \001(\010\022S\n\016shape_and_type\030\002 \003(\0132;.tensorfl"
  "ow.core.CppShapeInferenceResult.HandleSh"
  "apeAndTypeJ\004\010\002\020\003J\004\010\003\020\004\"e\n\035CppShapeInfere"
  "nceInputsNeeded\022\034\n\024input_tensors_needed\030"
  "\001 \003(\005\022&\n\036input_tensors_as_shapes_needed\030"
  "\002 \003(\005BaZ\\github.com/tensorflow/tensorflo"
  "w/tensorflow/go/python/framework/cpp_sha"
  "pe_inference_go_proto\370\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto_deps[3] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2ffull_5ftype_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto = {
    false, false, 832, descriptor_table_protodef_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto,
    "tensorflow/core/framework/cpp_shape_inference.proto",
    &descriptor_table_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto_once, descriptor_table_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto_deps, 3, 4,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto(&descriptor_table_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto);
namespace tensorflow {
namespace core {

// ===================================================================

class CppShapeInferenceResult_HandleShapeAndType::_Internal {
 public:
  static const ::tensorflow::TensorShapeProto& shape(const CppShapeInferenceResult_HandleShapeAndType* msg);
  static const ::tensorflow::FullTypeDef& type(const CppShapeInferenceResult_HandleShapeAndType* msg);
};

const ::tensorflow::TensorShapeProto&
CppShapeInferenceResult_HandleShapeAndType::_Internal::shape(const CppShapeInferenceResult_HandleShapeAndType* msg) {
  return *msg->_impl_.shape_;
}
const ::tensorflow::FullTypeDef&
CppShapeInferenceResult_HandleShapeAndType::_Internal::type(const CppShapeInferenceResult_HandleShapeAndType* msg) {
  return *msg->_impl_.type_;
}
void CppShapeInferenceResult_HandleShapeAndType::clear_shape() {
  if (GetArenaForAllocation() == nullptr && _impl_.shape_ != nullptr) {
    delete _impl_.shape_;
  }
  _impl_.shape_ = nullptr;
}
void CppShapeInferenceResult_HandleShapeAndType::clear_type() {
  if (GetArenaForAllocation() == nullptr && _impl_.type_ != nullptr) {
    delete _impl_.type_;
  }
  _impl_.type_ = nullptr;
}
CppShapeInferenceResult_HandleShapeAndType::CppShapeInferenceResult_HandleShapeAndType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType)
}
CppShapeInferenceResult_HandleShapeAndType::CppShapeInferenceResult_HandleShapeAndType(const CppShapeInferenceResult_HandleShapeAndType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CppShapeInferenceResult_HandleShapeAndType* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.dtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shape()) {
    _this->_impl_.shape_ = new ::tensorflow::TensorShapeProto(*from._impl_.shape_);
  }
  if (from._internal_has_type()) {
    _this->_impl_.type_ = new ::tensorflow::FullTypeDef(*from._impl_.type_);
  }
  _this->_impl_.dtype_ = from._impl_.dtype_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType)
}

inline void CppShapeInferenceResult_HandleShapeAndType::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.type_){nullptr}
    , decltype(_impl_.dtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CppShapeInferenceResult_HandleShapeAndType::~CppShapeInferenceResult_HandleShapeAndType() {
  // @@protoc_insertion_point(destructor:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CppShapeInferenceResult_HandleShapeAndType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.shape_;
  if (this != internal_default_instance()) delete _impl_.type_;
}

void CppShapeInferenceResult_HandleShapeAndType::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CppShapeInferenceResult_HandleShapeAndType::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.shape_ != nullptr) {
    delete _impl_.shape_;
  }
  _impl_.shape_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.type_ != nullptr) {
    delete _impl_.type_;
  }
  _impl_.type_ = nullptr;
  _impl_.dtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CppShapeInferenceResult_HandleShapeAndType::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.TensorShapeProto shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.DataType dtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::tensorflow::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.FullTypeDef type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CppShapeInferenceResult_HandleShapeAndType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TensorShapeProto shape = 1;
  if (this->_internal_has_shape()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::shape(this),
        _Internal::shape(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.DataType dtype = 2;
  if (this->_internal_dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_dtype(), target);
  }

  // .tensorflow.FullTypeDef type = 4;
  if (this->_internal_has_type()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::type(this),
        _Internal::type(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType)
  return target;
}

size_t CppShapeInferenceResult_HandleShapeAndType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.TensorShapeProto shape = 1;
  if (this->_internal_has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shape_);
  }

  // .tensorflow.FullTypeDef type = 4;
  if (this->_internal_has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.type_);
  }

  // .tensorflow.DataType dtype = 2;
  if (this->_internal_dtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CppShapeInferenceResult_HandleShapeAndType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CppShapeInferenceResult_HandleShapeAndType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CppShapeInferenceResult_HandleShapeAndType::GetClassData() const { return &_class_data_; }


void CppShapeInferenceResult_HandleShapeAndType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CppShapeInferenceResult_HandleShapeAndType*>(&to_msg);
  auto& from = static_cast<const CppShapeInferenceResult_HandleShapeAndType&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shape()) {
    _this->_internal_mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(
        from._internal_shape());
  }
  if (from._internal_has_type()) {
    _this->_internal_mutable_type()->::tensorflow::FullTypeDef::MergeFrom(
        from._internal_type());
  }
  if (from._internal_dtype() != 0) {
    _this->_internal_set_dtype(from._internal_dtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CppShapeInferenceResult_HandleShapeAndType::CopyFrom(const CppShapeInferenceResult_HandleShapeAndType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.core.CppShapeInferenceResult.HandleShapeAndType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CppShapeInferenceResult_HandleShapeAndType::IsInitialized() const {
  return true;
}

void CppShapeInferenceResult_HandleShapeAndType::InternalSwap(CppShapeInferenceResult_HandleShapeAndType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CppShapeInferenceResult_HandleShapeAndType, _impl_.dtype_)
      + sizeof(CppShapeInferenceResult_HandleShapeAndType::_impl_.dtype_)
      - PROTOBUF_FIELD_OFFSET(CppShapeInferenceResult_HandleShapeAndType, _impl_.shape_)>(
          reinterpret_cast<char*>(&_impl_.shape_),
          reinterpret_cast<char*>(&other->_impl_.shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CppShapeInferenceResult_HandleShapeAndType::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto[0]);
}

// ===================================================================

class CppShapeInferenceResult_HandleData::_Internal {
 public:
};

CppShapeInferenceResult_HandleData::CppShapeInferenceResult_HandleData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.core.CppShapeInferenceResult.HandleData)
}
CppShapeInferenceResult_HandleData::CppShapeInferenceResult_HandleData(const CppShapeInferenceResult_HandleData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CppShapeInferenceResult_HandleData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_and_type_){from._impl_.shape_and_type_}
    , decltype(_impl_.is_set_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.is_set_ = from._impl_.is_set_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.core.CppShapeInferenceResult.HandleData)
}

inline void CppShapeInferenceResult_HandleData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_and_type_){arena}
    , decltype(_impl_.is_set_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CppShapeInferenceResult_HandleData::~CppShapeInferenceResult_HandleData() {
  // @@protoc_insertion_point(destructor:tensorflow.core.CppShapeInferenceResult.HandleData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CppShapeInferenceResult_HandleData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shape_and_type_.~RepeatedPtrField();
}

void CppShapeInferenceResult_HandleData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CppShapeInferenceResult_HandleData::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.core.CppShapeInferenceResult.HandleData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shape_and_type_.Clear();
  _impl_.is_set_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CppShapeInferenceResult_HandleData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_set = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.is_set_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.core.CppShapeInferenceResult.HandleShapeAndType shape_and_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shape_and_type(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CppShapeInferenceResult_HandleData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.core.CppShapeInferenceResult.HandleData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_set = 1;
  if (this->_internal_is_set() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_set(), target);
  }

  // repeated .tensorflow.core.CppShapeInferenceResult.HandleShapeAndType shape_and_type = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shape_and_type_size()); i < n; i++) {
    const auto& repfield = this->_internal_shape_and_type(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.core.CppShapeInferenceResult.HandleData)
  return target;
}

size_t CppShapeInferenceResult_HandleData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.core.CppShapeInferenceResult.HandleData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.core.CppShapeInferenceResult.HandleShapeAndType shape_and_type = 2;
  total_size += 1UL * this->_internal_shape_and_type_size();
  for (const auto& msg : this->_impl_.shape_and_type_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool is_set = 1;
  if (this->_internal_is_set() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CppShapeInferenceResult_HandleData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CppShapeInferenceResult_HandleData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CppShapeInferenceResult_HandleData::GetClassData() const { return &_class_data_; }


void CppShapeInferenceResult_HandleData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CppShapeInferenceResult_HandleData*>(&to_msg);
  auto& from = static_cast<const CppShapeInferenceResult_HandleData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.core.CppShapeInferenceResult.HandleData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shape_and_type_.MergeFrom(from._impl_.shape_and_type_);
  if (from._internal_is_set() != 0) {
    _this->_internal_set_is_set(from._internal_is_set());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CppShapeInferenceResult_HandleData::CopyFrom(const CppShapeInferenceResult_HandleData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.core.CppShapeInferenceResult.HandleData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CppShapeInferenceResult_HandleData::IsInitialized() const {
  return true;
}

void CppShapeInferenceResult_HandleData::InternalSwap(CppShapeInferenceResult_HandleData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shape_and_type_.InternalSwap(&other->_impl_.shape_and_type_);
  swap(_impl_.is_set_, other->_impl_.is_set_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CppShapeInferenceResult_HandleData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto[1]);
}

// ===================================================================

class CppShapeInferenceResult::_Internal {
 public:
  static const ::tensorflow::TensorShapeProto& shape(const CppShapeInferenceResult* msg);
  static const ::tensorflow::core::CppShapeInferenceResult_HandleData& handle_data(const CppShapeInferenceResult* msg);
};

const ::tensorflow::TensorShapeProto&
CppShapeInferenceResult::_Internal::shape(const CppShapeInferenceResult* msg) {
  return *msg->_impl_.shape_;
}
const ::tensorflow::core::CppShapeInferenceResult_HandleData&
CppShapeInferenceResult::_Internal::handle_data(const CppShapeInferenceResult* msg) {
  return *msg->_impl_.handle_data_;
}
void CppShapeInferenceResult::clear_shape() {
  if (GetArenaForAllocation() == nullptr && _impl_.shape_ != nullptr) {
    delete _impl_.shape_;
  }
  _impl_.shape_ = nullptr;
}
CppShapeInferenceResult::CppShapeInferenceResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.core.CppShapeInferenceResult)
}
CppShapeInferenceResult::CppShapeInferenceResult(const CppShapeInferenceResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CppShapeInferenceResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.handle_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shape()) {
    _this->_impl_.shape_ = new ::tensorflow::TensorShapeProto(*from._impl_.shape_);
  }
  if (from._internal_has_handle_data()) {
    _this->_impl_.handle_data_ = new ::tensorflow::core::CppShapeInferenceResult_HandleData(*from._impl_.handle_data_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.core.CppShapeInferenceResult)
}

inline void CppShapeInferenceResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.handle_data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CppShapeInferenceResult::~CppShapeInferenceResult() {
  // @@protoc_insertion_point(destructor:tensorflow.core.CppShapeInferenceResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CppShapeInferenceResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.shape_;
  if (this != internal_default_instance()) delete _impl_.handle_data_;
}

void CppShapeInferenceResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CppShapeInferenceResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.core.CppShapeInferenceResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.shape_ != nullptr) {
    delete _impl_.shape_;
  }
  _impl_.shape_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.handle_data_ != nullptr) {
    delete _impl_.handle_data_;
  }
  _impl_.handle_data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CppShapeInferenceResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.TensorShapeProto shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.core.CppShapeInferenceResult.HandleData handle_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_handle_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CppShapeInferenceResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.core.CppShapeInferenceResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TensorShapeProto shape = 1;
  if (this->_internal_has_shape()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::shape(this),
        _Internal::shape(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.core.CppShapeInferenceResult.HandleData handle_data = 4;
  if (this->_internal_has_handle_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::handle_data(this),
        _Internal::handle_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.core.CppShapeInferenceResult)
  return target;
}

size_t CppShapeInferenceResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.core.CppShapeInferenceResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.TensorShapeProto shape = 1;
  if (this->_internal_has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shape_);
  }

  // .tensorflow.core.CppShapeInferenceResult.HandleData handle_data = 4;
  if (this->_internal_has_handle_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.handle_data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CppShapeInferenceResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CppShapeInferenceResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CppShapeInferenceResult::GetClassData() const { return &_class_data_; }


void CppShapeInferenceResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CppShapeInferenceResult*>(&to_msg);
  auto& from = static_cast<const CppShapeInferenceResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.core.CppShapeInferenceResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shape()) {
    _this->_internal_mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(
        from._internal_shape());
  }
  if (from._internal_has_handle_data()) {
    _this->_internal_mutable_handle_data()->::tensorflow::core::CppShapeInferenceResult_HandleData::MergeFrom(
        from._internal_handle_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CppShapeInferenceResult::CopyFrom(const CppShapeInferenceResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.core.CppShapeInferenceResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CppShapeInferenceResult::IsInitialized() const {
  return true;
}

void CppShapeInferenceResult::InternalSwap(CppShapeInferenceResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CppShapeInferenceResult, _impl_.handle_data_)
      + sizeof(CppShapeInferenceResult::_impl_.handle_data_)
      - PROTOBUF_FIELD_OFFSET(CppShapeInferenceResult, _impl_.shape_)>(
          reinterpret_cast<char*>(&_impl_.shape_),
          reinterpret_cast<char*>(&other->_impl_.shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CppShapeInferenceResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto[2]);
}

// ===================================================================

class CppShapeInferenceInputsNeeded::_Internal {
 public:
};

CppShapeInferenceInputsNeeded::CppShapeInferenceInputsNeeded(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.core.CppShapeInferenceInputsNeeded)
}
CppShapeInferenceInputsNeeded::CppShapeInferenceInputsNeeded(const CppShapeInferenceInputsNeeded& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CppShapeInferenceInputsNeeded* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_tensors_needed_){from._impl_.input_tensors_needed_}
    , /*decltype(_impl_._input_tensors_needed_cached_byte_size_)*/{0}
    , decltype(_impl_.input_tensors_as_shapes_needed_){from._impl_.input_tensors_as_shapes_needed_}
    , /*decltype(_impl_._input_tensors_as_shapes_needed_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.core.CppShapeInferenceInputsNeeded)
}

inline void CppShapeInferenceInputsNeeded::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.input_tensors_needed_){arena}
    , /*decltype(_impl_._input_tensors_needed_cached_byte_size_)*/{0}
    , decltype(_impl_.input_tensors_as_shapes_needed_){arena}
    , /*decltype(_impl_._input_tensors_as_shapes_needed_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CppShapeInferenceInputsNeeded::~CppShapeInferenceInputsNeeded() {
  // @@protoc_insertion_point(destructor:tensorflow.core.CppShapeInferenceInputsNeeded)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CppShapeInferenceInputsNeeded::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_tensors_needed_.~RepeatedField();
  _impl_.input_tensors_as_shapes_needed_.~RepeatedField();
}

void CppShapeInferenceInputsNeeded::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CppShapeInferenceInputsNeeded::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.core.CppShapeInferenceInputsNeeded)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_tensors_needed_.Clear();
  _impl_.input_tensors_as_shapes_needed_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CppShapeInferenceInputsNeeded::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 input_tensors_needed = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_input_tensors_needed(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_input_tensors_needed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 input_tensors_as_shapes_needed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_input_tensors_as_shapes_needed(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_input_tensors_as_shapes_needed(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CppShapeInferenceInputsNeeded::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.core.CppShapeInferenceInputsNeeded)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 input_tensors_needed = 1;
  {
    int byte_size = _impl_._input_tensors_needed_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_input_tensors_needed(), byte_size, target);
    }
  }

  // repeated int32 input_tensors_as_shapes_needed = 2;
  {
    int byte_size = _impl_._input_tensors_as_shapes_needed_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_input_tensors_as_shapes_needed(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.core.CppShapeInferenceInputsNeeded)
  return target;
}

size_t CppShapeInferenceInputsNeeded::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.core.CppShapeInferenceInputsNeeded)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 input_tensors_needed = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.input_tensors_needed_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._input_tensors_needed_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 input_tensors_as_shapes_needed = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.input_tensors_as_shapes_needed_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._input_tensors_as_shapes_needed_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CppShapeInferenceInputsNeeded::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CppShapeInferenceInputsNeeded::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CppShapeInferenceInputsNeeded::GetClassData() const { return &_class_data_; }


void CppShapeInferenceInputsNeeded::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CppShapeInferenceInputsNeeded*>(&to_msg);
  auto& from = static_cast<const CppShapeInferenceInputsNeeded&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.core.CppShapeInferenceInputsNeeded)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.input_tensors_needed_.MergeFrom(from._impl_.input_tensors_needed_);
  _this->_impl_.input_tensors_as_shapes_needed_.MergeFrom(from._impl_.input_tensors_as_shapes_needed_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CppShapeInferenceInputsNeeded::CopyFrom(const CppShapeInferenceInputsNeeded& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.core.CppShapeInferenceInputsNeeded)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CppShapeInferenceInputsNeeded::IsInitialized() const {
  return true;
}

void CppShapeInferenceInputsNeeded::InternalSwap(CppShapeInferenceInputsNeeded* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.input_tensors_needed_.InternalSwap(&other->_impl_.input_tensors_needed_);
  _impl_.input_tensors_as_shapes_needed_.InternalSwap(&other->_impl_.input_tensors_as_shapes_needed_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CppShapeInferenceInputsNeeded::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fcpp_5fshape_5finference_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace core
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType*
Arena::CreateMaybeMessage< ::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::core::CppShapeInferenceResult_HandleShapeAndType >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::core::CppShapeInferenceResult_HandleData*
Arena::CreateMaybeMessage< ::tensorflow::core::CppShapeInferenceResult_HandleData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::core::CppShapeInferenceResult_HandleData >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::core::CppShapeInferenceResult*
Arena::CreateMaybeMessage< ::tensorflow::core::CppShapeInferenceResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::core::CppShapeInferenceResult >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::core::CppShapeInferenceInputsNeeded*
Arena::CreateMaybeMessage< ::tensorflow::core::CppShapeInferenceInputsNeeded >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::core::CppShapeInferenceInputsNeeded >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
