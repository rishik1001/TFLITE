// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/dataset.proto

#include "tensorflow/core/framework/dataset.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
namespace data {
PROTOBUF_CONSTEXPR CompressedComponentMetadata::CompressedComponentMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.uncompressed_bytes_)*/{}
  , /*decltype(_impl_._uncompressed_bytes_cached_byte_size_)*/{0}
  , /*decltype(_impl_.tensor_shape_)*/nullptr
  , /*decltype(_impl_.dtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompressedComponentMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompressedComponentMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompressedComponentMetadataDefaultTypeInternal() {}
  union {
    CompressedComponentMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompressedComponentMetadataDefaultTypeInternal _CompressedComponentMetadata_default_instance_;
PROTOBUF_CONSTEXPR CompressedElement::CompressedElement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.component_metadata_)*/{}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompressedElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompressedElementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompressedElementDefaultTypeInternal() {}
  union {
    CompressedElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompressedElementDefaultTypeInternal _CompressedElement_default_instance_;
PROTOBUF_CONSTEXPR UncompressedElement::UncompressedElement(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.components_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UncompressedElementDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UncompressedElementDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UncompressedElementDefaultTypeInternal() {}
  union {
    UncompressedElement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UncompressedElementDefaultTypeInternal _UncompressedElement_default_instance_;
}  // namespace data
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fframework_2fdataset_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fdataset_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fframework_2fdataset_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fframework_2fdataset_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::CompressedComponentMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::CompressedComponentMetadata, _impl_.dtype_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::CompressedComponentMetadata, _impl_.tensor_shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::CompressedComponentMetadata, _impl_.uncompressed_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::CompressedElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::CompressedElement, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::CompressedElement, _impl_.component_metadata_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::CompressedElement, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::UncompressedElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::UncompressedElement, _impl_.components_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::data::CompressedComponentMetadata)},
  { 9, -1, -1, sizeof(::tensorflow::data::CompressedElement)},
  { 18, -1, -1, sizeof(::tensorflow::data::UncompressedElement)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::data::_CompressedComponentMetadata_default_instance_._instance,
  &::tensorflow::data::_CompressedElement_default_instance_._instance,
  &::tensorflow::data::_UncompressedElement_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fframework_2fdataset_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'tensorflow/core/framework/dataset.prot"
  "o\022\017tensorflow.data\032&tensorflow/core/fram"
  "ework/tensor.proto\032,tensorflow/core/fram"
  "ework/tensor_shape.proto\032%tensorflow/cor"
  "e/framework/types.proto\"\230\001\n\033CompressedCo"
  "mponentMetadata\022#\n\005dtype\030\001 \001(\0162\024.tensorf"
  "low.DataType\0222\n\014tensor_shape\030\002 \001(\0132\034.ten"
  "sorflow.TensorShapeProto\022\032\n\022uncompressed"
  "_bytes\030\004 \003(\004J\004\010\003\020\004\"|\n\021CompressedElement\022"
  "\014\n\004data\030\001 \001(\014\022H\n\022component_metadata\030\002 \003("
  "\0132,.tensorflow.data.CompressedComponentM"
  "etadata\022\017\n\007version\030\003 \001(\005\"B\n\023Uncompressed"
  "Element\022+\n\ncomponents\030\001 \003(\0132\027.tensorflow"
  ".TensorProtoB\003\370\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fframework_2fdataset_2eproto_deps[3] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fframework_2fdataset_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2fdataset_2eproto = {
    false, false, 545, descriptor_table_protodef_tensorflow_2fcore_2fframework_2fdataset_2eproto,
    "tensorflow/core/framework/dataset.proto",
    &descriptor_table_tensorflow_2fcore_2fframework_2fdataset_2eproto_once, descriptor_table_tensorflow_2fcore_2fframework_2fdataset_2eproto_deps, 3, 3,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fframework_2fdataset_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fframework_2fdataset_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fdataset_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fframework_2fdataset_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fframework_2fdataset_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fframework_2fdataset_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fframework_2fdataset_2eproto(&descriptor_table_tensorflow_2fcore_2fframework_2fdataset_2eproto);
namespace tensorflow {
namespace data {

// ===================================================================

class CompressedComponentMetadata::_Internal {
 public:
  static const ::tensorflow::TensorShapeProto& tensor_shape(const CompressedComponentMetadata* msg);
};

const ::tensorflow::TensorShapeProto&
CompressedComponentMetadata::_Internal::tensor_shape(const CompressedComponentMetadata* msg) {
  return *msg->_impl_.tensor_shape_;
}
void CompressedComponentMetadata::clear_tensor_shape() {
  if (GetArenaForAllocation() == nullptr && _impl_.tensor_shape_ != nullptr) {
    delete _impl_.tensor_shape_;
  }
  _impl_.tensor_shape_ = nullptr;
}
CompressedComponentMetadata::CompressedComponentMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.CompressedComponentMetadata)
}
CompressedComponentMetadata::CompressedComponentMetadata(const CompressedComponentMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompressedComponentMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.uncompressed_bytes_){from._impl_.uncompressed_bytes_}
    , /*decltype(_impl_._uncompressed_bytes_cached_byte_size_)*/{0}
    , decltype(_impl_.tensor_shape_){nullptr}
    , decltype(_impl_.dtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tensor_shape()) {
    _this->_impl_.tensor_shape_ = new ::tensorflow::TensorShapeProto(*from._impl_.tensor_shape_);
  }
  _this->_impl_.dtype_ = from._impl_.dtype_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.CompressedComponentMetadata)
}

inline void CompressedComponentMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.uncompressed_bytes_){arena}
    , /*decltype(_impl_._uncompressed_bytes_cached_byte_size_)*/{0}
    , decltype(_impl_.tensor_shape_){nullptr}
    , decltype(_impl_.dtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CompressedComponentMetadata::~CompressedComponentMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.data.CompressedComponentMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompressedComponentMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.uncompressed_bytes_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.tensor_shape_;
}

void CompressedComponentMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompressedComponentMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.CompressedComponentMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uncompressed_bytes_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.tensor_shape_ != nullptr) {
    delete _impl_.tensor_shape_;
  }
  _impl_.tensor_shape_ = nullptr;
  _impl_.dtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompressedComponentMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.DataType dtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::tensorflow::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TensorShapeProto tensor_shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 uncompressed_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_uncompressed_bytes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_uncompressed_bytes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompressedComponentMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.CompressedComponentMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.DataType dtype = 1;
  if (this->_internal_dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dtype(), target);
  }

  // .tensorflow.TensorShapeProto tensor_shape = 2;
  if (this->_internal_has_tensor_shape()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tensor_shape(this),
        _Internal::tensor_shape(this).GetCachedSize(), target, stream);
  }

  // repeated uint64 uncompressed_bytes = 4;
  {
    int byte_size = _impl_._uncompressed_bytes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_uncompressed_bytes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.CompressedComponentMetadata)
  return target;
}

size_t CompressedComponentMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.CompressedComponentMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 uncompressed_bytes = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.uncompressed_bytes_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._uncompressed_bytes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .tensorflow.TensorShapeProto tensor_shape = 2;
  if (this->_internal_has_tensor_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tensor_shape_);
  }

  // .tensorflow.DataType dtype = 1;
  if (this->_internal_dtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompressedComponentMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompressedComponentMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompressedComponentMetadata::GetClassData() const { return &_class_data_; }


void CompressedComponentMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompressedComponentMetadata*>(&to_msg);
  auto& from = static_cast<const CompressedComponentMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.CompressedComponentMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.uncompressed_bytes_.MergeFrom(from._impl_.uncompressed_bytes_);
  if (from._internal_has_tensor_shape()) {
    _this->_internal_mutable_tensor_shape()->::tensorflow::TensorShapeProto::MergeFrom(
        from._internal_tensor_shape());
  }
  if (from._internal_dtype() != 0) {
    _this->_internal_set_dtype(from._internal_dtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompressedComponentMetadata::CopyFrom(const CompressedComponentMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.CompressedComponentMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedComponentMetadata::IsInitialized() const {
  return true;
}

void CompressedComponentMetadata::InternalSwap(CompressedComponentMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.uncompressed_bytes_.InternalSwap(&other->_impl_.uncompressed_bytes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompressedComponentMetadata, _impl_.dtype_)
      + sizeof(CompressedComponentMetadata::_impl_.dtype_)
      - PROTOBUF_FIELD_OFFSET(CompressedComponentMetadata, _impl_.tensor_shape_)>(
          reinterpret_cast<char*>(&_impl_.tensor_shape_),
          reinterpret_cast<char*>(&other->_impl_.tensor_shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompressedComponentMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fdataset_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fdataset_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fdataset_2eproto[0]);
}

// ===================================================================

class CompressedElement::_Internal {
 public:
};

CompressedElement::CompressedElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.CompressedElement)
}
CompressedElement::CompressedElement(const CompressedElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompressedElement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.component_metadata_){from._impl_.component_metadata_}
    , decltype(_impl_.data_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.CompressedElement)
}

inline void CompressedElement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.component_metadata_){arena}
    , decltype(_impl_.data_){}
    , decltype(_impl_.version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompressedElement::~CompressedElement() {
  // @@protoc_insertion_point(destructor:tensorflow.data.CompressedElement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompressedElement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.component_metadata_.~RepeatedPtrField();
  _impl_.data_.Destroy();
}

void CompressedElement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompressedElement::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.CompressedElement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.component_metadata_.Clear();
  _impl_.data_.ClearToEmpty();
  _impl_.version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompressedElement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.data.CompressedComponentMetadata component_metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_component_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompressedElement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.CompressedElement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // repeated .tensorflow.data.CompressedComponentMetadata component_metadata = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_component_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_component_metadata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 version = 3;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.CompressedElement)
  return target;
}

size_t CompressedElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.CompressedElement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.data.CompressedComponentMetadata component_metadata = 2;
  total_size += 1UL * this->_internal_component_metadata_size();
  for (const auto& msg : this->_impl_.component_metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes data = 1;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 version = 3;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompressedElement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompressedElement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompressedElement::GetClassData() const { return &_class_data_; }


void CompressedElement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompressedElement*>(&to_msg);
  auto& from = static_cast<const CompressedElement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.CompressedElement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.component_metadata_.MergeFrom(from._impl_.component_metadata_);
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompressedElement::CopyFrom(const CompressedElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.CompressedElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedElement::IsInitialized() const {
  return true;
}

void CompressedElement::InternalSwap(CompressedElement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.component_metadata_.InternalSwap(&other->_impl_.component_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.version_, other->_impl_.version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CompressedElement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fdataset_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fdataset_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fdataset_2eproto[1]);
}

// ===================================================================

class UncompressedElement::_Internal {
 public:
};

void UncompressedElement::clear_components() {
  _impl_.components_.Clear();
}
UncompressedElement::UncompressedElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.UncompressedElement)
}
UncompressedElement::UncompressedElement(const UncompressedElement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UncompressedElement* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.components_){from._impl_.components_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.UncompressedElement)
}

inline void UncompressedElement::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.components_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UncompressedElement::~UncompressedElement() {
  // @@protoc_insertion_point(destructor:tensorflow.data.UncompressedElement)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UncompressedElement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.components_.~RepeatedPtrField();
}

void UncompressedElement::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UncompressedElement::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.UncompressedElement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.components_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UncompressedElement::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.TensorProto components = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UncompressedElement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.UncompressedElement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.TensorProto components = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_components_size()); i < n; i++) {
    const auto& repfield = this->_internal_components(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.UncompressedElement)
  return target;
}

size_t UncompressedElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.UncompressedElement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.TensorProto components = 1;
  total_size += 1UL * this->_internal_components_size();
  for (const auto& msg : this->_impl_.components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UncompressedElement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UncompressedElement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UncompressedElement::GetClassData() const { return &_class_data_; }


void UncompressedElement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UncompressedElement*>(&to_msg);
  auto& from = static_cast<const UncompressedElement&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.UncompressedElement)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.components_.MergeFrom(from._impl_.components_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UncompressedElement::CopyFrom(const UncompressedElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.UncompressedElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UncompressedElement::IsInitialized() const {
  return true;
}

void UncompressedElement::InternalSwap(UncompressedElement* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.components_.InternalSwap(&other->_impl_.components_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UncompressedElement::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fdataset_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fdataset_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fdataset_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::data::CompressedComponentMetadata*
Arena::CreateMaybeMessage< ::tensorflow::data::CompressedComponentMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::CompressedComponentMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::data::CompressedElement*
Arena::CreateMaybeMessage< ::tensorflow::data::CompressedElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::CompressedElement >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::data::UncompressedElement*
Arena::CreateMaybeMessage< ::tensorflow::data::UncompressedElement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::UncompressedElement >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
