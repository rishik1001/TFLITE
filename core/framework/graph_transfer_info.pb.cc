// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/graph_transfer_info.proto

#include "tensorflow/core/framework/graph_transfer_info.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR GraphTransferNodeInput::GraphTransferNodeInput(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_id_)*/0
  , /*decltype(_impl_.output_port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphTransferNodeInputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphTransferNodeInputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphTransferNodeInputDefaultTypeInternal() {}
  union {
    GraphTransferNodeInput _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphTransferNodeInputDefaultTypeInternal _GraphTransferNodeInput_default_instance_;
PROTOBUF_CONSTEXPR GraphTransferNodeInfo::GraphTransferNodeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.node_id_)*/0
  , /*decltype(_impl_.soc_op_id_)*/0
  , /*decltype(_impl_.padding_id_)*/0
  , /*decltype(_impl_.input_count_)*/0
  , /*decltype(_impl_.output_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphTransferNodeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphTransferNodeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphTransferNodeInfoDefaultTypeInternal() {}
  union {
    GraphTransferNodeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphTransferNodeInfoDefaultTypeInternal _GraphTransferNodeInfo_default_instance_;
PROTOBUF_CONSTEXPR GraphTransferConstNodeInfo::GraphTransferConstNodeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shape_)*/{}
  , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.node_id_)*/0
  , /*decltype(_impl_.dtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphTransferConstNodeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphTransferConstNodeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphTransferConstNodeInfoDefaultTypeInternal() {}
  union {
    GraphTransferConstNodeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphTransferConstNodeInfoDefaultTypeInternal _GraphTransferConstNodeInfo_default_instance_;
PROTOBUF_CONSTEXPR GraphTransferNodeInputInfo::GraphTransferNodeInputInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_input_)*/{}
  , /*decltype(_impl_.node_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphTransferNodeInputInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphTransferNodeInputInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphTransferNodeInputInfoDefaultTypeInternal() {}
  union {
    GraphTransferNodeInputInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphTransferNodeInputInfoDefaultTypeInternal _GraphTransferNodeInputInfo_default_instance_;
PROTOBUF_CONSTEXPR GraphTransferNodeOutputInfo::GraphTransferNodeOutputInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.max_byte_size_)*/{}
  , /*decltype(_impl_._max_byte_size_cached_byte_size_)*/{0}
  , /*decltype(_impl_.node_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphTransferNodeOutputInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphTransferNodeOutputInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphTransferNodeOutputInfoDefaultTypeInternal() {}
  union {
    GraphTransferNodeOutputInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphTransferNodeOutputInfoDefaultTypeInternal _GraphTransferNodeOutputInfo_default_instance_;
PROTOBUF_CONSTEXPR GraphTransferGraphInputNodeInfo::GraphTransferGraphInputNodeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shape_)*/{}
  , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphTransferGraphInputNodeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphTransferGraphInputNodeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphTransferGraphInputNodeInfoDefaultTypeInternal() {}
  union {
    GraphTransferGraphInputNodeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphTransferGraphInputNodeInfoDefaultTypeInternal _GraphTransferGraphInputNodeInfo_default_instance_;
PROTOBUF_CONSTEXPR GraphTransferGraphOutputNodeInfo::GraphTransferGraphOutputNodeInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shape_)*/{}
  , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphTransferGraphOutputNodeInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphTransferGraphOutputNodeInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphTransferGraphOutputNodeInfoDefaultTypeInternal() {}
  union {
    GraphTransferGraphOutputNodeInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphTransferGraphOutputNodeInfoDefaultTypeInternal _GraphTransferGraphOutputNodeInfo_default_instance_;
PROTOBUF_CONSTEXPR GraphTransferInfo::GraphTransferInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_info_)*/{}
  , /*decltype(_impl_.const_node_info_)*/{}
  , /*decltype(_impl_.node_input_info_)*/{}
  , /*decltype(_impl_.node_output_info_)*/{}
  , /*decltype(_impl_.graph_input_node_info_)*/{}
  , /*decltype(_impl_.graph_output_node_info_)*/{}
  , /*decltype(_impl_.destination_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphTransferInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphTransferInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphTransferInfoDefaultTypeInternal() {}
  union {
    GraphTransferInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphTransferInfoDefaultTypeInternal _GraphTransferInfo_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto[8];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInput, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInput, _impl_.node_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInput, _impl_.output_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInfo, _impl_.node_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInfo, _impl_.type_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInfo, _impl_.soc_op_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInfo, _impl_.padding_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInfo, _impl_.input_count_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInfo, _impl_.output_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferConstNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferConstNodeInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferConstNodeInfo, _impl_.node_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferConstNodeInfo, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferConstNodeInfo, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferConstNodeInfo, _impl_.dtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInputInfo, _impl_.node_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeInputInfo, _impl_.node_input_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeOutputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeOutputInfo, _impl_.node_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferNodeOutputInfo, _impl_.max_byte_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferGraphInputNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferGraphInputNodeInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferGraphInputNodeInfo, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferGraphInputNodeInfo, _impl_.dtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferGraphOutputNodeInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferGraphOutputNodeInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferGraphOutputNodeInfo, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferGraphOutputNodeInfo, _impl_.dtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferInfo, _impl_.node_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferInfo, _impl_.const_node_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferInfo, _impl_.node_input_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferInfo, _impl_.node_output_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferInfo, _impl_.graph_input_node_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferInfo, _impl_.graph_output_node_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphTransferInfo, _impl_.destination_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::GraphTransferNodeInput)},
  { 8, -1, -1, sizeof(::tensorflow::GraphTransferNodeInfo)},
  { 21, -1, -1, sizeof(::tensorflow::GraphTransferConstNodeInfo)},
  { 32, -1, -1, sizeof(::tensorflow::GraphTransferNodeInputInfo)},
  { 40, -1, -1, sizeof(::tensorflow::GraphTransferNodeOutputInfo)},
  { 48, -1, -1, sizeof(::tensorflow::GraphTransferGraphInputNodeInfo)},
  { 57, -1, -1, sizeof(::tensorflow::GraphTransferGraphOutputNodeInfo)},
  { 66, -1, -1, sizeof(::tensorflow::GraphTransferInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_GraphTransferNodeInput_default_instance_._instance,
  &::tensorflow::_GraphTransferNodeInfo_default_instance_._instance,
  &::tensorflow::_GraphTransferConstNodeInfo_default_instance_._instance,
  &::tensorflow::_GraphTransferNodeInputInfo_default_instance_._instance,
  &::tensorflow::_GraphTransferNodeOutputInfo_default_instance_._instance,
  &::tensorflow::_GraphTransferGraphInputNodeInfo_default_instance_._instance,
  &::tensorflow::_GraphTransferGraphOutputNodeInfo_default_instance_._instance,
  &::tensorflow::_GraphTransferInfo_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n3tensorflow/core/framework/graph_transf"
  "er_info.proto\022\ntensorflow\032%tensorflow/co"
  "re/framework/types.proto\">\n\026GraphTransfe"
  "rNodeInput\022\017\n\007node_id\030\001 \001(\005\022\023\n\013output_po"
  "rt\030\002 \001(\005\"\233\001\n\025GraphTransferNodeInfo\022\014\n\004na"
  "me\030\001 \001(\t\022\017\n\007node_id\030\002 \001(\005\022\021\n\ttype_name\030\003"
  " \001(\t\022\021\n\tsoc_op_id\030\004 \001(\005\022\022\n\npadding_id\030\005 "
  "\001(\005\022\023\n\013input_count\030\006 \001(\005\022\024\n\014output_count"
  "\030\007 \001(\005\"}\n\032GraphTransferConstNodeInfo\022\014\n\004"
  "name\030\001 \001(\t\022\017\n\007node_id\030\002 \001(\005\022\r\n\005shape\030\003 \003"
  "(\003\022\014\n\004data\030\004 \001(\014\022#\n\005dtype\030\005 \001(\0162\024.tensor"
  "flow.DataType\"e\n\032GraphTransferNodeInputI"
  "nfo\022\017\n\007node_id\030\001 \001(\005\0226\n\nnode_input\030\002 \003(\013"
  "2\".tensorflow.GraphTransferNodeInput\"E\n\033"
  "GraphTransferNodeOutputInfo\022\017\n\007node_id\030\001"
  " \001(\005\022\025\n\rmax_byte_size\030\002 \003(\005\"c\n\037GraphTran"
  "sferGraphInputNodeInfo\022\014\n\004name\030\001 \001(\t\022\r\n\005"
  "shape\030\002 \003(\003\022#\n\005dtype\030\003 \001(\0162\024.tensorflow."
  "DataType\"d\n GraphTransferGraphOutputNode"
  "Info\022\014\n\004name\030\001 \001(\t\022\r\n\005shape\030\002 \003(\003\022#\n\005dty"
  "pe\030\003 \001(\0162\024.tensorflow.DataType\"\215\004\n\021Graph"
  "TransferInfo\0224\n\tnode_info\030\001 \003(\0132!.tensor"
  "flow.GraphTransferNodeInfo\022\?\n\017const_node"
  "_info\030\002 \003(\0132&.tensorflow.GraphTransferCo"
  "nstNodeInfo\022\?\n\017node_input_info\030\003 \003(\0132&.t"
  "ensorflow.GraphTransferNodeInputInfo\022A\n\020"
  "node_output_info\030\004 \003(\0132\'.tensorflow.Grap"
  "hTransferNodeOutputInfo\022J\n\025graph_input_n"
  "ode_info\030\005 \003(\0132+.tensorflow.GraphTransfe"
  "rGraphInputNodeInfo\022L\n\026graph_output_node"
  "_info\030\006 \003(\0132,.tensorflow.GraphTransferGr"
  "aphOutputNodeInfo\022>\n\013destination\030\007 \001(\0162)"
  ".tensorflow.GraphTransferInfo.Destinatio"
  "n\"#\n\013Destination\022\007\n\003NOP\020\000\022\013\n\007HEXAGON\020\001B\223"
  "\001\n\030org.tensorflow.frameworkB\026GraphTransf"
  "erInfoProtoP\001ZZgithub.com/tensorflow/ten"
  "sorflow/tensorflow/go/core/framework/gra"
  "ph_transfer_info_go_proto\370\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_deps[1] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto = {
    false, false, 1516, descriptor_table_protodef_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto,
    "tensorflow/core/framework/graph_transfer_info.proto",
    &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_once, descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_deps, 1, 8,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto(&descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* GraphTransferInfo_Destination_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto[0];
}
bool GraphTransferInfo_Destination_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr GraphTransferInfo_Destination GraphTransferInfo::NOP;
constexpr GraphTransferInfo_Destination GraphTransferInfo::HEXAGON;
constexpr GraphTransferInfo_Destination GraphTransferInfo::Destination_MIN;
constexpr GraphTransferInfo_Destination GraphTransferInfo::Destination_MAX;
constexpr int GraphTransferInfo::Destination_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class GraphTransferNodeInput::_Internal {
 public:
};

GraphTransferNodeInput::GraphTransferNodeInput(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferNodeInput)
}
GraphTransferNodeInput::GraphTransferNodeInput(const GraphTransferNodeInput& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GraphTransferNodeInput* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_id_){}
    , decltype(_impl_.output_port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.node_id_, &from._impl_.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.output_port_) -
    reinterpret_cast<char*>(&_impl_.node_id_)) + sizeof(_impl_.output_port_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferNodeInput)
}

inline void GraphTransferNodeInput::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_id_){0}
    , decltype(_impl_.output_port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GraphTransferNodeInput::~GraphTransferNodeInput() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferNodeInput)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphTransferNodeInput::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GraphTransferNodeInput::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphTransferNodeInput::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferNodeInput)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.output_port_) -
      reinterpret_cast<char*>(&_impl_.node_id_)) + sizeof(_impl_.output_port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphTransferNodeInput::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 output_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.output_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphTransferNodeInput::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferNodeInput)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->_internal_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_node_id(), target);
  }

  // int32 output_port = 2;
  if (this->_internal_output_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_output_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferNodeInput)
  return target;
}

size_t GraphTransferNodeInput::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferNodeInput)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->_internal_node_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_node_id());
  }

  // int32 output_port = 2;
  if (this->_internal_output_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_output_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphTransferNodeInput::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GraphTransferNodeInput::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphTransferNodeInput::GetClassData() const { return &_class_data_; }


void GraphTransferNodeInput::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GraphTransferNodeInput*>(&to_msg);
  auto& from = static_cast<const GraphTransferNodeInput&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferNodeInput)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_node_id() != 0) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  if (from._internal_output_port() != 0) {
    _this->_internal_set_output_port(from._internal_output_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphTransferNodeInput::CopyFrom(const GraphTransferNodeInput& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferNodeInput)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferNodeInput::IsInitialized() const {
  return true;
}

void GraphTransferNodeInput::InternalSwap(GraphTransferNodeInput* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphTransferNodeInput, _impl_.output_port_)
      + sizeof(GraphTransferNodeInput::_impl_.output_port_)
      - PROTOBUF_FIELD_OFFSET(GraphTransferNodeInput, _impl_.node_id_)>(
          reinterpret_cast<char*>(&_impl_.node_id_),
          reinterpret_cast<char*>(&other->_impl_.node_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphTransferNodeInput::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto[0]);
}

// ===================================================================

class GraphTransferNodeInfo::_Internal {
 public:
};

GraphTransferNodeInfo::GraphTransferNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferNodeInfo)
}
GraphTransferNodeInfo::GraphTransferNodeInfo(const GraphTransferNodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GraphTransferNodeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.type_name_){}
    , decltype(_impl_.node_id_){}
    , decltype(_impl_.soc_op_id_){}
    , decltype(_impl_.padding_id_){}
    , decltype(_impl_.input_count_){}
    , decltype(_impl_.output_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type_name().empty()) {
    _this->_impl_.type_name_.Set(from._internal_type_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.node_id_, &from._impl_.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.output_count_) -
    reinterpret_cast<char*>(&_impl_.node_id_)) + sizeof(_impl_.output_count_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferNodeInfo)
}

inline void GraphTransferNodeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.type_name_){}
    , decltype(_impl_.node_id_){0}
    , decltype(_impl_.soc_op_id_){0}
    , decltype(_impl_.padding_id_){0}
    , decltype(_impl_.input_count_){0}
    , decltype(_impl_.output_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GraphTransferNodeInfo::~GraphTransferNodeInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferNodeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphTransferNodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.type_name_.Destroy();
}

void GraphTransferNodeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphTransferNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferNodeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.type_name_.ClearToEmpty();
  ::memset(&_impl_.node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.output_count_) -
      reinterpret_cast<char*>(&_impl_.node_id_)) + sizeof(_impl_.output_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphTransferNodeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.GraphTransferNodeInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_type_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.GraphTransferNodeInfo.type_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 soc_op_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.soc_op_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 padding_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.padding_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 input_count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.input_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 output_count = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.output_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphTransferNodeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferNodeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferNodeInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 node_id = 2;
  if (this->_internal_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_node_id(), target);
  }

  // string type_name = 3;
  if (!this->_internal_type_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_name().data(), static_cast<int>(this->_internal_type_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferNodeInfo.type_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type_name(), target);
  }

  // int32 soc_op_id = 4;
  if (this->_internal_soc_op_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_soc_op_id(), target);
  }

  // int32 padding_id = 5;
  if (this->_internal_padding_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_padding_id(), target);
  }

  // int32 input_count = 6;
  if (this->_internal_input_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_input_count(), target);
  }

  // int32 output_count = 7;
  if (this->_internal_output_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_output_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferNodeInfo)
  return target;
}

size_t GraphTransferNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferNodeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type_name = 3;
  if (!this->_internal_type_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type_name());
  }

  // int32 node_id = 2;
  if (this->_internal_node_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_node_id());
  }

  // int32 soc_op_id = 4;
  if (this->_internal_soc_op_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_soc_op_id());
  }

  // int32 padding_id = 5;
  if (this->_internal_padding_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_padding_id());
  }

  // int32 input_count = 6;
  if (this->_internal_input_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_input_count());
  }

  // int32 output_count = 7;
  if (this->_internal_output_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_output_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphTransferNodeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GraphTransferNodeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphTransferNodeInfo::GetClassData() const { return &_class_data_; }


void GraphTransferNodeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GraphTransferNodeInfo*>(&to_msg);
  auto& from = static_cast<const GraphTransferNodeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferNodeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_type_name().empty()) {
    _this->_internal_set_type_name(from._internal_type_name());
  }
  if (from._internal_node_id() != 0) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  if (from._internal_soc_op_id() != 0) {
    _this->_internal_set_soc_op_id(from._internal_soc_op_id());
  }
  if (from._internal_padding_id() != 0) {
    _this->_internal_set_padding_id(from._internal_padding_id());
  }
  if (from._internal_input_count() != 0) {
    _this->_internal_set_input_count(from._internal_input_count());
  }
  if (from._internal_output_count() != 0) {
    _this->_internal_set_output_count(from._internal_output_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphTransferNodeInfo::CopyFrom(const GraphTransferNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferNodeInfo::IsInitialized() const {
  return true;
}

void GraphTransferNodeInfo::InternalSwap(GraphTransferNodeInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_name_, lhs_arena,
      &other->_impl_.type_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphTransferNodeInfo, _impl_.output_count_)
      + sizeof(GraphTransferNodeInfo::_impl_.output_count_)
      - PROTOBUF_FIELD_OFFSET(GraphTransferNodeInfo, _impl_.node_id_)>(
          reinterpret_cast<char*>(&_impl_.node_id_),
          reinterpret_cast<char*>(&other->_impl_.node_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphTransferNodeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto[1]);
}

// ===================================================================

class GraphTransferConstNodeInfo::_Internal {
 public:
};

GraphTransferConstNodeInfo::GraphTransferConstNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferConstNodeInfo)
}
GraphTransferConstNodeInfo::GraphTransferConstNodeInfo(const GraphTransferConstNodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GraphTransferConstNodeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){from._impl_.shape_}
    , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.node_id_){}
    , decltype(_impl_.dtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.node_id_, &from._impl_.node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dtype_) -
    reinterpret_cast<char*>(&_impl_.node_id_)) + sizeof(_impl_.dtype_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferConstNodeInfo)
}

inline void GraphTransferConstNodeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){arena}
    , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.data_){}
    , decltype(_impl_.node_id_){0}
    , decltype(_impl_.dtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GraphTransferConstNodeInfo::~GraphTransferConstNodeInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferConstNodeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphTransferConstNodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shape_.~RepeatedField();
  _impl_.name_.Destroy();
  _impl_.data_.Destroy();
}

void GraphTransferConstNodeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphTransferConstNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferConstNodeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shape_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.data_.ClearToEmpty();
  ::memset(&_impl_.node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dtype_) -
      reinterpret_cast<char*>(&_impl_.node_id_)) + sizeof(_impl_.dtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphTransferConstNodeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.GraphTransferConstNodeInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.DataType dtype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::tensorflow::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphTransferConstNodeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferConstNodeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferConstNodeInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 node_id = 2;
  if (this->_internal_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_node_id(), target);
  }

  // repeated int64 shape = 3;
  {
    int byte_size = _impl_._shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_shape(), byte_size, target);
    }
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_data(), target);
  }

  // .tensorflow.DataType dtype = 5;
  if (this->_internal_dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_dtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferConstNodeInfo)
  return target;
}

size_t GraphTransferConstNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferConstNodeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 shape = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes data = 4;
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 node_id = 2;
  if (this->_internal_node_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_node_id());
  }

  // .tensorflow.DataType dtype = 5;
  if (this->_internal_dtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphTransferConstNodeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GraphTransferConstNodeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphTransferConstNodeInfo::GetClassData() const { return &_class_data_; }


void GraphTransferConstNodeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GraphTransferConstNodeInfo*>(&to_msg);
  auto& from = static_cast<const GraphTransferConstNodeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferConstNodeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shape_.MergeFrom(from._impl_.shape_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_node_id() != 0) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  if (from._internal_dtype() != 0) {
    _this->_internal_set_dtype(from._internal_dtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphTransferConstNodeInfo::CopyFrom(const GraphTransferConstNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferConstNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferConstNodeInfo::IsInitialized() const {
  return true;
}

void GraphTransferConstNodeInfo::InternalSwap(GraphTransferConstNodeInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shape_.InternalSwap(&other->_impl_.shape_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphTransferConstNodeInfo, _impl_.dtype_)
      + sizeof(GraphTransferConstNodeInfo::_impl_.dtype_)
      - PROTOBUF_FIELD_OFFSET(GraphTransferConstNodeInfo, _impl_.node_id_)>(
          reinterpret_cast<char*>(&_impl_.node_id_),
          reinterpret_cast<char*>(&other->_impl_.node_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphTransferConstNodeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto[2]);
}

// ===================================================================

class GraphTransferNodeInputInfo::_Internal {
 public:
};

GraphTransferNodeInputInfo::GraphTransferNodeInputInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferNodeInputInfo)
}
GraphTransferNodeInputInfo::GraphTransferNodeInputInfo(const GraphTransferNodeInputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GraphTransferNodeInputInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_input_){from._impl_.node_input_}
    , decltype(_impl_.node_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.node_id_ = from._impl_.node_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferNodeInputInfo)
}

inline void GraphTransferNodeInputInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_input_){arena}
    , decltype(_impl_.node_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GraphTransferNodeInputInfo::~GraphTransferNodeInputInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferNodeInputInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphTransferNodeInputInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_input_.~RepeatedPtrField();
}

void GraphTransferNodeInputInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphTransferNodeInputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferNodeInputInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_input_.Clear();
  _impl_.node_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphTransferNodeInputInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.GraphTransferNodeInput node_input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_input(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphTransferNodeInputInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferNodeInputInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->_internal_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_node_id(), target);
  }

  // repeated .tensorflow.GraphTransferNodeInput node_input = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_node_input_size()); i < n; i++) {
    const auto& repfield = this->_internal_node_input(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferNodeInputInfo)
  return target;
}

size_t GraphTransferNodeInputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferNodeInputInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.GraphTransferNodeInput node_input = 2;
  total_size += 1UL * this->_internal_node_input_size();
  for (const auto& msg : this->_impl_.node_input_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 node_id = 1;
  if (this->_internal_node_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_node_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphTransferNodeInputInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GraphTransferNodeInputInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphTransferNodeInputInfo::GetClassData() const { return &_class_data_; }


void GraphTransferNodeInputInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GraphTransferNodeInputInfo*>(&to_msg);
  auto& from = static_cast<const GraphTransferNodeInputInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferNodeInputInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.node_input_.MergeFrom(from._impl_.node_input_);
  if (from._internal_node_id() != 0) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphTransferNodeInputInfo::CopyFrom(const GraphTransferNodeInputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferNodeInputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferNodeInputInfo::IsInitialized() const {
  return true;
}

void GraphTransferNodeInputInfo::InternalSwap(GraphTransferNodeInputInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.node_input_.InternalSwap(&other->_impl_.node_input_);
  swap(_impl_.node_id_, other->_impl_.node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphTransferNodeInputInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto[3]);
}

// ===================================================================

class GraphTransferNodeOutputInfo::_Internal {
 public:
};

GraphTransferNodeOutputInfo::GraphTransferNodeOutputInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferNodeOutputInfo)
}
GraphTransferNodeOutputInfo::GraphTransferNodeOutputInfo(const GraphTransferNodeOutputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GraphTransferNodeOutputInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.max_byte_size_){from._impl_.max_byte_size_}
    , /*decltype(_impl_._max_byte_size_cached_byte_size_)*/{0}
    , decltype(_impl_.node_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.node_id_ = from._impl_.node_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferNodeOutputInfo)
}

inline void GraphTransferNodeOutputInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.max_byte_size_){arena}
    , /*decltype(_impl_._max_byte_size_cached_byte_size_)*/{0}
    , decltype(_impl_.node_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GraphTransferNodeOutputInfo::~GraphTransferNodeOutputInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferNodeOutputInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphTransferNodeOutputInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.max_byte_size_.~RepeatedField();
}

void GraphTransferNodeOutputInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphTransferNodeOutputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferNodeOutputInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.max_byte_size_.Clear();
  _impl_.node_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphTransferNodeOutputInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 max_byte_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_max_byte_size(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_max_byte_size(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphTransferNodeOutputInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferNodeOutputInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->_internal_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_node_id(), target);
  }

  // repeated int32 max_byte_size = 2;
  {
    int byte_size = _impl_._max_byte_size_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_max_byte_size(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferNodeOutputInfo)
  return target;
}

size_t GraphTransferNodeOutputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferNodeOutputInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 max_byte_size = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.max_byte_size_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._max_byte_size_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 node_id = 1;
  if (this->_internal_node_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_node_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphTransferNodeOutputInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GraphTransferNodeOutputInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphTransferNodeOutputInfo::GetClassData() const { return &_class_data_; }


void GraphTransferNodeOutputInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GraphTransferNodeOutputInfo*>(&to_msg);
  auto& from = static_cast<const GraphTransferNodeOutputInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferNodeOutputInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.max_byte_size_.MergeFrom(from._impl_.max_byte_size_);
  if (from._internal_node_id() != 0) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphTransferNodeOutputInfo::CopyFrom(const GraphTransferNodeOutputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferNodeOutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferNodeOutputInfo::IsInitialized() const {
  return true;
}

void GraphTransferNodeOutputInfo::InternalSwap(GraphTransferNodeOutputInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.max_byte_size_.InternalSwap(&other->_impl_.max_byte_size_);
  swap(_impl_.node_id_, other->_impl_.node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphTransferNodeOutputInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto[4]);
}

// ===================================================================

class GraphTransferGraphInputNodeInfo::_Internal {
 public:
};

GraphTransferGraphInputNodeInfo::GraphTransferGraphInputNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferGraphInputNodeInfo)
}
GraphTransferGraphInputNodeInfo::GraphTransferGraphInputNodeInfo(const GraphTransferGraphInputNodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GraphTransferGraphInputNodeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){from._impl_.shape_}
    , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.dtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.dtype_ = from._impl_.dtype_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferGraphInputNodeInfo)
}

inline void GraphTransferGraphInputNodeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){arena}
    , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.dtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GraphTransferGraphInputNodeInfo::~GraphTransferGraphInputNodeInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferGraphInputNodeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphTransferGraphInputNodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shape_.~RepeatedField();
  _impl_.name_.Destroy();
}

void GraphTransferGraphInputNodeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphTransferGraphInputNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferGraphInputNodeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shape_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.dtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphTransferGraphInputNodeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.GraphTransferGraphInputNodeInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.DataType dtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::tensorflow::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphTransferGraphInputNodeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferGraphInputNodeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferGraphInputNodeInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated int64 shape = 2;
  {
    int byte_size = _impl_._shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_shape(), byte_size, target);
    }
  }

  // .tensorflow.DataType dtype = 3;
  if (this->_internal_dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_dtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferGraphInputNodeInfo)
  return target;
}

size_t GraphTransferGraphInputNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferGraphInputNodeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 shape = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .tensorflow.DataType dtype = 3;
  if (this->_internal_dtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphTransferGraphInputNodeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GraphTransferGraphInputNodeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphTransferGraphInputNodeInfo::GetClassData() const { return &_class_data_; }


void GraphTransferGraphInputNodeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GraphTransferGraphInputNodeInfo*>(&to_msg);
  auto& from = static_cast<const GraphTransferGraphInputNodeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferGraphInputNodeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shape_.MergeFrom(from._impl_.shape_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_dtype() != 0) {
    _this->_internal_set_dtype(from._internal_dtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphTransferGraphInputNodeInfo::CopyFrom(const GraphTransferGraphInputNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferGraphInputNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferGraphInputNodeInfo::IsInitialized() const {
  return true;
}

void GraphTransferGraphInputNodeInfo::InternalSwap(GraphTransferGraphInputNodeInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shape_.InternalSwap(&other->_impl_.shape_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.dtype_, other->_impl_.dtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphTransferGraphInputNodeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto[5]);
}

// ===================================================================

class GraphTransferGraphOutputNodeInfo::_Internal {
 public:
};

GraphTransferGraphOutputNodeInfo::GraphTransferGraphOutputNodeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferGraphOutputNodeInfo)
}
GraphTransferGraphOutputNodeInfo::GraphTransferGraphOutputNodeInfo(const GraphTransferGraphOutputNodeInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GraphTransferGraphOutputNodeInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){from._impl_.shape_}
    , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.dtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.dtype_ = from._impl_.dtype_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferGraphOutputNodeInfo)
}

inline void GraphTransferGraphOutputNodeInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){arena}
    , /*decltype(_impl_._shape_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.dtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GraphTransferGraphOutputNodeInfo::~GraphTransferGraphOutputNodeInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferGraphOutputNodeInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphTransferGraphOutputNodeInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shape_.~RepeatedField();
  _impl_.name_.Destroy();
}

void GraphTransferGraphOutputNodeInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphTransferGraphOutputNodeInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shape_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.dtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphTransferGraphOutputNodeInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.GraphTransferGraphOutputNodeInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.DataType dtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::tensorflow::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphTransferGraphOutputNodeInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphTransferGraphOutputNodeInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated int64 shape = 2;
  {
    int byte_size = _impl_._shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_shape(), byte_size, target);
    }
  }

  // .tensorflow.DataType dtype = 3;
  if (this->_internal_dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_dtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferGraphOutputNodeInfo)
  return target;
}

size_t GraphTransferGraphOutputNodeInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 shape = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .tensorflow.DataType dtype = 3;
  if (this->_internal_dtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphTransferGraphOutputNodeInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GraphTransferGraphOutputNodeInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphTransferGraphOutputNodeInfo::GetClassData() const { return &_class_data_; }


void GraphTransferGraphOutputNodeInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GraphTransferGraphOutputNodeInfo*>(&to_msg);
  auto& from = static_cast<const GraphTransferGraphOutputNodeInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shape_.MergeFrom(from._impl_.shape_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_dtype() != 0) {
    _this->_internal_set_dtype(from._internal_dtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphTransferGraphOutputNodeInfo::CopyFrom(const GraphTransferGraphOutputNodeInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferGraphOutputNodeInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferGraphOutputNodeInfo::IsInitialized() const {
  return true;
}

void GraphTransferGraphOutputNodeInfo::InternalSwap(GraphTransferGraphOutputNodeInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shape_.InternalSwap(&other->_impl_.shape_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.dtype_, other->_impl_.dtype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphTransferGraphOutputNodeInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto[6]);
}

// ===================================================================

class GraphTransferInfo::_Internal {
 public:
};

GraphTransferInfo::GraphTransferInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphTransferInfo)
}
GraphTransferInfo::GraphTransferInfo(const GraphTransferInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GraphTransferInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_info_){from._impl_.node_info_}
    , decltype(_impl_.const_node_info_){from._impl_.const_node_info_}
    , decltype(_impl_.node_input_info_){from._impl_.node_input_info_}
    , decltype(_impl_.node_output_info_){from._impl_.node_output_info_}
    , decltype(_impl_.graph_input_node_info_){from._impl_.graph_input_node_info_}
    , decltype(_impl_.graph_output_node_info_){from._impl_.graph_output_node_info_}
    , decltype(_impl_.destination_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.destination_ = from._impl_.destination_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphTransferInfo)
}

inline void GraphTransferInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_info_){arena}
    , decltype(_impl_.const_node_info_){arena}
    , decltype(_impl_.node_input_info_){arena}
    , decltype(_impl_.node_output_info_){arena}
    , decltype(_impl_.graph_input_node_info_){arena}
    , decltype(_impl_.graph_output_node_info_){arena}
    , decltype(_impl_.destination_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GraphTransferInfo::~GraphTransferInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphTransferInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphTransferInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_info_.~RepeatedPtrField();
  _impl_.const_node_info_.~RepeatedPtrField();
  _impl_.node_input_info_.~RepeatedPtrField();
  _impl_.node_output_info_.~RepeatedPtrField();
  _impl_.graph_input_node_info_.~RepeatedPtrField();
  _impl_.graph_output_node_info_.~RepeatedPtrField();
}

void GraphTransferInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphTransferInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphTransferInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_info_.Clear();
  _impl_.const_node_info_.Clear();
  _impl_.node_input_info_.Clear();
  _impl_.node_output_info_.Clear();
  _impl_.graph_input_node_info_.Clear();
  _impl_.graph_output_node_info_.Clear();
  _impl_.destination_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphTransferInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.GraphTransferNodeInfo node_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.GraphTransferConstNodeInfo const_node_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_const_node_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.GraphTransferNodeInputInfo node_input_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_input_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.GraphTransferNodeOutputInfo node_output_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node_output_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.GraphTransferGraphInputNodeInfo graph_input_node_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_graph_input_node_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.GraphTransferGraphOutputNodeInfo graph_output_node_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_graph_output_node_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.GraphTransferInfo.Destination destination = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_destination(static_cast<::tensorflow::GraphTransferInfo_Destination>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphTransferInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphTransferInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.GraphTransferNodeInfo node_info = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_node_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_node_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tensorflow.GraphTransferConstNodeInfo const_node_info = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_const_node_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_const_node_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tensorflow.GraphTransferNodeInputInfo node_input_info = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_node_input_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_node_input_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tensorflow.GraphTransferNodeOutputInfo node_output_info = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_node_output_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_node_output_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tensorflow.GraphTransferGraphInputNodeInfo graph_input_node_info = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_graph_input_node_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_graph_input_node_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tensorflow.GraphTransferGraphOutputNodeInfo graph_output_node_info = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_graph_output_node_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_graph_output_node_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tensorflow.GraphTransferInfo.Destination destination = 7;
  if (this->_internal_destination() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_destination(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphTransferInfo)
  return target;
}

size_t GraphTransferInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphTransferInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.GraphTransferNodeInfo node_info = 1;
  total_size += 1UL * this->_internal_node_info_size();
  for (const auto& msg : this->_impl_.node_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.GraphTransferConstNodeInfo const_node_info = 2;
  total_size += 1UL * this->_internal_const_node_info_size();
  for (const auto& msg : this->_impl_.const_node_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.GraphTransferNodeInputInfo node_input_info = 3;
  total_size += 1UL * this->_internal_node_input_info_size();
  for (const auto& msg : this->_impl_.node_input_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.GraphTransferNodeOutputInfo node_output_info = 4;
  total_size += 1UL * this->_internal_node_output_info_size();
  for (const auto& msg : this->_impl_.node_output_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.GraphTransferGraphInputNodeInfo graph_input_node_info = 5;
  total_size += 1UL * this->_internal_graph_input_node_info_size();
  for (const auto& msg : this->_impl_.graph_input_node_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.GraphTransferGraphOutputNodeInfo graph_output_node_info = 6;
  total_size += 1UL * this->_internal_graph_output_node_info_size();
  for (const auto& msg : this->_impl_.graph_output_node_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tensorflow.GraphTransferInfo.Destination destination = 7;
  if (this->_internal_destination() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_destination());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphTransferInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GraphTransferInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphTransferInfo::GetClassData() const { return &_class_data_; }


void GraphTransferInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GraphTransferInfo*>(&to_msg);
  auto& from = static_cast<const GraphTransferInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphTransferInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.node_info_.MergeFrom(from._impl_.node_info_);
  _this->_impl_.const_node_info_.MergeFrom(from._impl_.const_node_info_);
  _this->_impl_.node_input_info_.MergeFrom(from._impl_.node_input_info_);
  _this->_impl_.node_output_info_.MergeFrom(from._impl_.node_output_info_);
  _this->_impl_.graph_input_node_info_.MergeFrom(from._impl_.graph_input_node_info_);
  _this->_impl_.graph_output_node_info_.MergeFrom(from._impl_.graph_output_node_info_);
  if (from._internal_destination() != 0) {
    _this->_internal_set_destination(from._internal_destination());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphTransferInfo::CopyFrom(const GraphTransferInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphTransferInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphTransferInfo::IsInitialized() const {
  return true;
}

void GraphTransferInfo::InternalSwap(GraphTransferInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.node_info_.InternalSwap(&other->_impl_.node_info_);
  _impl_.const_node_info_.InternalSwap(&other->_impl_.const_node_info_);
  _impl_.node_input_info_.InternalSwap(&other->_impl_.node_input_info_);
  _impl_.node_output_info_.InternalSwap(&other->_impl_.node_output_info_);
  _impl_.graph_input_node_info_.InternalSwap(&other->_impl_.graph_input_node_info_);
  _impl_.graph_output_node_info_.InternalSwap(&other->_impl_.graph_output_node_info_);
  swap(_impl_.destination_, other->_impl_.destination_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphTransferInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fgraph_5ftransfer_5finfo_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::GraphTransferNodeInput*
Arena::CreateMaybeMessage< ::tensorflow::GraphTransferNodeInput >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphTransferNodeInput >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphTransferNodeInfo*
Arena::CreateMaybeMessage< ::tensorflow::GraphTransferNodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphTransferNodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphTransferConstNodeInfo*
Arena::CreateMaybeMessage< ::tensorflow::GraphTransferConstNodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphTransferConstNodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphTransferNodeInputInfo*
Arena::CreateMaybeMessage< ::tensorflow::GraphTransferNodeInputInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphTransferNodeInputInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphTransferNodeOutputInfo*
Arena::CreateMaybeMessage< ::tensorflow::GraphTransferNodeOutputInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphTransferNodeOutputInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphTransferGraphInputNodeInfo*
Arena::CreateMaybeMessage< ::tensorflow::GraphTransferGraphInputNodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphTransferGraphInputNodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphTransferGraphOutputNodeInfo*
Arena::CreateMaybeMessage< ::tensorflow::GraphTransferGraphOutputNodeInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphTransferGraphOutputNodeInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphTransferInfo*
Arena::CreateMaybeMessage< ::tensorflow::GraphTransferInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphTransferInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
