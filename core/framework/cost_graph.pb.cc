// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/cost_graph.proto

#include "tensorflow/core/framework/cost_graph.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR CostGraphDef_Node_InputInfo::CostGraphDef_Node_InputInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.preceding_node_)*/0
  , /*decltype(_impl_.preceding_port_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CostGraphDef_Node_InputInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CostGraphDef_Node_InputInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CostGraphDef_Node_InputInfoDefaultTypeInternal() {}
  union {
    CostGraphDef_Node_InputInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CostGraphDef_Node_InputInfoDefaultTypeInternal _CostGraphDef_Node_InputInfo_default_instance_;
PROTOBUF_CONSTEXPR CostGraphDef_Node_OutputInfo::CostGraphDef_Node_OutputInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shape_)*/nullptr
  , /*decltype(_impl_.size_)*/int64_t{0}
  , /*decltype(_impl_.alias_input_port_)*/int64_t{0}
  , /*decltype(_impl_.dtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CostGraphDef_Node_OutputInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CostGraphDef_Node_OutputInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CostGraphDef_Node_OutputInfoDefaultTypeInternal() {}
  union {
    CostGraphDef_Node_OutputInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CostGraphDef_Node_OutputInfoDefaultTypeInternal _CostGraphDef_Node_OutputInfo_default_instance_;
PROTOBUF_CONSTEXPR CostGraphDef_Node::CostGraphDef_Node(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_info_)*/{}
  , /*decltype(_impl_.output_info_)*/{}
  , /*decltype(_impl_.control_input_)*/{}
  , /*decltype(_impl_._control_input_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.temporary_memory_size_)*/int64_t{0}
  , /*decltype(_impl_.compute_cost_)*/int64_t{0}
  , /*decltype(_impl_.id_)*/0
  , /*decltype(_impl_.is_final_)*/false
  , /*decltype(_impl_.inaccurate_)*/false
  , /*decltype(_impl_.host_temp_memory_size_)*/int64_t{0}
  , /*decltype(_impl_.device_temp_memory_size_)*/int64_t{0}
  , /*decltype(_impl_.persistent_memory_size_)*/int64_t{0}
  , /*decltype(_impl_.compute_time_)*/int64_t{0}
  , /*decltype(_impl_.memory_time_)*/int64_t{0}
  , /*decltype(_impl_.device_persistent_memory_size_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CostGraphDef_NodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CostGraphDef_NodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CostGraphDef_NodeDefaultTypeInternal() {}
  union {
    CostGraphDef_Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CostGraphDef_NodeDefaultTypeInternal _CostGraphDef_Node_default_instance_;
PROTOBUF_CONSTEXPR CostGraphDef_AggregatedCost::CostGraphDef_AggregatedCost(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dimension_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cost_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CostGraphDef_AggregatedCostDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CostGraphDef_AggregatedCostDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CostGraphDef_AggregatedCostDefaultTypeInternal() {}
  union {
    CostGraphDef_AggregatedCost _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CostGraphDef_AggregatedCostDefaultTypeInternal _CostGraphDef_AggregatedCost_default_instance_;
PROTOBUF_CONSTEXPR CostGraphDef::CostGraphDef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.node_)*/{}
  , /*decltype(_impl_.cost_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CostGraphDefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CostGraphDefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CostGraphDefDefaultTypeInternal() {}
  union {
    CostGraphDef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CostGraphDefDefaultTypeInternal _CostGraphDef_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node_InputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node_InputInfo, _impl_.preceding_node_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node_InputInfo, _impl_.preceding_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node_OutputInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node_OutputInfo, _impl_.size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node_OutputInfo, _impl_.alias_input_port_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node_OutputInfo, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node_OutputInfo, _impl_.dtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, _impl_.device_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, _impl_.input_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, _impl_.output_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, _impl_.temporary_memory_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, _impl_.persistent_memory_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, _impl_.host_temp_memory_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, _impl_.device_temp_memory_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, _impl_.device_persistent_memory_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, _impl_.compute_cost_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, _impl_.compute_time_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, _impl_.memory_time_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, _impl_.is_final_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, _impl_.control_input_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_Node, _impl_.inaccurate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_AggregatedCost, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_AggregatedCost, _impl_.cost_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef_AggregatedCost, _impl_.dimension_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef, _impl_.node_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CostGraphDef, _impl_.cost_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::CostGraphDef_Node_InputInfo)},
  { 8, -1, -1, sizeof(::tensorflow::CostGraphDef_Node_OutputInfo)},
  { 18, -1, -1, sizeof(::tensorflow::CostGraphDef_Node)},
  { 40, -1, -1, sizeof(::tensorflow::CostGraphDef_AggregatedCost)},
  { 48, -1, -1, sizeof(::tensorflow::CostGraphDef)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_CostGraphDef_Node_InputInfo_default_instance_._instance,
  &::tensorflow::_CostGraphDef_Node_OutputInfo_default_instance_._instance,
  &::tensorflow::_CostGraphDef_Node_default_instance_._instance,
  &::tensorflow::_CostGraphDef_AggregatedCost_default_instance_._instance,
  &::tensorflow::_CostGraphDef_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*tensorflow/core/framework/cost_graph.p"
  "roto\022\ntensorflow\032,tensorflow/core/framew"
  "ork/tensor_shape.proto\032%tensorflow/core/"
  "framework/types.proto\"\312\006\n\014CostGraphDef\022+"
  "\n\004node\030\001 \003(\0132\035.tensorflow.CostGraphDef.N"
  "ode\0225\n\004cost\030\002 \003(\0132\'.tensorflow.CostGraph"
  "Def.AggregatedCost\032\242\005\n\004Node\022\014\n\004name\030\001 \001("
  "\t\022\016\n\006device\030\002 \001(\t\022\n\n\002id\030\003 \001(\005\022;\n\ninput_i"
  "nfo\030\004 \003(\0132\'.tensorflow.CostGraphDef.Node"
  ".InputInfo\022=\n\013output_info\030\005 \003(\0132(.tensor"
  "flow.CostGraphDef.Node.OutputInfo\022\035\n\025tem"
  "porary_memory_size\030\006 \001(\003\022\036\n\026persistent_m"
  "emory_size\030\014 \001(\003\022!\n\025host_temp_memory_siz"
  "e\030\n \001(\003B\002\030\001\022#\n\027device_temp_memory_size\030\013"
  " \001(\003B\002\030\001\022)\n\035device_persistent_memory_siz"
  "e\030\020 \001(\003B\002\030\001\022\024\n\014compute_cost\030\t \001(\003\022\024\n\014com"
  "pute_time\030\016 \001(\003\022\023\n\013memory_time\030\017 \001(\003\022\020\n\010"
  "is_final\030\007 \001(\010\022\025\n\rcontrol_input\030\010 \003(\005\022\022\n"
  "\ninaccurate\030\021 \001(\010\032;\n\tInputInfo\022\026\n\016preced"
  "ing_node\030\001 \001(\005\022\026\n\016preceding_port\030\002 \001(\005\032\206"
  "\001\n\nOutputInfo\022\014\n\004size\030\001 \001(\003\022\030\n\020alias_inp"
  "ut_port\030\002 \001(\003\022+\n\005shape\030\003 \001(\0132\034.tensorflo"
  "w.TensorShapeProto\022#\n\005dtype\030\004 \001(\0162\024.tens"
  "orflow.DataType\0321\n\016AggregatedCost\022\014\n\004cos"
  "t\030\001 \001(\002\022\021\n\tdimension\030\002 \001(\tB\203\001\n\030org.tenso"
  "rflow.frameworkB\017CostGraphProtosP\001ZQgith"
  "ub.com/tensorflow/tensorflow/tensorflow/"
  "go/core/framework/cost_graph_go_proto\370\001\001"
  "b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto_deps[2] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto = {
    false, false, 1128, descriptor_table_protodef_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto,
    "tensorflow/core/framework/cost_graph.proto",
    &descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto_once, descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto_deps, 2, 5,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto(&descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto);
namespace tensorflow {

// ===================================================================

class CostGraphDef_Node_InputInfo::_Internal {
 public:
};

CostGraphDef_Node_InputInfo::CostGraphDef_Node_InputInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CostGraphDef.Node.InputInfo)
}
CostGraphDef_Node_InputInfo::CostGraphDef_Node_InputInfo(const CostGraphDef_Node_InputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CostGraphDef_Node_InputInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.preceding_node_){}
    , decltype(_impl_.preceding_port_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.preceding_node_, &from._impl_.preceding_node_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.preceding_port_) -
    reinterpret_cast<char*>(&_impl_.preceding_node_)) + sizeof(_impl_.preceding_port_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.CostGraphDef.Node.InputInfo)
}

inline void CostGraphDef_Node_InputInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.preceding_node_){0}
    , decltype(_impl_.preceding_port_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CostGraphDef_Node_InputInfo::~CostGraphDef_Node_InputInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.CostGraphDef.Node.InputInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CostGraphDef_Node_InputInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CostGraphDef_Node_InputInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CostGraphDef_Node_InputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CostGraphDef.Node.InputInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.preceding_node_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.preceding_port_) -
      reinterpret_cast<char*>(&_impl_.preceding_node_)) + sizeof(_impl_.preceding_port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CostGraphDef_Node_InputInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 preceding_node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.preceding_node_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 preceding_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.preceding_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CostGraphDef_Node_InputInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CostGraphDef.Node.InputInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 preceding_node = 1;
  if (this->_internal_preceding_node() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_preceding_node(), target);
  }

  // int32 preceding_port = 2;
  if (this->_internal_preceding_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_preceding_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CostGraphDef.Node.InputInfo)
  return target;
}

size_t CostGraphDef_Node_InputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CostGraphDef.Node.InputInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 preceding_node = 1;
  if (this->_internal_preceding_node() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_preceding_node());
  }

  // int32 preceding_port = 2;
  if (this->_internal_preceding_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_preceding_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CostGraphDef_Node_InputInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CostGraphDef_Node_InputInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CostGraphDef_Node_InputInfo::GetClassData() const { return &_class_data_; }


void CostGraphDef_Node_InputInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CostGraphDef_Node_InputInfo*>(&to_msg);
  auto& from = static_cast<const CostGraphDef_Node_InputInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CostGraphDef.Node.InputInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_preceding_node() != 0) {
    _this->_internal_set_preceding_node(from._internal_preceding_node());
  }
  if (from._internal_preceding_port() != 0) {
    _this->_internal_set_preceding_port(from._internal_preceding_port());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CostGraphDef_Node_InputInfo::CopyFrom(const CostGraphDef_Node_InputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CostGraphDef.Node.InputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostGraphDef_Node_InputInfo::IsInitialized() const {
  return true;
}

void CostGraphDef_Node_InputInfo::InternalSwap(CostGraphDef_Node_InputInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CostGraphDef_Node_InputInfo, _impl_.preceding_port_)
      + sizeof(CostGraphDef_Node_InputInfo::_impl_.preceding_port_)
      - PROTOBUF_FIELD_OFFSET(CostGraphDef_Node_InputInfo, _impl_.preceding_node_)>(
          reinterpret_cast<char*>(&_impl_.preceding_node_),
          reinterpret_cast<char*>(&other->_impl_.preceding_node_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CostGraphDef_Node_InputInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto[0]);
}

// ===================================================================

class CostGraphDef_Node_OutputInfo::_Internal {
 public:
  static const ::tensorflow::TensorShapeProto& shape(const CostGraphDef_Node_OutputInfo* msg);
};

const ::tensorflow::TensorShapeProto&
CostGraphDef_Node_OutputInfo::_Internal::shape(const CostGraphDef_Node_OutputInfo* msg) {
  return *msg->_impl_.shape_;
}
void CostGraphDef_Node_OutputInfo::clear_shape() {
  if (GetArenaForAllocation() == nullptr && _impl_.shape_ != nullptr) {
    delete _impl_.shape_;
  }
  _impl_.shape_ = nullptr;
}
CostGraphDef_Node_OutputInfo::CostGraphDef_Node_OutputInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CostGraphDef.Node.OutputInfo)
}
CostGraphDef_Node_OutputInfo::CostGraphDef_Node_OutputInfo(const CostGraphDef_Node_OutputInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CostGraphDef_Node_OutputInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.size_){}
    , decltype(_impl_.alias_input_port_){}
    , decltype(_impl_.dtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shape()) {
    _this->_impl_.shape_ = new ::tensorflow::TensorShapeProto(*from._impl_.shape_);
  }
  ::memcpy(&_impl_.size_, &from._impl_.size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dtype_) -
    reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.dtype_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.CostGraphDef.Node.OutputInfo)
}

inline void CostGraphDef_Node_OutputInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.size_){int64_t{0}}
    , decltype(_impl_.alias_input_port_){int64_t{0}}
    , decltype(_impl_.dtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CostGraphDef_Node_OutputInfo::~CostGraphDef_Node_OutputInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.CostGraphDef.Node.OutputInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CostGraphDef_Node_OutputInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.shape_;
}

void CostGraphDef_Node_OutputInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CostGraphDef_Node_OutputInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CostGraphDef.Node.OutputInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.shape_ != nullptr) {
    delete _impl_.shape_;
  }
  _impl_.shape_ = nullptr;
  ::memset(&_impl_.size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dtype_) -
      reinterpret_cast<char*>(&_impl_.size_)) + sizeof(_impl_.dtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CostGraphDef_Node_OutputInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 size = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 alias_input_port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.alias_input_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TensorShapeProto shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.DataType dtype = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::tensorflow::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CostGraphDef_Node_OutputInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CostGraphDef.Node.OutputInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 size = 1;
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_size(), target);
  }

  // int64 alias_input_port = 2;
  if (this->_internal_alias_input_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_alias_input_port(), target);
  }

  // .tensorflow.TensorShapeProto shape = 3;
  if (this->_internal_has_shape()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::shape(this),
        _Internal::shape(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.DataType dtype = 4;
  if (this->_internal_dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_dtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CostGraphDef.Node.OutputInfo)
  return target;
}

size_t CostGraphDef_Node_OutputInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CostGraphDef.Node.OutputInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.TensorShapeProto shape = 3;
  if (this->_internal_has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shape_);
  }

  // int64 size = 1;
  if (this->_internal_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size());
  }

  // int64 alias_input_port = 2;
  if (this->_internal_alias_input_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_alias_input_port());
  }

  // .tensorflow.DataType dtype = 4;
  if (this->_internal_dtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CostGraphDef_Node_OutputInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CostGraphDef_Node_OutputInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CostGraphDef_Node_OutputInfo::GetClassData() const { return &_class_data_; }


void CostGraphDef_Node_OutputInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CostGraphDef_Node_OutputInfo*>(&to_msg);
  auto& from = static_cast<const CostGraphDef_Node_OutputInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CostGraphDef.Node.OutputInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shape()) {
    _this->_internal_mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(
        from._internal_shape());
  }
  if (from._internal_size() != 0) {
    _this->_internal_set_size(from._internal_size());
  }
  if (from._internal_alias_input_port() != 0) {
    _this->_internal_set_alias_input_port(from._internal_alias_input_port());
  }
  if (from._internal_dtype() != 0) {
    _this->_internal_set_dtype(from._internal_dtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CostGraphDef_Node_OutputInfo::CopyFrom(const CostGraphDef_Node_OutputInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CostGraphDef.Node.OutputInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostGraphDef_Node_OutputInfo::IsInitialized() const {
  return true;
}

void CostGraphDef_Node_OutputInfo::InternalSwap(CostGraphDef_Node_OutputInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CostGraphDef_Node_OutputInfo, _impl_.dtype_)
      + sizeof(CostGraphDef_Node_OutputInfo::_impl_.dtype_)
      - PROTOBUF_FIELD_OFFSET(CostGraphDef_Node_OutputInfo, _impl_.shape_)>(
          reinterpret_cast<char*>(&_impl_.shape_),
          reinterpret_cast<char*>(&other->_impl_.shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CostGraphDef_Node_OutputInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto[1]);
}

// ===================================================================

class CostGraphDef_Node::_Internal {
 public:
};

CostGraphDef_Node::CostGraphDef_Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CostGraphDef.Node)
}
CostGraphDef_Node::CostGraphDef_Node(const CostGraphDef_Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CostGraphDef_Node* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_info_){from._impl_.input_info_}
    , decltype(_impl_.output_info_){from._impl_.output_info_}
    , decltype(_impl_.control_input_){from._impl_.control_input_}
    , /*decltype(_impl_._control_input_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.device_){}
    , decltype(_impl_.temporary_memory_size_){}
    , decltype(_impl_.compute_cost_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.is_final_){}
    , decltype(_impl_.inaccurate_){}
    , decltype(_impl_.host_temp_memory_size_){}
    , decltype(_impl_.device_temp_memory_size_){}
    , decltype(_impl_.persistent_memory_size_){}
    , decltype(_impl_.compute_time_){}
    , decltype(_impl_.memory_time_){}
    , decltype(_impl_.device_persistent_memory_size_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device().empty()) {
    _this->_impl_.device_.Set(from._internal_device(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.temporary_memory_size_, &from._impl_.temporary_memory_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.device_persistent_memory_size_) -
    reinterpret_cast<char*>(&_impl_.temporary_memory_size_)) + sizeof(_impl_.device_persistent_memory_size_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.CostGraphDef.Node)
}

inline void CostGraphDef_Node::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.input_info_){arena}
    , decltype(_impl_.output_info_){arena}
    , decltype(_impl_.control_input_){arena}
    , /*decltype(_impl_._control_input_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.device_){}
    , decltype(_impl_.temporary_memory_size_){int64_t{0}}
    , decltype(_impl_.compute_cost_){int64_t{0}}
    , decltype(_impl_.id_){0}
    , decltype(_impl_.is_final_){false}
    , decltype(_impl_.inaccurate_){false}
    , decltype(_impl_.host_temp_memory_size_){int64_t{0}}
    , decltype(_impl_.device_temp_memory_size_){int64_t{0}}
    , decltype(_impl_.persistent_memory_size_){int64_t{0}}
    , decltype(_impl_.compute_time_){int64_t{0}}
    , decltype(_impl_.memory_time_){int64_t{0}}
    , decltype(_impl_.device_persistent_memory_size_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CostGraphDef_Node::~CostGraphDef_Node() {
  // @@protoc_insertion_point(destructor:tensorflow.CostGraphDef.Node)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CostGraphDef_Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_info_.~RepeatedPtrField();
  _impl_.output_info_.~RepeatedPtrField();
  _impl_.control_input_.~RepeatedField();
  _impl_.name_.Destroy();
  _impl_.device_.Destroy();
}

void CostGraphDef_Node::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CostGraphDef_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CostGraphDef.Node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_info_.Clear();
  _impl_.output_info_.Clear();
  _impl_.control_input_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.device_.ClearToEmpty();
  ::memset(&_impl_.temporary_memory_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.device_persistent_memory_size_) -
      reinterpret_cast<char*>(&_impl_.temporary_memory_size_)) + sizeof(_impl_.device_persistent_memory_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CostGraphDef_Node::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.CostGraphDef.Node.name"));
        } else
          goto handle_unusual;
        continue;
      // string device = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_device();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.CostGraphDef.Node.device"));
        } else
          goto handle_unusual;
        continue;
      // int32 id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.CostGraphDef.Node.InputInfo input_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.CostGraphDef.Node.OutputInfo output_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 temporary_memory_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.temporary_memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_final = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.is_final_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 control_input = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_control_input(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_control_input(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 compute_cost = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.compute_cost_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 host_temp_memory_size = 10 [deprecated = true];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.host_temp_memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 device_temp_memory_size = 11 [deprecated = true];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.device_temp_memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 persistent_memory_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.persistent_memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 compute_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.compute_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 memory_time = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.memory_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 device_persistent_memory_size = 16 [deprecated = true];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.device_persistent_memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool inaccurate = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.inaccurate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CostGraphDef_Node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CostGraphDef.Node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CostGraphDef.Node.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string device = 2;
  if (!this->_internal_device().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CostGraphDef.Node.device");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device(), target);
  }

  // int32 id = 3;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_id(), target);
  }

  // repeated .tensorflow.CostGraphDef.Node.InputInfo input_info = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_input_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_input_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tensorflow.CostGraphDef.Node.OutputInfo output_info = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_output_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_output_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 temporary_memory_size = 6;
  if (this->_internal_temporary_memory_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_temporary_memory_size(), target);
  }

  // bool is_final = 7;
  if (this->_internal_is_final() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_final(), target);
  }

  // repeated int32 control_input = 8;
  {
    int byte_size = _impl_._control_input_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_control_input(), byte_size, target);
    }
  }

  // int64 compute_cost = 9;
  if (this->_internal_compute_cost() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_compute_cost(), target);
  }

  // int64 host_temp_memory_size = 10 [deprecated = true];
  if (this->_internal_host_temp_memory_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_host_temp_memory_size(), target);
  }

  // int64 device_temp_memory_size = 11 [deprecated = true];
  if (this->_internal_device_temp_memory_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_device_temp_memory_size(), target);
  }

  // int64 persistent_memory_size = 12;
  if (this->_internal_persistent_memory_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_persistent_memory_size(), target);
  }

  // int64 compute_time = 14;
  if (this->_internal_compute_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_compute_time(), target);
  }

  // int64 memory_time = 15;
  if (this->_internal_memory_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_memory_time(), target);
  }

  // int64 device_persistent_memory_size = 16 [deprecated = true];
  if (this->_internal_device_persistent_memory_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(16, this->_internal_device_persistent_memory_size(), target);
  }

  // bool inaccurate = 17;
  if (this->_internal_inaccurate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(17, this->_internal_inaccurate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CostGraphDef.Node)
  return target;
}

size_t CostGraphDef_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CostGraphDef.Node)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.CostGraphDef.Node.InputInfo input_info = 4;
  total_size += 1UL * this->_internal_input_info_size();
  for (const auto& msg : this->_impl_.input_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.CostGraphDef.Node.OutputInfo output_info = 5;
  total_size += 1UL * this->_internal_output_info_size();
  for (const auto& msg : this->_impl_.output_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 control_input = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.control_input_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._control_input_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string device = 2;
  if (!this->_internal_device().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device());
  }

  // int64 temporary_memory_size = 6;
  if (this->_internal_temporary_memory_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_temporary_memory_size());
  }

  // int64 compute_cost = 9;
  if (this->_internal_compute_cost() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_compute_cost());
  }

  // int32 id = 3;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // bool is_final = 7;
  if (this->_internal_is_final() != 0) {
    total_size += 1 + 1;
  }

  // bool inaccurate = 17;
  if (this->_internal_inaccurate() != 0) {
    total_size += 2 + 1;
  }

  // int64 host_temp_memory_size = 10 [deprecated = true];
  if (this->_internal_host_temp_memory_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_host_temp_memory_size());
  }

  // int64 device_temp_memory_size = 11 [deprecated = true];
  if (this->_internal_device_temp_memory_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_device_temp_memory_size());
  }

  // int64 persistent_memory_size = 12;
  if (this->_internal_persistent_memory_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_persistent_memory_size());
  }

  // int64 compute_time = 14;
  if (this->_internal_compute_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_compute_time());
  }

  // int64 memory_time = 15;
  if (this->_internal_memory_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_memory_time());
  }

  // int64 device_persistent_memory_size = 16 [deprecated = true];
  if (this->_internal_device_persistent_memory_size() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int64Size(
        this->_internal_device_persistent_memory_size());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CostGraphDef_Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CostGraphDef_Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CostGraphDef_Node::GetClassData() const { return &_class_data_; }


void CostGraphDef_Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CostGraphDef_Node*>(&to_msg);
  auto& from = static_cast<const CostGraphDef_Node&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CostGraphDef.Node)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.input_info_.MergeFrom(from._impl_.input_info_);
  _this->_impl_.output_info_.MergeFrom(from._impl_.output_info_);
  _this->_impl_.control_input_.MergeFrom(from._impl_.control_input_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_device().empty()) {
    _this->_internal_set_device(from._internal_device());
  }
  if (from._internal_temporary_memory_size() != 0) {
    _this->_internal_set_temporary_memory_size(from._internal_temporary_memory_size());
  }
  if (from._internal_compute_cost() != 0) {
    _this->_internal_set_compute_cost(from._internal_compute_cost());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_is_final() != 0) {
    _this->_internal_set_is_final(from._internal_is_final());
  }
  if (from._internal_inaccurate() != 0) {
    _this->_internal_set_inaccurate(from._internal_inaccurate());
  }
  if (from._internal_host_temp_memory_size() != 0) {
    _this->_internal_set_host_temp_memory_size(from._internal_host_temp_memory_size());
  }
  if (from._internal_device_temp_memory_size() != 0) {
    _this->_internal_set_device_temp_memory_size(from._internal_device_temp_memory_size());
  }
  if (from._internal_persistent_memory_size() != 0) {
    _this->_internal_set_persistent_memory_size(from._internal_persistent_memory_size());
  }
  if (from._internal_compute_time() != 0) {
    _this->_internal_set_compute_time(from._internal_compute_time());
  }
  if (from._internal_memory_time() != 0) {
    _this->_internal_set_memory_time(from._internal_memory_time());
  }
  if (from._internal_device_persistent_memory_size() != 0) {
    _this->_internal_set_device_persistent_memory_size(from._internal_device_persistent_memory_size());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CostGraphDef_Node::CopyFrom(const CostGraphDef_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CostGraphDef.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostGraphDef_Node::IsInitialized() const {
  return true;
}

void CostGraphDef_Node::InternalSwap(CostGraphDef_Node* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.input_info_.InternalSwap(&other->_impl_.input_info_);
  _impl_.output_info_.InternalSwap(&other->_impl_.output_info_);
  _impl_.control_input_.InternalSwap(&other->_impl_.control_input_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_, lhs_arena,
      &other->_impl_.device_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CostGraphDef_Node, _impl_.device_persistent_memory_size_)
      + sizeof(CostGraphDef_Node::_impl_.device_persistent_memory_size_)
      - PROTOBUF_FIELD_OFFSET(CostGraphDef_Node, _impl_.temporary_memory_size_)>(
          reinterpret_cast<char*>(&_impl_.temporary_memory_size_),
          reinterpret_cast<char*>(&other->_impl_.temporary_memory_size_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CostGraphDef_Node::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto[2]);
}

// ===================================================================

class CostGraphDef_AggregatedCost::_Internal {
 public:
};

CostGraphDef_AggregatedCost::CostGraphDef_AggregatedCost(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CostGraphDef.AggregatedCost)
}
CostGraphDef_AggregatedCost::CostGraphDef_AggregatedCost(const CostGraphDef_AggregatedCost& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CostGraphDef_AggregatedCost* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dimension_){}
    , decltype(_impl_.cost_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.dimension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dimension_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dimension().empty()) {
    _this->_impl_.dimension_.Set(from._internal_dimension(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.cost_ = from._impl_.cost_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.CostGraphDef.AggregatedCost)
}

inline void CostGraphDef_AggregatedCost::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dimension_){}
    , decltype(_impl_.cost_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.dimension_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dimension_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CostGraphDef_AggregatedCost::~CostGraphDef_AggregatedCost() {
  // @@protoc_insertion_point(destructor:tensorflow.CostGraphDef.AggregatedCost)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CostGraphDef_AggregatedCost::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dimension_.Destroy();
}

void CostGraphDef_AggregatedCost::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CostGraphDef_AggregatedCost::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CostGraphDef.AggregatedCost)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dimension_.ClearToEmpty();
  _impl_.cost_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CostGraphDef_AggregatedCost::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float cost = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.cost_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string dimension = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_dimension();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.CostGraphDef.AggregatedCost.dimension"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CostGraphDef_AggregatedCost::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CostGraphDef.AggregatedCost)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float cost = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cost = this->_internal_cost();
  uint32_t raw_cost;
  memcpy(&raw_cost, &tmp_cost, sizeof(tmp_cost));
  if (raw_cost != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_cost(), target);
  }

  // string dimension = 2;
  if (!this->_internal_dimension().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dimension().data(), static_cast<int>(this->_internal_dimension().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CostGraphDef.AggregatedCost.dimension");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_dimension(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CostGraphDef.AggregatedCost)
  return target;
}

size_t CostGraphDef_AggregatedCost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CostGraphDef.AggregatedCost)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dimension = 2;
  if (!this->_internal_dimension().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dimension());
  }

  // float cost = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cost = this->_internal_cost();
  uint32_t raw_cost;
  memcpy(&raw_cost, &tmp_cost, sizeof(tmp_cost));
  if (raw_cost != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CostGraphDef_AggregatedCost::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CostGraphDef_AggregatedCost::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CostGraphDef_AggregatedCost::GetClassData() const { return &_class_data_; }


void CostGraphDef_AggregatedCost::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CostGraphDef_AggregatedCost*>(&to_msg);
  auto& from = static_cast<const CostGraphDef_AggregatedCost&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CostGraphDef.AggregatedCost)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dimension().empty()) {
    _this->_internal_set_dimension(from._internal_dimension());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_cost = from._internal_cost();
  uint32_t raw_cost;
  memcpy(&raw_cost, &tmp_cost, sizeof(tmp_cost));
  if (raw_cost != 0) {
    _this->_internal_set_cost(from._internal_cost());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CostGraphDef_AggregatedCost::CopyFrom(const CostGraphDef_AggregatedCost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CostGraphDef.AggregatedCost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostGraphDef_AggregatedCost::IsInitialized() const {
  return true;
}

void CostGraphDef_AggregatedCost::InternalSwap(CostGraphDef_AggregatedCost* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dimension_, lhs_arena,
      &other->_impl_.dimension_, rhs_arena
  );
  swap(_impl_.cost_, other->_impl_.cost_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CostGraphDef_AggregatedCost::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto[3]);
}

// ===================================================================

class CostGraphDef::_Internal {
 public:
};

CostGraphDef::CostGraphDef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CostGraphDef)
}
CostGraphDef::CostGraphDef(const CostGraphDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CostGraphDef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){from._impl_.node_}
    , decltype(_impl_.cost_){from._impl_.cost_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.CostGraphDef)
}

inline void CostGraphDef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.node_){arena}
    , decltype(_impl_.cost_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CostGraphDef::~CostGraphDef() {
  // @@protoc_insertion_point(destructor:tensorflow.CostGraphDef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CostGraphDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.node_.~RepeatedPtrField();
  _impl_.cost_.~RepeatedPtrField();
}

void CostGraphDef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CostGraphDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CostGraphDef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.node_.Clear();
  _impl_.cost_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CostGraphDef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.CostGraphDef.Node node = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_node(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.CostGraphDef.AggregatedCost cost = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cost(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CostGraphDef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CostGraphDef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.CostGraphDef.Node node = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_node_size()); i < n; i++) {
    const auto& repfield = this->_internal_node(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tensorflow.CostGraphDef.AggregatedCost cost = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cost_size()); i < n; i++) {
    const auto& repfield = this->_internal_cost(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CostGraphDef)
  return target;
}

size_t CostGraphDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CostGraphDef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.CostGraphDef.Node node = 1;
  total_size += 1UL * this->_internal_node_size();
  for (const auto& msg : this->_impl_.node_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.CostGraphDef.AggregatedCost cost = 2;
  total_size += 1UL * this->_internal_cost_size();
  for (const auto& msg : this->_impl_.cost_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CostGraphDef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CostGraphDef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CostGraphDef::GetClassData() const { return &_class_data_; }


void CostGraphDef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CostGraphDef*>(&to_msg);
  auto& from = static_cast<const CostGraphDef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CostGraphDef)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.node_.MergeFrom(from._impl_.node_);
  _this->_impl_.cost_.MergeFrom(from._impl_.cost_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CostGraphDef::CopyFrom(const CostGraphDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CostGraphDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CostGraphDef::IsInitialized() const {
  return true;
}

void CostGraphDef::InternalSwap(CostGraphDef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.node_.InternalSwap(&other->_impl_.node_);
  _impl_.cost_.InternalSwap(&other->_impl_.cost_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CostGraphDef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fcost_5fgraph_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::CostGraphDef_Node_InputInfo*
Arena::CreateMaybeMessage< ::tensorflow::CostGraphDef_Node_InputInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CostGraphDef_Node_InputInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CostGraphDef_Node_OutputInfo*
Arena::CreateMaybeMessage< ::tensorflow::CostGraphDef_Node_OutputInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CostGraphDef_Node_OutputInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CostGraphDef_Node*
Arena::CreateMaybeMessage< ::tensorflow::CostGraphDef_Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CostGraphDef_Node >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CostGraphDef_AggregatedCost*
Arena::CreateMaybeMessage< ::tensorflow::CostGraphDef_AggregatedCost >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CostGraphDef_AggregatedCost >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CostGraphDef*
Arena::CreateMaybeMessage< ::tensorflow::CostGraphDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CostGraphDef >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
