// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/variable.proto

#include "tensorflow/core/framework/variable.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR VariableDef::VariableDef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.variable_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.initializer_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.snapshot_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.initial_value_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.save_slice_info_def_)*/nullptr
  , /*decltype(_impl_.is_resource_)*/false
  , /*decltype(_impl_.trainable_)*/false
  , /*decltype(_impl_.synchronization_)*/0
  , /*decltype(_impl_.aggregation_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct VariableDefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR VariableDefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~VariableDefDefaultTypeInternal() {}
  union {
    VariableDef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 VariableDefDefaultTypeInternal _VariableDef_default_instance_;
PROTOBUF_CONSTEXPR SaveSliceInfoDef::SaveSliceInfoDef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.full_shape_)*/{}
  , /*decltype(_impl_._full_shape_cached_byte_size_)*/{0}
  , /*decltype(_impl_.var_offset_)*/{}
  , /*decltype(_impl_._var_offset_cached_byte_size_)*/{0}
  , /*decltype(_impl_.var_shape_)*/{}
  , /*decltype(_impl_._var_shape_cached_byte_size_)*/{0}
  , /*decltype(_impl_.full_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SaveSliceInfoDefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SaveSliceInfoDefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SaveSliceInfoDefDefaultTypeInternal() {}
  union {
    SaveSliceInfoDef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SaveSliceInfoDefDefaultTypeInternal _SaveSliceInfoDef_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fframework_2fvariable_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fvariable_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fframework_2fvariable_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fframework_2fvariable_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::VariableDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::VariableDef, _impl_.variable_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::VariableDef, _impl_.initial_value_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::VariableDef, _impl_.initializer_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::VariableDef, _impl_.snapshot_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::VariableDef, _impl_.save_slice_info_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::VariableDef, _impl_.is_resource_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::VariableDef, _impl_.trainable_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::VariableDef, _impl_.synchronization_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::VariableDef, _impl_.aggregation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SaveSliceInfoDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SaveSliceInfoDef, _impl_.full_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SaveSliceInfoDef, _impl_.full_shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SaveSliceInfoDef, _impl_.var_offset_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SaveSliceInfoDef, _impl_.var_shape_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::VariableDef)},
  { 15, -1, -1, sizeof(::tensorflow::SaveSliceInfoDef)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_VariableDef_default_instance_._instance,
  &::tensorflow::_SaveSliceInfoDef_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fframework_2fvariable_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(tensorflow/core/framework/variable.pro"
  "to\022\ntensorflow\"\310\002\n\013VariableDef\022\025\n\rvariab"
  "le_name\030\001 \001(\t\022\032\n\022initial_value_name\030\006 \001("
  "\t\022\030\n\020initializer_name\030\002 \001(\t\022\025\n\rsnapshot_"
  "name\030\003 \001(\t\0229\n\023save_slice_info_def\030\004 \001(\0132"
  "\034.tensorflow.SaveSliceInfoDef\022\023\n\013is_reso"
  "urce\030\005 \001(\010\022\021\n\ttrainable\030\007 \001(\010\022<\n\017synchro"
  "nization\030\010 \001(\0162#.tensorflow.VariableSync"
  "hronization\0224\n\013aggregation\030\t \001(\0162\037.tenso"
  "rflow.VariableAggregation\"`\n\020SaveSliceIn"
  "foDef\022\021\n\tfull_name\030\001 \001(\t\022\022\n\nfull_shape\030\002"
  " \003(\003\022\022\n\nvar_offset\030\003 \003(\003\022\021\n\tvar_shape\030\004 "
  "\003(\003*\254\001\n\027VariableSynchronization\022!\n\035VARIA"
  "BLE_SYNCHRONIZATION_AUTO\020\000\022!\n\035VARIABLE_S"
  "YNCHRONIZATION_NONE\020\001\022%\n!VARIABLE_SYNCHR"
  "ONIZATION_ON_WRITE\020\002\022$\n VARIABLE_SYNCHRO"
  "NIZATION_ON_READ\020\003*\236\001\n\023VariableAggregati"
  "on\022\035\n\031VARIABLE_AGGREGATION_NONE\020\000\022\034\n\030VAR"
  "IABLE_AGGREGATION_SUM\020\001\022\035\n\031VARIABLE_AGGR"
  "EGATION_MEAN\020\002\022+\n\'VARIABLE_AGGREGATION_O"
  "NLY_FIRST_REPLICA\020\003B\200\001\n\030org.tensorflow.f"
  "rameworkB\016VariableProtosP\001ZOgithub.com/t"
  "ensorflow/tensorflow/tensorflow/go/core/"
  "framework/variable_go_proto\370\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto = {
    false, false, 958, descriptor_table_protodef_tensorflow_2fcore_2fframework_2fvariable_2eproto,
    "tensorflow/core/framework/variable.proto",
    &descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fframework_2fvariable_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fframework_2fvariable_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fvariable_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fframework_2fvariable_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fframework_2fvariable_2eproto(&descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VariableSynchronization_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fvariable_2eproto[0];
}
bool VariableSynchronization_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* VariableAggregation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fvariable_2eproto[1];
}
bool VariableAggregation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class VariableDef::_Internal {
 public:
  static const ::tensorflow::SaveSliceInfoDef& save_slice_info_def(const VariableDef* msg);
};

const ::tensorflow::SaveSliceInfoDef&
VariableDef::_Internal::save_slice_info_def(const VariableDef* msg) {
  return *msg->_impl_.save_slice_info_def_;
}
VariableDef::VariableDef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.VariableDef)
}
VariableDef::VariableDef(const VariableDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  VariableDef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.variable_name_){}
    , decltype(_impl_.initializer_name_){}
    , decltype(_impl_.snapshot_name_){}
    , decltype(_impl_.initial_value_name_){}
    , decltype(_impl_.save_slice_info_def_){nullptr}
    , decltype(_impl_.is_resource_){}
    , decltype(_impl_.trainable_){}
    , decltype(_impl_.synchronization_){}
    , decltype(_impl_.aggregation_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.variable_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.variable_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_variable_name().empty()) {
    _this->_impl_.variable_name_.Set(from._internal_variable_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.initializer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.initializer_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_initializer_name().empty()) {
    _this->_impl_.initializer_name_.Set(from._internal_initializer_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.snapshot_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.snapshot_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_snapshot_name().empty()) {
    _this->_impl_.snapshot_name_.Set(from._internal_snapshot_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.initial_value_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.initial_value_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_initial_value_name().empty()) {
    _this->_impl_.initial_value_name_.Set(from._internal_initial_value_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_save_slice_info_def()) {
    _this->_impl_.save_slice_info_def_ = new ::tensorflow::SaveSliceInfoDef(*from._impl_.save_slice_info_def_);
  }
  ::memcpy(&_impl_.is_resource_, &from._impl_.is_resource_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.aggregation_) -
    reinterpret_cast<char*>(&_impl_.is_resource_)) + sizeof(_impl_.aggregation_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.VariableDef)
}

inline void VariableDef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.variable_name_){}
    , decltype(_impl_.initializer_name_){}
    , decltype(_impl_.snapshot_name_){}
    , decltype(_impl_.initial_value_name_){}
    , decltype(_impl_.save_slice_info_def_){nullptr}
    , decltype(_impl_.is_resource_){false}
    , decltype(_impl_.trainable_){false}
    , decltype(_impl_.synchronization_){0}
    , decltype(_impl_.aggregation_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.variable_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.variable_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.initializer_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.initializer_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.snapshot_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.snapshot_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.initial_value_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.initial_value_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

VariableDef::~VariableDef() {
  // @@protoc_insertion_point(destructor:tensorflow.VariableDef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void VariableDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.variable_name_.Destroy();
  _impl_.initializer_name_.Destroy();
  _impl_.snapshot_name_.Destroy();
  _impl_.initial_value_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.save_slice_info_def_;
}

void VariableDef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void VariableDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.VariableDef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.variable_name_.ClearToEmpty();
  _impl_.initializer_name_.ClearToEmpty();
  _impl_.snapshot_name_.ClearToEmpty();
  _impl_.initial_value_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.save_slice_info_def_ != nullptr) {
    delete _impl_.save_slice_info_def_;
  }
  _impl_.save_slice_info_def_ = nullptr;
  ::memset(&_impl_.is_resource_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.aggregation_) -
      reinterpret_cast<char*>(&_impl_.is_resource_)) + sizeof(_impl_.aggregation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VariableDef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string variable_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_variable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.VariableDef.variable_name"));
        } else
          goto handle_unusual;
        continue;
      // string initializer_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_initializer_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.VariableDef.initializer_name"));
        } else
          goto handle_unusual;
        continue;
      // string snapshot_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_snapshot_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.VariableDef.snapshot_name"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.SaveSliceInfoDef save_slice_info_def = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_save_slice_info_def(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_resource = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_resource_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string initial_value_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_initial_value_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.VariableDef.initial_value_name"));
        } else
          goto handle_unusual;
        continue;
      // bool trainable = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.trainable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.VariableSynchronization synchronization = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_synchronization(static_cast<::tensorflow::VariableSynchronization>(val));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.VariableAggregation aggregation = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_aggregation(static_cast<::tensorflow::VariableAggregation>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* VariableDef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.VariableDef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string variable_name = 1;
  if (!this->_internal_variable_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_variable_name().data(), static_cast<int>(this->_internal_variable_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VariableDef.variable_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_variable_name(), target);
  }

  // string initializer_name = 2;
  if (!this->_internal_initializer_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_initializer_name().data(), static_cast<int>(this->_internal_initializer_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VariableDef.initializer_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_initializer_name(), target);
  }

  // string snapshot_name = 3;
  if (!this->_internal_snapshot_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snapshot_name().data(), static_cast<int>(this->_internal_snapshot_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VariableDef.snapshot_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_snapshot_name(), target);
  }

  // .tensorflow.SaveSliceInfoDef save_slice_info_def = 4;
  if (this->_internal_has_save_slice_info_def()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::save_slice_info_def(this),
        _Internal::save_slice_info_def(this).GetCachedSize(), target, stream);
  }

  // bool is_resource = 5;
  if (this->_internal_is_resource() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_resource(), target);
  }

  // string initial_value_name = 6;
  if (!this->_internal_initial_value_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_initial_value_name().data(), static_cast<int>(this->_internal_initial_value_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.VariableDef.initial_value_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_initial_value_name(), target);
  }

  // bool trainable = 7;
  if (this->_internal_trainable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_trainable(), target);
  }

  // .tensorflow.VariableSynchronization synchronization = 8;
  if (this->_internal_synchronization() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_synchronization(), target);
  }

  // .tensorflow.VariableAggregation aggregation = 9;
  if (this->_internal_aggregation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_aggregation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.VariableDef)
  return target;
}

size_t VariableDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.VariableDef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string variable_name = 1;
  if (!this->_internal_variable_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_variable_name());
  }

  // string initializer_name = 2;
  if (!this->_internal_initializer_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_initializer_name());
  }

  // string snapshot_name = 3;
  if (!this->_internal_snapshot_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snapshot_name());
  }

  // string initial_value_name = 6;
  if (!this->_internal_initial_value_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_initial_value_name());
  }

  // .tensorflow.SaveSliceInfoDef save_slice_info_def = 4;
  if (this->_internal_has_save_slice_info_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.save_slice_info_def_);
  }

  // bool is_resource = 5;
  if (this->_internal_is_resource() != 0) {
    total_size += 1 + 1;
  }

  // bool trainable = 7;
  if (this->_internal_trainable() != 0) {
    total_size += 1 + 1;
  }

  // .tensorflow.VariableSynchronization synchronization = 8;
  if (this->_internal_synchronization() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_synchronization());
  }

  // .tensorflow.VariableAggregation aggregation = 9;
  if (this->_internal_aggregation() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_aggregation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData VariableDef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    VariableDef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*VariableDef::GetClassData() const { return &_class_data_; }


void VariableDef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<VariableDef*>(&to_msg);
  auto& from = static_cast<const VariableDef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.VariableDef)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_variable_name().empty()) {
    _this->_internal_set_variable_name(from._internal_variable_name());
  }
  if (!from._internal_initializer_name().empty()) {
    _this->_internal_set_initializer_name(from._internal_initializer_name());
  }
  if (!from._internal_snapshot_name().empty()) {
    _this->_internal_set_snapshot_name(from._internal_snapshot_name());
  }
  if (!from._internal_initial_value_name().empty()) {
    _this->_internal_set_initial_value_name(from._internal_initial_value_name());
  }
  if (from._internal_has_save_slice_info_def()) {
    _this->_internal_mutable_save_slice_info_def()->::tensorflow::SaveSliceInfoDef::MergeFrom(
        from._internal_save_slice_info_def());
  }
  if (from._internal_is_resource() != 0) {
    _this->_internal_set_is_resource(from._internal_is_resource());
  }
  if (from._internal_trainable() != 0) {
    _this->_internal_set_trainable(from._internal_trainable());
  }
  if (from._internal_synchronization() != 0) {
    _this->_internal_set_synchronization(from._internal_synchronization());
  }
  if (from._internal_aggregation() != 0) {
    _this->_internal_set_aggregation(from._internal_aggregation());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void VariableDef::CopyFrom(const VariableDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.VariableDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableDef::IsInitialized() const {
  return true;
}

void VariableDef::InternalSwap(VariableDef* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.variable_name_, lhs_arena,
      &other->_impl_.variable_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.initializer_name_, lhs_arena,
      &other->_impl_.initializer_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.snapshot_name_, lhs_arena,
      &other->_impl_.snapshot_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.initial_value_name_, lhs_arena,
      &other->_impl_.initial_value_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VariableDef, _impl_.aggregation_)
      + sizeof(VariableDef::_impl_.aggregation_)
      - PROTOBUF_FIELD_OFFSET(VariableDef, _impl_.save_slice_info_def_)>(
          reinterpret_cast<char*>(&_impl_.save_slice_info_def_),
          reinterpret_cast<char*>(&other->_impl_.save_slice_info_def_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VariableDef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fvariable_2eproto[0]);
}

// ===================================================================

class SaveSliceInfoDef::_Internal {
 public:
};

SaveSliceInfoDef::SaveSliceInfoDef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SaveSliceInfoDef)
}
SaveSliceInfoDef::SaveSliceInfoDef(const SaveSliceInfoDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SaveSliceInfoDef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.full_shape_){from._impl_.full_shape_}
    , /*decltype(_impl_._full_shape_cached_byte_size_)*/{0}
    , decltype(_impl_.var_offset_){from._impl_.var_offset_}
    , /*decltype(_impl_._var_offset_cached_byte_size_)*/{0}
    , decltype(_impl_.var_shape_){from._impl_.var_shape_}
    , /*decltype(_impl_._var_shape_cached_byte_size_)*/{0}
    , decltype(_impl_.full_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.full_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.full_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_full_name().empty()) {
    _this->_impl_.full_name_.Set(from._internal_full_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.SaveSliceInfoDef)
}

inline void SaveSliceInfoDef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.full_shape_){arena}
    , /*decltype(_impl_._full_shape_cached_byte_size_)*/{0}
    , decltype(_impl_.var_offset_){arena}
    , /*decltype(_impl_._var_offset_cached_byte_size_)*/{0}
    , decltype(_impl_.var_shape_){arena}
    , /*decltype(_impl_._var_shape_cached_byte_size_)*/{0}
    , decltype(_impl_.full_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.full_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.full_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SaveSliceInfoDef::~SaveSliceInfoDef() {
  // @@protoc_insertion_point(destructor:tensorflow.SaveSliceInfoDef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SaveSliceInfoDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.full_shape_.~RepeatedField();
  _impl_.var_offset_.~RepeatedField();
  _impl_.var_shape_.~RepeatedField();
  _impl_.full_name_.Destroy();
}

void SaveSliceInfoDef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SaveSliceInfoDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SaveSliceInfoDef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.full_shape_.Clear();
  _impl_.var_offset_.Clear();
  _impl_.var_shape_.Clear();
  _impl_.full_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaveSliceInfoDef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string full_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_full_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.SaveSliceInfoDef.full_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 full_shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_full_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_full_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 var_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_var_offset(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_var_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 var_shape = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_var_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_var_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SaveSliceInfoDef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SaveSliceInfoDef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string full_name = 1;
  if (!this->_internal_full_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_full_name().data(), static_cast<int>(this->_internal_full_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SaveSliceInfoDef.full_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_full_name(), target);
  }

  // repeated int64 full_shape = 2;
  {
    int byte_size = _impl_._full_shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_full_shape(), byte_size, target);
    }
  }

  // repeated int64 var_offset = 3;
  {
    int byte_size = _impl_._var_offset_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          3, _internal_var_offset(), byte_size, target);
    }
  }

  // repeated int64 var_shape = 4;
  {
    int byte_size = _impl_._var_shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_var_shape(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SaveSliceInfoDef)
  return target;
}

size_t SaveSliceInfoDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SaveSliceInfoDef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 full_shape = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.full_shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._full_shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 var_offset = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.var_offset_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._var_offset_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 var_shape = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.var_shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._var_shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string full_name = 1;
  if (!this->_internal_full_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_full_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaveSliceInfoDef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SaveSliceInfoDef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaveSliceInfoDef::GetClassData() const { return &_class_data_; }


void SaveSliceInfoDef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SaveSliceInfoDef*>(&to_msg);
  auto& from = static_cast<const SaveSliceInfoDef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SaveSliceInfoDef)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.full_shape_.MergeFrom(from._impl_.full_shape_);
  _this->_impl_.var_offset_.MergeFrom(from._impl_.var_offset_);
  _this->_impl_.var_shape_.MergeFrom(from._impl_.var_shape_);
  if (!from._internal_full_name().empty()) {
    _this->_internal_set_full_name(from._internal_full_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaveSliceInfoDef::CopyFrom(const SaveSliceInfoDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SaveSliceInfoDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveSliceInfoDef::IsInitialized() const {
  return true;
}

void SaveSliceInfoDef::InternalSwap(SaveSliceInfoDef* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.full_shape_.InternalSwap(&other->_impl_.full_shape_);
  _impl_.var_offset_.InternalSwap(&other->_impl_.var_offset_);
  _impl_.var_shape_.InternalSwap(&other->_impl_.var_shape_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.full_name_, lhs_arena,
      &other->_impl_.full_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SaveSliceInfoDef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fvariable_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fvariable_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::VariableDef*
Arena::CreateMaybeMessage< ::tensorflow::VariableDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::VariableDef >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SaveSliceInfoDef*
Arena::CreateMaybeMessage< ::tensorflow::SaveSliceInfoDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SaveSliceInfoDef >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
