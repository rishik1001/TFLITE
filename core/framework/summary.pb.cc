// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/summary.proto

#include "tensorflow/core/framework/summary.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR SummaryDescription::SummaryDescription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_hint_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SummaryDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SummaryDescriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SummaryDescriptionDefaultTypeInternal() {}
  union {
    SummaryDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SummaryDescriptionDefaultTypeInternal _SummaryDescription_default_instance_;
PROTOBUF_CONSTEXPR SummaryMetadata_PluginData::SummaryMetadata_PluginData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.plugin_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SummaryMetadata_PluginDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SummaryMetadata_PluginDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SummaryMetadata_PluginDataDefaultTypeInternal() {}
  union {
    SummaryMetadata_PluginData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SummaryMetadata_PluginDataDefaultTypeInternal _SummaryMetadata_PluginData_default_instance_;
PROTOBUF_CONSTEXPR SummaryMetadata::SummaryMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.display_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.summary_description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.plugin_data_)*/nullptr
  , /*decltype(_impl_.data_class_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SummaryMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SummaryMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SummaryMetadataDefaultTypeInternal() {}
  union {
    SummaryMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SummaryMetadataDefaultTypeInternal _SummaryMetadata_default_instance_;
PROTOBUF_CONSTEXPR Summary_Image::Summary_Image(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.encoded_image_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.colorspace_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Summary_ImageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Summary_ImageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Summary_ImageDefaultTypeInternal() {}
  union {
    Summary_Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Summary_ImageDefaultTypeInternal _Summary_Image_default_instance_;
PROTOBUF_CONSTEXPR Summary_Audio::Summary_Audio(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.encoded_audio_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.content_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.num_channels_)*/int64_t{0}
  , /*decltype(_impl_.length_frames_)*/int64_t{0}
  , /*decltype(_impl_.sample_rate_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Summary_AudioDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Summary_AudioDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Summary_AudioDefaultTypeInternal() {}
  union {
    Summary_Audio _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Summary_AudioDefaultTypeInternal _Summary_Audio_default_instance_;
PROTOBUF_CONSTEXPR Summary_Value::Summary_Value(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.node_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/nullptr
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Summary_ValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Summary_ValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Summary_ValueDefaultTypeInternal() {}
  union {
    Summary_Value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Summary_ValueDefaultTypeInternal _Summary_Value_default_instance_;
PROTOBUF_CONSTEXPR Summary::Summary(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SummaryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SummaryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SummaryDefaultTypeInternal() {}
  union {
    Summary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SummaryDefaultTypeInternal _Summary_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fframework_2fsummary_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fsummary_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fframework_2fsummary_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fframework_2fsummary_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SummaryDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SummaryDescription, _impl_.type_hint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SummaryMetadata_PluginData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SummaryMetadata_PluginData, _impl_.plugin_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SummaryMetadata_PluginData, _impl_.content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SummaryMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SummaryMetadata, _impl_.plugin_data_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SummaryMetadata, _impl_.display_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SummaryMetadata, _impl_.summary_description_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SummaryMetadata, _impl_.data_class_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::Summary_Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::Summary_Image, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Summary_Image, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Summary_Image, _impl_.colorspace_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Summary_Image, _impl_.encoded_image_string_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::Summary_Audio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::Summary_Audio, _impl_.sample_rate_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Summary_Audio, _impl_.num_channels_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Summary_Audio, _impl_.length_frames_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Summary_Audio, _impl_.encoded_audio_string_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Summary_Audio, _impl_.content_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::Summary_Value, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::Summary_Value, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::Summary_Value, _impl_.node_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Summary_Value, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Summary_Value, _impl_.metadata_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::Summary_Value, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::Summary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::Summary, _impl_.value_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::SummaryDescription)},
  { 7, -1, -1, sizeof(::tensorflow::SummaryMetadata_PluginData)},
  { 15, -1, -1, sizeof(::tensorflow::SummaryMetadata)},
  { 25, -1, -1, sizeof(::tensorflow::Summary_Image)},
  { 35, -1, -1, sizeof(::tensorflow::Summary_Audio)},
  { 46, -1, -1, sizeof(::tensorflow::Summary_Value)},
  { 62, -1, -1, sizeof(::tensorflow::Summary)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_SummaryDescription_default_instance_._instance,
  &::tensorflow::_SummaryMetadata_PluginData_default_instance_._instance,
  &::tensorflow::_SummaryMetadata_default_instance_._instance,
  &::tensorflow::_Summary_Image_default_instance_._instance,
  &::tensorflow::_Summary_Audio_default_instance_._instance,
  &::tensorflow::_Summary_Value_default_instance_._instance,
  &::tensorflow::_Summary_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fframework_2fsummary_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'tensorflow/core/framework/summary.prot"
  "o\022\ntensorflow\032\034tsl/protobuf/histogram.pr"
  "oto\032&tensorflow/core/framework/tensor.pr"
  "oto\"\'\n\022SummaryDescription\022\021\n\ttype_hint\030\001"
  " \001(\t\"\340\001\n\017SummaryMetadata\022;\n\013plugin_data\030"
  "\001 \001(\0132&.tensorflow.SummaryMetadata.Plugi"
  "nData\022\024\n\014display_name\030\002 \001(\t\022\033\n\023summary_d"
  "escription\030\003 \001(\t\022)\n\ndata_class\030\004 \001(\0162\025.t"
  "ensorflow.DataClass\0322\n\nPluginData\022\023\n\013plu"
  "gin_name\030\001 \001(\t\022\017\n\007content\030\002 \001(\014\"\336\004\n\007Summ"
  "ary\022(\n\005value\030\001 \003(\0132\031.tensorflow.Summary."
  "Value\032X\n\005Image\022\016\n\006height\030\001 \001(\005\022\r\n\005width\030"
  "\002 \001(\005\022\022\n\ncolorspace\030\003 \001(\005\022\034\n\024encoded_ima"
  "ge_string\030\004 \001(\014\032}\n\005Audio\022\023\n\013sample_rate\030"
  "\001 \001(\002\022\024\n\014num_channels\030\002 \001(\003\022\025\n\rlength_fr"
  "ames\030\003 \001(\003\022\034\n\024encoded_audio_string\030\004 \001(\014"
  "\022\024\n\014content_type\030\005 \001(\t\032\317\002\n\005Value\022\021\n\tnode"
  "_name\030\007 \001(\t\022\013\n\003tag\030\001 \001(\t\022-\n\010metadata\030\t \001"
  "(\0132\033.tensorflow.SummaryMetadata\022\026\n\014simpl"
  "e_value\030\002 \001(\002H\000\022&\n\034obsolete_old_style_hi"
  "stogram\030\003 \001(\014H\000\022*\n\005image\030\004 \001(\0132\031.tensorf"
  "low.Summary.ImageH\000\022+\n\005histo\030\005 \001(\0132\032.ten"
  "sorflow.HistogramProtoH\000\022*\n\005audio\030\006 \001(\0132"
  "\031.tensorflow.Summary.AudioH\000\022)\n\006tensor\030\010"
  " \001(\0132\027.tensorflow.TensorProtoH\000B\007\n\005value"
  "*o\n\tDataClass\022\026\n\022DATA_CLASS_UNKNOWN\020\000\022\025\n"
  "\021DATA_CLASS_SCALAR\020\001\022\025\n\021DATA_CLASS_TENSO"
  "R\020\002\022\034\n\030DATA_CLASS_BLOB_SEQUENCE\020\003B~\n\030org"
  ".tensorflow.frameworkB\rSummaryProtosP\001ZN"
  "github.com/tensorflow/tensorflow/tensorf"
  "low/go/core/framework/summary_go_proto\370\001"
  "\001P\000b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto_deps[2] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_2eproto,
  &::descriptor_table_tsl_2fprotobuf_2fhistogram_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto = {
    false, false, 1251, descriptor_table_protodef_tensorflow_2fcore_2fframework_2fsummary_2eproto,
    "tensorflow/core/framework/summary.proto",
    &descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto_once, descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto_deps, 2, 7,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fframework_2fsummary_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fframework_2fsummary_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fsummary_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fframework_2fsummary_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fframework_2fsummary_2eproto(&descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fframework_2fsummary_2eproto[0];
}
bool DataClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SummaryDescription::_Internal {
 public:
};

SummaryDescription::SummaryDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SummaryDescription)
}
SummaryDescription::SummaryDescription(const SummaryDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SummaryDescription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_hint_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_hint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_hint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type_hint().empty()) {
    _this->_impl_.type_hint_.Set(from._internal_type_hint(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.SummaryDescription)
}

inline void SummaryDescription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_hint_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_hint_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_hint_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SummaryDescription::~SummaryDescription() {
  // @@protoc_insertion_point(destructor:tensorflow.SummaryDescription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SummaryDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_hint_.Destroy();
}

void SummaryDescription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SummaryDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SummaryDescription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_hint_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryDescription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type_hint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type_hint();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.SummaryDescription.type_hint"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SummaryDescription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SummaryDescription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type_hint = 1;
  if (!this->_internal_type_hint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_hint().data(), static_cast<int>(this->_internal_type_hint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SummaryDescription.type_hint");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type_hint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SummaryDescription)
  return target;
}

size_t SummaryDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SummaryDescription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type_hint = 1;
  if (!this->_internal_type_hint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type_hint());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SummaryDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SummaryDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SummaryDescription::GetClassData() const { return &_class_data_; }


void SummaryDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SummaryDescription*>(&to_msg);
  auto& from = static_cast<const SummaryDescription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SummaryDescription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type_hint().empty()) {
    _this->_internal_set_type_hint(from._internal_type_hint());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SummaryDescription::CopyFrom(const SummaryDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SummaryDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryDescription::IsInitialized() const {
  return true;
}

void SummaryDescription::InternalSwap(SummaryDescription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_hint_, lhs_arena,
      &other->_impl_.type_hint_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryDescription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fsummary_2eproto[0]);
}

// ===================================================================

class SummaryMetadata_PluginData::_Internal {
 public:
};

SummaryMetadata_PluginData::SummaryMetadata_PluginData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SummaryMetadata.PluginData)
}
SummaryMetadata_PluginData::SummaryMetadata_PluginData(const SummaryMetadata_PluginData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SummaryMetadata_PluginData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.plugin_name_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.plugin_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plugin_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_plugin_name().empty()) {
    _this->_impl_.plugin_name_.Set(from._internal_plugin_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    _this->_impl_.content_.Set(from._internal_content(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.SummaryMetadata.PluginData)
}

inline void SummaryMetadata_PluginData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.plugin_name_){}
    , decltype(_impl_.content_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.plugin_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.plugin_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SummaryMetadata_PluginData::~SummaryMetadata_PluginData() {
  // @@protoc_insertion_point(destructor:tensorflow.SummaryMetadata.PluginData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SummaryMetadata_PluginData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.plugin_name_.Destroy();
  _impl_.content_.Destroy();
}

void SummaryMetadata_PluginData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SummaryMetadata_PluginData::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SummaryMetadata.PluginData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.plugin_name_.ClearToEmpty();
  _impl_.content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryMetadata_PluginData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string plugin_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_plugin_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.SummaryMetadata.PluginData.plugin_name"));
        } else
          goto handle_unusual;
        continue;
      // bytes content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SummaryMetadata_PluginData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SummaryMetadata.PluginData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string plugin_name = 1;
  if (!this->_internal_plugin_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_plugin_name().data(), static_cast<int>(this->_internal_plugin_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SummaryMetadata.PluginData.plugin_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_plugin_name(), target);
  }

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SummaryMetadata.PluginData)
  return target;
}

size_t SummaryMetadata_PluginData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SummaryMetadata.PluginData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string plugin_name = 1;
  if (!this->_internal_plugin_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plugin_name());
  }

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SummaryMetadata_PluginData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SummaryMetadata_PluginData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SummaryMetadata_PluginData::GetClassData() const { return &_class_data_; }


void SummaryMetadata_PluginData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SummaryMetadata_PluginData*>(&to_msg);
  auto& from = static_cast<const SummaryMetadata_PluginData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SummaryMetadata.PluginData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_plugin_name().empty()) {
    _this->_internal_set_plugin_name(from._internal_plugin_name());
  }
  if (!from._internal_content().empty()) {
    _this->_internal_set_content(from._internal_content());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SummaryMetadata_PluginData::CopyFrom(const SummaryMetadata_PluginData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SummaryMetadata.PluginData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryMetadata_PluginData::IsInitialized() const {
  return true;
}

void SummaryMetadata_PluginData::InternalSwap(SummaryMetadata_PluginData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.plugin_name_, lhs_arena,
      &other->_impl_.plugin_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_, lhs_arena,
      &other->_impl_.content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryMetadata_PluginData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fsummary_2eproto[1]);
}

// ===================================================================

class SummaryMetadata::_Internal {
 public:
  static const ::tensorflow::SummaryMetadata_PluginData& plugin_data(const SummaryMetadata* msg);
};

const ::tensorflow::SummaryMetadata_PluginData&
SummaryMetadata::_Internal::plugin_data(const SummaryMetadata* msg) {
  return *msg->_impl_.plugin_data_;
}
SummaryMetadata::SummaryMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SummaryMetadata)
}
SummaryMetadata::SummaryMetadata(const SummaryMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SummaryMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.display_name_){}
    , decltype(_impl_.summary_description_){}
    , decltype(_impl_.plugin_data_){nullptr}
    , decltype(_impl_.data_class_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.summary_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.summary_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_summary_description().empty()) {
    _this->_impl_.summary_description_.Set(from._internal_summary_description(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_plugin_data()) {
    _this->_impl_.plugin_data_ = new ::tensorflow::SummaryMetadata_PluginData(*from._impl_.plugin_data_);
  }
  _this->_impl_.data_class_ = from._impl_.data_class_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.SummaryMetadata)
}

inline void SummaryMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.display_name_){}
    , decltype(_impl_.summary_description_){}
    , decltype(_impl_.plugin_data_){nullptr}
    , decltype(_impl_.data_class_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.summary_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.summary_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SummaryMetadata::~SummaryMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.SummaryMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SummaryMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.display_name_.Destroy();
  _impl_.summary_description_.Destroy();
  if (this != internal_default_instance()) delete _impl_.plugin_data_;
}

void SummaryMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SummaryMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SummaryMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.display_name_.ClearToEmpty();
  _impl_.summary_description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.plugin_data_ != nullptr) {
    delete _impl_.plugin_data_;
  }
  _impl_.plugin_data_ = nullptr;
  _impl_.data_class_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.SummaryMetadata.PluginData plugin_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plugin_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string display_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.SummaryMetadata.display_name"));
        } else
          goto handle_unusual;
        continue;
      // string summary_description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_summary_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.SummaryMetadata.summary_description"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.DataClass data_class = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_class(static_cast<::tensorflow::DataClass>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SummaryMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SummaryMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.SummaryMetadata.PluginData plugin_data = 1;
  if (this->_internal_has_plugin_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::plugin_data(this),
        _Internal::plugin_data(this).GetCachedSize(), target, stream);
  }

  // string display_name = 2;
  if (!this->_internal_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SummaryMetadata.display_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display_name(), target);
  }

  // string summary_description = 3;
  if (!this->_internal_summary_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_summary_description().data(), static_cast<int>(this->_internal_summary_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SummaryMetadata.summary_description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_summary_description(), target);
  }

  // .tensorflow.DataClass data_class = 4;
  if (this->_internal_data_class() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_data_class(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SummaryMetadata)
  return target;
}

size_t SummaryMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SummaryMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string display_name = 2;
  if (!this->_internal_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // string summary_description = 3;
  if (!this->_internal_summary_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_summary_description());
  }

  // .tensorflow.SummaryMetadata.PluginData plugin_data = 1;
  if (this->_internal_has_plugin_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.plugin_data_);
  }

  // .tensorflow.DataClass data_class = 4;
  if (this->_internal_data_class() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_data_class());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SummaryMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SummaryMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SummaryMetadata::GetClassData() const { return &_class_data_; }


void SummaryMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SummaryMetadata*>(&to_msg);
  auto& from = static_cast<const SummaryMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SummaryMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_display_name().empty()) {
    _this->_internal_set_display_name(from._internal_display_name());
  }
  if (!from._internal_summary_description().empty()) {
    _this->_internal_set_summary_description(from._internal_summary_description());
  }
  if (from._internal_has_plugin_data()) {
    _this->_internal_mutable_plugin_data()->::tensorflow::SummaryMetadata_PluginData::MergeFrom(
        from._internal_plugin_data());
  }
  if (from._internal_data_class() != 0) {
    _this->_internal_set_data_class(from._internal_data_class());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SummaryMetadata::CopyFrom(const SummaryMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SummaryMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryMetadata::IsInitialized() const {
  return true;
}

void SummaryMetadata::InternalSwap(SummaryMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_name_, lhs_arena,
      &other->_impl_.display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.summary_description_, lhs_arena,
      &other->_impl_.summary_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SummaryMetadata, _impl_.data_class_)
      + sizeof(SummaryMetadata::_impl_.data_class_)
      - PROTOBUF_FIELD_OFFSET(SummaryMetadata, _impl_.plugin_data_)>(
          reinterpret_cast<char*>(&_impl_.plugin_data_),
          reinterpret_cast<char*>(&other->_impl_.plugin_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fsummary_2eproto[2]);
}

// ===================================================================

class Summary_Image::_Internal {
 public:
};

Summary_Image::Summary_Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.Summary.Image)
}
Summary_Image::Summary_Image(const Summary_Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Summary_Image* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.encoded_image_string_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.colorspace_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.encoded_image_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encoded_image_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoded_image_string().empty()) {
    _this->_impl_.encoded_image_string_.Set(from._internal_encoded_image_string(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.height_, &from._impl_.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.colorspace_) -
    reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.colorspace_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.Summary.Image)
}

inline void Summary_Image::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.encoded_image_string_){}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.colorspace_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.encoded_image_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encoded_image_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Summary_Image::~Summary_Image() {
  // @@protoc_insertion_point(destructor:tensorflow.Summary.Image)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Summary_Image::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.encoded_image_string_.Destroy();
}

void Summary_Image::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Summary_Image::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.Summary.Image)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.encoded_image_string_.ClearToEmpty();
  ::memset(&_impl_.height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.colorspace_) -
      reinterpret_cast<char*>(&_impl_.height_)) + sizeof(_impl_.colorspace_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Summary_Image::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 colorspace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.colorspace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes encoded_image_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_encoded_image_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Summary_Image::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.Summary.Image)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_height(), target);
  }

  // int32 width = 2;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // int32 colorspace = 3;
  if (this->_internal_colorspace() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_colorspace(), target);
  }

  // bytes encoded_image_string = 4;
  if (!this->_internal_encoded_image_string().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_encoded_image_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.Summary.Image)
  return target;
}

size_t Summary_Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.Summary.Image)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded_image_string = 4;
  if (!this->_internal_encoded_image_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded_image_string());
  }

  // int32 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // int32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 colorspace = 3;
  if (this->_internal_colorspace() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_colorspace());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Summary_Image::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Summary_Image::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Summary_Image::GetClassData() const { return &_class_data_; }


void Summary_Image::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Summary_Image*>(&to_msg);
  auto& from = static_cast<const Summary_Image&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.Summary.Image)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encoded_image_string().empty()) {
    _this->_internal_set_encoded_image_string(from._internal_encoded_image_string());
  }
  if (from._internal_height() != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  if (from._internal_width() != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  if (from._internal_colorspace() != 0) {
    _this->_internal_set_colorspace(from._internal_colorspace());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Summary_Image::CopyFrom(const Summary_Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.Summary.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary_Image::IsInitialized() const {
  return true;
}

void Summary_Image::InternalSwap(Summary_Image* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encoded_image_string_, lhs_arena,
      &other->_impl_.encoded_image_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Summary_Image, _impl_.colorspace_)
      + sizeof(Summary_Image::_impl_.colorspace_)
      - PROTOBUF_FIELD_OFFSET(Summary_Image, _impl_.height_)>(
          reinterpret_cast<char*>(&_impl_.height_),
          reinterpret_cast<char*>(&other->_impl_.height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Summary_Image::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fsummary_2eproto[3]);
}

// ===================================================================

class Summary_Audio::_Internal {
 public:
};

Summary_Audio::Summary_Audio(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.Summary.Audio)
}
Summary_Audio::Summary_Audio(const Summary_Audio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Summary_Audio* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.encoded_audio_string_){}
    , decltype(_impl_.content_type_){}
    , decltype(_impl_.num_channels_){}
    , decltype(_impl_.length_frames_){}
    , decltype(_impl_.sample_rate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.encoded_audio_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encoded_audio_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoded_audio_string().empty()) {
    _this->_impl_.encoded_audio_string_.Set(from._internal_encoded_audio_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content_type().empty()) {
    _this->_impl_.content_type_.Set(from._internal_content_type(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.num_channels_, &from._impl_.num_channels_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sample_rate_) -
    reinterpret_cast<char*>(&_impl_.num_channels_)) + sizeof(_impl_.sample_rate_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.Summary.Audio)
}

inline void Summary_Audio::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.encoded_audio_string_){}
    , decltype(_impl_.content_type_){}
    , decltype(_impl_.num_channels_){int64_t{0}}
    , decltype(_impl_.length_frames_){int64_t{0}}
    , decltype(_impl_.sample_rate_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.encoded_audio_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.encoded_audio_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.content_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.content_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Summary_Audio::~Summary_Audio() {
  // @@protoc_insertion_point(destructor:tensorflow.Summary.Audio)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Summary_Audio::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.encoded_audio_string_.Destroy();
  _impl_.content_type_.Destroy();
}

void Summary_Audio::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Summary_Audio::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.Summary.Audio)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.encoded_audio_string_.ClearToEmpty();
  _impl_.content_type_.ClearToEmpty();
  ::memset(&_impl_.num_channels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sample_rate_) -
      reinterpret_cast<char*>(&_impl_.num_channels_)) + sizeof(_impl_.sample_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Summary_Audio::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float sample_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int64 num_channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 length_frames = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.length_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes encoded_audio_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_encoded_audio_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_content_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.Summary.Audio.content_type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Summary_Audio::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.Summary.Audio)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float sample_rate = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sample_rate = this->_internal_sample_rate();
  uint32_t raw_sample_rate;
  memcpy(&raw_sample_rate, &tmp_sample_rate, sizeof(tmp_sample_rate));
  if (raw_sample_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_sample_rate(), target);
  }

  // int64 num_channels = 2;
  if (this->_internal_num_channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_num_channels(), target);
  }

  // int64 length_frames = 3;
  if (this->_internal_length_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_length_frames(), target);
  }

  // bytes encoded_audio_string = 4;
  if (!this->_internal_encoded_audio_string().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_encoded_audio_string(), target);
  }

  // string content_type = 5;
  if (!this->_internal_content_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_type().data(), static_cast<int>(this->_internal_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.Summary.Audio.content_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_content_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.Summary.Audio)
  return target;
}

size_t Summary_Audio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.Summary.Audio)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded_audio_string = 4;
  if (!this->_internal_encoded_audio_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded_audio_string());
  }

  // string content_type = 5;
  if (!this->_internal_content_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_type());
  }

  // int64 num_channels = 2;
  if (this->_internal_num_channels() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_channels());
  }

  // int64 length_frames = 3;
  if (this->_internal_length_frames() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_length_frames());
  }

  // float sample_rate = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sample_rate = this->_internal_sample_rate();
  uint32_t raw_sample_rate;
  memcpy(&raw_sample_rate, &tmp_sample_rate, sizeof(tmp_sample_rate));
  if (raw_sample_rate != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Summary_Audio::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Summary_Audio::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Summary_Audio::GetClassData() const { return &_class_data_; }


void Summary_Audio::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Summary_Audio*>(&to_msg);
  auto& from = static_cast<const Summary_Audio&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.Summary.Audio)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encoded_audio_string().empty()) {
    _this->_internal_set_encoded_audio_string(from._internal_encoded_audio_string());
  }
  if (!from._internal_content_type().empty()) {
    _this->_internal_set_content_type(from._internal_content_type());
  }
  if (from._internal_num_channels() != 0) {
    _this->_internal_set_num_channels(from._internal_num_channels());
  }
  if (from._internal_length_frames() != 0) {
    _this->_internal_set_length_frames(from._internal_length_frames());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sample_rate = from._internal_sample_rate();
  uint32_t raw_sample_rate;
  memcpy(&raw_sample_rate, &tmp_sample_rate, sizeof(tmp_sample_rate));
  if (raw_sample_rate != 0) {
    _this->_internal_set_sample_rate(from._internal_sample_rate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Summary_Audio::CopyFrom(const Summary_Audio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.Summary.Audio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary_Audio::IsInitialized() const {
  return true;
}

void Summary_Audio::InternalSwap(Summary_Audio* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.encoded_audio_string_, lhs_arena,
      &other->_impl_.encoded_audio_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.content_type_, lhs_arena,
      &other->_impl_.content_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Summary_Audio, _impl_.sample_rate_)
      + sizeof(Summary_Audio::_impl_.sample_rate_)
      - PROTOBUF_FIELD_OFFSET(Summary_Audio, _impl_.num_channels_)>(
          reinterpret_cast<char*>(&_impl_.num_channels_),
          reinterpret_cast<char*>(&other->_impl_.num_channels_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Summary_Audio::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fsummary_2eproto[4]);
}

// ===================================================================

class Summary_Value::_Internal {
 public:
  static const ::tensorflow::SummaryMetadata& metadata(const Summary_Value* msg);
  static const ::tensorflow::Summary_Image& image(const Summary_Value* msg);
  static const ::tensorflow::HistogramProto& histo(const Summary_Value* msg);
  static const ::tensorflow::Summary_Audio& audio(const Summary_Value* msg);
  static const ::tensorflow::TensorProto& tensor(const Summary_Value* msg);
};

const ::tensorflow::SummaryMetadata&
Summary_Value::_Internal::metadata(const Summary_Value* msg) {
  return *msg->_impl_.metadata_;
}
const ::tensorflow::Summary_Image&
Summary_Value::_Internal::image(const Summary_Value* msg) {
  return *msg->_impl_.value_.image_;
}
const ::tensorflow::HistogramProto&
Summary_Value::_Internal::histo(const Summary_Value* msg) {
  return *msg->_impl_.value_.histo_;
}
const ::tensorflow::Summary_Audio&
Summary_Value::_Internal::audio(const Summary_Value* msg) {
  return *msg->_impl_.value_.audio_;
}
const ::tensorflow::TensorProto&
Summary_Value::_Internal::tensor(const Summary_Value* msg) {
  return *msg->_impl_.value_.tensor_;
}
void Summary_Value::set_allocated_image(::tensorflow::Summary_Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    set_has_image();
    _impl_.value_.image_ = image;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Summary.Value.image)
}
void Summary_Value::set_allocated_histo(::tensorflow::HistogramProto* histo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (histo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(histo));
    if (message_arena != submessage_arena) {
      histo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, histo, submessage_arena);
    }
    set_has_histo();
    _impl_.value_.histo_ = histo;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Summary.Value.histo)
}
void Summary_Value::clear_histo() {
  if (_internal_has_histo()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.histo_;
    }
    clear_has_value();
  }
}
void Summary_Value::set_allocated_audio(::tensorflow::Summary_Audio* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(audio);
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    set_has_audio();
    _impl_.value_.audio_ = audio;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Summary.Value.audio)
}
void Summary_Value::set_allocated_tensor(::tensorflow::TensorProto* tensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (tensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor));
    if (message_arena != submessage_arena) {
      tensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor, submessage_arena);
    }
    set_has_tensor();
    _impl_.value_.tensor_ = tensor;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Summary.Value.tensor)
}
void Summary_Value::clear_tensor() {
  if (_internal_has_tensor()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.value_.tensor_;
    }
    clear_has_value();
  }
}
Summary_Value::Summary_Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.Summary.Value)
}
Summary_Value::Summary_Value(const Summary_Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Summary_Value* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tag_){}
    , decltype(_impl_.node_name_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    _this->_impl_.node_name_.Set(from._internal_node_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    _this->_impl_.metadata_ = new ::tensorflow::SummaryMetadata(*from._impl_.metadata_);
  }
  clear_has_value();
  switch (from.value_case()) {
    case kSimpleValue: {
      _this->_internal_set_simple_value(from._internal_simple_value());
      break;
    }
    case kObsoleteOldStyleHistogram: {
      _this->_internal_set_obsolete_old_style_histogram(from._internal_obsolete_old_style_histogram());
      break;
    }
    case kImage: {
      _this->_internal_mutable_image()->::tensorflow::Summary_Image::MergeFrom(
          from._internal_image());
      break;
    }
    case kHisto: {
      _this->_internal_mutable_histo()->::tensorflow::HistogramProto::MergeFrom(
          from._internal_histo());
      break;
    }
    case kAudio: {
      _this->_internal_mutable_audio()->::tensorflow::Summary_Audio::MergeFrom(
          from._internal_audio());
      break;
    }
    case kTensor: {
      _this->_internal_mutable_tensor()->::tensorflow::TensorProto::MergeFrom(
          from._internal_tensor());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.Summary.Value)
}

inline void Summary_Value::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tag_){}
    , decltype(_impl_.node_name_){}
    , decltype(_impl_.metadata_){nullptr}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.node_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.node_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_value();
}

Summary_Value::~Summary_Value() {
  // @@protoc_insertion_point(destructor:tensorflow.Summary.Value)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Summary_Value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_.Destroy();
  _impl_.node_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.metadata_;
  if (has_value()) {
    clear_value();
  }
}

void Summary_Value::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Summary_Value::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.Summary.Value)
  switch (value_case()) {
    case kSimpleValue: {
      // No need to clear
      break;
    }
    case kObsoleteOldStyleHistogram: {
      _impl_.value_.obsolete_old_style_histogram_.Destroy();
      break;
    }
    case kImage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.image_;
      }
      break;
    }
    case kHisto: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.histo_;
      }
      break;
    }
    case kAudio: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.audio_;
      }
      break;
    }
    case kTensor: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.value_.tensor_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void Summary_Value::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.Summary.Value)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tag_.ClearToEmpty();
  _impl_.node_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.metadata_ != nullptr) {
    delete _impl_.metadata_;
  }
  _impl_.metadata_ = nullptr;
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Summary_Value::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.Summary.Value.tag"));
        } else
          goto handle_unusual;
        continue;
      // float simple_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _internal_set_simple_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bytes obsolete_old_style_histogram = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_obsolete_old_style_histogram();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.Summary.Image image = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.HistogramProto histo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_histo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.Summary.Audio audio = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string node_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_node_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.Summary.Value.node_name"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TensorProto tensor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.SummaryMetadata metadata = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Summary_Value::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.Summary.Value)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.Summary.Value.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // float simple_value = 2;
  if (_internal_has_simple_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_simple_value(), target);
  }

  // bytes obsolete_old_style_histogram = 3;
  if (_internal_has_obsolete_old_style_histogram()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_obsolete_old_style_histogram(), target);
  }

  // .tensorflow.Summary.Image image = 4;
  if (_internal_has_image()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::image(this),
        _Internal::image(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.HistogramProto histo = 5;
  if (_internal_has_histo()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::histo(this),
        _Internal::histo(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.Summary.Audio audio = 6;
  if (_internal_has_audio()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::audio(this),
        _Internal::audio(this).GetCachedSize(), target, stream);
  }

  // string node_name = 7;
  if (!this->_internal_node_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_name().data(), static_cast<int>(this->_internal_node_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.Summary.Value.node_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_node_name(), target);
  }

  // .tensorflow.TensorProto tensor = 8;
  if (_internal_has_tensor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::tensor(this),
        _Internal::tensor(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.SummaryMetadata metadata = 9;
  if (this->_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.Summary.Value)
  return target;
}

size_t Summary_Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.Summary.Value)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // string node_name = 7;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_name());
  }

  // .tensorflow.SummaryMetadata metadata = 9;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.metadata_);
  }

  switch (value_case()) {
    // float simple_value = 2;
    case kSimpleValue: {
      total_size += 1 + 4;
      break;
    }
    // bytes obsolete_old_style_histogram = 3;
    case kObsoleteOldStyleHistogram: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_obsolete_old_style_histogram());
      break;
    }
    // .tensorflow.Summary.Image image = 4;
    case kImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.image_);
      break;
    }
    // .tensorflow.HistogramProto histo = 5;
    case kHisto: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.histo_);
      break;
    }
    // .tensorflow.Summary.Audio audio = 6;
    case kAudio: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.audio_);
      break;
    }
    // .tensorflow.TensorProto tensor = 8;
    case kTensor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.value_.tensor_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Summary_Value::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Summary_Value::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Summary_Value::GetClassData() const { return &_class_data_; }


void Summary_Value::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Summary_Value*>(&to_msg);
  auto& from = static_cast<const Summary_Value&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.Summary.Value)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (!from._internal_node_name().empty()) {
    _this->_internal_set_node_name(from._internal_node_name());
  }
  if (from._internal_has_metadata()) {
    _this->_internal_mutable_metadata()->::tensorflow::SummaryMetadata::MergeFrom(
        from._internal_metadata());
  }
  switch (from.value_case()) {
    case kSimpleValue: {
      _this->_internal_set_simple_value(from._internal_simple_value());
      break;
    }
    case kObsoleteOldStyleHistogram: {
      _this->_internal_set_obsolete_old_style_histogram(from._internal_obsolete_old_style_histogram());
      break;
    }
    case kImage: {
      _this->_internal_mutable_image()->::tensorflow::Summary_Image::MergeFrom(
          from._internal_image());
      break;
    }
    case kHisto: {
      _this->_internal_mutable_histo()->::tensorflow::HistogramProto::MergeFrom(
          from._internal_histo());
      break;
    }
    case kAudio: {
      _this->_internal_mutable_audio()->::tensorflow::Summary_Audio::MergeFrom(
          from._internal_audio());
      break;
    }
    case kTensor: {
      _this->_internal_mutable_tensor()->::tensorflow::TensorProto::MergeFrom(
          from._internal_tensor());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Summary_Value::CopyFrom(const Summary_Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.Summary.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary_Value::IsInitialized() const {
  return true;
}

void Summary_Value::InternalSwap(Summary_Value* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.node_name_, lhs_arena,
      &other->_impl_.node_name_, rhs_arena
  );
  swap(_impl_.metadata_, other->_impl_.metadata_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Summary_Value::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fsummary_2eproto[5]);
}

// ===================================================================

class Summary::_Internal {
 public:
};

Summary::Summary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.Summary)
}
Summary::Summary(const Summary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Summary* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){from._impl_.value_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.Summary)
}

inline void Summary::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Summary::~Summary() {
  // @@protoc_insertion_point(destructor:tensorflow.Summary)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Summary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.value_.~RepeatedPtrField();
}

void Summary::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Summary::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.Summary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Summary::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.Summary.Value value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Summary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.Summary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.Summary.Value value = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_value_size()); i < n; i++) {
    const auto& repfield = this->_internal_value(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.Summary)
  return target;
}

size_t Summary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.Summary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.Summary.Value value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->_impl_.value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Summary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Summary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Summary::GetClassData() const { return &_class_data_; }


void Summary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Summary*>(&to_msg);
  auto& from = static_cast<const Summary&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.Summary)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.value_.MergeFrom(from._impl_.value_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Summary::CopyFrom(const Summary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary::IsInitialized() const {
  return true;
}

void Summary::InternalSwap(Summary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.value_.InternalSwap(&other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Summary::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2fsummary_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::SummaryDescription*
Arena::CreateMaybeMessage< ::tensorflow::SummaryDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SummaryDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SummaryMetadata_PluginData*
Arena::CreateMaybeMessage< ::tensorflow::SummaryMetadata_PluginData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SummaryMetadata_PluginData >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SummaryMetadata*
Arena::CreateMaybeMessage< ::tensorflow::SummaryMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SummaryMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::Summary_Image*
Arena::CreateMaybeMessage< ::tensorflow::Summary_Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::Summary_Image >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::Summary_Audio*
Arena::CreateMaybeMessage< ::tensorflow::Summary_Audio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::Summary_Audio >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::Summary_Value*
Arena::CreateMaybeMessage< ::tensorflow::Summary_Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::Summary_Value >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::Summary*
Arena::CreateMaybeMessage< ::tensorflow::Summary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::Summary >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
