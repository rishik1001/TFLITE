// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/framework/tensor_description.proto

#include "tensorflow/core/framework/tensor_description.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR TensorDescription::TensorDescription(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shape_)*/nullptr
  , /*decltype(_impl_.allocation_description_)*/nullptr
  , /*decltype(_impl_.dtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TensorDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TensorDescriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TensorDescriptionDefaultTypeInternal() {}
  union {
    TensorDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TensorDescriptionDefaultTypeInternal _TensorDescription_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorDescription, _impl_.dtype_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorDescription, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorDescription, _impl_.allocation_description_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::TensorDescription)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_TensorDescription_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n2tensorflow/core/framework/tensor_descr"
  "iption.proto\022\ntensorflow\0326tensorflow/cor"
  "e/framework/allocation_description.proto"
  "\032,tensorflow/core/framework/tensor_shape"
  ".proto\032%tensorflow/core/framework/types."
  "proto\"\250\001\n\021TensorDescription\022#\n\005dtype\030\001 \001"
  "(\0162\024.tensorflow.DataType\022+\n\005shape\030\002 \001(\0132"
  "\034.tensorflow.TensorShapeProto\022A\n\026allocat"
  "ion_description\030\004 \001(\0132!.tensorflow.Alloc"
  "ationDescriptionB\223\001\n\030org.tensorflow.fram"
  "eworkB\027TensorDescriptionProtosP\001ZYgithub"
  ".com/tensorflow/tensorflow/tensorflow/go"
  "/core/framework/tensor_description_go_pr"
  "oto\370\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto_deps[3] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2fallocation_5fdescription_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto = {
    false, false, 534, descriptor_table_protodef_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto,
    "tensorflow/core/framework/tensor_description.proto",
    &descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto_once, descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto_deps, 3, 1,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto(&descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto);
namespace tensorflow {

// ===================================================================

class TensorDescription::_Internal {
 public:
  static const ::tensorflow::TensorShapeProto& shape(const TensorDescription* msg);
  static const ::tensorflow::AllocationDescription& allocation_description(const TensorDescription* msg);
};

const ::tensorflow::TensorShapeProto&
TensorDescription::_Internal::shape(const TensorDescription* msg) {
  return *msg->_impl_.shape_;
}
const ::tensorflow::AllocationDescription&
TensorDescription::_Internal::allocation_description(const TensorDescription* msg) {
  return *msg->_impl_.allocation_description_;
}
void TensorDescription::clear_shape() {
  if (GetArenaForAllocation() == nullptr && _impl_.shape_ != nullptr) {
    delete _impl_.shape_;
  }
  _impl_.shape_ = nullptr;
}
void TensorDescription::clear_allocation_description() {
  if (GetArenaForAllocation() == nullptr && _impl_.allocation_description_ != nullptr) {
    delete _impl_.allocation_description_;
  }
  _impl_.allocation_description_ = nullptr;
}
TensorDescription::TensorDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TensorDescription)
}
TensorDescription::TensorDescription(const TensorDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TensorDescription* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.allocation_description_){nullptr}
    , decltype(_impl_.dtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shape()) {
    _this->_impl_.shape_ = new ::tensorflow::TensorShapeProto(*from._impl_.shape_);
  }
  if (from._internal_has_allocation_description()) {
    _this->_impl_.allocation_description_ = new ::tensorflow::AllocationDescription(*from._impl_.allocation_description_);
  }
  _this->_impl_.dtype_ = from._impl_.dtype_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.TensorDescription)
}

inline void TensorDescription::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.allocation_description_){nullptr}
    , decltype(_impl_.dtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TensorDescription::~TensorDescription() {
  // @@protoc_insertion_point(destructor:tensorflow.TensorDescription)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TensorDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.shape_;
  if (this != internal_default_instance()) delete _impl_.allocation_description_;
}

void TensorDescription::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TensorDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TensorDescription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.shape_ != nullptr) {
    delete _impl_.shape_;
  }
  _impl_.shape_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.allocation_description_ != nullptr) {
    delete _impl_.allocation_description_;
  }
  _impl_.allocation_description_ = nullptr;
  _impl_.dtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorDescription::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.DataType dtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::tensorflow::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TensorShapeProto shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.AllocationDescription allocation_description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_allocation_description(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TensorDescription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TensorDescription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.DataType dtype = 1;
  if (this->_internal_dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dtype(), target);
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->_internal_has_shape()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::shape(this),
        _Internal::shape(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.AllocationDescription allocation_description = 4;
  if (this->_internal_has_allocation_description()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::allocation_description(this),
        _Internal::allocation_description(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TensorDescription)
  return target;
}

size_t TensorDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TensorDescription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->_internal_has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shape_);
  }

  // .tensorflow.AllocationDescription allocation_description = 4;
  if (this->_internal_has_allocation_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.allocation_description_);
  }

  // .tensorflow.DataType dtype = 1;
  if (this->_internal_dtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TensorDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TensorDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TensorDescription::GetClassData() const { return &_class_data_; }


void TensorDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TensorDescription*>(&to_msg);
  auto& from = static_cast<const TensorDescription&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TensorDescription)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shape()) {
    _this->_internal_mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(
        from._internal_shape());
  }
  if (from._internal_has_allocation_description()) {
    _this->_internal_mutable_allocation_description()->::tensorflow::AllocationDescription::MergeFrom(
        from._internal_allocation_description());
  }
  if (from._internal_dtype() != 0) {
    _this->_internal_set_dtype(from._internal_dtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TensorDescription::CopyFrom(const TensorDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TensorDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorDescription::IsInitialized() const {
  return true;
}

void TensorDescription::InternalSwap(TensorDescription* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TensorDescription, _impl_.dtype_)
      + sizeof(TensorDescription::_impl_.dtype_)
      - PROTOBUF_FIELD_OFFSET(TensorDescription, _impl_.shape_)>(
          reinterpret_cast<char*>(&_impl_.shape_),
          reinterpret_cast<char*>(&other->_impl_.shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorDescription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fframework_2ftensor_5fdescription_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::TensorDescription*
Arena::CreateMaybeMessage< ::tensorflow::TensorDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TensorDescription >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
