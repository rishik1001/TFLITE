// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/util/saved_tensor_slice.proto

#include "tensorflow/core/util/saved_tensor_slice.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR SavedSliceMeta::SavedSliceMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.slice_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shape_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SavedSliceMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SavedSliceMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SavedSliceMetaDefaultTypeInternal() {}
  union {
    SavedSliceMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SavedSliceMetaDefaultTypeInternal _SavedSliceMeta_default_instance_;
PROTOBUF_CONSTEXPR SavedTensorSliceMeta::SavedTensorSliceMeta(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tensor_)*/{}
  , /*decltype(_impl_.versions_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SavedTensorSliceMetaDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SavedTensorSliceMetaDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SavedTensorSliceMetaDefaultTypeInternal() {}
  union {
    SavedTensorSliceMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SavedTensorSliceMetaDefaultTypeInternal _SavedTensorSliceMeta_default_instance_;
PROTOBUF_CONSTEXPR SavedSlice::SavedSlice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.slice_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SavedSliceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SavedSliceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SavedSliceDefaultTypeInternal() {}
  union {
    SavedSlice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SavedSliceDefaultTypeInternal _SavedSlice_default_instance_;
PROTOBUF_CONSTEXPR SavedTensorSlices::SavedTensorSlices(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.meta_)*/nullptr
  , /*decltype(_impl_.data_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SavedTensorSlicesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SavedTensorSlicesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SavedTensorSlicesDefaultTypeInternal() {}
  union {
    SavedTensorSlices _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SavedTensorSlicesDefaultTypeInternal _SavedTensorSlices_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSliceMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSliceMeta, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSliceMeta, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSliceMeta, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSliceMeta, _impl_.slice_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedTensorSliceMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedTensorSliceMeta, _impl_.tensor_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedTensorSliceMeta, _impl_.versions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSlice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSlice, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSlice, _impl_.slice_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedSlice, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedTensorSlices, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedTensorSlices, _impl_.meta_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SavedTensorSlices, _impl_.data_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::SavedSliceMeta)},
  { 10, -1, -1, sizeof(::tensorflow::SavedTensorSliceMeta)},
  { 18, -1, -1, sizeof(::tensorflow::SavedSlice)},
  { 27, -1, -1, sizeof(::tensorflow::SavedTensorSlices)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_SavedSliceMeta_default_instance_._instance,
  &::tensorflow::_SavedTensorSliceMeta_default_instance_._instance,
  &::tensorflow::_SavedSlice_default_instance_._instance,
  &::tensorflow::_SavedTensorSlices_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-tensorflow/core/util/saved_tensor_slic"
  "e.proto\022\ntensorflow\032,tensorflow/core/fra"
  "mework/tensor_shape.proto\032,tensorflow/co"
  "re/framework/tensor_slice.proto\032&tensorf"
  "low/core/framework/tensor.proto\032%tensorf"
  "low/core/framework/types.proto\032(tensorfl"
  "ow/core/framework/versions.proto\"\234\001\n\016Sav"
  "edSliceMeta\022\014\n\004name\030\001 \001(\t\022+\n\005shape\030\002 \001(\013"
  "2\034.tensorflow.TensorShapeProto\022\"\n\004type\030\003"
  " \001(\0162\024.tensorflow.DataType\022+\n\005slice\030\004 \003("
  "\0132\034.tensorflow.TensorSliceProto\"l\n\024Saved"
  "TensorSliceMeta\022*\n\006tensor\030\001 \003(\0132\032.tensor"
  "flow.SavedSliceMeta\022(\n\010versions\030\002 \001(\0132\026."
  "tensorflow.VersionDef\"n\n\nSavedSlice\022\014\n\004n"
  "ame\030\001 \001(\t\022+\n\005slice\030\002 \001(\0132\034.tensorflow.Te"
  "nsorSliceProto\022%\n\004data\030\003 \001(\0132\027.tensorflo"
  "w.TensorProto\"i\n\021SavedTensorSlices\022.\n\004me"
  "ta\030\001 \001(\0132 .tensorflow.SavedTensorSliceMe"
  "ta\022$\n\004data\030\002 \001(\0132\026.tensorflow.SavedSlice"
  "B2\n\023org.tensorflow.utilB\026SavedTensorSlic"
  "eProtosP\001\370\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_deps[5] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fslice_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftypes_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2fversions_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto = {
    false, false, 820, descriptor_table_protodef_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto,
    "tensorflow/core/util/saved_tensor_slice.proto",
    &descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_once, descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_deps, 5, 4,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto(&descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto);
namespace tensorflow {

// ===================================================================

class SavedSliceMeta::_Internal {
 public:
  static const ::tensorflow::TensorShapeProto& shape(const SavedSliceMeta* msg);
};

const ::tensorflow::TensorShapeProto&
SavedSliceMeta::_Internal::shape(const SavedSliceMeta* msg) {
  return *msg->_impl_.shape_;
}
void SavedSliceMeta::clear_shape() {
  if (GetArenaForAllocation() == nullptr && _impl_.shape_ != nullptr) {
    delete _impl_.shape_;
  }
  _impl_.shape_ = nullptr;
}
void SavedSliceMeta::clear_slice() {
  _impl_.slice_.Clear();
}
SavedSliceMeta::SavedSliceMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SavedSliceMeta)
}
SavedSliceMeta::SavedSliceMeta(const SavedSliceMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SavedSliceMeta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.slice_){from._impl_.slice_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_shape()) {
    _this->_impl_.shape_ = new ::tensorflow::TensorShapeProto(*from._impl_.shape_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.SavedSliceMeta)
}

inline void SavedSliceMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.slice_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SavedSliceMeta::~SavedSliceMeta() {
  // @@protoc_insertion_point(destructor:tensorflow.SavedSliceMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SavedSliceMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slice_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.shape_;
}

void SavedSliceMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SavedSliceMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SavedSliceMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slice_.Clear();
  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.shape_ != nullptr) {
    delete _impl_.shape_;
  }
  _impl_.shape_ = nullptr;
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SavedSliceMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.SavedSliceMeta.name"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TensorShapeProto shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.DataType type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::tensorflow::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.TensorSliceProto slice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slice(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SavedSliceMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SavedSliceMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SavedSliceMeta.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->_internal_has_shape()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::shape(this),
        _Internal::shape(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.DataType type = 3;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type(), target);
  }

  // repeated .tensorflow.TensorSliceProto slice = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slice_size()); i < n; i++) {
    const auto& repfield = this->_internal_slice(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SavedSliceMeta)
  return target;
}

size_t SavedSliceMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SavedSliceMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.TensorSliceProto slice = 4;
  total_size += 1UL * this->_internal_slice_size();
  for (const auto& msg : this->_impl_.slice_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->_internal_has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shape_);
  }

  // .tensorflow.DataType type = 3;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SavedSliceMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SavedSliceMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SavedSliceMeta::GetClassData() const { return &_class_data_; }


void SavedSliceMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SavedSliceMeta*>(&to_msg);
  auto& from = static_cast<const SavedSliceMeta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SavedSliceMeta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.slice_.MergeFrom(from._impl_.slice_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_shape()) {
    _this->_internal_mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(
        from._internal_shape());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SavedSliceMeta::CopyFrom(const SavedSliceMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SavedSliceMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedSliceMeta::IsInitialized() const {
  return true;
}

void SavedSliceMeta::InternalSwap(SavedSliceMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.slice_.InternalSwap(&other->_impl_.slice_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SavedSliceMeta, _impl_.type_)
      + sizeof(SavedSliceMeta::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SavedSliceMeta, _impl_.shape_)>(
          reinterpret_cast<char*>(&_impl_.shape_),
          reinterpret_cast<char*>(&other->_impl_.shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SavedSliceMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto[0]);
}

// ===================================================================

class SavedTensorSliceMeta::_Internal {
 public:
  static const ::tensorflow::VersionDef& versions(const SavedTensorSliceMeta* msg);
};

const ::tensorflow::VersionDef&
SavedTensorSliceMeta::_Internal::versions(const SavedTensorSliceMeta* msg) {
  return *msg->_impl_.versions_;
}
void SavedTensorSliceMeta::clear_versions() {
  if (GetArenaForAllocation() == nullptr && _impl_.versions_ != nullptr) {
    delete _impl_.versions_;
  }
  _impl_.versions_ = nullptr;
}
SavedTensorSliceMeta::SavedTensorSliceMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SavedTensorSliceMeta)
}
SavedTensorSliceMeta::SavedTensorSliceMeta(const SavedTensorSliceMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SavedTensorSliceMeta* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tensor_){from._impl_.tensor_}
    , decltype(_impl_.versions_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_versions()) {
    _this->_impl_.versions_ = new ::tensorflow::VersionDef(*from._impl_.versions_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.SavedTensorSliceMeta)
}

inline void SavedTensorSliceMeta::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tensor_){arena}
    , decltype(_impl_.versions_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SavedTensorSliceMeta::~SavedTensorSliceMeta() {
  // @@protoc_insertion_point(destructor:tensorflow.SavedTensorSliceMeta)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SavedTensorSliceMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tensor_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.versions_;
}

void SavedTensorSliceMeta::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SavedTensorSliceMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SavedTensorSliceMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tensor_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.versions_ != nullptr) {
    delete _impl_.versions_;
  }
  _impl_.versions_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SavedTensorSliceMeta::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.SavedSliceMeta tensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.VersionDef versions = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_versions(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SavedTensorSliceMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SavedTensorSliceMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.SavedSliceMeta tensor = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tensor_size()); i < n; i++) {
    const auto& repfield = this->_internal_tensor(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tensorflow.VersionDef versions = 2;
  if (this->_internal_has_versions()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::versions(this),
        _Internal::versions(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SavedTensorSliceMeta)
  return target;
}

size_t SavedTensorSliceMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SavedTensorSliceMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.SavedSliceMeta tensor = 1;
  total_size += 1UL * this->_internal_tensor_size();
  for (const auto& msg : this->_impl_.tensor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tensorflow.VersionDef versions = 2;
  if (this->_internal_has_versions()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.versions_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SavedTensorSliceMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SavedTensorSliceMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SavedTensorSliceMeta::GetClassData() const { return &_class_data_; }


void SavedTensorSliceMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SavedTensorSliceMeta*>(&to_msg);
  auto& from = static_cast<const SavedTensorSliceMeta&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SavedTensorSliceMeta)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tensor_.MergeFrom(from._impl_.tensor_);
  if (from._internal_has_versions()) {
    _this->_internal_mutable_versions()->::tensorflow::VersionDef::MergeFrom(
        from._internal_versions());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SavedTensorSliceMeta::CopyFrom(const SavedTensorSliceMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SavedTensorSliceMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedTensorSliceMeta::IsInitialized() const {
  return true;
}

void SavedTensorSliceMeta::InternalSwap(SavedTensorSliceMeta* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tensor_.InternalSwap(&other->_impl_.tensor_);
  swap(_impl_.versions_, other->_impl_.versions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SavedTensorSliceMeta::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto[1]);
}

// ===================================================================

class SavedSlice::_Internal {
 public:
  static const ::tensorflow::TensorSliceProto& slice(const SavedSlice* msg);
  static const ::tensorflow::TensorProto& data(const SavedSlice* msg);
};

const ::tensorflow::TensorSliceProto&
SavedSlice::_Internal::slice(const SavedSlice* msg) {
  return *msg->_impl_.slice_;
}
const ::tensorflow::TensorProto&
SavedSlice::_Internal::data(const SavedSlice* msg) {
  return *msg->_impl_.data_;
}
void SavedSlice::clear_slice() {
  if (GetArenaForAllocation() == nullptr && _impl_.slice_ != nullptr) {
    delete _impl_.slice_;
  }
  _impl_.slice_ = nullptr;
}
void SavedSlice::clear_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
}
SavedSlice::SavedSlice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SavedSlice)
}
SavedSlice::SavedSlice(const SavedSlice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SavedSlice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.slice_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_slice()) {
    _this->_impl_.slice_ = new ::tensorflow::TensorSliceProto(*from._impl_.slice_);
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::tensorflow::TensorProto(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.SavedSlice)
}

inline void SavedSlice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.slice_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SavedSlice::~SavedSlice() {
  // @@protoc_insertion_point(destructor:tensorflow.SavedSlice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SavedSlice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.slice_;
  if (this != internal_default_instance()) delete _impl_.data_;
}

void SavedSlice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SavedSlice::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SavedSlice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.slice_ != nullptr) {
    delete _impl_.slice_;
  }
  _impl_.slice_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SavedSlice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.SavedSlice.name"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TensorSliceProto slice = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_slice(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TensorProto data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SavedSlice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SavedSlice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SavedSlice.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .tensorflow.TensorSliceProto slice = 2;
  if (this->_internal_has_slice()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::slice(this),
        _Internal::slice(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.TensorProto data = 3;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SavedSlice)
  return target;
}

size_t SavedSlice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SavedSlice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .tensorflow.TensorSliceProto slice = 2;
  if (this->_internal_has_slice()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.slice_);
  }

  // .tensorflow.TensorProto data = 3;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SavedSlice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SavedSlice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SavedSlice::GetClassData() const { return &_class_data_; }


void SavedSlice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SavedSlice*>(&to_msg);
  auto& from = static_cast<const SavedSlice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SavedSlice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_slice()) {
    _this->_internal_mutable_slice()->::tensorflow::TensorSliceProto::MergeFrom(
        from._internal_slice());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::tensorflow::TensorProto::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SavedSlice::CopyFrom(const SavedSlice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SavedSlice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedSlice::IsInitialized() const {
  return true;
}

void SavedSlice::InternalSwap(SavedSlice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SavedSlice, _impl_.data_)
      + sizeof(SavedSlice::_impl_.data_)
      - PROTOBUF_FIELD_OFFSET(SavedSlice, _impl_.slice_)>(
          reinterpret_cast<char*>(&_impl_.slice_),
          reinterpret_cast<char*>(&other->_impl_.slice_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SavedSlice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto[2]);
}

// ===================================================================

class SavedTensorSlices::_Internal {
 public:
  static const ::tensorflow::SavedTensorSliceMeta& meta(const SavedTensorSlices* msg);
  static const ::tensorflow::SavedSlice& data(const SavedTensorSlices* msg);
};

const ::tensorflow::SavedTensorSliceMeta&
SavedTensorSlices::_Internal::meta(const SavedTensorSlices* msg) {
  return *msg->_impl_.meta_;
}
const ::tensorflow::SavedSlice&
SavedTensorSlices::_Internal::data(const SavedTensorSlices* msg) {
  return *msg->_impl_.data_;
}
SavedTensorSlices::SavedTensorSlices(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SavedTensorSlices)
}
SavedTensorSlices::SavedTensorSlices(const SavedTensorSlices& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SavedTensorSlices* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.meta_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_meta()) {
    _this->_impl_.meta_ = new ::tensorflow::SavedTensorSliceMeta(*from._impl_.meta_);
  }
  if (from._internal_has_data()) {
    _this->_impl_.data_ = new ::tensorflow::SavedSlice(*from._impl_.data_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.SavedTensorSlices)
}

inline void SavedTensorSlices::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.meta_){nullptr}
    , decltype(_impl_.data_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SavedTensorSlices::~SavedTensorSlices() {
  // @@protoc_insertion_point(destructor:tensorflow.SavedTensorSlices)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SavedTensorSlices::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.meta_;
  if (this != internal_default_instance()) delete _impl_.data_;
}

void SavedTensorSlices::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SavedTensorSlices::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SavedTensorSlices)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.meta_ != nullptr) {
    delete _impl_.meta_;
  }
  _impl_.meta_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.data_ != nullptr) {
    delete _impl_.data_;
  }
  _impl_.data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SavedTensorSlices::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.SavedTensorSliceMeta meta = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.SavedSlice data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SavedTensorSlices::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SavedTensorSlices)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.SavedTensorSliceMeta meta = 1;
  if (this->_internal_has_meta()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::meta(this),
        _Internal::meta(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.SavedSlice data = 2;
  if (this->_internal_has_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::data(this),
        _Internal::data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SavedTensorSlices)
  return target;
}

size_t SavedTensorSlices::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SavedTensorSlices)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.SavedTensorSliceMeta meta = 1;
  if (this->_internal_has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.meta_);
  }

  // .tensorflow.SavedSlice data = 2;
  if (this->_internal_has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.data_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SavedTensorSlices::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SavedTensorSlices::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SavedTensorSlices::GetClassData() const { return &_class_data_; }


void SavedTensorSlices::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SavedTensorSlices*>(&to_msg);
  auto& from = static_cast<const SavedTensorSlices&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SavedTensorSlices)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_meta()) {
    _this->_internal_mutable_meta()->::tensorflow::SavedTensorSliceMeta::MergeFrom(
        from._internal_meta());
  }
  if (from._internal_has_data()) {
    _this->_internal_mutable_data()->::tensorflow::SavedSlice::MergeFrom(
        from._internal_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SavedTensorSlices::CopyFrom(const SavedTensorSlices& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SavedTensorSlices)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SavedTensorSlices::IsInitialized() const {
  return true;
}

void SavedTensorSlices::InternalSwap(SavedTensorSlices* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SavedTensorSlices, _impl_.data_)
      + sizeof(SavedTensorSlices::_impl_.data_)
      - PROTOBUF_FIELD_OFFSET(SavedTensorSlices, _impl_.meta_)>(
          reinterpret_cast<char*>(&_impl_.meta_),
          reinterpret_cast<char*>(&other->_impl_.meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SavedTensorSlices::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2futil_2fsaved_5ftensor_5fslice_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::SavedSliceMeta*
Arena::CreateMaybeMessage< ::tensorflow::SavedSliceMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SavedSliceMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SavedTensorSliceMeta*
Arena::CreateMaybeMessage< ::tensorflow::SavedTensorSliceMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SavedTensorSliceMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SavedSlice*
Arena::CreateMaybeMessage< ::tensorflow::SavedSlice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SavedSlice >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SavedTensorSlices*
Arena::CreateMaybeMessage< ::tensorflow::SavedTensorSlices >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SavedTensorSlices >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
