// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/util/event.proto

#include "tensorflow/core/util/event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR Event::Event(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.source_metadata_)*/nullptr
  , /*decltype(_impl_.wall_time_)*/0
  , /*decltype(_impl_.step_)*/int64_t{0}
  , /*decltype(_impl_.what_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct EventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventDefaultTypeInternal() {}
  union {
    Event _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventDefaultTypeInternal _Event_default_instance_;
PROTOBUF_CONSTEXPR SourceMetadata::SourceMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.writer_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SourceMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SourceMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SourceMetadataDefaultTypeInternal() {}
  union {
    SourceMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SourceMetadataDefaultTypeInternal _SourceMetadata_default_instance_;
PROTOBUF_CONSTEXPR LogMessage::LogMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.message_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LogMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LogMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~LogMessageDefaultTypeInternal() {}
  union {
    LogMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LogMessageDefaultTypeInternal _LogMessage_default_instance_;
PROTOBUF_CONSTEXPR SessionLog::SessionLog(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.checkpoint_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SessionLogDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SessionLogDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SessionLogDefaultTypeInternal() {}
  union {
    SessionLog _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SessionLogDefaultTypeInternal _SessionLog_default_instance_;
PROTOBUF_CONSTEXPR TaggedRunMetadata::TaggedRunMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tag_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.run_metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaggedRunMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaggedRunMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaggedRunMetadataDefaultTypeInternal() {}
  union {
    TaggedRunMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaggedRunMetadataDefaultTypeInternal _TaggedRunMetadata_default_instance_;
PROTOBUF_CONSTEXPR WatchdogConfig::WatchdogConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.timeout_ms_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WatchdogConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WatchdogConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WatchdogConfigDefaultTypeInternal() {}
  union {
    WatchdogConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WatchdogConfigDefaultTypeInternal _WatchdogConfig_default_instance_;
PROTOBUF_CONSTEXPR RequestedExitCode::RequestedExitCode(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.exit_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RequestedExitCodeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RequestedExitCodeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RequestedExitCodeDefaultTypeInternal() {}
  union {
    RequestedExitCode _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RequestedExitCodeDefaultTypeInternal _RequestedExitCode_default_instance_;
PROTOBUF_CONSTEXPR WorkerHeartbeatRequest::WorkerHeartbeatRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.watchdog_config_)*/nullptr
  , /*decltype(_impl_.exit_code_)*/nullptr
  , /*decltype(_impl_.shutdown_mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkerHeartbeatRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkerHeartbeatRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkerHeartbeatRequestDefaultTypeInternal() {}
  union {
    WorkerHeartbeatRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkerHeartbeatRequestDefaultTypeInternal _WorkerHeartbeatRequest_default_instance_;
PROTOBUF_CONSTEXPR WorkerHeartbeatResponse::WorkerHeartbeatResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.worker_log_)*/{}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.health_status_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkerHeartbeatResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkerHeartbeatResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkerHeartbeatResponseDefaultTypeInternal() {}
  union {
    WorkerHeartbeatResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkerHeartbeatResponseDefaultTypeInternal _WorkerHeartbeatResponse_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2futil_2fevent_2eproto[9];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tensorflow_2fcore_2futil_2fevent_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2futil_2fevent_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2futil_2fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::Event, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::Event, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::Event, _impl_.wall_time_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Event, _impl_.step_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::Event, _impl_.source_metadata_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Event, _impl_.what_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SourceMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SourceMetadata, _impl_.writer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::LogMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::LogMessage, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::LogMessage, _impl_.message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SessionLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SessionLog, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SessionLog, _impl_.checkpoint_path_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SessionLog, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TaggedRunMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TaggedRunMetadata, _impl_.tag_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TaggedRunMetadata, _impl_.run_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::WatchdogConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::WatchdogConfig, _impl_.timeout_ms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RequestedExitCode, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RequestedExitCode, _impl_.exit_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::WorkerHeartbeatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::WorkerHeartbeatRequest, _impl_.shutdown_mode_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WorkerHeartbeatRequest, _impl_.watchdog_config_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WorkerHeartbeatRequest, _impl_.exit_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::WorkerHeartbeatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::WorkerHeartbeatResponse, _impl_.health_status_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WorkerHeartbeatResponse, _impl_.worker_log_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WorkerHeartbeatResponse, _impl_.hostname_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::Event)},
  { 17, -1, -1, sizeof(::tensorflow::SourceMetadata)},
  { 24, -1, -1, sizeof(::tensorflow::LogMessage)},
  { 32, -1, -1, sizeof(::tensorflow::SessionLog)},
  { 41, -1, -1, sizeof(::tensorflow::TaggedRunMetadata)},
  { 49, -1, -1, sizeof(::tensorflow::WatchdogConfig)},
  { 56, -1, -1, sizeof(::tensorflow::RequestedExitCode)},
  { 63, -1, -1, sizeof(::tensorflow::WorkerHeartbeatRequest)},
  { 72, -1, -1, sizeof(::tensorflow::WorkerHeartbeatResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_Event_default_instance_._instance,
  &::tensorflow::_SourceMetadata_default_instance_._instance,
  &::tensorflow::_LogMessage_default_instance_._instance,
  &::tensorflow::_SessionLog_default_instance_._instance,
  &::tensorflow::_TaggedRunMetadata_default_instance_._instance,
  &::tensorflow::_WatchdogConfig_default_instance_._instance,
  &::tensorflow::_RequestedExitCode_default_instance_._instance,
  &::tensorflow::_WorkerHeartbeatRequest_default_instance_._instance,
  &::tensorflow::_WorkerHeartbeatResponse_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2futil_2fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n tensorflow/core/util/event.proto\022\ntens"
  "orflow\032\'tensorflow/core/framework/summar"
  "y.proto\"\364\002\n\005Event\022\021\n\twall_time\030\001 \001(\001\022\014\n\004"
  "step\030\002 \001(\003\022\026\n\014file_version\030\003 \001(\tH\000\022\023\n\tgr"
  "aph_def\030\004 \001(\014H\000\022&\n\007summary\030\005 \001(\0132\023.tenso"
  "rflow.SummaryH\000\0221\n\013log_message\030\006 \001(\0132\026.t"
  "ensorflow.LogMessageB\002\030\001H\000\022-\n\013session_lo"
  "g\030\007 \001(\0132\026.tensorflow.SessionLogH\000\022<\n\023tag"
  "ged_run_metadata\030\010 \001(\0132\035.tensorflow.Tagg"
  "edRunMetadataH\000\022\030\n\016meta_graph_def\030\t \001(\014H"
  "\000\0223\n\017source_metadata\030\n \001(\0132\032.tensorflow."
  "SourceMetadataB\006\n\004what\" \n\016SourceMetadata"
  "\022\016\n\006writer\030\001 \001(\t\"\241\001\n\nLogMessage\022+\n\005level"
  "\030\001 \001(\0162\034.tensorflow.LogMessage.Level\022\017\n\007"
  "message\030\002 \001(\t\"Q\n\005Level\022\013\n\007UNKNOWN\020\000\022\r\n\tD"
  "EBUGGING\020\n\022\010\n\004INFO\020\024\022\010\n\004WARN\020\036\022\t\n\005ERROR\020"
  "(\022\t\n\005FATAL\0202\032\002\030\001:\002\030\001\"\266\001\n\nSessionLog\0224\n\006s"
  "tatus\030\001 \001(\0162$.tensorflow.SessionLog.Sess"
  "ionStatus\022\027\n\017checkpoint_path\030\002 \001(\t\022\013\n\003ms"
  "g\030\003 \001(\t\"L\n\rSessionStatus\022\026\n\022STATUS_UNSPE"
  "CIFIED\020\000\022\t\n\005START\020\001\022\010\n\004STOP\020\002\022\016\n\nCHECKPO"
  "INT\020\003\"6\n\021TaggedRunMetadata\022\013\n\003tag\030\001 \001(\t\022"
  "\024\n\014run_metadata\030\002 \001(\014\"$\n\016WatchdogConfig\022"
  "\022\n\ntimeout_ms\030\001 \001(\003\"&\n\021RequestedExitCode"
  "\022\021\n\texit_code\030\001 \001(\005\"\266\001\n\026WorkerHeartbeatR"
  "equest\0225\n\rshutdown_mode\030\001 \001(\0162\036.tensorfl"
  "ow.WorkerShutdownMode\0223\n\017watchdog_config"
  "\030\002 \001(\0132\032.tensorflow.WatchdogConfig\0220\n\tex"
  "it_code\030\003 \001(\0132\035.tensorflow.RequestedExit"
  "Code\"\203\001\n\027WorkerHeartbeatResponse\022/\n\rheal"
  "th_status\030\001 \001(\0162\030.tensorflow.WorkerHealt"
  "h\022%\n\nworker_log\030\002 \003(\0132\021.tensorflow.Event"
  "\022\020\n\010hostname\030\003 \001(\t*[\n\014WorkerHealth\022\006\n\002OK"
  "\020\000\022\034\n\030RECEIVED_SHUTDOWN_SIGNAL\020\001\022\022\n\016INTE"
  "RNAL_ERROR\020\002\022\021\n\rSHUTTING_DOWN\020\003*k\n\022Worke"
  "rShutdownMode\022\013\n\007DEFAULT\020\000\022\022\n\016NOT_CONFIG"
  "URED\020\001\022\030\n\024WAIT_FOR_COORDINATOR\020\002\022\032\n\026SHUT"
  "DOWN_AFTER_TIMEOUT\020\003Bp\n\023org.tensorflow.u"
  "tilB\013EventProtosP\001ZGgithub.com/tensorflo"
  "w/tensorflow/tensorflow/go/core/util/eve"
  "nt_go_proto\370\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_deps[1] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2fsummary_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto = {
    false, false, 1622, descriptor_table_protodef_tensorflow_2fcore_2futil_2fevent_2eproto,
    "tensorflow/core/util/event.proto",
    &descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_once, descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_deps, 1, 9,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2futil_2fevent_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2futil_2fevent_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2futil_2fevent_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2futil_2fevent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2futil_2fevent_2eproto(&descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LogMessage_Level_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2futil_2fevent_2eproto[0];
}
bool LogMessage_Level_IsValid(int value) {
  switch (value) {
    case 0:
    case 10:
    case 20:
    case 30:
    case 40:
    case 50:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr LogMessage_Level LogMessage::UNKNOWN;
constexpr LogMessage_Level LogMessage::DEBUGGING;
constexpr LogMessage_Level LogMessage::INFO;
constexpr LogMessage_Level LogMessage::WARN;
constexpr LogMessage_Level LogMessage::ERROR;
constexpr LogMessage_Level LogMessage::FATAL;
constexpr LogMessage_Level LogMessage::Level_MIN;
constexpr LogMessage_Level LogMessage::Level_MAX;
constexpr int LogMessage::Level_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionLog_SessionStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2futil_2fevent_2eproto[1];
}
bool SessionLog_SessionStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SessionLog_SessionStatus SessionLog::STATUS_UNSPECIFIED;
constexpr SessionLog_SessionStatus SessionLog::START;
constexpr SessionLog_SessionStatus SessionLog::STOP;
constexpr SessionLog_SessionStatus SessionLog::CHECKPOINT;
constexpr SessionLog_SessionStatus SessionLog::SessionStatus_MIN;
constexpr SessionLog_SessionStatus SessionLog::SessionStatus_MAX;
constexpr int SessionLog::SessionStatus_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkerHealth_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2futil_2fevent_2eproto[2];
}
bool WorkerHealth_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* WorkerShutdownMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2futil_2fevent_2eproto[3];
}
bool WorkerShutdownMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Event::_Internal {
 public:
  static const ::tensorflow::Summary& summary(const Event* msg);
  static const ::tensorflow::LogMessage& log_message(const Event* msg);
  static const ::tensorflow::SessionLog& session_log(const Event* msg);
  static const ::tensorflow::TaggedRunMetadata& tagged_run_metadata(const Event* msg);
  static const ::tensorflow::SourceMetadata& source_metadata(const Event* msg);
};

const ::tensorflow::Summary&
Event::_Internal::summary(const Event* msg) {
  return *msg->_impl_.what_.summary_;
}
const ::tensorflow::LogMessage&
Event::_Internal::log_message(const Event* msg) {
  return *msg->_impl_.what_.log_message_;
}
const ::tensorflow::SessionLog&
Event::_Internal::session_log(const Event* msg) {
  return *msg->_impl_.what_.session_log_;
}
const ::tensorflow::TaggedRunMetadata&
Event::_Internal::tagged_run_metadata(const Event* msg) {
  return *msg->_impl_.what_.tagged_run_metadata_;
}
const ::tensorflow::SourceMetadata&
Event::_Internal::source_metadata(const Event* msg) {
  return *msg->_impl_.source_metadata_;
}
void Event::set_allocated_summary(::tensorflow::Summary* summary) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_what();
  if (summary) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(summary));
    if (message_arena != submessage_arena) {
      summary = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, summary, submessage_arena);
    }
    set_has_summary();
    _impl_.what_.summary_ = summary;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Event.summary)
}
void Event::clear_summary() {
  if (_internal_has_summary()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.what_.summary_;
    }
    clear_has_what();
  }
}
void Event::set_allocated_log_message(::tensorflow::LogMessage* log_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_what();
  if (log_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(log_message);
    if (message_arena != submessage_arena) {
      log_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, log_message, submessage_arena);
    }
    set_has_log_message();
    _impl_.what_.log_message_ = log_message;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Event.log_message)
}
void Event::set_allocated_session_log(::tensorflow::SessionLog* session_log) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_what();
  if (session_log) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(session_log);
    if (message_arena != submessage_arena) {
      session_log = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_log, submessage_arena);
    }
    set_has_session_log();
    _impl_.what_.session_log_ = session_log;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Event.session_log)
}
void Event::set_allocated_tagged_run_metadata(::tensorflow::TaggedRunMetadata* tagged_run_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_what();
  if (tagged_run_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tagged_run_metadata);
    if (message_arena != submessage_arena) {
      tagged_run_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tagged_run_metadata, submessage_arena);
    }
    set_has_tagged_run_metadata();
    _impl_.what_.tagged_run_metadata_ = tagged_run_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.Event.tagged_run_metadata)
}
Event::Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.Event)
}
Event::Event(const Event& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Event* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.source_metadata_){nullptr}
    , decltype(_impl_.wall_time_){}
    , decltype(_impl_.step_){}
    , decltype(_impl_.what_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_source_metadata()) {
    _this->_impl_.source_metadata_ = new ::tensorflow::SourceMetadata(*from._impl_.source_metadata_);
  }
  ::memcpy(&_impl_.wall_time_, &from._impl_.wall_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.step_) -
    reinterpret_cast<char*>(&_impl_.wall_time_)) + sizeof(_impl_.step_));
  clear_has_what();
  switch (from.what_case()) {
    case kFileVersion: {
      _this->_internal_set_file_version(from._internal_file_version());
      break;
    }
    case kGraphDef: {
      _this->_internal_set_graph_def(from._internal_graph_def());
      break;
    }
    case kSummary: {
      _this->_internal_mutable_summary()->::tensorflow::Summary::MergeFrom(
          from._internal_summary());
      break;
    }
    case kLogMessage: {
      _this->_internal_mutable_log_message()->::tensorflow::LogMessage::MergeFrom(
          from._internal_log_message());
      break;
    }
    case kSessionLog: {
      _this->_internal_mutable_session_log()->::tensorflow::SessionLog::MergeFrom(
          from._internal_session_log());
      break;
    }
    case kTaggedRunMetadata: {
      _this->_internal_mutable_tagged_run_metadata()->::tensorflow::TaggedRunMetadata::MergeFrom(
          from._internal_tagged_run_metadata());
      break;
    }
    case kMetaGraphDef: {
      _this->_internal_set_meta_graph_def(from._internal_meta_graph_def());
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.Event)
}

inline void Event::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.source_metadata_){nullptr}
    , decltype(_impl_.wall_time_){0}
    , decltype(_impl_.step_){int64_t{0}}
    , decltype(_impl_.what_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_what();
}

Event::~Event() {
  // @@protoc_insertion_point(destructor:tensorflow.Event)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Event::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.source_metadata_;
  if (has_what()) {
    clear_what();
  }
}

void Event::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Event::clear_what() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.Event)
  switch (what_case()) {
    case kFileVersion: {
      _impl_.what_.file_version_.Destroy();
      break;
    }
    case kGraphDef: {
      _impl_.what_.graph_def_.Destroy();
      break;
    }
    case kSummary: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.what_.summary_;
      }
      break;
    }
    case kLogMessage: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.what_.log_message_;
      }
      break;
    }
    case kSessionLog: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.what_.session_log_;
      }
      break;
    }
    case kTaggedRunMetadata: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.what_.tagged_run_metadata_;
      }
      break;
    }
    case kMetaGraphDef: {
      _impl_.what_.meta_graph_def_.Destroy();
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = WHAT_NOT_SET;
}


void Event::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.Event)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.source_metadata_ != nullptr) {
    delete _impl_.source_metadata_;
  }
  _impl_.source_metadata_ = nullptr;
  ::memset(&_impl_.wall_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.step_) -
      reinterpret_cast<char*>(&_impl_.wall_time_)) + sizeof(_impl_.step_));
  clear_what();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Event::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double wall_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.wall_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_file_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.Event.file_version"));
        } else
          goto handle_unusual;
        continue;
      // bytes graph_def = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_graph_def();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.Summary summary = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_summary(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.LogMessage log_message = 6 [deprecated = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_log_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.SessionLog session_log = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_log(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TaggedRunMetadata tagged_run_metadata = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tagged_run_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes meta_graph_def = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_meta_graph_def();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.SourceMetadata source_metadata = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Event::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.Event)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double wall_time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_wall_time = this->_internal_wall_time();
  uint64_t raw_wall_time;
  memcpy(&raw_wall_time, &tmp_wall_time, sizeof(tmp_wall_time));
  if (raw_wall_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_wall_time(), target);
  }

  // int64 step = 2;
  if (this->_internal_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_step(), target);
  }

  // string file_version = 3;
  if (_internal_has_file_version()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_version().data(), static_cast<int>(this->_internal_file_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.Event.file_version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_file_version(), target);
  }

  // bytes graph_def = 4;
  if (_internal_has_graph_def()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_graph_def(), target);
  }

  // .tensorflow.Summary summary = 5;
  if (_internal_has_summary()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::summary(this),
        _Internal::summary(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.LogMessage log_message = 6 [deprecated = true];
  if (_internal_has_log_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::log_message(this),
        _Internal::log_message(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.SessionLog session_log = 7;
  if (_internal_has_session_log()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::session_log(this),
        _Internal::session_log(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.TaggedRunMetadata tagged_run_metadata = 8;
  if (_internal_has_tagged_run_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::tagged_run_metadata(this),
        _Internal::tagged_run_metadata(this).GetCachedSize(), target, stream);
  }

  // bytes meta_graph_def = 9;
  if (_internal_has_meta_graph_def()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_meta_graph_def(), target);
  }

  // .tensorflow.SourceMetadata source_metadata = 10;
  if (this->_internal_has_source_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::source_metadata(this),
        _Internal::source_metadata(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.Event)
  return target;
}

size_t Event::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.Event)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.SourceMetadata source_metadata = 10;
  if (this->_internal_has_source_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.source_metadata_);
  }

  // double wall_time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_wall_time = this->_internal_wall_time();
  uint64_t raw_wall_time;
  memcpy(&raw_wall_time, &tmp_wall_time, sizeof(tmp_wall_time));
  if (raw_wall_time != 0) {
    total_size += 1 + 8;
  }

  // int64 step = 2;
  if (this->_internal_step() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_step());
  }

  switch (what_case()) {
    // string file_version = 3;
    case kFileVersion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_file_version());
      break;
    }
    // bytes graph_def = 4;
    case kGraphDef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_graph_def());
      break;
    }
    // .tensorflow.Summary summary = 5;
    case kSummary: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.what_.summary_);
      break;
    }
    // .tensorflow.LogMessage log_message = 6 [deprecated = true];
    case kLogMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.what_.log_message_);
      break;
    }
    // .tensorflow.SessionLog session_log = 7;
    case kSessionLog: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.what_.session_log_);
      break;
    }
    // .tensorflow.TaggedRunMetadata tagged_run_metadata = 8;
    case kTaggedRunMetadata: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.what_.tagged_run_metadata_);
      break;
    }
    // bytes meta_graph_def = 9;
    case kMetaGraphDef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_meta_graph_def());
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Event::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Event::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Event::GetClassData() const { return &_class_data_; }


void Event::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Event*>(&to_msg);
  auto& from = static_cast<const Event&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.Event)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_source_metadata()) {
    _this->_internal_mutable_source_metadata()->::tensorflow::SourceMetadata::MergeFrom(
        from._internal_source_metadata());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_wall_time = from._internal_wall_time();
  uint64_t raw_wall_time;
  memcpy(&raw_wall_time, &tmp_wall_time, sizeof(tmp_wall_time));
  if (raw_wall_time != 0) {
    _this->_internal_set_wall_time(from._internal_wall_time());
  }
  if (from._internal_step() != 0) {
    _this->_internal_set_step(from._internal_step());
  }
  switch (from.what_case()) {
    case kFileVersion: {
      _this->_internal_set_file_version(from._internal_file_version());
      break;
    }
    case kGraphDef: {
      _this->_internal_set_graph_def(from._internal_graph_def());
      break;
    }
    case kSummary: {
      _this->_internal_mutable_summary()->::tensorflow::Summary::MergeFrom(
          from._internal_summary());
      break;
    }
    case kLogMessage: {
      _this->_internal_mutable_log_message()->::tensorflow::LogMessage::MergeFrom(
          from._internal_log_message());
      break;
    }
    case kSessionLog: {
      _this->_internal_mutable_session_log()->::tensorflow::SessionLog::MergeFrom(
          from._internal_session_log());
      break;
    }
    case kTaggedRunMetadata: {
      _this->_internal_mutable_tagged_run_metadata()->::tensorflow::TaggedRunMetadata::MergeFrom(
          from._internal_tagged_run_metadata());
      break;
    }
    case kMetaGraphDef: {
      _this->_internal_set_meta_graph_def(from._internal_meta_graph_def());
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Event::CopyFrom(const Event& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.Event)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  return true;
}

void Event::InternalSwap(Event* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Event, _impl_.step_)
      + sizeof(Event::_impl_.step_)
      - PROTOBUF_FIELD_OFFSET(Event, _impl_.source_metadata_)>(
          reinterpret_cast<char*>(&_impl_.source_metadata_),
          reinterpret_cast<char*>(&other->_impl_.source_metadata_));
  swap(_impl_.what_, other->_impl_.what_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Event::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_getter, &descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2futil_2fevent_2eproto[0]);
}

// ===================================================================

class SourceMetadata::_Internal {
 public:
};

SourceMetadata::SourceMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SourceMetadata)
}
SourceMetadata::SourceMetadata(const SourceMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SourceMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.writer_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.writer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.writer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_writer().empty()) {
    _this->_impl_.writer_.Set(from._internal_writer(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.SourceMetadata)
}

inline void SourceMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.writer_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.writer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.writer_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SourceMetadata::~SourceMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.SourceMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SourceMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.writer_.Destroy();
}

void SourceMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SourceMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SourceMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.writer_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string writer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_writer();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.SourceMetadata.writer"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SourceMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SourceMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string writer = 1;
  if (!this->_internal_writer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_writer().data(), static_cast<int>(this->_internal_writer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SourceMetadata.writer");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_writer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SourceMetadata)
  return target;
}

size_t SourceMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SourceMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string writer = 1;
  if (!this->_internal_writer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_writer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SourceMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SourceMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SourceMetadata::GetClassData() const { return &_class_data_; }


void SourceMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SourceMetadata*>(&to_msg);
  auto& from = static_cast<const SourceMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SourceMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_writer().empty()) {
    _this->_internal_set_writer(from._internal_writer());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SourceMetadata::CopyFrom(const SourceMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SourceMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceMetadata::IsInitialized() const {
  return true;
}

void SourceMetadata::InternalSwap(SourceMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.writer_, lhs_arena,
      &other->_impl_.writer_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_getter, &descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2futil_2fevent_2eproto[1]);
}

// ===================================================================

class LogMessage::_Internal {
 public:
};

LogMessage::LogMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.LogMessage)
}
LogMessage::LogMessage(const LogMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  LogMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    _this->_impl_.message_.Set(from._internal_message(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.level_ = from._impl_.level_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.LogMessage)
}

inline void LogMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.message_){}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LogMessage::~LogMessage() {
  // @@protoc_insertion_point(destructor:tensorflow.LogMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LogMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void LogMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LogMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.LogMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.level_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LogMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.LogMessage.Level level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_level(static_cast<::tensorflow::LogMessage_Level>(val));
        } else
          goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.LogMessage.message"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* LogMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.LogMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.LogMessage.Level level = 1;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_level(), target);
  }

  // string message = 2;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.LogMessage.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.LogMessage)
  return target;
}

size_t LogMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.LogMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .tensorflow.LogMessage.Level level = 1;
  if (this->_internal_level() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData LogMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    LogMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*LogMessage::GetClassData() const { return &_class_data_; }


void LogMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<LogMessage*>(&to_msg);
  auto& from = static_cast<const LogMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.LogMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void LogMessage::CopyFrom(const LogMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.LogMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogMessage::IsInitialized() const {
  return true;
}

void LogMessage::InternalSwap(LogMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.message_, lhs_arena,
      &other->_impl_.message_, rhs_arena
  );
  swap(_impl_.level_, other->_impl_.level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_getter, &descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2futil_2fevent_2eproto[2]);
}

// ===================================================================

class SessionLog::_Internal {
 public:
};

SessionLog::SessionLog(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SessionLog)
}
SessionLog::SessionLog(const SessionLog& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SessionLog* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.checkpoint_path_){}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.checkpoint_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.checkpoint_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_checkpoint_path().empty()) {
    _this->_impl_.checkpoint_path_.Set(from._internal_checkpoint_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.status_ = from._impl_.status_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.SessionLog)
}

inline void SessionLog::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.checkpoint_path_){}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.checkpoint_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.checkpoint_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SessionLog::~SessionLog() {
  // @@protoc_insertion_point(destructor:tensorflow.SessionLog)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SessionLog::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.checkpoint_path_.Destroy();
  _impl_.msg_.Destroy();
}

void SessionLog::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SessionLog::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SessionLog)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.checkpoint_path_.ClearToEmpty();
  _impl_.msg_.ClearToEmpty();
  _impl_.status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SessionLog::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.SessionLog.SessionStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::tensorflow::SessionLog_SessionStatus>(val));
        } else
          goto handle_unusual;
        continue;
      // string checkpoint_path = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_checkpoint_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.SessionLog.checkpoint_path"));
        } else
          goto handle_unusual;
        continue;
      // string msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.SessionLog.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SessionLog::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SessionLog)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.SessionLog.SessionStatus status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string checkpoint_path = 2;
  if (!this->_internal_checkpoint_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checkpoint_path().data(), static_cast<int>(this->_internal_checkpoint_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SessionLog.checkpoint_path");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_checkpoint_path(), target);
  }

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SessionLog.msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SessionLog)
  return target;
}

size_t SessionLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SessionLog)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string checkpoint_path = 2;
  if (!this->_internal_checkpoint_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checkpoint_path());
  }

  // string msg = 3;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .tensorflow.SessionLog.SessionStatus status = 1;
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SessionLog::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SessionLog::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SessionLog::GetClassData() const { return &_class_data_; }


void SessionLog::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SessionLog*>(&to_msg);
  auto& from = static_cast<const SessionLog&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SessionLog)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_checkpoint_path().empty()) {
    _this->_internal_set_checkpoint_path(from._internal_checkpoint_path());
  }
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SessionLog::CopyFrom(const SessionLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SessionLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionLog::IsInitialized() const {
  return true;
}

void SessionLog::InternalSwap(SessionLog* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.checkpoint_path_, lhs_arena,
      &other->_impl_.checkpoint_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  swap(_impl_.status_, other->_impl_.status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SessionLog::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_getter, &descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2futil_2fevent_2eproto[3]);
}

// ===================================================================

class TaggedRunMetadata::_Internal {
 public:
};

TaggedRunMetadata::TaggedRunMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TaggedRunMetadata)
}
TaggedRunMetadata::TaggedRunMetadata(const TaggedRunMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaggedRunMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tag_){}
    , decltype(_impl_.run_metadata_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    _this->_impl_.tag_.Set(from._internal_tag(), 
      _this->GetArenaForAllocation());
  }
  _impl_.run_metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.run_metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_run_metadata().empty()) {
    _this->_impl_.run_metadata_.Set(from._internal_run_metadata(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.TaggedRunMetadata)
}

inline void TaggedRunMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tag_){}
    , decltype(_impl_.run_metadata_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tag_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.run_metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.run_metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TaggedRunMetadata::~TaggedRunMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.TaggedRunMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaggedRunMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tag_.Destroy();
  _impl_.run_metadata_.Destroy();
}

void TaggedRunMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaggedRunMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TaggedRunMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tag_.ClearToEmpty();
  _impl_.run_metadata_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaggedRunMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.TaggedRunMetadata.tag"));
        } else
          goto handle_unusual;
        continue;
      // bytes run_metadata = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_run_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaggedRunMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TaggedRunMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TaggedRunMetadata.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // bytes run_metadata = 2;
  if (!this->_internal_run_metadata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_run_metadata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TaggedRunMetadata)
  return target;
}

size_t TaggedRunMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TaggedRunMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // bytes run_metadata = 2;
  if (!this->_internal_run_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_run_metadata());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaggedRunMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaggedRunMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaggedRunMetadata::GetClassData() const { return &_class_data_; }


void TaggedRunMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaggedRunMetadata*>(&to_msg);
  auto& from = static_cast<const TaggedRunMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TaggedRunMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tag().empty()) {
    _this->_internal_set_tag(from._internal_tag());
  }
  if (!from._internal_run_metadata().empty()) {
    _this->_internal_set_run_metadata(from._internal_run_metadata());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaggedRunMetadata::CopyFrom(const TaggedRunMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TaggedRunMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaggedRunMetadata::IsInitialized() const {
  return true;
}

void TaggedRunMetadata::InternalSwap(TaggedRunMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tag_, lhs_arena,
      &other->_impl_.tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.run_metadata_, lhs_arena,
      &other->_impl_.run_metadata_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TaggedRunMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_getter, &descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2futil_2fevent_2eproto[4]);
}

// ===================================================================

class WatchdogConfig::_Internal {
 public:
};

WatchdogConfig::WatchdogConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.WatchdogConfig)
}
WatchdogConfig::WatchdogConfig(const WatchdogConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WatchdogConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.timeout_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.timeout_ms_ = from._impl_.timeout_ms_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.WatchdogConfig)
}

inline void WatchdogConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.timeout_ms_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WatchdogConfig::~WatchdogConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.WatchdogConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WatchdogConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WatchdogConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WatchdogConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.WatchdogConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.timeout_ms_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchdogConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 timeout_ms = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WatchdogConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.WatchdogConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 timeout_ms = 1;
  if (this->_internal_timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_timeout_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.WatchdogConfig)
  return target;
}

size_t WatchdogConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.WatchdogConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 timeout_ms = 1;
  if (this->_internal_timeout_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timeout_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchdogConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WatchdogConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchdogConfig::GetClassData() const { return &_class_data_; }


void WatchdogConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WatchdogConfig*>(&to_msg);
  auto& from = static_cast<const WatchdogConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.WatchdogConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timeout_ms() != 0) {
    _this->_internal_set_timeout_ms(from._internal_timeout_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchdogConfig::CopyFrom(const WatchdogConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.WatchdogConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchdogConfig::IsInitialized() const {
  return true;
}

void WatchdogConfig::InternalSwap(WatchdogConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.timeout_ms_, other->_impl_.timeout_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchdogConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_getter, &descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2futil_2fevent_2eproto[5]);
}

// ===================================================================

class RequestedExitCode::_Internal {
 public:
};

RequestedExitCode::RequestedExitCode(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RequestedExitCode)
}
RequestedExitCode::RequestedExitCode(const RequestedExitCode& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RequestedExitCode* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.exit_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.exit_code_ = from._impl_.exit_code_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.RequestedExitCode)
}

inline void RequestedExitCode::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.exit_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RequestedExitCode::~RequestedExitCode() {
  // @@protoc_insertion_point(destructor:tensorflow.RequestedExitCode)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RequestedExitCode::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RequestedExitCode::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RequestedExitCode::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RequestedExitCode)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exit_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestedExitCode::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 exit_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.exit_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestedExitCode::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RequestedExitCode)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 exit_code = 1;
  if (this->_internal_exit_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_exit_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RequestedExitCode)
  return target;
}

size_t RequestedExitCode::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RequestedExitCode)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 exit_code = 1;
  if (this->_internal_exit_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exit_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestedExitCode::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RequestedExitCode::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestedExitCode::GetClassData() const { return &_class_data_; }


void RequestedExitCode::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RequestedExitCode*>(&to_msg);
  auto& from = static_cast<const RequestedExitCode&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RequestedExitCode)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_exit_code() != 0) {
    _this->_internal_set_exit_code(from._internal_exit_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestedExitCode::CopyFrom(const RequestedExitCode& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RequestedExitCode)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestedExitCode::IsInitialized() const {
  return true;
}

void RequestedExitCode::InternalSwap(RequestedExitCode* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.exit_code_, other->_impl_.exit_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestedExitCode::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_getter, &descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2futil_2fevent_2eproto[6]);
}

// ===================================================================

class WorkerHeartbeatRequest::_Internal {
 public:
  static const ::tensorflow::WatchdogConfig& watchdog_config(const WorkerHeartbeatRequest* msg);
  static const ::tensorflow::RequestedExitCode& exit_code(const WorkerHeartbeatRequest* msg);
};

const ::tensorflow::WatchdogConfig&
WorkerHeartbeatRequest::_Internal::watchdog_config(const WorkerHeartbeatRequest* msg) {
  return *msg->_impl_.watchdog_config_;
}
const ::tensorflow::RequestedExitCode&
WorkerHeartbeatRequest::_Internal::exit_code(const WorkerHeartbeatRequest* msg) {
  return *msg->_impl_.exit_code_;
}
WorkerHeartbeatRequest::WorkerHeartbeatRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.WorkerHeartbeatRequest)
}
WorkerHeartbeatRequest::WorkerHeartbeatRequest(const WorkerHeartbeatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkerHeartbeatRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.watchdog_config_){nullptr}
    , decltype(_impl_.exit_code_){nullptr}
    , decltype(_impl_.shutdown_mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_watchdog_config()) {
    _this->_impl_.watchdog_config_ = new ::tensorflow::WatchdogConfig(*from._impl_.watchdog_config_);
  }
  if (from._internal_has_exit_code()) {
    _this->_impl_.exit_code_ = new ::tensorflow::RequestedExitCode(*from._impl_.exit_code_);
  }
  _this->_impl_.shutdown_mode_ = from._impl_.shutdown_mode_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.WorkerHeartbeatRequest)
}

inline void WorkerHeartbeatRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.watchdog_config_){nullptr}
    , decltype(_impl_.exit_code_){nullptr}
    , decltype(_impl_.shutdown_mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WorkerHeartbeatRequest::~WorkerHeartbeatRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.WorkerHeartbeatRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkerHeartbeatRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.watchdog_config_;
  if (this != internal_default_instance()) delete _impl_.exit_code_;
}

void WorkerHeartbeatRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkerHeartbeatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.WorkerHeartbeatRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.watchdog_config_ != nullptr) {
    delete _impl_.watchdog_config_;
  }
  _impl_.watchdog_config_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.exit_code_ != nullptr) {
    delete _impl_.exit_code_;
  }
  _impl_.exit_code_ = nullptr;
  _impl_.shutdown_mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerHeartbeatRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.WorkerShutdownMode shutdown_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_shutdown_mode(static_cast<::tensorflow::WorkerShutdownMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.WatchdogConfig watchdog_config = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_watchdog_config(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.RequestedExitCode exit_code = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_exit_code(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkerHeartbeatRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.WorkerHeartbeatRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.WorkerShutdownMode shutdown_mode = 1;
  if (this->_internal_shutdown_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_shutdown_mode(), target);
  }

  // .tensorflow.WatchdogConfig watchdog_config = 2;
  if (this->_internal_has_watchdog_config()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::watchdog_config(this),
        _Internal::watchdog_config(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.RequestedExitCode exit_code = 3;
  if (this->_internal_has_exit_code()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::exit_code(this),
        _Internal::exit_code(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.WorkerHeartbeatRequest)
  return target;
}

size_t WorkerHeartbeatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.WorkerHeartbeatRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.WatchdogConfig watchdog_config = 2;
  if (this->_internal_has_watchdog_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.watchdog_config_);
  }

  // .tensorflow.RequestedExitCode exit_code = 3;
  if (this->_internal_has_exit_code()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.exit_code_);
  }

  // .tensorflow.WorkerShutdownMode shutdown_mode = 1;
  if (this->_internal_shutdown_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_shutdown_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkerHeartbeatRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkerHeartbeatRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkerHeartbeatRequest::GetClassData() const { return &_class_data_; }


void WorkerHeartbeatRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkerHeartbeatRequest*>(&to_msg);
  auto& from = static_cast<const WorkerHeartbeatRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.WorkerHeartbeatRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_watchdog_config()) {
    _this->_internal_mutable_watchdog_config()->::tensorflow::WatchdogConfig::MergeFrom(
        from._internal_watchdog_config());
  }
  if (from._internal_has_exit_code()) {
    _this->_internal_mutable_exit_code()->::tensorflow::RequestedExitCode::MergeFrom(
        from._internal_exit_code());
  }
  if (from._internal_shutdown_mode() != 0) {
    _this->_internal_set_shutdown_mode(from._internal_shutdown_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkerHeartbeatRequest::CopyFrom(const WorkerHeartbeatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.WorkerHeartbeatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerHeartbeatRequest::IsInitialized() const {
  return true;
}

void WorkerHeartbeatRequest::InternalSwap(WorkerHeartbeatRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkerHeartbeatRequest, _impl_.shutdown_mode_)
      + sizeof(WorkerHeartbeatRequest::_impl_.shutdown_mode_)
      - PROTOBUF_FIELD_OFFSET(WorkerHeartbeatRequest, _impl_.watchdog_config_)>(
          reinterpret_cast<char*>(&_impl_.watchdog_config_),
          reinterpret_cast<char*>(&other->_impl_.watchdog_config_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerHeartbeatRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_getter, &descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2futil_2fevent_2eproto[7]);
}

// ===================================================================

class WorkerHeartbeatResponse::_Internal {
 public:
};

WorkerHeartbeatResponse::WorkerHeartbeatResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.WorkerHeartbeatResponse)
}
WorkerHeartbeatResponse::WorkerHeartbeatResponse(const WorkerHeartbeatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkerHeartbeatResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.worker_log_){from._impl_.worker_log_}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.health_status_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.health_status_ = from._impl_.health_status_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.WorkerHeartbeatResponse)
}

inline void WorkerHeartbeatResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.worker_log_){arena}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.health_status_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkerHeartbeatResponse::~WorkerHeartbeatResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.WorkerHeartbeatResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkerHeartbeatResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.worker_log_.~RepeatedPtrField();
  _impl_.hostname_.Destroy();
}

void WorkerHeartbeatResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkerHeartbeatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.WorkerHeartbeatResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.worker_log_.Clear();
  _impl_.hostname_.ClearToEmpty();
  _impl_.health_status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerHeartbeatResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.WorkerHealth health_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_health_status(static_cast<::tensorflow::WorkerHealth>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.Event worker_log = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_worker_log(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string hostname = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.WorkerHeartbeatResponse.hostname"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkerHeartbeatResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.WorkerHeartbeatResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.WorkerHealth health_status = 1;
  if (this->_internal_health_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_health_status(), target);
  }

  // repeated .tensorflow.Event worker_log = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_worker_log_size()); i < n; i++) {
    const auto& repfield = this->_internal_worker_log(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string hostname = 3;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.WorkerHeartbeatResponse.hostname");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hostname(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.WorkerHeartbeatResponse)
  return target;
}

size_t WorkerHeartbeatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.WorkerHeartbeatResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.Event worker_log = 2;
  total_size += 1UL * this->_internal_worker_log_size();
  for (const auto& msg : this->_impl_.worker_log_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string hostname = 3;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // .tensorflow.WorkerHealth health_status = 1;
  if (this->_internal_health_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_health_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkerHeartbeatResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkerHeartbeatResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkerHeartbeatResponse::GetClassData() const { return &_class_data_; }


void WorkerHeartbeatResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkerHeartbeatResponse*>(&to_msg);
  auto& from = static_cast<const WorkerHeartbeatResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.WorkerHeartbeatResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.worker_log_.MergeFrom(from._impl_.worker_log_);
  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  if (from._internal_health_status() != 0) {
    _this->_internal_set_health_status(from._internal_health_status());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkerHeartbeatResponse::CopyFrom(const WorkerHeartbeatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.WorkerHeartbeatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerHeartbeatResponse::IsInitialized() const {
  return true;
}

void WorkerHeartbeatResponse::InternalSwap(WorkerHeartbeatResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.worker_log_.InternalSwap(&other->_impl_.worker_log_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  swap(_impl_.health_status_, other->_impl_.health_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerHeartbeatResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_getter, &descriptor_table_tensorflow_2fcore_2futil_2fevent_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2futil_2fevent_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::Event*
Arena::CreateMaybeMessage< ::tensorflow::Event >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::Event >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SourceMetadata*
Arena::CreateMaybeMessage< ::tensorflow::SourceMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SourceMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::LogMessage*
Arena::CreateMaybeMessage< ::tensorflow::LogMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::LogMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SessionLog*
Arena::CreateMaybeMessage< ::tensorflow::SessionLog >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SessionLog >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TaggedRunMetadata*
Arena::CreateMaybeMessage< ::tensorflow::TaggedRunMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TaggedRunMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::WatchdogConfig*
Arena::CreateMaybeMessage< ::tensorflow::WatchdogConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::WatchdogConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RequestedExitCode*
Arena::CreateMaybeMessage< ::tensorflow::RequestedExitCode >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RequestedExitCode >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::WorkerHeartbeatRequest*
Arena::CreateMaybeMessage< ::tensorflow::WorkerHeartbeatRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::WorkerHeartbeatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::WorkerHeartbeatResponse*
Arena::CreateMaybeMessage< ::tensorflow::WorkerHeartbeatResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::WorkerHeartbeatResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
