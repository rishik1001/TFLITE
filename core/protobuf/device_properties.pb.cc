// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/device_properties.proto

#include "tensorflow/core/protobuf/device_properties.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR DeviceProperties_EnvironmentEntry_DoNotUse::DeviceProperties_EnvironmentEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct DeviceProperties_EnvironmentEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceProperties_EnvironmentEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceProperties_EnvironmentEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DeviceProperties_EnvironmentEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceProperties_EnvironmentEntry_DoNotUseDefaultTypeInternal _DeviceProperties_EnvironmentEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR DeviceProperties::DeviceProperties(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.environment_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.vendor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.frequency_)*/int64_t{0}
  , /*decltype(_impl_.num_cores_)*/int64_t{0}
  , /*decltype(_impl_.num_registers_)*/int64_t{0}
  , /*decltype(_impl_.l1_cache_size_)*/int64_t{0}
  , /*decltype(_impl_.l2_cache_size_)*/int64_t{0}
  , /*decltype(_impl_.l3_cache_size_)*/int64_t{0}
  , /*decltype(_impl_.shared_memory_size_per_multiprocessor_)*/int64_t{0}
  , /*decltype(_impl_.memory_size_)*/int64_t{0}
  , /*decltype(_impl_.bandwidth_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DevicePropertiesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DevicePropertiesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DevicePropertiesDefaultTypeInternal() {}
  union {
    DeviceProperties _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DevicePropertiesDefaultTypeInternal _DeviceProperties_default_instance_;
PROTOBUF_CONSTEXPR NamedDevice::NamedDevice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.properties_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NamedDeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NamedDeviceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NamedDeviceDefaultTypeInternal() {}
  union {
    NamedDevice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NamedDeviceDefaultTypeInternal _NamedDevice_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto[3];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceProperties_EnvironmentEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceProperties_EnvironmentEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceProperties_EnvironmentEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceProperties_EnvironmentEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceProperties, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceProperties, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceProperties, _impl_.vendor_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceProperties, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceProperties, _impl_.frequency_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceProperties, _impl_.num_cores_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceProperties, _impl_.environment_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceProperties, _impl_.num_registers_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceProperties, _impl_.l1_cache_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceProperties, _impl_.l2_cache_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceProperties, _impl_.l3_cache_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceProperties, _impl_.shared_memory_size_per_multiprocessor_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceProperties, _impl_.memory_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DeviceProperties, _impl_.bandwidth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::NamedDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::NamedDevice, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::NamedDevice, _impl_.properties_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::tensorflow::DeviceProperties_EnvironmentEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::tensorflow::DeviceProperties)},
  { 29, -1, -1, sizeof(::tensorflow::NamedDevice)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_DeviceProperties_EnvironmentEntry_DoNotUse_default_instance_._instance,
  &::tensorflow::_DeviceProperties_default_instance_._instance,
  &::tensorflow::_NamedDevice_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0tensorflow/core/protobuf/device_proper"
  "ties.proto\022\ntensorflow\"\220\003\n\020DevicePropert"
  "ies\022\014\n\004type\030\001 \001(\t\022\016\n\006vendor\030\002 \001(\t\022\r\n\005mod"
  "el\030\003 \001(\t\022\021\n\tfrequency\030\004 \001(\003\022\021\n\tnum_cores"
  "\030\005 \001(\003\022B\n\013environment\030\006 \003(\0132-.tensorflow"
  ".DeviceProperties.EnvironmentEntry\022\025\n\rnu"
  "m_registers\030\007 \001(\003\022\025\n\rl1_cache_size\030\010 \001(\003"
  "\022\025\n\rl2_cache_size\030\t \001(\003\022\025\n\rl3_cache_size"
  "\030\n \001(\003\022-\n%shared_memory_size_per_multipr"
  "ocessor\030\013 \001(\003\022\023\n\013memory_size\030\014 \001(\003\022\021\n\tba"
  "ndwidth\030\r \001(\003\0322\n\020EnvironmentEntry\022\013\n\003key"
  "\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"M\n\013NamedDevice"
  "\022\014\n\004name\030\001 \001(\t\0220\n\nproperties\030\002 \001(\0132\034.ten"
  "sorflow.DevicePropertiesBrB\026DeviceProper"
  "tiesProtosZUgithub.com/tensorflow/tensor"
  "flow/tensorflow/go/core/protobuf/for_cor"
  "e_protos_go_proto\370\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto = {
    false, false, 668, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto,
    "tensorflow/core/protobuf/device_properties.proto",
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto_once, nullptr, 0, 3,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto);
namespace tensorflow {

// ===================================================================

DeviceProperties_EnvironmentEntry_DoNotUse::DeviceProperties_EnvironmentEntry_DoNotUse() {}
DeviceProperties_EnvironmentEntry_DoNotUse::DeviceProperties_EnvironmentEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DeviceProperties_EnvironmentEntry_DoNotUse::MergeFrom(const DeviceProperties_EnvironmentEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DeviceProperties_EnvironmentEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto[0]);
}

// ===================================================================

class DeviceProperties::_Internal {
 public:
};

DeviceProperties::DeviceProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &DeviceProperties::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:tensorflow.DeviceProperties)
}
DeviceProperties::DeviceProperties(const DeviceProperties& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DeviceProperties* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.environment_)*/{}
    , decltype(_impl_.type_){}
    , decltype(_impl_.vendor_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.frequency_){}
    , decltype(_impl_.num_cores_){}
    , decltype(_impl_.num_registers_){}
    , decltype(_impl_.l1_cache_size_){}
    , decltype(_impl_.l2_cache_size_){}
    , decltype(_impl_.l3_cache_size_){}
    , decltype(_impl_.shared_memory_size_per_multiprocessor_){}
    , decltype(_impl_.memory_size_){}
    , decltype(_impl_.bandwidth_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.environment_.MergeFrom(from._impl_.environment_);
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_vendor().empty()) {
    _this->_impl_.vendor_.Set(from._internal_vendor(), 
      _this->GetArenaForAllocation());
  }
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.frequency_, &from._impl_.frequency_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bandwidth_) -
    reinterpret_cast<char*>(&_impl_.frequency_)) + sizeof(_impl_.bandwidth_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.DeviceProperties)
}

inline void DeviceProperties::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.environment_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.type_){}
    , decltype(_impl_.vendor_){}
    , decltype(_impl_.model_){}
    , decltype(_impl_.frequency_){int64_t{0}}
    , decltype(_impl_.num_cores_){int64_t{0}}
    , decltype(_impl_.num_registers_){int64_t{0}}
    , decltype(_impl_.l1_cache_size_){int64_t{0}}
    , decltype(_impl_.l2_cache_size_){int64_t{0}}
    , decltype(_impl_.l3_cache_size_){int64_t{0}}
    , decltype(_impl_.shared_memory_size_per_multiprocessor_){int64_t{0}}
    , decltype(_impl_.memory_size_){int64_t{0}}
    , decltype(_impl_.bandwidth_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.vendor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.vendor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceProperties::~DeviceProperties() {
  // @@protoc_insertion_point(destructor:tensorflow.DeviceProperties)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void DeviceProperties::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.environment_.Destruct();
  _impl_.environment_.~MapField();
  _impl_.type_.Destroy();
  _impl_.vendor_.Destroy();
  _impl_.model_.Destroy();
}

void DeviceProperties::ArenaDtor(void* object) {
  DeviceProperties* _this = reinterpret_cast< DeviceProperties* >(object);
  _this->_impl_.environment_.Destruct();
}
void DeviceProperties::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceProperties::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DeviceProperties)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.environment_.Clear();
  _impl_.type_.ClearToEmpty();
  _impl_.vendor_.ClearToEmpty();
  _impl_.model_.ClearToEmpty();
  ::memset(&_impl_.frequency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bandwidth_) -
      reinterpret_cast<char*>(&_impl_.frequency_)) + sizeof(_impl_.bandwidth_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceProperties::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.DeviceProperties.type"));
        } else
          goto handle_unusual;
        continue;
      // string vendor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_vendor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.DeviceProperties.vendor"));
        } else
          goto handle_unusual;
        continue;
      // string model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.DeviceProperties.model"));
        } else
          goto handle_unusual;
        continue;
      // int64 frequency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.frequency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num_cores = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.num_cores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, string> environment = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.environment_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 num_registers = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.num_registers_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 l1_cache_size = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.l1_cache_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 l2_cache_size = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.l2_cache_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 l3_cache_size = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.l3_cache_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 shared_memory_size_per_multiprocessor = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.shared_memory_size_per_multiprocessor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 memory_size = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.memory_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 bandwidth = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.bandwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeviceProperties::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DeviceProperties)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceProperties.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string vendor = 2;
  if (!this->_internal_vendor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_vendor().data(), static_cast<int>(this->_internal_vendor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceProperties.vendor");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_vendor(), target);
  }

  // string model = 3;
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DeviceProperties.model");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model(), target);
  }

  // int64 frequency = 4;
  if (this->_internal_frequency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_frequency(), target);
  }

  // int64 num_cores = 5;
  if (this->_internal_num_cores() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_num_cores(), target);
  }

  // map<string, string> environment = 6;
  if (!this->_internal_environment().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = DeviceProperties_EnvironmentEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_environment();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "tensorflow.DeviceProperties.EnvironmentEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "tensorflow.DeviceProperties.EnvironmentEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // int64 num_registers = 7;
  if (this->_internal_num_registers() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_num_registers(), target);
  }

  // int64 l1_cache_size = 8;
  if (this->_internal_l1_cache_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_l1_cache_size(), target);
  }

  // int64 l2_cache_size = 9;
  if (this->_internal_l2_cache_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_l2_cache_size(), target);
  }

  // int64 l3_cache_size = 10;
  if (this->_internal_l3_cache_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_l3_cache_size(), target);
  }

  // int64 shared_memory_size_per_multiprocessor = 11;
  if (this->_internal_shared_memory_size_per_multiprocessor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_shared_memory_size_per_multiprocessor(), target);
  }

  // int64 memory_size = 12;
  if (this->_internal_memory_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_memory_size(), target);
  }

  // int64 bandwidth = 13;
  if (this->_internal_bandwidth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_bandwidth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DeviceProperties)
  return target;
}

size_t DeviceProperties::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DeviceProperties)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> environment = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_environment_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_environment().begin();
      it != this->_internal_environment().end(); ++it) {
    total_size += DeviceProperties_EnvironmentEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string vendor = 2;
  if (!this->_internal_vendor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendor());
  }

  // string model = 3;
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // int64 frequency = 4;
  if (this->_internal_frequency() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_frequency());
  }

  // int64 num_cores = 5;
  if (this->_internal_num_cores() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_cores());
  }

  // int64 num_registers = 7;
  if (this->_internal_num_registers() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_registers());
  }

  // int64 l1_cache_size = 8;
  if (this->_internal_l1_cache_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_l1_cache_size());
  }

  // int64 l2_cache_size = 9;
  if (this->_internal_l2_cache_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_l2_cache_size());
  }

  // int64 l3_cache_size = 10;
  if (this->_internal_l3_cache_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_l3_cache_size());
  }

  // int64 shared_memory_size_per_multiprocessor = 11;
  if (this->_internal_shared_memory_size_per_multiprocessor() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_shared_memory_size_per_multiprocessor());
  }

  // int64 memory_size = 12;
  if (this->_internal_memory_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_memory_size());
  }

  // int64 bandwidth = 13;
  if (this->_internal_bandwidth() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bandwidth());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeviceProperties::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DeviceProperties::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeviceProperties::GetClassData() const { return &_class_data_; }


void DeviceProperties::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DeviceProperties*>(&to_msg);
  auto& from = static_cast<const DeviceProperties&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DeviceProperties)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.environment_.MergeFrom(from._impl_.environment_);
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_vendor().empty()) {
    _this->_internal_set_vendor(from._internal_vendor());
  }
  if (!from._internal_model().empty()) {
    _this->_internal_set_model(from._internal_model());
  }
  if (from._internal_frequency() != 0) {
    _this->_internal_set_frequency(from._internal_frequency());
  }
  if (from._internal_num_cores() != 0) {
    _this->_internal_set_num_cores(from._internal_num_cores());
  }
  if (from._internal_num_registers() != 0) {
    _this->_internal_set_num_registers(from._internal_num_registers());
  }
  if (from._internal_l1_cache_size() != 0) {
    _this->_internal_set_l1_cache_size(from._internal_l1_cache_size());
  }
  if (from._internal_l2_cache_size() != 0) {
    _this->_internal_set_l2_cache_size(from._internal_l2_cache_size());
  }
  if (from._internal_l3_cache_size() != 0) {
    _this->_internal_set_l3_cache_size(from._internal_l3_cache_size());
  }
  if (from._internal_shared_memory_size_per_multiprocessor() != 0) {
    _this->_internal_set_shared_memory_size_per_multiprocessor(from._internal_shared_memory_size_per_multiprocessor());
  }
  if (from._internal_memory_size() != 0) {
    _this->_internal_set_memory_size(from._internal_memory_size());
  }
  if (from._internal_bandwidth() != 0) {
    _this->_internal_set_bandwidth(from._internal_bandwidth());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeviceProperties::CopyFrom(const DeviceProperties& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DeviceProperties)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceProperties::IsInitialized() const {
  return true;
}

void DeviceProperties::InternalSwap(DeviceProperties* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.environment_.InternalSwap(&other->_impl_.environment_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.vendor_, lhs_arena,
      &other->_impl_.vendor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceProperties, _impl_.bandwidth_)
      + sizeof(DeviceProperties::_impl_.bandwidth_)
      - PROTOBUF_FIELD_OFFSET(DeviceProperties, _impl_.frequency_)>(
          reinterpret_cast<char*>(&_impl_.frequency_),
          reinterpret_cast<char*>(&other->_impl_.frequency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceProperties::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto[1]);
}

// ===================================================================

class NamedDevice::_Internal {
 public:
  static const ::tensorflow::DeviceProperties& properties(const NamedDevice* msg);
};

const ::tensorflow::DeviceProperties&
NamedDevice::_Internal::properties(const NamedDevice* msg) {
  return *msg->_impl_.properties_;
}
NamedDevice::NamedDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.NamedDevice)
}
NamedDevice::NamedDevice(const NamedDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NamedDevice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.properties_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_properties()) {
    _this->_impl_.properties_ = new ::tensorflow::DeviceProperties(*from._impl_.properties_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.NamedDevice)
}

inline void NamedDevice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.properties_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NamedDevice::~NamedDevice() {
  // @@protoc_insertion_point(destructor:tensorflow.NamedDevice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NamedDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.properties_;
}

void NamedDevice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NamedDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.NamedDevice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.properties_ != nullptr) {
    delete _impl_.properties_;
  }
  _impl_.properties_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedDevice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.NamedDevice.name"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.DeviceProperties properties = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_properties(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NamedDevice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.NamedDevice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NamedDevice.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .tensorflow.DeviceProperties properties = 2;
  if (this->_internal_has_properties()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::properties(this),
        _Internal::properties(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.NamedDevice)
  return target;
}

size_t NamedDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.NamedDevice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .tensorflow.DeviceProperties properties = 2;
  if (this->_internal_has_properties()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.properties_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedDevice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NamedDevice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedDevice::GetClassData() const { return &_class_data_; }


void NamedDevice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NamedDevice*>(&to_msg);
  auto& from = static_cast<const NamedDevice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.NamedDevice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_properties()) {
    _this->_internal_mutable_properties()->::tensorflow::DeviceProperties::MergeFrom(
        from._internal_properties());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedDevice::CopyFrom(const NamedDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.NamedDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedDevice::IsInitialized() const {
  return true;
}

void NamedDevice::InternalSwap(NamedDevice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.properties_, other->_impl_.properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedDevice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdevice_5fproperties_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::DeviceProperties_EnvironmentEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tensorflow::DeviceProperties_EnvironmentEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DeviceProperties_EnvironmentEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DeviceProperties*
Arena::CreateMaybeMessage< ::tensorflow::DeviceProperties >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DeviceProperties >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::NamedDevice*
Arena::CreateMaybeMessage< ::tensorflow::NamedDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::NamedDevice >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
