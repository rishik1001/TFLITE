// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/remote_tensor_handle.proto

#include "tensorflow/core/protobuf/remote_tensor_handle.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
namespace eager {
PROTOBUF_CONSTEXPR ResourceDtypeAndShape::ResourceDtypeAndShape(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shape_)*/nullptr
  , /*decltype(_impl_.dtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ResourceDtypeAndShapeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceDtypeAndShapeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceDtypeAndShapeDefaultTypeInternal() {}
  union {
    ResourceDtypeAndShape _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceDtypeAndShapeDefaultTypeInternal _ResourceDtypeAndShape_default_instance_;
PROTOBUF_CONSTEXPR RemoteTensorHandle::RemoteTensorHandle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.resource_dtypes_and_shapes_)*/{}
  , /*decltype(_impl_.device_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.op_device_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.op_id_)*/int64_t{0}
  , /*decltype(_impl_.output_num_)*/0
  , /*decltype(_impl_.dtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoteTensorHandleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteTensorHandleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteTensorHandleDefaultTypeInternal() {}
  union {
    RemoteTensorHandle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteTensorHandleDefaultTypeInternal _RemoteTensorHandle_default_instance_;
}  // namespace eager
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::ResourceDtypeAndShape, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::ResourceDtypeAndShape, _impl_.dtype_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::ResourceDtypeAndShape, _impl_.shape_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RemoteTensorHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RemoteTensorHandle, _impl_.op_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RemoteTensorHandle, _impl_.output_num_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RemoteTensorHandle, _impl_.device_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RemoteTensorHandle, _impl_.op_device_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RemoteTensorHandle, _impl_.dtype_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RemoteTensorHandle, _impl_.resource_dtypes_and_shapes_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::eager::ResourceDtypeAndShape)},
  { 8, -1, -1, sizeof(::tensorflow::eager::RemoteTensorHandle)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::eager::_ResourceDtypeAndShape_default_instance_._instance,
  &::tensorflow::eager::_RemoteTensorHandle_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n3tensorflow/core/protobuf/remote_tensor"
  "_handle.proto\022\020tensorflow.eager\032,tensorf"
  "low/core/framework/tensor_shape.proto\032%t"
  "ensorflow/core/framework/types.proto\"i\n\025"
  "ResourceDtypeAndShape\022#\n\005dtype\030\001 \001(\0162\024.t"
  "ensorflow.DataType\022+\n\005shape\030\002 \001(\0132\034.tens"
  "orflow.TensorShapeProto\"\314\001\n\022RemoteTensor"
  "Handle\022\r\n\005op_id\030\001 \001(\003\022\022\n\noutput_num\030\002 \001("
  "\005\022\016\n\006device\030\003 \001(\t\022\021\n\top_device\030\004 \001(\t\022#\n\005"
  "dtype\030\005 \001(\0162\024.tensorflow.DataType\022K\n\032res"
  "ource_dtypes_and_shapes\030\006 \003(\0132\'.tensorfl"
  "ow.eager.ResourceDtypeAndShapeB\220\001\n\030org.t"
  "ensorflow.frameworkB\030RemoteTensorHandleP"
  "rotosP\001ZUgithub.com/tensorflow/tensorflo"
  "w/tensorflow/go/core/protobuf/for_core_p"
  "rotos_go_proto\370\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto_deps[2] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto = {
    false, false, 625, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto,
    "tensorflow/core/protobuf/remote_tensor_handle.proto",
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto_deps, 2, 2,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto);
namespace tensorflow {
namespace eager {

// ===================================================================

class ResourceDtypeAndShape::_Internal {
 public:
  static const ::tensorflow::TensorShapeProto& shape(const ResourceDtypeAndShape* msg);
};

const ::tensorflow::TensorShapeProto&
ResourceDtypeAndShape::_Internal::shape(const ResourceDtypeAndShape* msg) {
  return *msg->_impl_.shape_;
}
void ResourceDtypeAndShape::clear_shape() {
  if (GetArenaForAllocation() == nullptr && _impl_.shape_ != nullptr) {
    delete _impl_.shape_;
  }
  _impl_.shape_ = nullptr;
}
ResourceDtypeAndShape::ResourceDtypeAndShape(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.ResourceDtypeAndShape)
}
ResourceDtypeAndShape::ResourceDtypeAndShape(const ResourceDtypeAndShape& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ResourceDtypeAndShape* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.dtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_shape()) {
    _this->_impl_.shape_ = new ::tensorflow::TensorShapeProto(*from._impl_.shape_);
  }
  _this->_impl_.dtype_ = from._impl_.dtype_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.ResourceDtypeAndShape)
}

inline void ResourceDtypeAndShape::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.dtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ResourceDtypeAndShape::~ResourceDtypeAndShape() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.ResourceDtypeAndShape)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourceDtypeAndShape::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.shape_;
}

void ResourceDtypeAndShape::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResourceDtypeAndShape::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.ResourceDtypeAndShape)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.shape_ != nullptr) {
    delete _impl_.shape_;
  }
  _impl_.shape_ = nullptr;
  _impl_.dtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceDtypeAndShape::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.DataType dtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::tensorflow::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TensorShapeProto shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResourceDtypeAndShape::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.ResourceDtypeAndShape)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.DataType dtype = 1;
  if (this->_internal_dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_dtype(), target);
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->_internal_has_shape()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::shape(this),
        _Internal::shape(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.ResourceDtypeAndShape)
  return target;
}

size_t ResourceDtypeAndShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.ResourceDtypeAndShape)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->_internal_has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shape_);
  }

  // .tensorflow.DataType dtype = 1;
  if (this->_internal_dtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceDtypeAndShape::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ResourceDtypeAndShape::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceDtypeAndShape::GetClassData() const { return &_class_data_; }


void ResourceDtypeAndShape::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ResourceDtypeAndShape*>(&to_msg);
  auto& from = static_cast<const ResourceDtypeAndShape&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.ResourceDtypeAndShape)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_shape()) {
    _this->_internal_mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(
        from._internal_shape());
  }
  if (from._internal_dtype() != 0) {
    _this->_internal_set_dtype(from._internal_dtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceDtypeAndShape::CopyFrom(const ResourceDtypeAndShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.ResourceDtypeAndShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceDtypeAndShape::IsInitialized() const {
  return true;
}

void ResourceDtypeAndShape::InternalSwap(ResourceDtypeAndShape* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResourceDtypeAndShape, _impl_.dtype_)
      + sizeof(ResourceDtypeAndShape::_impl_.dtype_)
      - PROTOBUF_FIELD_OFFSET(ResourceDtypeAndShape, _impl_.shape_)>(
          reinterpret_cast<char*>(&_impl_.shape_),
          reinterpret_cast<char*>(&other->_impl_.shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceDtypeAndShape::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto[0]);
}

// ===================================================================

class RemoteTensorHandle::_Internal {
 public:
};

RemoteTensorHandle::RemoteTensorHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.RemoteTensorHandle)
}
RemoteTensorHandle::RemoteTensorHandle(const RemoteTensorHandle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoteTensorHandle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_dtypes_and_shapes_){from._impl_.resource_dtypes_and_shapes_}
    , decltype(_impl_.device_){}
    , decltype(_impl_.op_device_){}
    , decltype(_impl_.op_id_){}
    , decltype(_impl_.output_num_){}
    , decltype(_impl_.dtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device().empty()) {
    _this->_impl_.device_.Set(from._internal_device(), 
      _this->GetArenaForAllocation());
  }
  _impl_.op_device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_op_device().empty()) {
    _this->_impl_.op_device_.Set(from._internal_op_device(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.op_id_, &from._impl_.op_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dtype_) -
    reinterpret_cast<char*>(&_impl_.op_id_)) + sizeof(_impl_.dtype_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.RemoteTensorHandle)
}

inline void RemoteTensorHandle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.resource_dtypes_and_shapes_){arena}
    , decltype(_impl_.device_){}
    , decltype(_impl_.op_device_){}
    , decltype(_impl_.op_id_){int64_t{0}}
    , decltype(_impl_.output_num_){0}
    , decltype(_impl_.dtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.op_device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RemoteTensorHandle::~RemoteTensorHandle() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.RemoteTensorHandle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteTensorHandle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.resource_dtypes_and_shapes_.~RepeatedPtrField();
  _impl_.device_.Destroy();
  _impl_.op_device_.Destroy();
}

void RemoteTensorHandle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoteTensorHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.RemoteTensorHandle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.resource_dtypes_and_shapes_.Clear();
  _impl_.device_.ClearToEmpty();
  _impl_.op_device_.ClearToEmpty();
  ::memset(&_impl_.op_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dtype_) -
      reinterpret_cast<char*>(&_impl_.op_id_)) + sizeof(_impl_.dtype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteTensorHandle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 op_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.op_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 output_num = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.output_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_device();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.eager.RemoteTensorHandle.device"));
        } else
          goto handle_unusual;
        continue;
      // string op_device = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_op_device();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.eager.RemoteTensorHandle.op_device"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.DataType dtype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::tensorflow::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.eager.ResourceDtypeAndShape resource_dtypes_and_shapes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resource_dtypes_and_shapes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoteTensorHandle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.RemoteTensorHandle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 op_id = 1;
  if (this->_internal_op_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_op_id(), target);
  }

  // int32 output_num = 2;
  if (this->_internal_output_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_output_num(), target);
  }

  // string device = 3;
  if (!this->_internal_device().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.RemoteTensorHandle.device");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device(), target);
  }

  // string op_device = 4;
  if (!this->_internal_op_device().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op_device().data(), static_cast<int>(this->_internal_op_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.RemoteTensorHandle.op_device");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_op_device(), target);
  }

  // .tensorflow.DataType dtype = 5;
  if (this->_internal_dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_dtype(), target);
  }

  // repeated .tensorflow.eager.ResourceDtypeAndShape resource_dtypes_and_shapes = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_resource_dtypes_and_shapes_size()); i < n; i++) {
    const auto& repfield = this->_internal_resource_dtypes_and_shapes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.RemoteTensorHandle)
  return target;
}

size_t RemoteTensorHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.RemoteTensorHandle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.eager.ResourceDtypeAndShape resource_dtypes_and_shapes = 6;
  total_size += 1UL * this->_internal_resource_dtypes_and_shapes_size();
  for (const auto& msg : this->_impl_.resource_dtypes_and_shapes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string device = 3;
  if (!this->_internal_device().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device());
  }

  // string op_device = 4;
  if (!this->_internal_op_device().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_device());
  }

  // int64 op_id = 1;
  if (this->_internal_op_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_op_id());
  }

  // int32 output_num = 2;
  if (this->_internal_output_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_output_num());
  }

  // .tensorflow.DataType dtype = 5;
  if (this->_internal_dtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoteTensorHandle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoteTensorHandle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoteTensorHandle::GetClassData() const { return &_class_data_; }


void RemoteTensorHandle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoteTensorHandle*>(&to_msg);
  auto& from = static_cast<const RemoteTensorHandle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.RemoteTensorHandle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.resource_dtypes_and_shapes_.MergeFrom(from._impl_.resource_dtypes_and_shapes_);
  if (!from._internal_device().empty()) {
    _this->_internal_set_device(from._internal_device());
  }
  if (!from._internal_op_device().empty()) {
    _this->_internal_set_op_device(from._internal_op_device());
  }
  if (from._internal_op_id() != 0) {
    _this->_internal_set_op_id(from._internal_op_id());
  }
  if (from._internal_output_num() != 0) {
    _this->_internal_set_output_num(from._internal_output_num());
  }
  if (from._internal_dtype() != 0) {
    _this->_internal_set_dtype(from._internal_dtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoteTensorHandle::CopyFrom(const RemoteTensorHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.RemoteTensorHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteTensorHandle::IsInitialized() const {
  return true;
}

void RemoteTensorHandle::InternalSwap(RemoteTensorHandle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.resource_dtypes_and_shapes_.InternalSwap(&other->_impl_.resource_dtypes_and_shapes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_, lhs_arena,
      &other->_impl_.device_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.op_device_, lhs_arena,
      &other->_impl_.op_device_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteTensorHandle, _impl_.dtype_)
      + sizeof(RemoteTensorHandle::_impl_.dtype_)
      - PROTOBUF_FIELD_OFFSET(RemoteTensorHandle, _impl_.op_id_)>(
          reinterpret_cast<char*>(&_impl_.op_id_),
          reinterpret_cast<char*>(&other->_impl_.op_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteTensorHandle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace eager
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::eager::ResourceDtypeAndShape*
Arena::CreateMaybeMessage< ::tensorflow::eager::ResourceDtypeAndShape >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::ResourceDtypeAndShape >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::RemoteTensorHandle*
Arena::CreateMaybeMessage< ::tensorflow::eager::RemoteTensorHandle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::RemoteTensorHandle >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
