// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/trackable_object_graph.proto

#include "tensorflow/core/protobuf/trackable_object_graph.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR TrackableObjectGraph_TrackableObject_ObjectReference::TrackableObjectGraph_TrackableObject_ObjectReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.local_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.node_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrackableObjectGraph_TrackableObject_ObjectReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackableObjectGraph_TrackableObject_ObjectReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackableObjectGraph_TrackableObject_ObjectReferenceDefaultTypeInternal() {}
  union {
    TrackableObjectGraph_TrackableObject_ObjectReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackableObjectGraph_TrackableObject_ObjectReferenceDefaultTypeInternal _TrackableObjectGraph_TrackableObject_ObjectReference_default_instance_;
PROTOBUF_CONSTEXPR TrackableObjectGraph_TrackableObject_SerializedTensor::TrackableObjectGraph_TrackableObject_SerializedTensor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.full_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.checkpoint_key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrackableObjectGraph_TrackableObject_SerializedTensorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackableObjectGraph_TrackableObject_SerializedTensorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackableObjectGraph_TrackableObject_SerializedTensorDefaultTypeInternal() {}
  union {
    TrackableObjectGraph_TrackableObject_SerializedTensor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackableObjectGraph_TrackableObject_SerializedTensorDefaultTypeInternal _TrackableObjectGraph_TrackableObject_SerializedTensor_default_instance_;
PROTOBUF_CONSTEXPR TrackableObjectGraph_TrackableObject_SlotVariableReference::TrackableObjectGraph_TrackableObject_SlotVariableReference(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.slot_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.original_variable_node_id_)*/0
  , /*decltype(_impl_.slot_variable_node_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrackableObjectGraph_TrackableObject_SlotVariableReferenceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackableObjectGraph_TrackableObject_SlotVariableReferenceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackableObjectGraph_TrackableObject_SlotVariableReferenceDefaultTypeInternal() {}
  union {
    TrackableObjectGraph_TrackableObject_SlotVariableReference _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackableObjectGraph_TrackableObject_SlotVariableReferenceDefaultTypeInternal _TrackableObjectGraph_TrackableObject_SlotVariableReference_default_instance_;
PROTOBUF_CONSTEXPR TrackableObjectGraph_TrackableObject::TrackableObjectGraph_TrackableObject(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.children_)*/{}
  , /*decltype(_impl_.attributes_)*/{}
  , /*decltype(_impl_.slot_variables_)*/{}
  , /*decltype(_impl_.registered_saver_)*/nullptr
  , /*decltype(_impl_.has_checkpoint_values_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrackableObjectGraph_TrackableObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackableObjectGraph_TrackableObjectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackableObjectGraph_TrackableObjectDefaultTypeInternal() {}
  union {
    TrackableObjectGraph_TrackableObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackableObjectGraph_TrackableObjectDefaultTypeInternal _TrackableObjectGraph_TrackableObject_default_instance_;
PROTOBUF_CONSTEXPR TrackableObjectGraph::TrackableObjectGraph(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nodes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TrackableObjectGraphDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TrackableObjectGraphDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TrackableObjectGraphDefaultTypeInternal() {}
  union {
    TrackableObjectGraph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TrackableObjectGraphDefaultTypeInternal _TrackableObjectGraph_default_instance_;
PROTOBUF_CONSTEXPR RegisteredSaver::RegisteredSaver(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.object_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisteredSaverDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisteredSaverDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisteredSaverDefaultTypeInternal() {}
  union {
    RegisteredSaver _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisteredSaverDefaultTypeInternal _RegisteredSaver_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto[6];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject_ObjectReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject_ObjectReference, _impl_.node_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject_ObjectReference, _impl_.local_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor, _impl_.full_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor, _impl_.checkpoint_key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference, _impl_.original_variable_node_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference, _impl_.slot_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference, _impl_.slot_variable_node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject, _impl_.children_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject, _impl_.slot_variables_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject, _impl_.registered_saver_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph_TrackableObject, _impl_.has_checkpoint_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TrackableObjectGraph, _impl_.nodes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RegisteredSaver, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RegisteredSaver, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RegisteredSaver, _impl_.object_name_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::TrackableObjectGraph_TrackableObject_ObjectReference)},
  { 8, -1, -1, sizeof(::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor)},
  { 17, -1, -1, sizeof(::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference)},
  { 26, -1, -1, sizeof(::tensorflow::TrackableObjectGraph_TrackableObject)},
  { 37, -1, -1, sizeof(::tensorflow::TrackableObjectGraph)},
  { 44, -1, -1, sizeof(::tensorflow::RegisteredSaver)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_TrackableObjectGraph_TrackableObject_ObjectReference_default_instance_._instance,
  &::tensorflow::_TrackableObjectGraph_TrackableObject_SerializedTensor_default_instance_._instance,
  &::tensorflow::_TrackableObjectGraph_TrackableObject_SlotVariableReference_default_instance_._instance,
  &::tensorflow::_TrackableObjectGraph_TrackableObject_default_instance_._instance,
  &::tensorflow::_TrackableObjectGraph_default_instance_._instance,
  &::tensorflow::_RegisteredSaver_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n5tensorflow/core/protobuf/trackable_obj"
  "ect_graph.proto\022\ntensorflow\032\036google/prot"
  "obuf/wrappers.proto\"\363\005\n\024TrackableObjectG"
  "raph\022\?\n\005nodes\030\001 \003(\01320.tensorflow.Trackab"
  "leObjectGraph.TrackableObject\032\231\005\n\017Tracka"
  "bleObject\022R\n\010children\030\001 \003(\0132@.tensorflow"
  ".TrackableObjectGraph.TrackableObject.Ob"
  "jectReference\022U\n\nattributes\030\002 \003(\0132A.tens"
  "orflow.TrackableObjectGraph.TrackableObj"
  "ect.SerializedTensor\022^\n\016slot_variables\030\003"
  " \003(\0132F.tensorflow.TrackableObjectGraph.T"
  "rackableObject.SlotVariableReference\0225\n\020"
  "registered_saver\030\004 \001(\0132\033.tensorflow.Regi"
  "steredSaver\0229\n\025has_checkpoint_values\030\005 \001"
  "(\0132\032.google.protobuf.BoolValue\0326\n\017Object"
  "Reference\022\017\n\007node_id\030\001 \001(\005\022\022\n\nlocal_name"
  "\030\002 \001(\t\032c\n\020SerializedTensor\022\014\n\004name\030\001 \001(\t"
  "\022\021\n\tfull_name\030\002 \001(\t\022\026\n\016checkpoint_key\030\003 "
  "\001(\tJ\004\010\004\020\005R\020optional_restore\032l\n\025SlotVaria"
  "bleReference\022!\n\031original_variable_node_i"
  "d\030\001 \001(\005\022\021\n\tslot_name\030\002 \001(\t\022\035\n\025slot_varia"
  "ble_node_id\030\003 \001(\005\"4\n\017RegisteredSaver\022\014\n\004"
  "name\030\001 \001(\t\022\023\n\013object_name\030\002 \001(\tBZZUgithu"
  "b.com/tensorflow/tensorflow/tensorflow/g"
  "o/core/protobuf/for_core_protos_go_proto"
  "\370\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto = {
    false, false, 1011, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto,
    "tensorflow/core/protobuf/trackable_object_graph.proto",
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto_deps, 1, 6,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto(&descriptor_table_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto);
namespace tensorflow {

// ===================================================================

class TrackableObjectGraph_TrackableObject_ObjectReference::_Internal {
 public:
};

TrackableObjectGraph_TrackableObject_ObjectReference::TrackableObjectGraph_TrackableObject_ObjectReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
}
TrackableObjectGraph_TrackableObject_ObjectReference::TrackableObjectGraph_TrackableObject_ObjectReference(const TrackableObjectGraph_TrackableObject_ObjectReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackableObjectGraph_TrackableObject_ObjectReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.local_name_){}
    , decltype(_impl_.node_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.local_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_local_name().empty()) {
    _this->_impl_.local_name_.Set(from._internal_local_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.node_id_ = from._impl_.node_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
}

inline void TrackableObjectGraph_TrackableObject_ObjectReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.local_name_){}
    , decltype(_impl_.node_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.local_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.local_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackableObjectGraph_TrackableObject_ObjectReference::~TrackableObjectGraph_TrackableObject_ObjectReference() {
  // @@protoc_insertion_point(destructor:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackableObjectGraph_TrackableObject_ObjectReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.local_name_.Destroy();
}

void TrackableObjectGraph_TrackableObject_ObjectReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackableObjectGraph_TrackableObject_ObjectReference::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.local_name_.ClearToEmpty();
  _impl_.node_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackableObjectGraph_TrackableObject_ObjectReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string local_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_local_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference.local_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackableObjectGraph_TrackableObject_ObjectReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 node_id = 1;
  if (this->_internal_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_node_id(), target);
  }

  // string local_name = 2;
  if (!this->_internal_local_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_local_name().data(), static_cast<int>(this->_internal_local_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference.local_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_local_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  return target;
}

size_t TrackableObjectGraph_TrackableObject_ObjectReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string local_name = 2;
  if (!this->_internal_local_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_local_name());
  }

  // int32 node_id = 1;
  if (this->_internal_node_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_node_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackableObjectGraph_TrackableObject_ObjectReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackableObjectGraph_TrackableObject_ObjectReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackableObjectGraph_TrackableObject_ObjectReference::GetClassData() const { return &_class_data_; }


void TrackableObjectGraph_TrackableObject_ObjectReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackableObjectGraph_TrackableObject_ObjectReference*>(&to_msg);
  auto& from = static_cast<const TrackableObjectGraph_TrackableObject_ObjectReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_local_name().empty()) {
    _this->_internal_set_local_name(from._internal_local_name());
  }
  if (from._internal_node_id() != 0) {
    _this->_internal_set_node_id(from._internal_node_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackableObjectGraph_TrackableObject_ObjectReference::CopyFrom(const TrackableObjectGraph_TrackableObject_ObjectReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackableObjectGraph_TrackableObject_ObjectReference::IsInitialized() const {
  return true;
}

void TrackableObjectGraph_TrackableObject_ObjectReference::InternalSwap(TrackableObjectGraph_TrackableObject_ObjectReference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.local_name_, lhs_arena,
      &other->_impl_.local_name_, rhs_arena
  );
  swap(_impl_.node_id_, other->_impl_.node_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackableObjectGraph_TrackableObject_ObjectReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto[0]);
}

// ===================================================================

class TrackableObjectGraph_TrackableObject_SerializedTensor::_Internal {
 public:
};

TrackableObjectGraph_TrackableObject_SerializedTensor::TrackableObjectGraph_TrackableObject_SerializedTensor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
}
TrackableObjectGraph_TrackableObject_SerializedTensor::TrackableObjectGraph_TrackableObject_SerializedTensor(const TrackableObjectGraph_TrackableObject_SerializedTensor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackableObjectGraph_TrackableObject_SerializedTensor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.full_name_){}
    , decltype(_impl_.checkpoint_key_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.full_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.full_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_full_name().empty()) {
    _this->_impl_.full_name_.Set(from._internal_full_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.checkpoint_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.checkpoint_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_checkpoint_key().empty()) {
    _this->_impl_.checkpoint_key_.Set(from._internal_checkpoint_key(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
}

inline void TrackableObjectGraph_TrackableObject_SerializedTensor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.full_name_){}
    , decltype(_impl_.checkpoint_key_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.full_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.full_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.checkpoint_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.checkpoint_key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackableObjectGraph_TrackableObject_SerializedTensor::~TrackableObjectGraph_TrackableObject_SerializedTensor() {
  // @@protoc_insertion_point(destructor:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackableObjectGraph_TrackableObject_SerializedTensor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.full_name_.Destroy();
  _impl_.checkpoint_key_.Destroy();
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.full_name_.ClearToEmpty();
  _impl_.checkpoint_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackableObjectGraph_TrackableObject_SerializedTensor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.name"));
        } else
          goto handle_unusual;
        continue;
      // string full_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_full_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.full_name"));
        } else
          goto handle_unusual;
        continue;
      // string checkpoint_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_checkpoint_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.checkpoint_key"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackableObjectGraph_TrackableObject_SerializedTensor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string full_name = 2;
  if (!this->_internal_full_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_full_name().data(), static_cast<int>(this->_internal_full_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.full_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_full_name(), target);
  }

  // string checkpoint_key = 3;
  if (!this->_internal_checkpoint_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_checkpoint_key().data(), static_cast<int>(this->_internal_checkpoint_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor.checkpoint_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_checkpoint_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  return target;
}

size_t TrackableObjectGraph_TrackableObject_SerializedTensor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string full_name = 2;
  if (!this->_internal_full_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_full_name());
  }

  // string checkpoint_key = 3;
  if (!this->_internal_checkpoint_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_checkpoint_key());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackableObjectGraph_TrackableObject_SerializedTensor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackableObjectGraph_TrackableObject_SerializedTensor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackableObjectGraph_TrackableObject_SerializedTensor::GetClassData() const { return &_class_data_; }


void TrackableObjectGraph_TrackableObject_SerializedTensor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackableObjectGraph_TrackableObject_SerializedTensor*>(&to_msg);
  auto& from = static_cast<const TrackableObjectGraph_TrackableObject_SerializedTensor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_full_name().empty()) {
    _this->_internal_set_full_name(from._internal_full_name());
  }
  if (!from._internal_checkpoint_key().empty()) {
    _this->_internal_set_checkpoint_key(from._internal_checkpoint_key());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::CopyFrom(const TrackableObjectGraph_TrackableObject_SerializedTensor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackableObjectGraph_TrackableObject_SerializedTensor::IsInitialized() const {
  return true;
}

void TrackableObjectGraph_TrackableObject_SerializedTensor::InternalSwap(TrackableObjectGraph_TrackableObject_SerializedTensor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.full_name_, lhs_arena,
      &other->_impl_.full_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.checkpoint_key_, lhs_arena,
      &other->_impl_.checkpoint_key_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackableObjectGraph_TrackableObject_SerializedTensor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto[1]);
}

// ===================================================================

class TrackableObjectGraph_TrackableObject_SlotVariableReference::_Internal {
 public:
};

TrackableObjectGraph_TrackableObject_SlotVariableReference::TrackableObjectGraph_TrackableObject_SlotVariableReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
}
TrackableObjectGraph_TrackableObject_SlotVariableReference::TrackableObjectGraph_TrackableObject_SlotVariableReference(const TrackableObjectGraph_TrackableObject_SlotVariableReference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackableObjectGraph_TrackableObject_SlotVariableReference* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.slot_name_){}
    , decltype(_impl_.original_variable_node_id_){}
    , decltype(_impl_.slot_variable_node_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.slot_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.slot_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slot_name().empty()) {
    _this->_impl_.slot_name_.Set(from._internal_slot_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.original_variable_node_id_, &from._impl_.original_variable_node_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.slot_variable_node_id_) -
    reinterpret_cast<char*>(&_impl_.original_variable_node_id_)) + sizeof(_impl_.slot_variable_node_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
}

inline void TrackableObjectGraph_TrackableObject_SlotVariableReference::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.slot_name_){}
    , decltype(_impl_.original_variable_node_id_){0}
    , decltype(_impl_.slot_variable_node_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.slot_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.slot_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TrackableObjectGraph_TrackableObject_SlotVariableReference::~TrackableObjectGraph_TrackableObject_SlotVariableReference() {
  // @@protoc_insertion_point(destructor:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackableObjectGraph_TrackableObject_SlotVariableReference::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.slot_name_.Destroy();
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.slot_name_.ClearToEmpty();
  ::memset(&_impl_.original_variable_node_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.slot_variable_node_id_) -
      reinterpret_cast<char*>(&_impl_.original_variable_node_id_)) + sizeof(_impl_.slot_variable_node_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackableObjectGraph_TrackableObject_SlotVariableReference::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 original_variable_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.original_variable_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string slot_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_slot_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference.slot_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 slot_variable_node_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.slot_variable_node_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackableObjectGraph_TrackableObject_SlotVariableReference::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 original_variable_node_id = 1;
  if (this->_internal_original_variable_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_original_variable_node_id(), target);
  }

  // string slot_name = 2;
  if (!this->_internal_slot_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slot_name().data(), static_cast<int>(this->_internal_slot_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference.slot_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_slot_name(), target);
  }

  // int32 slot_variable_node_id = 3;
  if (this->_internal_slot_variable_node_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_slot_variable_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  return target;
}

size_t TrackableObjectGraph_TrackableObject_SlotVariableReference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string slot_name = 2;
  if (!this->_internal_slot_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slot_name());
  }

  // int32 original_variable_node_id = 1;
  if (this->_internal_original_variable_node_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_original_variable_node_id());
  }

  // int32 slot_variable_node_id = 3;
  if (this->_internal_slot_variable_node_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_slot_variable_node_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackableObjectGraph_TrackableObject_SlotVariableReference::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackableObjectGraph_TrackableObject_SlotVariableReference::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackableObjectGraph_TrackableObject_SlotVariableReference::GetClassData() const { return &_class_data_; }


void TrackableObjectGraph_TrackableObject_SlotVariableReference::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackableObjectGraph_TrackableObject_SlotVariableReference*>(&to_msg);
  auto& from = static_cast<const TrackableObjectGraph_TrackableObject_SlotVariableReference&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_slot_name().empty()) {
    _this->_internal_set_slot_name(from._internal_slot_name());
  }
  if (from._internal_original_variable_node_id() != 0) {
    _this->_internal_set_original_variable_node_id(from._internal_original_variable_node_id());
  }
  if (from._internal_slot_variable_node_id() != 0) {
    _this->_internal_set_slot_variable_node_id(from._internal_slot_variable_node_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::CopyFrom(const TrackableObjectGraph_TrackableObject_SlotVariableReference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackableObjectGraph_TrackableObject_SlotVariableReference::IsInitialized() const {
  return true;
}

void TrackableObjectGraph_TrackableObject_SlotVariableReference::InternalSwap(TrackableObjectGraph_TrackableObject_SlotVariableReference* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.slot_name_, lhs_arena,
      &other->_impl_.slot_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackableObjectGraph_TrackableObject_SlotVariableReference, _impl_.slot_variable_node_id_)
      + sizeof(TrackableObjectGraph_TrackableObject_SlotVariableReference::_impl_.slot_variable_node_id_)
      - PROTOBUF_FIELD_OFFSET(TrackableObjectGraph_TrackableObject_SlotVariableReference, _impl_.original_variable_node_id_)>(
          reinterpret_cast<char*>(&_impl_.original_variable_node_id_),
          reinterpret_cast<char*>(&other->_impl_.original_variable_node_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackableObjectGraph_TrackableObject_SlotVariableReference::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto[2]);
}

// ===================================================================

class TrackableObjectGraph_TrackableObject::_Internal {
 public:
  static const ::tensorflow::RegisteredSaver& registered_saver(const TrackableObjectGraph_TrackableObject* msg);
  static const ::PROTOBUF_NAMESPACE_ID::BoolValue& has_checkpoint_values(const TrackableObjectGraph_TrackableObject* msg);
};

const ::tensorflow::RegisteredSaver&
TrackableObjectGraph_TrackableObject::_Internal::registered_saver(const TrackableObjectGraph_TrackableObject* msg) {
  return *msg->_impl_.registered_saver_;
}
const ::PROTOBUF_NAMESPACE_ID::BoolValue&
TrackableObjectGraph_TrackableObject::_Internal::has_checkpoint_values(const TrackableObjectGraph_TrackableObject* msg) {
  return *msg->_impl_.has_checkpoint_values_;
}
void TrackableObjectGraph_TrackableObject::clear_has_checkpoint_values() {
  if (GetArenaForAllocation() == nullptr && _impl_.has_checkpoint_values_ != nullptr) {
    delete _impl_.has_checkpoint_values_;
  }
  _impl_.has_checkpoint_values_ = nullptr;
}
TrackableObjectGraph_TrackableObject::TrackableObjectGraph_TrackableObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TrackableObjectGraph.TrackableObject)
}
TrackableObjectGraph_TrackableObject::TrackableObjectGraph_TrackableObject(const TrackableObjectGraph_TrackableObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackableObjectGraph_TrackableObject* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.children_){from._impl_.children_}
    , decltype(_impl_.attributes_){from._impl_.attributes_}
    , decltype(_impl_.slot_variables_){from._impl_.slot_variables_}
    , decltype(_impl_.registered_saver_){nullptr}
    , decltype(_impl_.has_checkpoint_values_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_registered_saver()) {
    _this->_impl_.registered_saver_ = new ::tensorflow::RegisteredSaver(*from._impl_.registered_saver_);
  }
  if (from._internal_has_has_checkpoint_values()) {
    _this->_impl_.has_checkpoint_values_ = new ::PROTOBUF_NAMESPACE_ID::BoolValue(*from._impl_.has_checkpoint_values_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.TrackableObjectGraph.TrackableObject)
}

inline void TrackableObjectGraph_TrackableObject::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.children_){arena}
    , decltype(_impl_.attributes_){arena}
    , decltype(_impl_.slot_variables_){arena}
    , decltype(_impl_.registered_saver_){nullptr}
    , decltype(_impl_.has_checkpoint_values_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TrackableObjectGraph_TrackableObject::~TrackableObjectGraph_TrackableObject() {
  // @@protoc_insertion_point(destructor:tensorflow.TrackableObjectGraph.TrackableObject)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackableObjectGraph_TrackableObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.children_.~RepeatedPtrField();
  _impl_.attributes_.~RepeatedPtrField();
  _impl_.slot_variables_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.registered_saver_;
  if (this != internal_default_instance()) delete _impl_.has_checkpoint_values_;
}

void TrackableObjectGraph_TrackableObject::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackableObjectGraph_TrackableObject::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TrackableObjectGraph.TrackableObject)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.children_.Clear();
  _impl_.attributes_.Clear();
  _impl_.slot_variables_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.registered_saver_ != nullptr) {
    delete _impl_.registered_saver_;
  }
  _impl_.registered_saver_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.has_checkpoint_values_ != nullptr) {
    delete _impl_.has_checkpoint_values_;
  }
  _impl_.has_checkpoint_values_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackableObjectGraph_TrackableObject::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference children = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_children(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference slot_variables = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_slot_variables(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.RegisteredSaver registered_saver = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_registered_saver(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.BoolValue has_checkpoint_values = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_has_checkpoint_values(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackableObjectGraph_TrackableObject::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TrackableObjectGraph.TrackableObject)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference children = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_children_size()); i < n; i++) {
    const auto& repfield = this->_internal_children(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor attributes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_attributes_size()); i < n; i++) {
    const auto& repfield = this->_internal_attributes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference slot_variables = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_slot_variables_size()); i < n; i++) {
    const auto& repfield = this->_internal_slot_variables(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tensorflow.RegisteredSaver registered_saver = 4;
  if (this->_internal_has_registered_saver()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::registered_saver(this),
        _Internal::registered_saver(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.BoolValue has_checkpoint_values = 5;
  if (this->_internal_has_has_checkpoint_values()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::has_checkpoint_values(this),
        _Internal::has_checkpoint_values(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TrackableObjectGraph.TrackableObject)
  return target;
}

size_t TrackableObjectGraph_TrackableObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TrackableObjectGraph.TrackableObject)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.ObjectReference children = 1;
  total_size += 1UL * this->_internal_children_size();
  for (const auto& msg : this->_impl_.children_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SerializedTensor attributes = 2;
  total_size += 1UL * this->_internal_attributes_size();
  for (const auto& msg : this->_impl_.attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject.SlotVariableReference slot_variables = 3;
  total_size += 1UL * this->_internal_slot_variables_size();
  for (const auto& msg : this->_impl_.slot_variables_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tensorflow.RegisteredSaver registered_saver = 4;
  if (this->_internal_has_registered_saver()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.registered_saver_);
  }

  // .google.protobuf.BoolValue has_checkpoint_values = 5;
  if (this->_internal_has_has_checkpoint_values()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.has_checkpoint_values_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackableObjectGraph_TrackableObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackableObjectGraph_TrackableObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackableObjectGraph_TrackableObject::GetClassData() const { return &_class_data_; }


void TrackableObjectGraph_TrackableObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackableObjectGraph_TrackableObject*>(&to_msg);
  auto& from = static_cast<const TrackableObjectGraph_TrackableObject&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TrackableObjectGraph.TrackableObject)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.children_.MergeFrom(from._impl_.children_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _this->_impl_.slot_variables_.MergeFrom(from._impl_.slot_variables_);
  if (from._internal_has_registered_saver()) {
    _this->_internal_mutable_registered_saver()->::tensorflow::RegisteredSaver::MergeFrom(
        from._internal_registered_saver());
  }
  if (from._internal_has_has_checkpoint_values()) {
    _this->_internal_mutable_has_checkpoint_values()->::PROTOBUF_NAMESPACE_ID::BoolValue::MergeFrom(
        from._internal_has_checkpoint_values());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackableObjectGraph_TrackableObject::CopyFrom(const TrackableObjectGraph_TrackableObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TrackableObjectGraph.TrackableObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackableObjectGraph_TrackableObject::IsInitialized() const {
  return true;
}

void TrackableObjectGraph_TrackableObject::InternalSwap(TrackableObjectGraph_TrackableObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.children_.InternalSwap(&other->_impl_.children_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  _impl_.slot_variables_.InternalSwap(&other->_impl_.slot_variables_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackableObjectGraph_TrackableObject, _impl_.has_checkpoint_values_)
      + sizeof(TrackableObjectGraph_TrackableObject::_impl_.has_checkpoint_values_)
      - PROTOBUF_FIELD_OFFSET(TrackableObjectGraph_TrackableObject, _impl_.registered_saver_)>(
          reinterpret_cast<char*>(&_impl_.registered_saver_),
          reinterpret_cast<char*>(&other->_impl_.registered_saver_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackableObjectGraph_TrackableObject::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto[3]);
}

// ===================================================================

class TrackableObjectGraph::_Internal {
 public:
};

TrackableObjectGraph::TrackableObjectGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TrackableObjectGraph)
}
TrackableObjectGraph::TrackableObjectGraph(const TrackableObjectGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TrackableObjectGraph* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){from._impl_.nodes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.TrackableObjectGraph)
}

inline void TrackableObjectGraph::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nodes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TrackableObjectGraph::~TrackableObjectGraph() {
  // @@protoc_insertion_point(destructor:tensorflow.TrackableObjectGraph)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TrackableObjectGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nodes_.~RepeatedPtrField();
}

void TrackableObjectGraph::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TrackableObjectGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TrackableObjectGraph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nodes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackableObjectGraph::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.TrackableObjectGraph.TrackableObject nodes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nodes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TrackableObjectGraph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TrackableObjectGraph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject nodes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nodes_size()); i < n; i++) {
    const auto& repfield = this->_internal_nodes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TrackableObjectGraph)
  return target;
}

size_t TrackableObjectGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TrackableObjectGraph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.TrackableObjectGraph.TrackableObject nodes = 1;
  total_size += 1UL * this->_internal_nodes_size();
  for (const auto& msg : this->_impl_.nodes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrackableObjectGraph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TrackableObjectGraph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrackableObjectGraph::GetClassData() const { return &_class_data_; }


void TrackableObjectGraph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TrackableObjectGraph*>(&to_msg);
  auto& from = static_cast<const TrackableObjectGraph&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TrackableObjectGraph)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nodes_.MergeFrom(from._impl_.nodes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrackableObjectGraph::CopyFrom(const TrackableObjectGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TrackableObjectGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackableObjectGraph::IsInitialized() const {
  return true;
}

void TrackableObjectGraph::InternalSwap(TrackableObjectGraph* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nodes_.InternalSwap(&other->_impl_.nodes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackableObjectGraph::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto[4]);
}

// ===================================================================

class RegisteredSaver::_Internal {
 public:
};

RegisteredSaver::RegisteredSaver(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RegisteredSaver)
}
RegisteredSaver::RegisteredSaver(const RegisteredSaver& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisteredSaver* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.object_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.object_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_object_name().empty()) {
    _this->_impl_.object_name_.Set(from._internal_object_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.RegisteredSaver)
}

inline void RegisteredSaver::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.object_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.object_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.object_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RegisteredSaver::~RegisteredSaver() {
  // @@protoc_insertion_point(destructor:tensorflow.RegisteredSaver)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisteredSaver::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.object_name_.Destroy();
}

void RegisteredSaver::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisteredSaver::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RegisteredSaver)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.object_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisteredSaver::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.RegisteredSaver.name"));
        } else
          goto handle_unusual;
        continue;
      // string object_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_object_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.RegisteredSaver.object_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisteredSaver::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RegisteredSaver)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RegisteredSaver.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string object_name = 2;
  if (!this->_internal_object_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_object_name().data(), static_cast<int>(this->_internal_object_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RegisteredSaver.object_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_object_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RegisteredSaver)
  return target;
}

size_t RegisteredSaver::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RegisteredSaver)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string object_name = 2;
  if (!this->_internal_object_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_object_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisteredSaver::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisteredSaver::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisteredSaver::GetClassData() const { return &_class_data_; }


void RegisteredSaver::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisteredSaver*>(&to_msg);
  auto& from = static_cast<const RegisteredSaver&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RegisteredSaver)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_object_name().empty()) {
    _this->_internal_set_object_name(from._internal_object_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisteredSaver::CopyFrom(const RegisteredSaver& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RegisteredSaver)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisteredSaver::IsInitialized() const {
  return true;
}

void RegisteredSaver::InternalSwap(RegisteredSaver* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.object_name_, lhs_arena,
      &other->_impl_.object_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisteredSaver::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2ftrackable_5fobject_5fgraph_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::TrackableObjectGraph_TrackableObject_ObjectReference*
Arena::CreateMaybeMessage< ::tensorflow::TrackableObjectGraph_TrackableObject_ObjectReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TrackableObjectGraph_TrackableObject_ObjectReference >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor*
Arena::CreateMaybeMessage< ::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TrackableObjectGraph_TrackableObject_SerializedTensor >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference*
Arena::CreateMaybeMessage< ::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TrackableObjectGraph_TrackableObject_SlotVariableReference >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TrackableObjectGraph_TrackableObject*
Arena::CreateMaybeMessage< ::tensorflow::TrackableObjectGraph_TrackableObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TrackableObjectGraph_TrackableObject >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TrackableObjectGraph*
Arena::CreateMaybeMessage< ::tensorflow::TrackableObjectGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TrackableObjectGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RegisteredSaver*
Arena::CreateMaybeMessage< ::tensorflow::RegisteredSaver >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RegisteredSaver >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
