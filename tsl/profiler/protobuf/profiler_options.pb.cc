// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tsl/profiler/protobuf/profiler_options.proto

#include "tsl/profiler/protobuf/profiler_options.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR ProfileOptions::ProfileOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.repository_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host_tracer_level_)*/0u
  , /*decltype(_impl_.device_tracer_level_)*/0u
  , /*decltype(_impl_.python_tracer_level_)*/0u
  , /*decltype(_impl_.include_dataset_ops_)*/false
  , /*decltype(_impl_.enable_hlo_proto_)*/false
  , /*decltype(_impl_.version_)*/0u
  , /*decltype(_impl_.device_type_)*/0
  , /*decltype(_impl_.start_timestamp_ns_)*/uint64_t{0u}
  , /*decltype(_impl_.duration_ms_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProfileOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProfileOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProfileOptionsDefaultTypeInternal() {}
  union {
    ProfileOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProfileOptionsDefaultTypeInternal _ProfileOptions_default_instance_;
PROTOBUF_CONSTEXPR RemoteProfilerSessionManagerOptions::RemoteProfilerSessionManagerOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.service_addresses_)*/{}
  , /*decltype(_impl_.profiler_options_)*/nullptr
  , /*decltype(_impl_.session_creation_timestamp_ns_)*/uint64_t{0u}
  , /*decltype(_impl_.max_session_duration_ms_)*/uint64_t{0u}
  , /*decltype(_impl_.delay_ms_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoteProfilerSessionManagerOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoteProfilerSessionManagerOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoteProfilerSessionManagerOptionsDefaultTypeInternal() {}
  union {
    RemoteProfilerSessionManagerOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoteProfilerSessionManagerOptionsDefaultTypeInternal _RemoteProfilerSessionManagerOptions_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto = nullptr;

const uint32_t TableStruct_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileOptions, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileOptions, _impl_.device_type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileOptions, _impl_.include_dataset_ops_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileOptions, _impl_.host_tracer_level_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileOptions, _impl_.device_tracer_level_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileOptions, _impl_.python_tracer_level_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileOptions, _impl_.enable_hlo_proto_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileOptions, _impl_.start_timestamp_ns_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileOptions, _impl_.duration_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ProfileOptions, _impl_.repository_path_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RemoteProfilerSessionManagerOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RemoteProfilerSessionManagerOptions, _impl_.profiler_options_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RemoteProfilerSessionManagerOptions, _impl_.service_addresses_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RemoteProfilerSessionManagerOptions, _impl_.session_creation_timestamp_ns_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RemoteProfilerSessionManagerOptions, _impl_.max_session_duration_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RemoteProfilerSessionManagerOptions, _impl_.delay_ms_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::ProfileOptions)},
  { 16, -1, -1, sizeof(::tensorflow::RemoteProfilerSessionManagerOptions)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_ProfileOptions_default_instance_._instance,
  &::tensorflow::_RemoteProfilerSessionManagerOptions_default_instance_._instance,
};

const char descriptor_table_protodef_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,tsl/profiler/protobuf/profiler_options"
  ".proto\022\ntensorflow\"\203\003\n\016ProfileOptions\022\017\n"
  "\007version\030\005 \001(\r\022:\n\013device_type\030\006 \001(\0162%.te"
  "nsorflow.ProfileOptions.DeviceType\022\033\n\023in"
  "clude_dataset_ops\030\001 \001(\010\022\031\n\021host_tracer_l"
  "evel\030\002 \001(\r\022\033\n\023device_tracer_level\030\003 \001(\r\022"
  "\033\n\023python_tracer_level\030\004 \001(\r\022\030\n\020enable_h"
  "lo_proto\030\007 \001(\010\022\032\n\022start_timestamp_ns\030\010 \001"
  "(\004\022\023\n\013duration_ms\030\t \001(\004\022\027\n\017repository_pa"
  "th\030\n \001(\t\"N\n\nDeviceType\022\017\n\013UNSPECIFIED\020\000\022"
  "\007\n\003CPU\020\001\022\007\n\003GPU\020\002\022\007\n\003TPU\020\003\022\024\n\020PLUGGABLE_"
  "DEVICE\020\004\"\320\001\n#RemoteProfilerSessionManage"
  "rOptions\0224\n\020profiler_options\030\001 \001(\0132\032.ten"
  "sorflow.ProfileOptions\022\031\n\021service_addres"
  "ses\030\002 \003(\t\022%\n\035session_creation_timestamp_"
  "ns\030\003 \001(\004\022\037\n\027max_session_duration_ms\030\004 \001("
  "\004\022\020\n\010delay_ms\030\005 \001(\004b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto = {
    false, false, 667, descriptor_table_protodef_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto,
    "tsl/profiler/protobuf/profiler_options.proto",
    &descriptor_table_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto::offsets,
    file_level_metadata_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto, file_level_enum_descriptors_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto,
    file_level_service_descriptors_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto_getter() {
  return &descriptor_table_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto(&descriptor_table_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProfileOptions_DeviceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto);
  return file_level_enum_descriptors_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto[0];
}
bool ProfileOptions_DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ProfileOptions_DeviceType ProfileOptions::UNSPECIFIED;
constexpr ProfileOptions_DeviceType ProfileOptions::CPU;
constexpr ProfileOptions_DeviceType ProfileOptions::GPU;
constexpr ProfileOptions_DeviceType ProfileOptions::TPU;
constexpr ProfileOptions_DeviceType ProfileOptions::PLUGGABLE_DEVICE;
constexpr ProfileOptions_DeviceType ProfileOptions::DeviceType_MIN;
constexpr ProfileOptions_DeviceType ProfileOptions::DeviceType_MAX;
constexpr int ProfileOptions::DeviceType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class ProfileOptions::_Internal {
 public:
};

ProfileOptions::ProfileOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ProfileOptions)
}
ProfileOptions::ProfileOptions(const ProfileOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProfileOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.repository_path_){}
    , decltype(_impl_.host_tracer_level_){}
    , decltype(_impl_.device_tracer_level_){}
    , decltype(_impl_.python_tracer_level_){}
    , decltype(_impl_.include_dataset_ops_){}
    , decltype(_impl_.enable_hlo_proto_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.device_type_){}
    , decltype(_impl_.start_timestamp_ns_){}
    , decltype(_impl_.duration_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.repository_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.repository_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_repository_path().empty()) {
    _this->_impl_.repository_path_.Set(from._internal_repository_path(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.host_tracer_level_, &from._impl_.host_tracer_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_ms_) -
    reinterpret_cast<char*>(&_impl_.host_tracer_level_)) + sizeof(_impl_.duration_ms_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.ProfileOptions)
}

inline void ProfileOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.repository_path_){}
    , decltype(_impl_.host_tracer_level_){0u}
    , decltype(_impl_.device_tracer_level_){0u}
    , decltype(_impl_.python_tracer_level_){0u}
    , decltype(_impl_.include_dataset_ops_){false}
    , decltype(_impl_.enable_hlo_proto_){false}
    , decltype(_impl_.version_){0u}
    , decltype(_impl_.device_type_){0}
    , decltype(_impl_.start_timestamp_ns_){uint64_t{0u}}
    , decltype(_impl_.duration_ms_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.repository_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.repository_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ProfileOptions::~ProfileOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.ProfileOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProfileOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.repository_path_.Destroy();
}

void ProfileOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProfileOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ProfileOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.repository_path_.ClearToEmpty();
  ::memset(&_impl_.host_tracer_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.duration_ms_) -
      reinterpret_cast<char*>(&_impl_.host_tracer_level_)) + sizeof(_impl_.duration_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProfileOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool include_dataset_ops = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.include_dataset_ops_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 host_tracer_level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.host_tracer_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 device_tracer_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.device_tracer_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 python_tracer_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.python_tracer_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 version = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.ProfileOptions.DeviceType device_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_device_type(static_cast<::tensorflow::ProfileOptions_DeviceType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool enable_hlo_proto = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.enable_hlo_proto_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 start_timestamp_ns = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.start_timestamp_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 duration_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string repository_path = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_repository_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.ProfileOptions.repository_path"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProfileOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ProfileOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool include_dataset_ops = 1;
  if (this->_internal_include_dataset_ops() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_include_dataset_ops(), target);
  }

  // uint32 host_tracer_level = 2;
  if (this->_internal_host_tracer_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_host_tracer_level(), target);
  }

  // uint32 device_tracer_level = 3;
  if (this->_internal_device_tracer_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_device_tracer_level(), target);
  }

  // uint32 python_tracer_level = 4;
  if (this->_internal_python_tracer_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_python_tracer_level(), target);
  }

  // uint32 version = 5;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_version(), target);
  }

  // .tensorflow.ProfileOptions.DeviceType device_type = 6;
  if (this->_internal_device_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_device_type(), target);
  }

  // bool enable_hlo_proto = 7;
  if (this->_internal_enable_hlo_proto() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_enable_hlo_proto(), target);
  }

  // uint64 start_timestamp_ns = 8;
  if (this->_internal_start_timestamp_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(8, this->_internal_start_timestamp_ns(), target);
  }

  // uint64 duration_ms = 9;
  if (this->_internal_duration_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(9, this->_internal_duration_ms(), target);
  }

  // string repository_path = 10;
  if (!this->_internal_repository_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_repository_path().data(), static_cast<int>(this->_internal_repository_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ProfileOptions.repository_path");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_repository_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ProfileOptions)
  return target;
}

size_t ProfileOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ProfileOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string repository_path = 10;
  if (!this->_internal_repository_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_repository_path());
  }

  // uint32 host_tracer_level = 2;
  if (this->_internal_host_tracer_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_host_tracer_level());
  }

  // uint32 device_tracer_level = 3;
  if (this->_internal_device_tracer_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_device_tracer_level());
  }

  // uint32 python_tracer_level = 4;
  if (this->_internal_python_tracer_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_python_tracer_level());
  }

  // bool include_dataset_ops = 1;
  if (this->_internal_include_dataset_ops() != 0) {
    total_size += 1 + 1;
  }

  // bool enable_hlo_proto = 7;
  if (this->_internal_enable_hlo_proto() != 0) {
    total_size += 1 + 1;
  }

  // uint32 version = 5;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_version());
  }

  // .tensorflow.ProfileOptions.DeviceType device_type = 6;
  if (this->_internal_device_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_device_type());
  }

  // uint64 start_timestamp_ns = 8;
  if (this->_internal_start_timestamp_ns() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_start_timestamp_ns());
  }

  // uint64 duration_ms = 9;
  if (this->_internal_duration_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_duration_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProfileOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProfileOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProfileOptions::GetClassData() const { return &_class_data_; }


void ProfileOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProfileOptions*>(&to_msg);
  auto& from = static_cast<const ProfileOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ProfileOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_repository_path().empty()) {
    _this->_internal_set_repository_path(from._internal_repository_path());
  }
  if (from._internal_host_tracer_level() != 0) {
    _this->_internal_set_host_tracer_level(from._internal_host_tracer_level());
  }
  if (from._internal_device_tracer_level() != 0) {
    _this->_internal_set_device_tracer_level(from._internal_device_tracer_level());
  }
  if (from._internal_python_tracer_level() != 0) {
    _this->_internal_set_python_tracer_level(from._internal_python_tracer_level());
  }
  if (from._internal_include_dataset_ops() != 0) {
    _this->_internal_set_include_dataset_ops(from._internal_include_dataset_ops());
  }
  if (from._internal_enable_hlo_proto() != 0) {
    _this->_internal_set_enable_hlo_proto(from._internal_enable_hlo_proto());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_device_type() != 0) {
    _this->_internal_set_device_type(from._internal_device_type());
  }
  if (from._internal_start_timestamp_ns() != 0) {
    _this->_internal_set_start_timestamp_ns(from._internal_start_timestamp_ns());
  }
  if (from._internal_duration_ms() != 0) {
    _this->_internal_set_duration_ms(from._internal_duration_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProfileOptions::CopyFrom(const ProfileOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ProfileOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfileOptions::IsInitialized() const {
  return true;
}

void ProfileOptions::InternalSwap(ProfileOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.repository_path_, lhs_arena,
      &other->_impl_.repository_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProfileOptions, _impl_.duration_ms_)
      + sizeof(ProfileOptions::_impl_.duration_ms_)
      - PROTOBUF_FIELD_OFFSET(ProfileOptions, _impl_.host_tracer_level_)>(
          reinterpret_cast<char*>(&_impl_.host_tracer_level_),
          reinterpret_cast<char*>(&other->_impl_.host_tracer_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProfileOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto_getter, &descriptor_table_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto_once,
      file_level_metadata_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto[0]);
}

// ===================================================================

class RemoteProfilerSessionManagerOptions::_Internal {
 public:
  static const ::tensorflow::ProfileOptions& profiler_options(const RemoteProfilerSessionManagerOptions* msg);
};

const ::tensorflow::ProfileOptions&
RemoteProfilerSessionManagerOptions::_Internal::profiler_options(const RemoteProfilerSessionManagerOptions* msg) {
  return *msg->_impl_.profiler_options_;
}
RemoteProfilerSessionManagerOptions::RemoteProfilerSessionManagerOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.RemoteProfilerSessionManagerOptions)
}
RemoteProfilerSessionManagerOptions::RemoteProfilerSessionManagerOptions(const RemoteProfilerSessionManagerOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoteProfilerSessionManagerOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.service_addresses_){from._impl_.service_addresses_}
    , decltype(_impl_.profiler_options_){nullptr}
    , decltype(_impl_.session_creation_timestamp_ns_){}
    , decltype(_impl_.max_session_duration_ms_){}
    , decltype(_impl_.delay_ms_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_profiler_options()) {
    _this->_impl_.profiler_options_ = new ::tensorflow::ProfileOptions(*from._impl_.profiler_options_);
  }
  ::memcpy(&_impl_.session_creation_timestamp_ns_, &from._impl_.session_creation_timestamp_ns_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.delay_ms_) -
    reinterpret_cast<char*>(&_impl_.session_creation_timestamp_ns_)) + sizeof(_impl_.delay_ms_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.RemoteProfilerSessionManagerOptions)
}

inline void RemoteProfilerSessionManagerOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.service_addresses_){arena}
    , decltype(_impl_.profiler_options_){nullptr}
    , decltype(_impl_.session_creation_timestamp_ns_){uint64_t{0u}}
    , decltype(_impl_.max_session_duration_ms_){uint64_t{0u}}
    , decltype(_impl_.delay_ms_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RemoteProfilerSessionManagerOptions::~RemoteProfilerSessionManagerOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.RemoteProfilerSessionManagerOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoteProfilerSessionManagerOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_addresses_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.profiler_options_;
}

void RemoteProfilerSessionManagerOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoteProfilerSessionManagerOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RemoteProfilerSessionManagerOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.service_addresses_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.profiler_options_ != nullptr) {
    delete _impl_.profiler_options_;
  }
  _impl_.profiler_options_ = nullptr;
  ::memset(&_impl_.session_creation_timestamp_ns_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.delay_ms_) -
      reinterpret_cast<char*>(&_impl_.session_creation_timestamp_ns_)) + sizeof(_impl_.delay_ms_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoteProfilerSessionManagerOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.ProfileOptions profiler_options = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_profiler_options(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string service_addresses = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_service_addresses();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.RemoteProfilerSessionManagerOptions.service_addresses"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 session_creation_timestamp_ns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.session_creation_timestamp_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 max_session_duration_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_session_duration_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 delay_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.delay_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoteProfilerSessionManagerOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RemoteProfilerSessionManagerOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.ProfileOptions profiler_options = 1;
  if (this->_internal_has_profiler_options()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::profiler_options(this),
        _Internal::profiler_options(this).GetCachedSize(), target, stream);
  }

  // repeated string service_addresses = 2;
  for (int i = 0, n = this->_internal_service_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_service_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RemoteProfilerSessionManagerOptions.service_addresses");
    target = stream->WriteString(2, s, target);
  }

  // uint64 session_creation_timestamp_ns = 3;
  if (this->_internal_session_creation_timestamp_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_session_creation_timestamp_ns(), target);
  }

  // uint64 max_session_duration_ms = 4;
  if (this->_internal_max_session_duration_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(4, this->_internal_max_session_duration_ms(), target);
  }

  // uint64 delay_ms = 5;
  if (this->_internal_delay_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_delay_ms(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RemoteProfilerSessionManagerOptions)
  return target;
}

size_t RemoteProfilerSessionManagerOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RemoteProfilerSessionManagerOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string service_addresses = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.service_addresses_.size());
  for (int i = 0, n = _impl_.service_addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.service_addresses_.Get(i));
  }

  // .tensorflow.ProfileOptions profiler_options = 1;
  if (this->_internal_has_profiler_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.profiler_options_);
  }

  // uint64 session_creation_timestamp_ns = 3;
  if (this->_internal_session_creation_timestamp_ns() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_session_creation_timestamp_ns());
  }

  // uint64 max_session_duration_ms = 4;
  if (this->_internal_max_session_duration_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_max_session_duration_ms());
  }

  // uint64 delay_ms = 5;
  if (this->_internal_delay_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_delay_ms());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoteProfilerSessionManagerOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoteProfilerSessionManagerOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoteProfilerSessionManagerOptions::GetClassData() const { return &_class_data_; }


void RemoteProfilerSessionManagerOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoteProfilerSessionManagerOptions*>(&to_msg);
  auto& from = static_cast<const RemoteProfilerSessionManagerOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RemoteProfilerSessionManagerOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.service_addresses_.MergeFrom(from._impl_.service_addresses_);
  if (from._internal_has_profiler_options()) {
    _this->_internal_mutable_profiler_options()->::tensorflow::ProfileOptions::MergeFrom(
        from._internal_profiler_options());
  }
  if (from._internal_session_creation_timestamp_ns() != 0) {
    _this->_internal_set_session_creation_timestamp_ns(from._internal_session_creation_timestamp_ns());
  }
  if (from._internal_max_session_duration_ms() != 0) {
    _this->_internal_set_max_session_duration_ms(from._internal_max_session_duration_ms());
  }
  if (from._internal_delay_ms() != 0) {
    _this->_internal_set_delay_ms(from._internal_delay_ms());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoteProfilerSessionManagerOptions::CopyFrom(const RemoteProfilerSessionManagerOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RemoteProfilerSessionManagerOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoteProfilerSessionManagerOptions::IsInitialized() const {
  return true;
}

void RemoteProfilerSessionManagerOptions::InternalSwap(RemoteProfilerSessionManagerOptions* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.service_addresses_.InternalSwap(&other->_impl_.service_addresses_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RemoteProfilerSessionManagerOptions, _impl_.delay_ms_)
      + sizeof(RemoteProfilerSessionManagerOptions::_impl_.delay_ms_)
      - PROTOBUF_FIELD_OFFSET(RemoteProfilerSessionManagerOptions, _impl_.profiler_options_)>(
          reinterpret_cast<char*>(&_impl_.profiler_options_),
          reinterpret_cast<char*>(&other->_impl_.profiler_options_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoteProfilerSessionManagerOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto_getter, &descriptor_table_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto_once,
      file_level_metadata_tsl_2fprofiler_2fprotobuf_2fprofiler_5foptions_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::ProfileOptions*
Arena::CreateMaybeMessage< ::tensorflow::ProfileOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ProfileOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RemoteProfilerSessionManagerOptions*
Arena::CreateMaybeMessage< ::tensorflow::RemoteProfilerSessionManagerOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RemoteProfilerSessionManagerOptions >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
