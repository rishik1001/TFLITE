// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tsl/profiler/protobuf/xplane.proto

#include "tsl/profiler/protobuf/xplane.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
namespace profiler {
PROTOBUF_CONSTEXPR XSpace::XSpace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.planes_)*/{}
  , /*decltype(_impl_.errors_)*/{}
  , /*decltype(_impl_.warnings_)*/{}
  , /*decltype(_impl_.hostnames_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct XSpaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XSpaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~XSpaceDefaultTypeInternal() {}
  union {
    XSpace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XSpaceDefaultTypeInternal _XSpace_default_instance_;
PROTOBUF_CONSTEXPR XPlane_EventMetadataEntry_DoNotUse::XPlane_EventMetadataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct XPlane_EventMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XPlane_EventMetadataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~XPlane_EventMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    XPlane_EventMetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XPlane_EventMetadataEntry_DoNotUseDefaultTypeInternal _XPlane_EventMetadataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR XPlane_StatMetadataEntry_DoNotUse::XPlane_StatMetadataEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct XPlane_StatMetadataEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XPlane_StatMetadataEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~XPlane_StatMetadataEntry_DoNotUseDefaultTypeInternal() {}
  union {
    XPlane_StatMetadataEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XPlane_StatMetadataEntry_DoNotUseDefaultTypeInternal _XPlane_StatMetadataEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR XPlane::XPlane(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lines_)*/{}
  , /*decltype(_impl_.event_metadata_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.stat_metadata_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct XPlaneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XPlaneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~XPlaneDefaultTypeInternal() {}
  union {
    XPlane _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XPlaneDefaultTypeInternal _XPlane_default_instance_;
PROTOBUF_CONSTEXPR XLine::XLine(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.timestamp_ns_)*/int64_t{0}
  , /*decltype(_impl_.duration_ps_)*/int64_t{0}
  , /*decltype(_impl_.display_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct XLineDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XLineDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~XLineDefaultTypeInternal() {}
  union {
    XLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XLineDefaultTypeInternal _XLine_default_instance_;
PROTOBUF_CONSTEXPR XEvent::XEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.metadata_id_)*/int64_t{0}
  , /*decltype(_impl_.duration_ps_)*/int64_t{0}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct XEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~XEventDefaultTypeInternal() {}
  union {
    XEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XEventDefaultTypeInternal _XEvent_default_instance_;
PROTOBUF_CONSTEXPR XStat::XStat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.metadata_id_)*/int64_t{0}
  , /*decltype(_impl_.value_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct XStatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XStatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~XStatDefaultTypeInternal() {}
  union {
    XStat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XStatDefaultTypeInternal _XStat_default_instance_;
PROTOBUF_CONSTEXPR XEventMetadata::XEventMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stats_)*/{}
  , /*decltype(_impl_.child_id_)*/{}
  , /*decltype(_impl_._child_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.metadata_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.display_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct XEventMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XEventMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~XEventMetadataDefaultTypeInternal() {}
  union {
    XEventMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XEventMetadataDefaultTypeInternal _XEventMetadata_default_instance_;
PROTOBUF_CONSTEXPR XStatMetadata::XStatMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct XStatMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR XStatMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~XStatMetadataDefaultTypeInternal() {}
  union {
    XStatMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 XStatMetadataDefaultTypeInternal _XStatMetadata_default_instance_;
}  // namespace profiler
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto[9];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto = nullptr;

const uint32_t TableStruct_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XSpace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XSpace, _impl_.planes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XSpace, _impl_.errors_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XSpace, _impl_.warnings_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XSpace, _impl_.hostnames_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XPlane_EventMetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XPlane_EventMetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XPlane_EventMetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XPlane_EventMetadataEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XPlane_StatMetadataEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XPlane_StatMetadataEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XPlane_StatMetadataEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XPlane_StatMetadataEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XPlane, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XPlane, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XPlane, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XPlane, _impl_.lines_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XPlane, _impl_.event_metadata_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XPlane, _impl_.stat_metadata_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XPlane, _impl_.stats_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XLine, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XLine, _impl_.display_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XLine, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XLine, _impl_.display_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XLine, _impl_.timestamp_ns_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XLine, _impl_.duration_ps_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XLine, _impl_.events_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XEvent, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XEvent, _impl_.metadata_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XEvent, _impl_.duration_ps_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XEvent, _impl_.stats_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XEvent, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XStat, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XStat, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XStat, _impl_.metadata_id_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XStat, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XEventMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XEventMetadata, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XEventMetadata, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XEventMetadata, _impl_.display_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XEventMetadata, _impl_.metadata_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XEventMetadata, _impl_.stats_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XEventMetadata, _impl_.child_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XStatMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XStatMetadata, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XStatMetadata, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::profiler::XStatMetadata, _impl_.description_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::profiler::XSpace)},
  { 10, 18, -1, sizeof(::tensorflow::profiler::XPlane_EventMetadataEntry_DoNotUse)},
  { 20, 28, -1, sizeof(::tensorflow::profiler::XPlane_StatMetadataEntry_DoNotUse)},
  { 30, -1, -1, sizeof(::tensorflow::profiler::XPlane)},
  { 42, -1, -1, sizeof(::tensorflow::profiler::XLine)},
  { 55, -1, -1, sizeof(::tensorflow::profiler::XEvent)},
  { 67, -1, -1, sizeof(::tensorflow::profiler::XStat)},
  { 81, -1, -1, sizeof(::tensorflow::profiler::XEventMetadata)},
  { 93, -1, -1, sizeof(::tensorflow::profiler::XStatMetadata)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::profiler::_XSpace_default_instance_._instance,
  &::tensorflow::profiler::_XPlane_EventMetadataEntry_DoNotUse_default_instance_._instance,
  &::tensorflow::profiler::_XPlane_StatMetadataEntry_DoNotUse_default_instance_._instance,
  &::tensorflow::profiler::_XPlane_default_instance_._instance,
  &::tensorflow::profiler::_XLine_default_instance_._instance,
  &::tensorflow::profiler::_XEvent_default_instance_._instance,
  &::tensorflow::profiler::_XStat_default_instance_._instance,
  &::tensorflow::profiler::_XEventMetadata_default_instance_._instance,
  &::tensorflow::profiler::_XStatMetadata_default_instance_._instance,
};

const char descriptor_table_protodef_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\"tsl/profiler/protobuf/xplane.proto\022\023te"
  "nsorflow.profiler\"j\n\006XSpace\022+\n\006planes\030\001 "
  "\003(\0132\033.tensorflow.profiler.XPlane\022\016\n\006erro"
  "rs\030\002 \003(\t\022\020\n\010warnings\030\003 \003(\t\022\021\n\thostnames\030"
  "\004 \003(\t\"\272\003\n\006XPlane\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001"
  "(\t\022)\n\005lines\030\003 \003(\0132\032.tensorflow.profiler."
  "XLine\022F\n\016event_metadata\030\004 \003(\0132..tensorfl"
  "ow.profiler.XPlane.EventMetadataEntry\022D\n"
  "\rstat_metadata\030\005 \003(\0132-.tensorflow.profil"
  "er.XPlane.StatMetadataEntry\022)\n\005stats\030\006 \003"
  "(\0132\032.tensorflow.profiler.XStat\032Y\n\022EventM"
  "etadataEntry\022\013\n\003key\030\001 \001(\003\0222\n\005value\030\002 \001(\013"
  "2#.tensorflow.profiler.XEventMetadata:\0028"
  "\001\032W\n\021StatMetadataEntry\022\013\n\003key\030\001 \001(\003\0221\n\005v"
  "alue\030\002 \001(\0132\".tensorflow.profiler.XStatMe"
  "tadata:\0028\001\"\273\001\n\005XLine\022\n\n\002id\030\001 \001(\003\022\022\n\ndisp"
  "lay_id\030\n \001(\003\022\014\n\004name\030\002 \001(\t\022\024\n\014display_na"
  "me\030\013 \001(\t\022\024\n\014timestamp_ns\030\003 \001(\003\022\023\n\013durati"
  "on_ps\030\t \001(\003\022+\n\006events\030\004 \003(\0132\033.tensorflow"
  ".profiler.XEventJ\004\010\005\020\006J\004\010\006\020\007J\004\010\007\020\010J\004\010\010\020\t"
  "\"\225\001\n\006XEvent\022\023\n\013metadata_id\030\001 \001(\003\022\023\n\toffs"
  "et_ps\030\002 \001(\003H\000\022\031\n\017num_occurrences\030\005 \001(\003H\000"
  "\022\023\n\013duration_ps\030\003 \001(\003\022)\n\005stats\030\004 \003(\0132\032.t"
  "ensorflow.profiler.XStatB\006\n\004data\"\255\001\n\005XSt"
  "at\022\023\n\013metadata_id\030\001 \001(\003\022\026\n\014double_value\030"
  "\002 \001(\001H\000\022\026\n\014uint64_value\030\003 \001(\004H\000\022\025\n\013int64"
  "_value\030\004 \001(\003H\000\022\023\n\tstr_value\030\005 \001(\tH\000\022\025\n\013b"
  "ytes_value\030\006 \001(\014H\000\022\023\n\tref_value\030\007 \001(\004H\000B"
  "\007\n\005value\"\217\001\n\016XEventMetadata\022\n\n\002id\030\001 \001(\003\022"
  "\014\n\004name\030\002 \001(\t\022\024\n\014display_name\030\004 \001(\t\022\020\n\010m"
  "etadata\030\003 \001(\014\022)\n\005stats\030\005 \003(\0132\032.tensorflo"
  "w.profiler.XStat\022\020\n\010child_id\030\006 \003(\003\">\n\rXS"
  "tatMetadata\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\022\023\n"
  "\013description\030\003 \001(\tB\003\370\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto = {
    false, false, 1351, descriptor_table_protodef_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto,
    "tsl/profiler/protobuf/xplane.proto",
    &descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto_once, nullptr, 0, 9,
    schemas, file_default_instances, TableStruct_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto::offsets,
    file_level_metadata_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto, file_level_enum_descriptors_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto,
    file_level_service_descriptors_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto_getter() {
  return &descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto(&descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto);
namespace tensorflow {
namespace profiler {

// ===================================================================

class XSpace::_Internal {
 public:
};

XSpace::XSpace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.profiler.XSpace)
}
XSpace::XSpace(const XSpace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  XSpace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.planes_){from._impl_.planes_}
    , decltype(_impl_.errors_){from._impl_.errors_}
    , decltype(_impl_.warnings_){from._impl_.warnings_}
    , decltype(_impl_.hostnames_){from._impl_.hostnames_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.XSpace)
}

inline void XSpace::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.planes_){arena}
    , decltype(_impl_.errors_){arena}
    , decltype(_impl_.warnings_){arena}
    , decltype(_impl_.hostnames_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

XSpace::~XSpace() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.XSpace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void XSpace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.planes_.~RepeatedPtrField();
  _impl_.errors_.~RepeatedPtrField();
  _impl_.warnings_.~RepeatedPtrField();
  _impl_.hostnames_.~RepeatedPtrField();
}

void XSpace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void XSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.XSpace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.planes_.Clear();
  _impl_.errors_.Clear();
  _impl_.warnings_.Clear();
  _impl_.hostnames_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XSpace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.profiler.XPlane planes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_planes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string errors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_errors();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.profiler.XSpace.errors"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string warnings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_warnings();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.profiler.XSpace.warnings"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string hostnames = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_hostnames();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.profiler.XSpace.hostnames"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* XSpace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.XSpace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.profiler.XPlane planes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_planes_size()); i < n; i++) {
    const auto& repfield = this->_internal_planes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string errors = 2;
  for (int i = 0, n = this->_internal_errors_size(); i < n; i++) {
    const auto& s = this->_internal_errors(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.XSpace.errors");
    target = stream->WriteString(2, s, target);
  }

  // repeated string warnings = 3;
  for (int i = 0, n = this->_internal_warnings_size(); i < n; i++) {
    const auto& s = this->_internal_warnings(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.XSpace.warnings");
    target = stream->WriteString(3, s, target);
  }

  // repeated string hostnames = 4;
  for (int i = 0, n = this->_internal_hostnames_size(); i < n; i++) {
    const auto& s = this->_internal_hostnames(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.XSpace.hostnames");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.XSpace)
  return target;
}

size_t XSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.XSpace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.profiler.XPlane planes = 1;
  total_size += 1UL * this->_internal_planes_size();
  for (const auto& msg : this->_impl_.planes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string errors = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.errors_.size());
  for (int i = 0, n = _impl_.errors_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.errors_.Get(i));
  }

  // repeated string warnings = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.warnings_.size());
  for (int i = 0, n = _impl_.warnings_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.warnings_.Get(i));
  }

  // repeated string hostnames = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.hostnames_.size());
  for (int i = 0, n = _impl_.hostnames_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.hostnames_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XSpace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    XSpace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XSpace::GetClassData() const { return &_class_data_; }


void XSpace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<XSpace*>(&to_msg);
  auto& from = static_cast<const XSpace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.XSpace)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.planes_.MergeFrom(from._impl_.planes_);
  _this->_impl_.errors_.MergeFrom(from._impl_.errors_);
  _this->_impl_.warnings_.MergeFrom(from._impl_.warnings_);
  _this->_impl_.hostnames_.MergeFrom(from._impl_.hostnames_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void XSpace::CopyFrom(const XSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.XSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XSpace::IsInitialized() const {
  return true;
}

void XSpace::InternalSwap(XSpace* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.planes_.InternalSwap(&other->_impl_.planes_);
  _impl_.errors_.InternalSwap(&other->_impl_.errors_);
  _impl_.warnings_.InternalSwap(&other->_impl_.warnings_);
  _impl_.hostnames_.InternalSwap(&other->_impl_.hostnames_);
}

::PROTOBUF_NAMESPACE_ID::Metadata XSpace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto_getter, &descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto_once,
      file_level_metadata_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto[0]);
}

// ===================================================================

XPlane_EventMetadataEntry_DoNotUse::XPlane_EventMetadataEntry_DoNotUse() {}
XPlane_EventMetadataEntry_DoNotUse::XPlane_EventMetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void XPlane_EventMetadataEntry_DoNotUse::MergeFrom(const XPlane_EventMetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata XPlane_EventMetadataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto_getter, &descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto_once,
      file_level_metadata_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto[1]);
}

// ===================================================================

XPlane_StatMetadataEntry_DoNotUse::XPlane_StatMetadataEntry_DoNotUse() {}
XPlane_StatMetadataEntry_DoNotUse::XPlane_StatMetadataEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void XPlane_StatMetadataEntry_DoNotUse::MergeFrom(const XPlane_StatMetadataEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata XPlane_StatMetadataEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto_getter, &descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto_once,
      file_level_metadata_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto[2]);
}

// ===================================================================

class XPlane::_Internal {
 public:
};

XPlane::XPlane(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &XPlane::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:tensorflow.profiler.XPlane)
}
XPlane::XPlane(const XPlane& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  XPlane* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lines_){from._impl_.lines_}
    , /*decltype(_impl_.event_metadata_)*/{}
    , /*decltype(_impl_.stat_metadata_)*/{}
    , decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.event_metadata_.MergeFrom(from._impl_.event_metadata_);
  _this->_impl_.stat_metadata_.MergeFrom(from._impl_.stat_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.XPlane)
}

inline void XPlane::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lines_){arena}
    , /*decltype(_impl_.event_metadata_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_.stat_metadata_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.stats_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

XPlane::~XPlane() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.XPlane)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void XPlane::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lines_.~RepeatedPtrField();
  _impl_.event_metadata_.Destruct();
  _impl_.event_metadata_.~MapField();
  _impl_.stat_metadata_.Destruct();
  _impl_.stat_metadata_.~MapField();
  _impl_.stats_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void XPlane::ArenaDtor(void* object) {
  XPlane* _this = reinterpret_cast< XPlane* >(object);
  _this->_impl_.event_metadata_.Destruct();
  _this->_impl_.stat_metadata_.Destruct();
}
void XPlane::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void XPlane::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.XPlane)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lines_.Clear();
  _impl_.event_metadata_.Clear();
  _impl_.stat_metadata_.Clear();
  _impl_.stats_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XPlane::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.profiler.XPlane.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.profiler.XLine lines = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lines(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int64, .tensorflow.profiler.XEventMetadata> event_metadata = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.event_metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<int64, .tensorflow.profiler.XStatMetadata> stat_metadata = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.stat_metadata_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.profiler.XStat stats = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* XPlane::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.XPlane)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.XPlane.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .tensorflow.profiler.XLine lines = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_lines_size()); i < n; i++) {
    const auto& repfield = this->_internal_lines(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // map<int64, .tensorflow.profiler.XEventMetadata> event_metadata = 4;
  if (!this->_internal_event_metadata().empty()) {
    using MapType = ::_pb::Map<int64_t, ::tensorflow::profiler::XEventMetadata>;
    using WireHelper = XPlane_EventMetadataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_event_metadata();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(4, entry.first, entry.second, target, stream);
      }
    }
  }

  // map<int64, .tensorflow.profiler.XStatMetadata> stat_metadata = 5;
  if (!this->_internal_stat_metadata().empty()) {
    using MapType = ::_pb::Map<int64_t, ::tensorflow::profiler::XStatMetadata>;
    using WireHelper = XPlane_StatMetadataEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_stat_metadata();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
      }
    }
  }

  // repeated .tensorflow.profiler.XStat stats = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.XPlane)
  return target;
}

size_t XPlane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.XPlane)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.profiler.XLine lines = 3;
  total_size += 1UL * this->_internal_lines_size();
  for (const auto& msg : this->_impl_.lines_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<int64, .tensorflow.profiler.XEventMetadata> event_metadata = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_event_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::tensorflow::profiler::XEventMetadata >::const_iterator
      it = this->_internal_event_metadata().begin();
      it != this->_internal_event_metadata().end(); ++it) {
    total_size += XPlane_EventMetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<int64, .tensorflow.profiler.XStatMetadata> stat_metadata = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_stat_metadata_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int64_t, ::tensorflow::profiler::XStatMetadata >::const_iterator
      it = this->_internal_stat_metadata().begin();
      it != this->_internal_stat_metadata().end(); ++it) {
    total_size += XPlane_StatMetadataEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .tensorflow.profiler.XStat stats = 6;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XPlane::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    XPlane::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XPlane::GetClassData() const { return &_class_data_; }


void XPlane::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<XPlane*>(&to_msg);
  auto& from = static_cast<const XPlane&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.XPlane)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lines_.MergeFrom(from._impl_.lines_);
  _this->_impl_.event_metadata_.MergeFrom(from._impl_.event_metadata_);
  _this->_impl_.stat_metadata_.MergeFrom(from._impl_.stat_metadata_);
  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void XPlane::CopyFrom(const XPlane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.XPlane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XPlane::IsInitialized() const {
  return true;
}

void XPlane::InternalSwap(XPlane* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lines_.InternalSwap(&other->_impl_.lines_);
  _impl_.event_metadata_.InternalSwap(&other->_impl_.event_metadata_);
  _impl_.stat_metadata_.InternalSwap(&other->_impl_.stat_metadata_);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata XPlane::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto_getter, &descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto_once,
      file_level_metadata_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto[3]);
}

// ===================================================================

class XLine::_Internal {
 public:
};

XLine::XLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.profiler.XLine)
}
XLine::XLine(const XLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  XLine* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.timestamp_ns_){}
    , decltype(_impl_.duration_ps_){}
    , decltype(_impl_.display_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.display_id_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.display_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.XLine)
}

inline void XLine::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.timestamp_ns_){int64_t{0}}
    , decltype(_impl_.duration_ps_){int64_t{0}}
    , decltype(_impl_.display_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

XLine::~XLine() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.XLine)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void XLine::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.display_name_.Destroy();
}

void XLine::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void XLine::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.XLine)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.display_name_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.display_id_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.display_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XLine::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.profiler.XLine.name"));
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp_ns = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.timestamp_ns_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.profiler.XEvent events = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 duration_ps = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.duration_ps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 display_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.display_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string display_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.profiler.XLine.display_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* XLine::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.XLine)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.XLine.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int64 timestamp_ns = 3;
  if (this->_internal_timestamp_ns() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_timestamp_ns(), target);
  }

  // repeated .tensorflow.profiler.XEvent events = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 duration_ps = 9;
  if (this->_internal_duration_ps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_duration_ps(), target);
  }

  // int64 display_id = 10;
  if (this->_internal_display_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_display_id(), target);
  }

  // string display_name = 11;
  if (!this->_internal_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.XLine.display_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_display_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.XLine)
  return target;
}

size_t XLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.XLine)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.profiler.XEvent events = 4;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string display_name = 11;
  if (!this->_internal_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 timestamp_ns = 3;
  if (this->_internal_timestamp_ns() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp_ns());
  }

  // int64 duration_ps = 9;
  if (this->_internal_duration_ps() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_duration_ps());
  }

  // int64 display_id = 10;
  if (this->_internal_display_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_display_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XLine::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    XLine::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XLine::GetClassData() const { return &_class_data_; }


void XLine::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<XLine*>(&to_msg);
  auto& from = static_cast<const XLine&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.XLine)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_display_name().empty()) {
    _this->_internal_set_display_name(from._internal_display_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_timestamp_ns() != 0) {
    _this->_internal_set_timestamp_ns(from._internal_timestamp_ns());
  }
  if (from._internal_duration_ps() != 0) {
    _this->_internal_set_duration_ps(from._internal_duration_ps());
  }
  if (from._internal_display_id() != 0) {
    _this->_internal_set_display_id(from._internal_display_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void XLine::CopyFrom(const XLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.XLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XLine::IsInitialized() const {
  return true;
}

void XLine::InternalSwap(XLine* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_name_, lhs_arena,
      &other->_impl_.display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XLine, _impl_.display_id_)
      + sizeof(XLine::_impl_.display_id_)
      - PROTOBUF_FIELD_OFFSET(XLine, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata XLine::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto_getter, &descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto_once,
      file_level_metadata_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto[4]);
}

// ===================================================================

class XEvent::_Internal {
 public:
};

XEvent::XEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.profiler.XEvent)
}
XEvent::XEvent(const XEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  XEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.metadata_id_){}
    , decltype(_impl_.duration_ps_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.metadata_id_, &from._impl_.metadata_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.duration_ps_) -
    reinterpret_cast<char*>(&_impl_.metadata_id_)) + sizeof(_impl_.duration_ps_));
  clear_has_data();
  switch (from.data_case()) {
    case kOffsetPs: {
      _this->_internal_set_offset_ps(from._internal_offset_ps());
      break;
    }
    case kNumOccurrences: {
      _this->_internal_set_num_occurrences(from._internal_num_occurrences());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.XEvent)
}

inline void XEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){arena}
    , decltype(_impl_.metadata_id_){int64_t{0}}
    , decltype(_impl_.duration_ps_){int64_t{0}}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_data();
}

XEvent::~XEvent() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.XEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void XEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
  if (has_data()) {
    clear_data();
  }
}

void XEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void XEvent::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.profiler.XEvent)
  switch (data_case()) {
    case kOffsetPs: {
      // No need to clear
      break;
    }
    case kNumOccurrences: {
      // No need to clear
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void XEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.XEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  ::memset(&_impl_.metadata_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.duration_ps_) -
      reinterpret_cast<char*>(&_impl_.metadata_id_)) + sizeof(_impl_.duration_ps_));
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 metadata_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.metadata_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 offset_ps = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_offset_ps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 duration_ps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.duration_ps_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.profiler.XStat stats = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 num_occurrences = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _internal_set_num_occurrences(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* XEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.XEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 metadata_id = 1;
  if (this->_internal_metadata_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_metadata_id(), target);
  }

  // int64 offset_ps = 2;
  if (_internal_has_offset_ps()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_offset_ps(), target);
  }

  // int64 duration_ps = 3;
  if (this->_internal_duration_ps() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_duration_ps(), target);
  }

  // repeated .tensorflow.profiler.XStat stats = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 num_occurrences = 5;
  if (_internal_has_num_occurrences()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_num_occurrences(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.XEvent)
  return target;
}

size_t XEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.XEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.profiler.XStat stats = 4;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int64 metadata_id = 1;
  if (this->_internal_metadata_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_metadata_id());
  }

  // int64 duration_ps = 3;
  if (this->_internal_duration_ps() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_duration_ps());
  }

  switch (data_case()) {
    // int64 offset_ps = 2;
    case kOffsetPs: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_offset_ps());
      break;
    }
    // int64 num_occurrences = 5;
    case kNumOccurrences: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_occurrences());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    XEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XEvent::GetClassData() const { return &_class_data_; }


void XEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<XEvent*>(&to_msg);
  auto& from = static_cast<const XEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.XEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  if (from._internal_metadata_id() != 0) {
    _this->_internal_set_metadata_id(from._internal_metadata_id());
  }
  if (from._internal_duration_ps() != 0) {
    _this->_internal_set_duration_ps(from._internal_duration_ps());
  }
  switch (from.data_case()) {
    case kOffsetPs: {
      _this->_internal_set_offset_ps(from._internal_offset_ps());
      break;
    }
    case kNumOccurrences: {
      _this->_internal_set_num_occurrences(from._internal_num_occurrences());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void XEvent::CopyFrom(const XEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.XEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XEvent::IsInitialized() const {
  return true;
}

void XEvent::InternalSwap(XEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(XEvent, _impl_.duration_ps_)
      + sizeof(XEvent::_impl_.duration_ps_)
      - PROTOBUF_FIELD_OFFSET(XEvent, _impl_.metadata_id_)>(
          reinterpret_cast<char*>(&_impl_.metadata_id_),
          reinterpret_cast<char*>(&other->_impl_.metadata_id_));
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata XEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto_getter, &descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto_once,
      file_level_metadata_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto[5]);
}

// ===================================================================

class XStat::_Internal {
 public:
};

XStat::XStat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.profiler.XStat)
}
XStat::XStat(const XStat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  XStat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_id_){}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.metadata_id_ = from._impl_.metadata_id_;
  clear_has_value();
  switch (from.value_case()) {
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kUint64Value: {
      _this->_internal_set_uint64_value(from._internal_uint64_value());
      break;
    }
    case kInt64Value: {
      _this->_internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case kStrValue: {
      _this->_internal_set_str_value(from._internal_str_value());
      break;
    }
    case kBytesValue: {
      _this->_internal_set_bytes_value(from._internal_bytes_value());
      break;
    }
    case kRefValue: {
      _this->_internal_set_ref_value(from._internal_ref_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.XStat)
}

inline void XStat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.metadata_id_){int64_t{0}}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_value();
}

XStat::~XStat() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.XStat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void XStat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_value()) {
    clear_value();
  }
}

void XStat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void XStat::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.profiler.XStat)
  switch (value_case()) {
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kUint64Value: {
      // No need to clear
      break;
    }
    case kInt64Value: {
      // No need to clear
      break;
    }
    case kStrValue: {
      _impl_.value_.str_value_.Destroy();
      break;
    }
    case kBytesValue: {
      _impl_.value_.bytes_value_.Destroy();
      break;
    }
    case kRefValue: {
      // No need to clear
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = VALUE_NOT_SET;
}


void XStat::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.XStat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.metadata_id_ = int64_t{0};
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XStat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 metadata_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.metadata_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double double_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 uint64_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _internal_set_uint64_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 int64_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string str_value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_str_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.profiler.XStat.str_value"));
        } else
          goto handle_unusual;
        continue;
      // bytes bytes_value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_bytes_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 ref_value = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _internal_set_ref_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* XStat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.XStat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 metadata_id = 1;
  if (this->_internal_metadata_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_metadata_id(), target);
  }

  // double double_value = 2;
  if (_internal_has_double_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_double_value(), target);
  }

  // uint64 uint64_value = 3;
  if (_internal_has_uint64_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(3, this->_internal_uint64_value(), target);
  }

  // int64 int64_value = 4;
  if (_internal_has_int64_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_int64_value(), target);
  }

  // string str_value = 5;
  if (_internal_has_str_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str_value().data(), static_cast<int>(this->_internal_str_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.XStat.str_value");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_str_value(), target);
  }

  // bytes bytes_value = 6;
  if (_internal_has_bytes_value()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_bytes_value(), target);
  }

  // uint64 ref_value = 7;
  if (_internal_has_ref_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_ref_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.XStat)
  return target;
}

size_t XStat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.XStat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 metadata_id = 1;
  if (this->_internal_metadata_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_metadata_id());
  }

  switch (value_case()) {
    // double double_value = 2;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // uint64 uint64_value = 3;
    case kUint64Value: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_uint64_value());
      break;
    }
    // int64 int64_value = 4;
    case kInt64Value: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_int64_value());
      break;
    }
    // string str_value = 5;
    case kStrValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_str_value());
      break;
    }
    // bytes bytes_value = 6;
    case kBytesValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_bytes_value());
      break;
    }
    // uint64 ref_value = 7;
    case kRefValue: {
      total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_ref_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XStat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    XStat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XStat::GetClassData() const { return &_class_data_; }


void XStat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<XStat*>(&to_msg);
  auto& from = static_cast<const XStat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.XStat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_metadata_id() != 0) {
    _this->_internal_set_metadata_id(from._internal_metadata_id());
  }
  switch (from.value_case()) {
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kUint64Value: {
      _this->_internal_set_uint64_value(from._internal_uint64_value());
      break;
    }
    case kInt64Value: {
      _this->_internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case kStrValue: {
      _this->_internal_set_str_value(from._internal_str_value());
      break;
    }
    case kBytesValue: {
      _this->_internal_set_bytes_value(from._internal_bytes_value());
      break;
    }
    case kRefValue: {
      _this->_internal_set_ref_value(from._internal_ref_value());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void XStat::CopyFrom(const XStat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.XStat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XStat::IsInitialized() const {
  return true;
}

void XStat::InternalSwap(XStat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.metadata_id_, other->_impl_.metadata_id_);
  swap(_impl_.value_, other->_impl_.value_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata XStat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto_getter, &descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto_once,
      file_level_metadata_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto[6]);
}

// ===================================================================

class XEventMetadata::_Internal {
 public:
};

XEventMetadata::XEventMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.profiler.XEventMetadata)
}
XEventMetadata::XEventMetadata(const XEventMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  XEventMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){from._impl_.stats_}
    , decltype(_impl_.child_id_){from._impl_.child_id_}
    , /*decltype(_impl_._child_id_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata().empty()) {
    _this->_impl_.metadata_.Set(from._internal_metadata(), 
      _this->GetArenaForAllocation());
  }
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.XEventMetadata)
}

inline void XEventMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stats_){arena}
    , decltype(_impl_.child_id_){arena}
    , /*decltype(_impl_._child_id_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.metadata_){}
    , decltype(_impl_.display_name_){}
    , decltype(_impl_.id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.metadata_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

XEventMetadata::~XEventMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.XEventMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void XEventMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stats_.~RepeatedPtrField();
  _impl_.child_id_.~RepeatedField();
  _impl_.name_.Destroy();
  _impl_.metadata_.Destroy();
  _impl_.display_name_.Destroy();
}

void XEventMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void XEventMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.XEventMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stats_.Clear();
  _impl_.child_id_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.metadata_.ClearToEmpty();
  _impl_.display_name_.ClearToEmpty();
  _impl_.id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XEventMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.profiler.XEventMetadata.name"));
        } else
          goto handle_unusual;
        continue;
      // bytes metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string display_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.profiler.XEventMetadata.display_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.profiler.XStat stats = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_stats(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 child_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_child_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_child_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* XEventMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.XEventMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.XEventMetadata.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // bytes metadata = 3;
  if (!this->_internal_metadata().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_metadata(), target);
  }

  // string display_name = 4;
  if (!this->_internal_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.XEventMetadata.display_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_display_name(), target);
  }

  // repeated .tensorflow.profiler.XStat stats = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_stats_size()); i < n; i++) {
    const auto& repfield = this->_internal_stats(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated int64 child_id = 6;
  {
    int byte_size = _impl_._child_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          6, _internal_child_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.XEventMetadata)
  return target;
}

size_t XEventMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.XEventMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.profiler.XStat stats = 5;
  total_size += 1UL * this->_internal_stats_size();
  for (const auto& msg : this->_impl_.stats_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int64 child_id = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.child_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._child_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes metadata = 3;
  if (!this->_internal_metadata().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_metadata());
  }

  // string display_name = 4;
  if (!this->_internal_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XEventMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    XEventMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XEventMetadata::GetClassData() const { return &_class_data_; }


void XEventMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<XEventMetadata*>(&to_msg);
  auto& from = static_cast<const XEventMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.XEventMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stats_.MergeFrom(from._impl_.stats_);
  _this->_impl_.child_id_.MergeFrom(from._impl_.child_id_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_metadata().empty()) {
    _this->_internal_set_metadata(from._internal_metadata());
  }
  if (!from._internal_display_name().empty()) {
    _this->_internal_set_display_name(from._internal_display_name());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void XEventMetadata::CopyFrom(const XEventMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.XEventMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XEventMetadata::IsInitialized() const {
  return true;
}

void XEventMetadata::InternalSwap(XEventMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stats_.InternalSwap(&other->_impl_.stats_);
  _impl_.child_id_.InternalSwap(&other->_impl_.child_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.metadata_, lhs_arena,
      &other->_impl_.metadata_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.display_name_, lhs_arena,
      &other->_impl_.display_name_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata XEventMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto_getter, &descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto_once,
      file_level_metadata_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto[7]);
}

// ===================================================================

class XStatMetadata::_Internal {
 public:
};

XStatMetadata::XStatMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.profiler.XStatMetadata)
}
XStatMetadata::XStatMetadata(const XStatMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  XStatMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    _this->_impl_.description_.Set(from._internal_description(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.id_ = from._impl_.id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.profiler.XStatMetadata)
}

inline void XStatMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.description_){}
    , decltype(_impl_.id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

XStatMetadata::~XStatMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.profiler.XStatMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void XStatMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.description_.Destroy();
}

void XStatMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void XStatMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.profiler.XStatMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XStatMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.profiler.XStatMetadata.name"));
        } else
          goto handle_unusual;
        continue;
      // string description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.profiler.XStatMetadata.description"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* XStatMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.profiler.XStatMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.XStatMetadata.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.profiler.XStatMetadata.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.profiler.XStatMetadata)
  return target;
}

size_t XStatMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.profiler.XStatMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string description = 3;
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XStatMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    XStatMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XStatMetadata::GetClassData() const { return &_class_data_; }


void XStatMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<XStatMetadata*>(&to_msg);
  auto& from = static_cast<const XStatMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.profiler.XStatMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void XStatMetadata::CopyFrom(const XStatMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.profiler.XStatMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XStatMetadata::IsInitialized() const {
  return true;
}

void XStatMetadata::InternalSwap(XStatMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.description_, lhs_arena,
      &other->_impl_.description_, rhs_arena
  );
  swap(_impl_.id_, other->_impl_.id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata XStatMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto_getter, &descriptor_table_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto_once,
      file_level_metadata_tsl_2fprofiler_2fprotobuf_2fxplane_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace profiler
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::XSpace*
Arena::CreateMaybeMessage< ::tensorflow::profiler::XSpace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::profiler::XSpace >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::XPlane_EventMetadataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tensorflow::profiler::XPlane_EventMetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::profiler::XPlane_EventMetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::XPlane_StatMetadataEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tensorflow::profiler::XPlane_StatMetadataEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::profiler::XPlane_StatMetadataEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::XPlane*
Arena::CreateMaybeMessage< ::tensorflow::profiler::XPlane >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::profiler::XPlane >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::XLine*
Arena::CreateMaybeMessage< ::tensorflow::profiler::XLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::profiler::XLine >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::XEvent*
Arena::CreateMaybeMessage< ::tensorflow::profiler::XEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::profiler::XEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::XStat*
Arena::CreateMaybeMessage< ::tensorflow::profiler::XStat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::profiler::XStat >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::XEventMetadata*
Arena::CreateMaybeMessage< ::tensorflow::profiler::XEventMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::profiler::XEventMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::profiler::XStatMetadata*
Arena::CreateMaybeMessage< ::tensorflow::profiler::XStatMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::profiler::XStatMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
