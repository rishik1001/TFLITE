// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tsl/protobuf/histogram.proto

#include "tsl/protobuf/histogram.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR HistogramProto::HistogramProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bucket_limit_)*/{}
  , /*decltype(_impl_.bucket_)*/{}
  , /*decltype(_impl_.min_)*/0
  , /*decltype(_impl_.max_)*/0
  , /*decltype(_impl_.num_)*/0
  , /*decltype(_impl_.sum_)*/0
  , /*decltype(_impl_.sum_squares_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HistogramProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HistogramProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HistogramProtoDefaultTypeInternal() {}
  union {
    HistogramProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HistogramProtoDefaultTypeInternal _HistogramProto_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tsl_2fprotobuf_2fhistogram_2eproto[1];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tsl_2fprotobuf_2fhistogram_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tsl_2fprotobuf_2fhistogram_2eproto = nullptr;

const uint32_t TableStruct_tsl_2fprotobuf_2fhistogram_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::HistogramProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::HistogramProto, _impl_.min_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::HistogramProto, _impl_.max_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::HistogramProto, _impl_.num_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::HistogramProto, _impl_.sum_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::HistogramProto, _impl_.sum_squares_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::HistogramProto, _impl_.bucket_limit_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::HistogramProto, _impl_.bucket_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::HistogramProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_HistogramProto_default_instance_._instance,
};

const char descriptor_table_protodef_tsl_2fprotobuf_2fhistogram_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034tsl/protobuf/histogram.proto\022\ntensorfl"
  "ow\"\207\001\n\016HistogramProto\022\013\n\003min\030\001 \001(\001\022\013\n\003ma"
  "x\030\002 \001(\001\022\013\n\003num\030\003 \001(\001\022\013\n\003sum\030\004 \001(\001\022\023\n\013sum"
  "_squares\030\005 \001(\001\022\030\n\014bucket_limit\030\006 \003(\001B\002\020\001"
  "\022\022\n\006bucket\030\007 \003(\001B\002\020\001B\\\n\030org.tensorflow.f"
  "rameworkP\001Z;github.com/google/tsl/tsl/go"
  "/core/protobuf/summary_go_proto\370\001\001b\006prot"
  "o3"
  ;
static ::_pbi::once_flag descriptor_table_tsl_2fprotobuf_2fhistogram_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tsl_2fprotobuf_2fhistogram_2eproto = {
    false, false, 282, descriptor_table_protodef_tsl_2fprotobuf_2fhistogram_2eproto,
    "tsl/protobuf/histogram.proto",
    &descriptor_table_tsl_2fprotobuf_2fhistogram_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_tsl_2fprotobuf_2fhistogram_2eproto::offsets,
    file_level_metadata_tsl_2fprotobuf_2fhistogram_2eproto, file_level_enum_descriptors_tsl_2fprotobuf_2fhistogram_2eproto,
    file_level_service_descriptors_tsl_2fprotobuf_2fhistogram_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tsl_2fprotobuf_2fhistogram_2eproto_getter() {
  return &descriptor_table_tsl_2fprotobuf_2fhistogram_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tsl_2fprotobuf_2fhistogram_2eproto(&descriptor_table_tsl_2fprotobuf_2fhistogram_2eproto);
namespace tensorflow {

// ===================================================================

class HistogramProto::_Internal {
 public:
};

HistogramProto::HistogramProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.HistogramProto)
}
HistogramProto::HistogramProto(const HistogramProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HistogramProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bucket_limit_){from._impl_.bucket_limit_}
    , decltype(_impl_.bucket_){from._impl_.bucket_}
    , decltype(_impl_.min_){}
    , decltype(_impl_.max_){}
    , decltype(_impl_.num_){}
    , decltype(_impl_.sum_){}
    , decltype(_impl_.sum_squares_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.min_, &from._impl_.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sum_squares_) -
    reinterpret_cast<char*>(&_impl_.min_)) + sizeof(_impl_.sum_squares_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.HistogramProto)
}

inline void HistogramProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bucket_limit_){arena}
    , decltype(_impl_.bucket_){arena}
    , decltype(_impl_.min_){0}
    , decltype(_impl_.max_){0}
    , decltype(_impl_.num_){0}
    , decltype(_impl_.sum_){0}
    , decltype(_impl_.sum_squares_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HistogramProto::~HistogramProto() {
  // @@protoc_insertion_point(destructor:tensorflow.HistogramProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HistogramProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bucket_limit_.~RepeatedField();
  _impl_.bucket_.~RepeatedField();
}

void HistogramProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HistogramProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.HistogramProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bucket_limit_.Clear();
  _impl_.bucket_.Clear();
  ::memset(&_impl_.min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sum_squares_) -
      reinterpret_cast<char*>(&_impl_.min_)) + sizeof(_impl_.sum_squares_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistogramProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.num_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double sum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double sum_squares = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.sum_squares_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double bucket_limit = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_bucket_limit(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 49) {
          _internal_add_bucket_limit(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double bucket = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_bucket(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 57) {
          _internal_add_bucket(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HistogramProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.HistogramProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double min = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min = this->_internal_min();
  uint64_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_min(), target);
  }

  // double max = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max = this->_internal_max();
  uint64_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_max(), target);
  }

  // double num = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_num = this->_internal_num();
  uint64_t raw_num;
  memcpy(&raw_num, &tmp_num, sizeof(tmp_num));
  if (raw_num != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_num(), target);
  }

  // double sum = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum = this->_internal_sum();
  uint64_t raw_sum;
  memcpy(&raw_sum, &tmp_sum, sizeof(tmp_sum));
  if (raw_sum != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_sum(), target);
  }

  // double sum_squares = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum_squares = this->_internal_sum_squares();
  uint64_t raw_sum_squares;
  memcpy(&raw_sum_squares, &tmp_sum_squares, sizeof(tmp_sum_squares));
  if (raw_sum_squares != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_sum_squares(), target);
  }

  // repeated double bucket_limit = 6 [packed = true];
  if (this->_internal_bucket_limit_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_bucket_limit(), target);
  }

  // repeated double bucket = 7 [packed = true];
  if (this->_internal_bucket_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_bucket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.HistogramProto)
  return target;
}

size_t HistogramProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.HistogramProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double bucket_limit = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bucket_limit_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double bucket = 7 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bucket_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // double min = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min = this->_internal_min();
  uint64_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    total_size += 1 + 8;
  }

  // double max = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max = this->_internal_max();
  uint64_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    total_size += 1 + 8;
  }

  // double num = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_num = this->_internal_num();
  uint64_t raw_num;
  memcpy(&raw_num, &tmp_num, sizeof(tmp_num));
  if (raw_num != 0) {
    total_size += 1 + 8;
  }

  // double sum = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum = this->_internal_sum();
  uint64_t raw_sum;
  memcpy(&raw_sum, &tmp_sum, sizeof(tmp_sum));
  if (raw_sum != 0) {
    total_size += 1 + 8;
  }

  // double sum_squares = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum_squares = this->_internal_sum_squares();
  uint64_t raw_sum_squares;
  memcpy(&raw_sum_squares, &tmp_sum_squares, sizeof(tmp_sum_squares));
  if (raw_sum_squares != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HistogramProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HistogramProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HistogramProto::GetClassData() const { return &_class_data_; }


void HistogramProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HistogramProto*>(&to_msg);
  auto& from = static_cast<const HistogramProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.HistogramProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bucket_limit_.MergeFrom(from._impl_.bucket_limit_);
  _this->_impl_.bucket_.MergeFrom(from._impl_.bucket_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min = from._internal_min();
  uint64_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    _this->_internal_set_min(from._internal_min());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max = from._internal_max();
  uint64_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    _this->_internal_set_max(from._internal_max());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_num = from._internal_num();
  uint64_t raw_num;
  memcpy(&raw_num, &tmp_num, sizeof(tmp_num));
  if (raw_num != 0) {
    _this->_internal_set_num(from._internal_num());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum = from._internal_sum();
  uint64_t raw_sum;
  memcpy(&raw_sum, &tmp_sum, sizeof(tmp_sum));
  if (raw_sum != 0) {
    _this->_internal_set_sum(from._internal_sum());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum_squares = from._internal_sum_squares();
  uint64_t raw_sum_squares;
  memcpy(&raw_sum_squares, &tmp_sum_squares, sizeof(tmp_sum_squares));
  if (raw_sum_squares != 0) {
    _this->_internal_set_sum_squares(from._internal_sum_squares());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HistogramProto::CopyFrom(const HistogramProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.HistogramProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistogramProto::IsInitialized() const {
  return true;
}

void HistogramProto::InternalSwap(HistogramProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bucket_limit_.InternalSwap(&other->_impl_.bucket_limit_);
  _impl_.bucket_.InternalSwap(&other->_impl_.bucket_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistogramProto, _impl_.sum_squares_)
      + sizeof(HistogramProto::_impl_.sum_squares_)
      - PROTOBUF_FIELD_OFFSET(HistogramProto, _impl_.min_)>(
          reinterpret_cast<char*>(&_impl_.min_),
          reinterpret_cast<char*>(&other->_impl_.min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistogramProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fhistogram_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fhistogram_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fhistogram_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::HistogramProto*
Arena::CreateMaybeMessage< ::tensorflow::HistogramProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::HistogramProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
