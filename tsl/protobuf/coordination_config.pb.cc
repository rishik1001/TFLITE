// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tsl/protobuf/coordination_config.proto

#include "tsl/protobuf/coordination_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR CoordinatedJob::CoordinatedJob(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.num_tasks_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CoordinatedJobDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoordinatedJobDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoordinatedJobDefaultTypeInternal() {}
  union {
    CoordinatedJob _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoordinatedJobDefaultTypeInternal _CoordinatedJob_default_instance_;
PROTOBUF_CONSTEXPR CoordinationServiceConfig::CoordinationServiceConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.recoverable_jobs_)*/{}
  , /*decltype(_impl_.coordinated_job_list_)*/{}
  , /*decltype(_impl_.service_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.service_leader_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cluster_register_timeout_in_ms_)*/int64_t{0}
  , /*decltype(_impl_.heartbeat_timeout_in_ms_)*/int64_t{0}
  , /*decltype(_impl_.shutdown_barrier_timeout_in_ms_)*/int64_t{0}
  , /*decltype(_impl_.enable_health_check_)*/false
  , /*decltype(_impl_.agent_destruction_without_shutdown_)*/false
  , /*decltype(_impl_.allow_new_incarnation_to_reconnect_)*/false
  , /*decltype(_impl_.force_disable_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CoordinationServiceConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CoordinationServiceConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CoordinationServiceConfigDefaultTypeInternal() {}
  union {
    CoordinationServiceConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CoordinationServiceConfigDefaultTypeInternal _CoordinationServiceConfig_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinatedJob, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinatedJob, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinatedJob, _impl_.num_tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceConfig, _impl_.service_type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceConfig, _impl_.service_leader_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceConfig, _impl_.enable_health_check_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceConfig, _impl_.cluster_register_timeout_in_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceConfig, _impl_.heartbeat_timeout_in_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceConfig, _impl_.coordinated_job_list_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceConfig, _impl_.shutdown_barrier_timeout_in_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceConfig, _impl_.agent_destruction_without_shutdown_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceConfig, _impl_.recoverable_jobs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceConfig, _impl_.allow_new_incarnation_to_reconnect_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CoordinationServiceConfig, _impl_.force_disable_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::CoordinatedJob)},
  { 8, -1, -1, sizeof(::tensorflow::CoordinationServiceConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_CoordinatedJob_default_instance_._instance,
  &::tensorflow::_CoordinationServiceConfig_default_instance_._instance,
};

const char descriptor_table_protodef_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&tsl/protobuf/coordination_config.proto"
  "\022\ntensorflow\"1\n\016CoordinatedJob\022\014\n\004name\030\001"
  " \001(\t\022\021\n\tnum_tasks\030\002 \001(\005\"\240\003\n\031Coordination"
  "ServiceConfig\022\024\n\014service_type\030\001 \001(\t\022\026\n\016s"
  "ervice_leader\030\002 \001(\t\022\033\n\023enable_health_che"
  "ck\030\003 \001(\010\022&\n\036cluster_register_timeout_in_"
  "ms\030\004 \001(\003\022\037\n\027heartbeat_timeout_in_ms\030\005 \001("
  "\003\0228\n\024coordinated_job_list\030\n \003(\0132\032.tensor"
  "flow.CoordinatedJob\022&\n\036shutdown_barrier_"
  "timeout_in_ms\030\007 \001(\003\022*\n\"agent_destruction"
  "_without_shutdown\030\010 \001(\010\022\030\n\020recoverable_j"
  "obs\030\t \003(\t\022*\n\"allow_new_incarnation_to_re"
  "connect\030\013 \001(\010\022\025\n\rforce_disable\030\014 \001(\010J\004\010\006"
  "\020\007BWZUgithub.com/tensorflow/tensorflow/t"
  "ensorflow/go/core/protobuf/for_core_prot"
  "os_go_protob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto = {
    false, false, 619, descriptor_table_protodef_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto,
    "tsl/protobuf/coordination_config.proto",
    &descriptor_table_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto::offsets,
    file_level_metadata_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto, file_level_enum_descriptors_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto,
    file_level_service_descriptors_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto_getter() {
  return &descriptor_table_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto(&descriptor_table_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto);
namespace tensorflow {

// ===================================================================

class CoordinatedJob::_Internal {
 public:
};

CoordinatedJob::CoordinatedJob(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CoordinatedJob)
}
CoordinatedJob::CoordinatedJob(const CoordinatedJob& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CoordinatedJob* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.num_tasks_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.num_tasks_ = from._impl_.num_tasks_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.CoordinatedJob)
}

inline void CoordinatedJob::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.num_tasks_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CoordinatedJob::~CoordinatedJob() {
  // @@protoc_insertion_point(destructor:tensorflow.CoordinatedJob)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CoordinatedJob::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void CoordinatedJob::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CoordinatedJob::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CoordinatedJob)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.num_tasks_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoordinatedJob::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.CoordinatedJob.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 num_tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_tasks_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CoordinatedJob::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CoordinatedJob)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CoordinatedJob.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 num_tasks = 2;
  if (this->_internal_num_tasks() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_tasks(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CoordinatedJob)
  return target;
}

size_t CoordinatedJob::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CoordinatedJob)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 num_tasks = 2;
  if (this->_internal_num_tasks() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_tasks());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoordinatedJob::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CoordinatedJob::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoordinatedJob::GetClassData() const { return &_class_data_; }


void CoordinatedJob::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CoordinatedJob*>(&to_msg);
  auto& from = static_cast<const CoordinatedJob&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CoordinatedJob)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_num_tasks() != 0) {
    _this->_internal_set_num_tasks(from._internal_num_tasks());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoordinatedJob::CopyFrom(const CoordinatedJob& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CoordinatedJob)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinatedJob::IsInitialized() const {
  return true;
}

void CoordinatedJob::InternalSwap(CoordinatedJob* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.num_tasks_, other->_impl_.num_tasks_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CoordinatedJob::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto[0]);
}

// ===================================================================

class CoordinationServiceConfig::_Internal {
 public:
};

CoordinationServiceConfig::CoordinationServiceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CoordinationServiceConfig)
}
CoordinationServiceConfig::CoordinationServiceConfig(const CoordinationServiceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CoordinationServiceConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.recoverable_jobs_){from._impl_.recoverable_jobs_}
    , decltype(_impl_.coordinated_job_list_){from._impl_.coordinated_job_list_}
    , decltype(_impl_.service_type_){}
    , decltype(_impl_.service_leader_){}
    , decltype(_impl_.cluster_register_timeout_in_ms_){}
    , decltype(_impl_.heartbeat_timeout_in_ms_){}
    , decltype(_impl_.shutdown_barrier_timeout_in_ms_){}
    , decltype(_impl_.enable_health_check_){}
    , decltype(_impl_.agent_destruction_without_shutdown_){}
    , decltype(_impl_.allow_new_incarnation_to_reconnect_){}
    , decltype(_impl_.force_disable_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.service_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_type().empty()) {
    _this->_impl_.service_type_.Set(from._internal_service_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.service_leader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_leader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_service_leader().empty()) {
    _this->_impl_.service_leader_.Set(from._internal_service_leader(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cluster_register_timeout_in_ms_, &from._impl_.cluster_register_timeout_in_ms_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.force_disable_) -
    reinterpret_cast<char*>(&_impl_.cluster_register_timeout_in_ms_)) + sizeof(_impl_.force_disable_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.CoordinationServiceConfig)
}

inline void CoordinationServiceConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.recoverable_jobs_){arena}
    , decltype(_impl_.coordinated_job_list_){arena}
    , decltype(_impl_.service_type_){}
    , decltype(_impl_.service_leader_){}
    , decltype(_impl_.cluster_register_timeout_in_ms_){int64_t{0}}
    , decltype(_impl_.heartbeat_timeout_in_ms_){int64_t{0}}
    , decltype(_impl_.shutdown_barrier_timeout_in_ms_){int64_t{0}}
    , decltype(_impl_.enable_health_check_){false}
    , decltype(_impl_.agent_destruction_without_shutdown_){false}
    , decltype(_impl_.allow_new_incarnation_to_reconnect_){false}
    , decltype(_impl_.force_disable_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.service_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_leader_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.service_leader_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CoordinationServiceConfig::~CoordinationServiceConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.CoordinationServiceConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CoordinationServiceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.recoverable_jobs_.~RepeatedPtrField();
  _impl_.coordinated_job_list_.~RepeatedPtrField();
  _impl_.service_type_.Destroy();
  _impl_.service_leader_.Destroy();
}

void CoordinationServiceConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CoordinationServiceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CoordinationServiceConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.recoverable_jobs_.Clear();
  _impl_.coordinated_job_list_.Clear();
  _impl_.service_type_.ClearToEmpty();
  _impl_.service_leader_.ClearToEmpty();
  ::memset(&_impl_.cluster_register_timeout_in_ms_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.force_disable_) -
      reinterpret_cast<char*>(&_impl_.cluster_register_timeout_in_ms_)) + sizeof(_impl_.force_disable_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CoordinationServiceConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string service_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.CoordinationServiceConfig.service_type"));
        } else
          goto handle_unusual;
        continue;
      // string service_leader = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_service_leader();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.CoordinationServiceConfig.service_leader"));
        } else
          goto handle_unusual;
        continue;
      // bool enable_health_check = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.enable_health_check_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 cluster_register_timeout_in_ms = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.cluster_register_timeout_in_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 heartbeat_timeout_in_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.heartbeat_timeout_in_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 shutdown_barrier_timeout_in_ms = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.shutdown_barrier_timeout_in_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool agent_destruction_without_shutdown = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.agent_destruction_without_shutdown_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string recoverable_jobs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_recoverable_jobs();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.CoordinationServiceConfig.recoverable_jobs"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.CoordinatedJob coordinated_job_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_coordinated_job_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bool allow_new_incarnation_to_reconnect = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.allow_new_incarnation_to_reconnect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool force_disable = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.force_disable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CoordinationServiceConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CoordinationServiceConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string service_type = 1;
  if (!this->_internal_service_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_type().data(), static_cast<int>(this->_internal_service_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CoordinationServiceConfig.service_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_service_type(), target);
  }

  // string service_leader = 2;
  if (!this->_internal_service_leader().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_service_leader().data(), static_cast<int>(this->_internal_service_leader().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CoordinationServiceConfig.service_leader");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_service_leader(), target);
  }

  // bool enable_health_check = 3;
  if (this->_internal_enable_health_check() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_enable_health_check(), target);
  }

  // int64 cluster_register_timeout_in_ms = 4;
  if (this->_internal_cluster_register_timeout_in_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_cluster_register_timeout_in_ms(), target);
  }

  // int64 heartbeat_timeout_in_ms = 5;
  if (this->_internal_heartbeat_timeout_in_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_heartbeat_timeout_in_ms(), target);
  }

  // int64 shutdown_barrier_timeout_in_ms = 7;
  if (this->_internal_shutdown_barrier_timeout_in_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_shutdown_barrier_timeout_in_ms(), target);
  }

  // bool agent_destruction_without_shutdown = 8;
  if (this->_internal_agent_destruction_without_shutdown() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(8, this->_internal_agent_destruction_without_shutdown(), target);
  }

  // repeated string recoverable_jobs = 9;
  for (int i = 0, n = this->_internal_recoverable_jobs_size(); i < n; i++) {
    const auto& s = this->_internal_recoverable_jobs(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CoordinationServiceConfig.recoverable_jobs");
    target = stream->WriteString(9, s, target);
  }

  // repeated .tensorflow.CoordinatedJob coordinated_job_list = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_coordinated_job_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_coordinated_job_list(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // bool allow_new_incarnation_to_reconnect = 11;
  if (this->_internal_allow_new_incarnation_to_reconnect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_allow_new_incarnation_to_reconnect(), target);
  }

  // bool force_disable = 12;
  if (this->_internal_force_disable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(12, this->_internal_force_disable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CoordinationServiceConfig)
  return target;
}

size_t CoordinationServiceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CoordinationServiceConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string recoverable_jobs = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.recoverable_jobs_.size());
  for (int i = 0, n = _impl_.recoverable_jobs_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.recoverable_jobs_.Get(i));
  }

  // repeated .tensorflow.CoordinatedJob coordinated_job_list = 10;
  total_size += 1UL * this->_internal_coordinated_job_list_size();
  for (const auto& msg : this->_impl_.coordinated_job_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string service_type = 1;
  if (!this->_internal_service_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_type());
  }

  // string service_leader = 2;
  if (!this->_internal_service_leader().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_service_leader());
  }

  // int64 cluster_register_timeout_in_ms = 4;
  if (this->_internal_cluster_register_timeout_in_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cluster_register_timeout_in_ms());
  }

  // int64 heartbeat_timeout_in_ms = 5;
  if (this->_internal_heartbeat_timeout_in_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_heartbeat_timeout_in_ms());
  }

  // int64 shutdown_barrier_timeout_in_ms = 7;
  if (this->_internal_shutdown_barrier_timeout_in_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_shutdown_barrier_timeout_in_ms());
  }

  // bool enable_health_check = 3;
  if (this->_internal_enable_health_check() != 0) {
    total_size += 1 + 1;
  }

  // bool agent_destruction_without_shutdown = 8;
  if (this->_internal_agent_destruction_without_shutdown() != 0) {
    total_size += 1 + 1;
  }

  // bool allow_new_incarnation_to_reconnect = 11;
  if (this->_internal_allow_new_incarnation_to_reconnect() != 0) {
    total_size += 1 + 1;
  }

  // bool force_disable = 12;
  if (this->_internal_force_disable() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CoordinationServiceConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CoordinationServiceConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CoordinationServiceConfig::GetClassData() const { return &_class_data_; }


void CoordinationServiceConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CoordinationServiceConfig*>(&to_msg);
  auto& from = static_cast<const CoordinationServiceConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CoordinationServiceConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.recoverable_jobs_.MergeFrom(from._impl_.recoverable_jobs_);
  _this->_impl_.coordinated_job_list_.MergeFrom(from._impl_.coordinated_job_list_);
  if (!from._internal_service_type().empty()) {
    _this->_internal_set_service_type(from._internal_service_type());
  }
  if (!from._internal_service_leader().empty()) {
    _this->_internal_set_service_leader(from._internal_service_leader());
  }
  if (from._internal_cluster_register_timeout_in_ms() != 0) {
    _this->_internal_set_cluster_register_timeout_in_ms(from._internal_cluster_register_timeout_in_ms());
  }
  if (from._internal_heartbeat_timeout_in_ms() != 0) {
    _this->_internal_set_heartbeat_timeout_in_ms(from._internal_heartbeat_timeout_in_ms());
  }
  if (from._internal_shutdown_barrier_timeout_in_ms() != 0) {
    _this->_internal_set_shutdown_barrier_timeout_in_ms(from._internal_shutdown_barrier_timeout_in_ms());
  }
  if (from._internal_enable_health_check() != 0) {
    _this->_internal_set_enable_health_check(from._internal_enable_health_check());
  }
  if (from._internal_agent_destruction_without_shutdown() != 0) {
    _this->_internal_set_agent_destruction_without_shutdown(from._internal_agent_destruction_without_shutdown());
  }
  if (from._internal_allow_new_incarnation_to_reconnect() != 0) {
    _this->_internal_set_allow_new_incarnation_to_reconnect(from._internal_allow_new_incarnation_to_reconnect());
  }
  if (from._internal_force_disable() != 0) {
    _this->_internal_set_force_disable(from._internal_force_disable());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CoordinationServiceConfig::CopyFrom(const CoordinationServiceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CoordinationServiceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CoordinationServiceConfig::IsInitialized() const {
  return true;
}

void CoordinationServiceConfig::InternalSwap(CoordinationServiceConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.recoverable_jobs_.InternalSwap(&other->_impl_.recoverable_jobs_);
  _impl_.coordinated_job_list_.InternalSwap(&other->_impl_.coordinated_job_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_type_, lhs_arena,
      &other->_impl_.service_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.service_leader_, lhs_arena,
      &other->_impl_.service_leader_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CoordinationServiceConfig, _impl_.force_disable_)
      + sizeof(CoordinationServiceConfig::_impl_.force_disable_)
      - PROTOBUF_FIELD_OFFSET(CoordinationServiceConfig, _impl_.cluster_register_timeout_in_ms_)>(
          reinterpret_cast<char*>(&_impl_.cluster_register_timeout_in_ms_),
          reinterpret_cast<char*>(&other->_impl_.cluster_register_timeout_in_ms_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CoordinationServiceConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2fcoordination_5fconfig_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::CoordinatedJob*
Arena::CreateMaybeMessage< ::tensorflow::CoordinatedJob >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CoordinatedJob >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CoordinationServiceConfig*
Arena::CreateMaybeMessage< ::tensorflow::CoordinationServiceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CoordinationServiceConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
