// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tsl/protobuf/test_log.proto

#include "tsl/protobuf/test_log.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR EntryValue::EntryValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kind_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct EntryValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EntryValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EntryValueDefaultTypeInternal() {}
  union {
    EntryValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EntryValueDefaultTypeInternal _EntryValue_default_instance_;
PROTOBUF_CONSTEXPR MetricEntry::MetricEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.min_value_)*/nullptr
  , /*decltype(_impl_.max_value_)*/nullptr
  , /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetricEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetricEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetricEntryDefaultTypeInternal() {}
  union {
    MetricEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetricEntryDefaultTypeInternal _MetricEntry_default_instance_;
PROTOBUF_CONSTEXPR BenchmarkEntry_ExtrasEntry_DoNotUse::BenchmarkEntry_ExtrasEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct BenchmarkEntry_ExtrasEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BenchmarkEntry_ExtrasEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BenchmarkEntry_ExtrasEntry_DoNotUseDefaultTypeInternal() {}
  union {
    BenchmarkEntry_ExtrasEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BenchmarkEntry_ExtrasEntry_DoNotUseDefaultTypeInternal _BenchmarkEntry_ExtrasEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR BenchmarkEntry::BenchmarkEntry(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.extras_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.metrics_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.iters_)*/int64_t{0}
  , /*decltype(_impl_.cpu_time_)*/0
  , /*decltype(_impl_.wall_time_)*/0
  , /*decltype(_impl_.throughput_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BenchmarkEntryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BenchmarkEntryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BenchmarkEntryDefaultTypeInternal() {}
  union {
    BenchmarkEntry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BenchmarkEntryDefaultTypeInternal _BenchmarkEntry_default_instance_;
PROTOBUF_CONSTEXPR BenchmarkEntries::BenchmarkEntries(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.entry_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BenchmarkEntriesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BenchmarkEntriesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BenchmarkEntriesDefaultTypeInternal() {}
  union {
    BenchmarkEntries _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BenchmarkEntriesDefaultTypeInternal _BenchmarkEntries_default_instance_;
PROTOBUF_CONSTEXPR BuildConfiguration::BuildConfiguration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cc_flags_)*/{}
  , /*decltype(_impl_.opts_)*/{}
  , /*decltype(_impl_.mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BuildConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BuildConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BuildConfigurationDefaultTypeInternal() {}
  union {
    BuildConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BuildConfigurationDefaultTypeInternal _BuildConfiguration_default_instance_;
PROTOBUF_CONSTEXPR CommitId::CommitId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.snapshot_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pending_changelist_)*/int64_t{0}
  , /*decltype(_impl_.kind_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CommitIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommitIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommitIdDefaultTypeInternal() {}
  union {
    CommitId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommitIdDefaultTypeInternal _CommitId_default_instance_;
PROTOBUF_CONSTEXPR CPUInfo_CacheSizeEntry_DoNotUse::CPUInfo_CacheSizeEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CPUInfo_CacheSizeEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPUInfo_CacheSizeEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPUInfo_CacheSizeEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CPUInfo_CacheSizeEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPUInfo_CacheSizeEntry_DoNotUseDefaultTypeInternal _CPUInfo_CacheSizeEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CPUInfo::CPUInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cache_size_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.cpu_info_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cpu_governor_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.num_cores_)*/int64_t{0}
  , /*decltype(_impl_.num_cores_allowed_)*/int64_t{0}
  , /*decltype(_impl_.mhz_per_cpu_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CPUInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CPUInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CPUInfoDefaultTypeInternal() {}
  union {
    CPUInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CPUInfoDefaultTypeInternal _CPUInfo_default_instance_;
PROTOBUF_CONSTEXPR MemoryInfo::MemoryInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.total_)*/int64_t{0}
  , /*decltype(_impl_.available_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MemoryInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MemoryInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MemoryInfoDefaultTypeInternal() {}
  union {
    MemoryInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MemoryInfoDefaultTypeInternal _MemoryInfo_default_instance_;
PROTOBUF_CONSTEXPR GPUInfo::GPUInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.model_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.uuid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.bus_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GPUInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GPUInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GPUInfoDefaultTypeInternal() {}
  union {
    GPUInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GPUInfoDefaultTypeInternal _GPUInfo_default_instance_;
PROTOBUF_CONSTEXPR PlatformInfo::PlatformInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bits_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.linkage_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.machine_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.release_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.system_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlatformInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlatformInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlatformInfoDefaultTypeInternal() {}
  union {
    PlatformInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlatformInfoDefaultTypeInternal _PlatformInfo_default_instance_;
PROTOBUF_CONSTEXPR AvailableDeviceInfo::AvailableDeviceInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.physical_description_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.memory_limit_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AvailableDeviceInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AvailableDeviceInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AvailableDeviceInfoDefaultTypeInternal() {}
  union {
    AvailableDeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AvailableDeviceInfoDefaultTypeInternal _AvailableDeviceInfo_default_instance_;
PROTOBUF_CONSTEXPR MachineConfiguration::MachineConfiguration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_info_)*/{}
  , /*decltype(_impl_.available_device_info_)*/{}
  , /*decltype(_impl_.hostname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.serial_identifier_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.platform_info_)*/nullptr
  , /*decltype(_impl_.cpu_info_)*/nullptr
  , /*decltype(_impl_.memory_info_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MachineConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MachineConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MachineConfigurationDefaultTypeInternal() {}
  union {
    MachineConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MachineConfigurationDefaultTypeInternal _MachineConfiguration_default_instance_;
PROTOBUF_CONSTEXPR RunConfiguration_EnvVarsEntry_DoNotUse::RunConfiguration_EnvVarsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct RunConfiguration_EnvVarsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunConfiguration_EnvVarsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunConfiguration_EnvVarsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    RunConfiguration_EnvVarsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunConfiguration_EnvVarsEntry_DoNotUseDefaultTypeInternal _RunConfiguration_EnvVarsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR RunConfiguration::RunConfiguration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.argument_)*/{}
  , /*decltype(_impl_.env_vars_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RunConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunConfigurationDefaultTypeInternal() {}
  union {
    RunConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunConfigurationDefaultTypeInternal _RunConfiguration_default_instance_;
PROTOBUF_CONSTEXPR TestResults::TestResults(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.run_mode_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tf_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.entries_)*/nullptr
  , /*decltype(_impl_.build_configuration_)*/nullptr
  , /*decltype(_impl_.commit_id_)*/nullptr
  , /*decltype(_impl_.machine_configuration_)*/nullptr
  , /*decltype(_impl_.run_configuration_)*/nullptr
  , /*decltype(_impl_.start_time_)*/int64_t{0}
  , /*decltype(_impl_.run_time_)*/0
  , /*decltype(_impl_.benchmark_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TestResultsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TestResultsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TestResultsDefaultTypeInternal() {}
  union {
    TestResults _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TestResultsDefaultTypeInternal _TestResults_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tsl_2fprotobuf_2ftest_5flog_2eproto[17];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tsl_2fprotobuf_2ftest_5flog_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tsl_2fprotobuf_2ftest_5flog_2eproto = nullptr;

const uint32_t TableStruct_tsl_2fprotobuf_2ftest_5flog_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::EntryValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::EntryValue, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::EntryValue, _impl_.kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetricEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetricEntry, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetricEntry, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetricEntry, _impl_.min_value_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MetricEntry, _impl_.max_value_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry_ExtrasEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry_ExtrasEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry_ExtrasEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry_ExtrasEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry, _impl_.iters_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry, _impl_.cpu_time_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry, _impl_.wall_time_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry, _impl_.throughput_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry, _impl_.extras_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntry, _impl_.metrics_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntries, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BenchmarkEntries, _impl_.entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BuildConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BuildConfiguration, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BuildConfiguration, _impl_.cc_flags_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BuildConfiguration, _impl_.opts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CommitId, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CommitId, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::CommitId, _impl_.snapshot_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CommitId, _impl_.pending_changelist_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CommitId, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CPUInfo_CacheSizeEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CPUInfo_CacheSizeEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CPUInfo_CacheSizeEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CPUInfo_CacheSizeEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CPUInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CPUInfo, _impl_.num_cores_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CPUInfo, _impl_.num_cores_allowed_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CPUInfo, _impl_.mhz_per_cpu_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CPUInfo, _impl_.cpu_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CPUInfo, _impl_.cpu_governor_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CPUInfo, _impl_.cache_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryInfo, _impl_.total_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MemoryInfo, _impl_.available_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GPUInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GPUInfo, _impl_.model_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GPUInfo, _impl_.uuid_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GPUInfo, _impl_.bus_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::PlatformInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::PlatformInfo, _impl_.bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::PlatformInfo, _impl_.linkage_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::PlatformInfo, _impl_.machine_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::PlatformInfo, _impl_.release_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::PlatformInfo, _impl_.system_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::PlatformInfo, _impl_.version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AvailableDeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::AvailableDeviceInfo, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AvailableDeviceInfo, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AvailableDeviceInfo, _impl_.memory_limit_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::AvailableDeviceInfo, _impl_.physical_description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MachineConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MachineConfiguration, _impl_.hostname_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MachineConfiguration, _impl_.serial_identifier_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MachineConfiguration, _impl_.platform_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MachineConfiguration, _impl_.cpu_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MachineConfiguration, _impl_.device_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MachineConfiguration, _impl_.available_device_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MachineConfiguration, _impl_.memory_info_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunConfiguration_EnvVarsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunConfiguration_EnvVarsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunConfiguration_EnvVarsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunConfiguration_EnvVarsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunConfiguration, _impl_.argument_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::RunConfiguration, _impl_.env_vars_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, _impl_.entries_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, _impl_.build_configuration_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, _impl_.commit_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, _impl_.run_time_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, _impl_.machine_configuration_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, _impl_.run_configuration_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, _impl_.benchmark_type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, _impl_.run_mode_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TestResults, _impl_.tf_version_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::EntryValue)},
  { 9, -1, -1, sizeof(::tensorflow::MetricEntry)},
  { 19, 27, -1, sizeof(::tensorflow::BenchmarkEntry_ExtrasEntry_DoNotUse)},
  { 29, -1, -1, sizeof(::tensorflow::BenchmarkEntry)},
  { 42, -1, -1, sizeof(::tensorflow::BenchmarkEntries)},
  { 49, -1, -1, sizeof(::tensorflow::BuildConfiguration)},
  { 58, -1, -1, sizeof(::tensorflow::CommitId)},
  { 69, 77, -1, sizeof(::tensorflow::CPUInfo_CacheSizeEntry_DoNotUse)},
  { 79, -1, -1, sizeof(::tensorflow::CPUInfo)},
  { 91, -1, -1, sizeof(::tensorflow::MemoryInfo)},
  { 99, -1, -1, sizeof(::tensorflow::GPUInfo)},
  { 108, -1, -1, sizeof(::tensorflow::PlatformInfo)},
  { 120, -1, -1, sizeof(::tensorflow::AvailableDeviceInfo)},
  { 130, -1, -1, sizeof(::tensorflow::MachineConfiguration)},
  { 143, 151, -1, sizeof(::tensorflow::RunConfiguration_EnvVarsEntry_DoNotUse)},
  { 153, -1, -1, sizeof(::tensorflow::RunConfiguration)},
  { 161, -1, -1, sizeof(::tensorflow::TestResults)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_EntryValue_default_instance_._instance,
  &::tensorflow::_MetricEntry_default_instance_._instance,
  &::tensorflow::_BenchmarkEntry_ExtrasEntry_DoNotUse_default_instance_._instance,
  &::tensorflow::_BenchmarkEntry_default_instance_._instance,
  &::tensorflow::_BenchmarkEntries_default_instance_._instance,
  &::tensorflow::_BuildConfiguration_default_instance_._instance,
  &::tensorflow::_CommitId_default_instance_._instance,
  &::tensorflow::_CPUInfo_CacheSizeEntry_DoNotUse_default_instance_._instance,
  &::tensorflow::_CPUInfo_default_instance_._instance,
  &::tensorflow::_MemoryInfo_default_instance_._instance,
  &::tensorflow::_GPUInfo_default_instance_._instance,
  &::tensorflow::_PlatformInfo_default_instance_._instance,
  &::tensorflow::_AvailableDeviceInfo_default_instance_._instance,
  &::tensorflow::_MachineConfiguration_default_instance_._instance,
  &::tensorflow::_RunConfiguration_EnvVarsEntry_DoNotUse_default_instance_._instance,
  &::tensorflow::_RunConfiguration_default_instance_._instance,
  &::tensorflow::_TestResults_default_instance_._instance,
};

const char descriptor_table_protodef_tsl_2fprotobuf_2ftest_5flog_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\033tsl/protobuf/test_log.proto\022\ntensorflo"
  "w\032\031google/protobuf/any.proto\032\036google/pro"
  "tobuf/wrappers.proto\"D\n\nEntryValue\022\026\n\014do"
  "uble_value\030\001 \001(\001H\000\022\026\n\014string_value\030\002 \001(\t"
  "H\000B\006\n\004kind\"\214\001\n\013MetricEntry\022\014\n\004name\030\001 \001(\t"
  "\022\r\n\005value\030\002 \001(\001\022/\n\tmin_value\030\003 \001(\0132\034.goo"
  "gle.protobuf.DoubleValue\022/\n\tmax_value\030\004 "
  "\001(\0132\034.google.protobuf.DoubleValue\"\217\002\n\016Be"
  "nchmarkEntry\022\014\n\004name\030\001 \001(\t\022\r\n\005iters\030\002 \001("
  "\003\022\020\n\010cpu_time\030\003 \001(\001\022\021\n\twall_time\030\004 \001(\001\022\022"
  "\n\nthroughput\030\005 \001(\001\0226\n\006extras\030\006 \003(\0132&.ten"
  "sorflow.BenchmarkEntry.ExtrasEntry\022(\n\007me"
  "trics\030\007 \003(\0132\027.tensorflow.MetricEntry\032E\n\013"
  "ExtrasEntry\022\013\n\003key\030\001 \001(\t\022%\n\005value\030\002 \001(\0132"
  "\026.tensorflow.EntryValue:\0028\001\"=\n\020Benchmark"
  "Entries\022)\n\005entry\030\001 \003(\0132\032.tensorflow.Benc"
  "hmarkEntry\"B\n\022BuildConfiguration\022\014\n\004mode"
  "\030\001 \001(\t\022\020\n\010cc_flags\030\002 \003(\t\022\014\n\004opts\030\003 \003(\t\"f"
  "\n\010CommitId\022\024\n\nchangelist\030\001 \001(\003H\000\022\016\n\004hash"
  "\030\002 \001(\tH\000\022\020\n\010snapshot\030\003 \001(\t\022\032\n\022pending_ch"
  "angelist\030\004 \001(\003B\006\n\004kind\"\336\001\n\007CPUInfo\022\021\n\tnu"
  "m_cores\030\001 \001(\003\022\031\n\021num_cores_allowed\030\002 \001(\003"
  "\022\023\n\013mhz_per_cpu\030\003 \001(\001\022\020\n\010cpu_info\030\004 \001(\t\022"
  "\024\n\014cpu_governor\030\005 \001(\t\0226\n\ncache_size\030\006 \003("
  "\0132\".tensorflow.CPUInfo.CacheSizeEntry\0320\n"
  "\016CacheSizeEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 "
  "\001(\003:\0028\001\".\n\nMemoryInfo\022\r\n\005total\030\001 \001(\003\022\021\n\t"
  "available\030\002 \001(\003\"6\n\007GPUInfo\022\r\n\005model\030\001 \001("
  "\t\022\014\n\004uuid\030\002 \001(\t\022\016\n\006bus_id\030\003 \001(\t\"p\n\014Platf"
  "ormInfo\022\014\n\004bits\030\001 \001(\t\022\017\n\007linkage\030\002 \001(\t\022\017"
  "\n\007machine\030\003 \001(\t\022\017\n\007release\030\004 \001(\t\022\016\n\006syst"
  "em\030\005 \001(\t\022\017\n\007version\030\006 \001(\t\"e\n\023AvailableDe"
  "viceInfo\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022\024\n\014"
  "memory_limit\030\003 \001(\003\022\034\n\024physical_descripti"
  "on\030\004 \001(\t\"\263\002\n\024MachineConfiguration\022\020\n\010hos"
  "tname\030\001 \001(\t\022\031\n\021serial_identifier\030\007 \001(\t\022/"
  "\n\rplatform_info\030\002 \001(\0132\030.tensorflow.Platf"
  "ormInfo\022%\n\010cpu_info\030\003 \001(\0132\023.tensorflow.C"
  "PUInfo\022)\n\013device_info\030\004 \003(\0132\024.google.pro"
  "tobuf.Any\022>\n\025available_device_info\030\005 \003(\013"
  "2\037.tensorflow.AvailableDeviceInfo\022+\n\013mem"
  "ory_info\030\006 \001(\0132\026.tensorflow.MemoryInfo\"\221"
  "\001\n\020RunConfiguration\022\020\n\010argument\030\001 \003(\t\022;\n"
  "\010env_vars\030\002 \003(\0132).tensorflow.RunConfigur"
  "ation.EnvVarsEntry\032.\n\014EnvVarsEntry\022\013\n\003ke"
  "y\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\320\004\n\013TestResul"
  "ts\022\016\n\006target\030\001 \001(\t\022-\n\007entries\030\002 \001(\0132\034.te"
  "nsorflow.BenchmarkEntries\022;\n\023build_confi"
  "guration\030\003 \001(\0132\036.tensorflow.BuildConfigu"
  "ration\022\'\n\tcommit_id\030\004 \001(\0132\024.tensorflow.C"
  "ommitId\022\022\n\nstart_time\030\005 \001(\003\022\020\n\010run_time\030"
  "\006 \001(\001\022\?\n\025machine_configuration\030\007 \001(\0132 .t"
  "ensorflow.MachineConfiguration\0227\n\021run_co"
  "nfiguration\030\010 \001(\0132\034.tensorflow.RunConfig"
  "uration\022\014\n\004name\030\t \001(\t\022=\n\016benchmark_type\030"
  "\n \001(\0162%.tensorflow.TestResults.Benchmark"
  "Type\022\020\n\010run_mode\030\013 \001(\t\022\022\n\ntf_version\030\014 \001"
  "(\t\"\210\001\n\rBenchmarkType\022\013\n\007UNKNOWN\020\000\022\026\n\022CPP"
  "_MICROBENCHMARK\020\001\022\024\n\020PYTHON_BENCHMARK\020\002\022"
  "\025\n\021ANDROID_BENCHMARK\020\003\022\022\n\016EDGE_BENCHMARK"
  "\020\004\022\021\n\rIOS_BENCHMARK\020\005B1\n\033org.tensorflow."
  "util.testlogB\rTestLogProtosP\001\370\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::_pbi::once_flag descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto = {
    false, false, 2480, descriptor_table_protodef_tsl_2fprotobuf_2ftest_5flog_2eproto,
    "tsl/protobuf/test_log.proto",
    &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_once, descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_deps, 2, 17,
    schemas, file_default_instances, TableStruct_tsl_2fprotobuf_2ftest_5flog_2eproto::offsets,
    file_level_metadata_tsl_2fprotobuf_2ftest_5flog_2eproto, file_level_enum_descriptors_tsl_2fprotobuf_2ftest_5flog_2eproto,
    file_level_service_descriptors_tsl_2fprotobuf_2ftest_5flog_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_getter() {
  return &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tsl_2fprotobuf_2ftest_5flog_2eproto(&descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TestResults_BenchmarkType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto);
  return file_level_enum_descriptors_tsl_2fprotobuf_2ftest_5flog_2eproto[0];
}
bool TestResults_BenchmarkType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TestResults_BenchmarkType TestResults::UNKNOWN;
constexpr TestResults_BenchmarkType TestResults::CPP_MICROBENCHMARK;
constexpr TestResults_BenchmarkType TestResults::PYTHON_BENCHMARK;
constexpr TestResults_BenchmarkType TestResults::ANDROID_BENCHMARK;
constexpr TestResults_BenchmarkType TestResults::EDGE_BENCHMARK;
constexpr TestResults_BenchmarkType TestResults::IOS_BENCHMARK;
constexpr TestResults_BenchmarkType TestResults::BenchmarkType_MIN;
constexpr TestResults_BenchmarkType TestResults::BenchmarkType_MAX;
constexpr int TestResults::BenchmarkType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class EntryValue::_Internal {
 public:
};

EntryValue::EntryValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.EntryValue)
}
EntryValue::EntryValue(const EntryValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EntryValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.EntryValue)
}

inline void EntryValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_kind();
}

EntryValue::~EntryValue() {
  // @@protoc_insertion_point(destructor:tensorflow.EntryValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EntryValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void EntryValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EntryValue::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.EntryValue)
  switch (kind_case()) {
    case kDoubleValue: {
      // No need to clear
      break;
    }
    case kStringValue: {
      _impl_.kind_.string_value_.Destroy();
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}


void EntryValue::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.EntryValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EntryValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double double_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _internal_set_double_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string string_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.EntryValue.string_value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EntryValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.EntryValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double double_value = 1;
  if (_internal_has_double_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_double_value(), target);
  }

  // string string_value = 2;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.EntryValue.string_value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_string_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.EntryValue)
  return target;
}

size_t EntryValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.EntryValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // double double_value = 1;
    case kDoubleValue: {
      total_size += 1 + 8;
      break;
    }
    // string string_value = 2;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EntryValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EntryValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EntryValue::GetClassData() const { return &_class_data_; }


void EntryValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EntryValue*>(&to_msg);
  auto& from = static_cast<const EntryValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.EntryValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kDoubleValue: {
      _this->_internal_set_double_value(from._internal_double_value());
      break;
    }
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EntryValue::CopyFrom(const EntryValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.EntryValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EntryValue::IsInitialized() const {
  return true;
}

void EntryValue::InternalSwap(EntryValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.kind_, other->_impl_.kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata EntryValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2ftest_5flog_2eproto[0]);
}

// ===================================================================

class MetricEntry::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& min_value(const MetricEntry* msg);
  static const ::PROTOBUF_NAMESPACE_ID::DoubleValue& max_value(const MetricEntry* msg);
};

const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
MetricEntry::_Internal::min_value(const MetricEntry* msg) {
  return *msg->_impl_.min_value_;
}
const ::PROTOBUF_NAMESPACE_ID::DoubleValue&
MetricEntry::_Internal::max_value(const MetricEntry* msg) {
  return *msg->_impl_.max_value_;
}
void MetricEntry::clear_min_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.min_value_ != nullptr) {
    delete _impl_.min_value_;
  }
  _impl_.min_value_ = nullptr;
}
void MetricEntry::clear_max_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.max_value_ != nullptr) {
    delete _impl_.max_value_;
  }
  _impl_.max_value_ = nullptr;
}
MetricEntry::MetricEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MetricEntry)
}
MetricEntry::MetricEntry(const MetricEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MetricEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.min_value_){nullptr}
    , decltype(_impl_.max_value_){nullptr}
    , decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_min_value()) {
    _this->_impl_.min_value_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.min_value_);
  }
  if (from._internal_has_max_value()) {
    _this->_impl_.max_value_ = new ::PROTOBUF_NAMESPACE_ID::DoubleValue(*from._impl_.max_value_);
  }
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.MetricEntry)
}

inline void MetricEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.min_value_){nullptr}
    , decltype(_impl_.max_value_){nullptr}
    , decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MetricEntry::~MetricEntry() {
  // @@protoc_insertion_point(destructor:tensorflow.MetricEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MetricEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.min_value_;
  if (this != internal_default_instance()) delete _impl_.max_value_;
}

void MetricEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MetricEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MetricEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.min_value_ != nullptr) {
    delete _impl_.min_value_;
  }
  _impl_.min_value_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.max_value_ != nullptr) {
    delete _impl_.max_value_;
  }
  _impl_.max_value_ = nullptr;
  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MetricEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.MetricEntry.name"));
        } else
          goto handle_unusual;
        continue;
      // double value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue min_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_min_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.DoubleValue max_value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_max_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MetricEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MetricEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MetricEntry.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // double value = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_value(), target);
  }

  // .google.protobuf.DoubleValue min_value = 3;
  if (this->_internal_has_min_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::min_value(this),
        _Internal::min_value(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.DoubleValue max_value = 4;
  if (this->_internal_has_max_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::max_value(this),
        _Internal::max_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MetricEntry)
  return target;
}

size_t MetricEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MetricEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.DoubleValue min_value = 3;
  if (this->_internal_has_min_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.min_value_);
  }

  // .google.protobuf.DoubleValue max_value = 4;
  if (this->_internal_has_max_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.max_value_);
  }

  // double value = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = this->_internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MetricEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MetricEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MetricEntry::GetClassData() const { return &_class_data_; }


void MetricEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MetricEntry*>(&to_msg);
  auto& from = static_cast<const MetricEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MetricEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_min_value()) {
    _this->_internal_mutable_min_value()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_min_value());
  }
  if (from._internal_has_max_value()) {
    _this->_internal_mutable_max_value()->::PROTOBUF_NAMESPACE_ID::DoubleValue::MergeFrom(
        from._internal_max_value());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_value = from._internal_value();
  uint64_t raw_value;
  memcpy(&raw_value, &tmp_value, sizeof(tmp_value));
  if (raw_value != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MetricEntry::CopyFrom(const MetricEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MetricEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetricEntry::IsInitialized() const {
  return true;
}

void MetricEntry::InternalSwap(MetricEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MetricEntry, _impl_.value_)
      + sizeof(MetricEntry::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(MetricEntry, _impl_.min_value_)>(
          reinterpret_cast<char*>(&_impl_.min_value_),
          reinterpret_cast<char*>(&other->_impl_.min_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MetricEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2ftest_5flog_2eproto[1]);
}

// ===================================================================

BenchmarkEntry_ExtrasEntry_DoNotUse::BenchmarkEntry_ExtrasEntry_DoNotUse() {}
BenchmarkEntry_ExtrasEntry_DoNotUse::BenchmarkEntry_ExtrasEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BenchmarkEntry_ExtrasEntry_DoNotUse::MergeFrom(const BenchmarkEntry_ExtrasEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BenchmarkEntry_ExtrasEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2ftest_5flog_2eproto[2]);
}

// ===================================================================

class BenchmarkEntry::_Internal {
 public:
};

BenchmarkEntry::BenchmarkEntry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &BenchmarkEntry::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:tensorflow.BenchmarkEntry)
}
BenchmarkEntry::BenchmarkEntry(const BenchmarkEntry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BenchmarkEntry* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.extras_)*/{}
    , decltype(_impl_.metrics_){from._impl_.metrics_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.iters_){}
    , decltype(_impl_.cpu_time_){}
    , decltype(_impl_.wall_time_){}
    , decltype(_impl_.throughput_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.extras_.MergeFrom(from._impl_.extras_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.iters_, &from._impl_.iters_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.throughput_) -
    reinterpret_cast<char*>(&_impl_.iters_)) + sizeof(_impl_.throughput_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.BenchmarkEntry)
}

inline void BenchmarkEntry::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.extras_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.metrics_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.iters_){int64_t{0}}
    , decltype(_impl_.cpu_time_){0}
    , decltype(_impl_.wall_time_){0}
    , decltype(_impl_.throughput_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BenchmarkEntry::~BenchmarkEntry() {
  // @@protoc_insertion_point(destructor:tensorflow.BenchmarkEntry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void BenchmarkEntry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.extras_.Destruct();
  _impl_.extras_.~MapField();
  _impl_.metrics_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void BenchmarkEntry::ArenaDtor(void* object) {
  BenchmarkEntry* _this = reinterpret_cast< BenchmarkEntry* >(object);
  _this->_impl_.extras_.Destruct();
}
void BenchmarkEntry::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BenchmarkEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.BenchmarkEntry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.extras_.Clear();
  _impl_.metrics_.Clear();
  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.iters_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.throughput_) -
      reinterpret_cast<char*>(&_impl_.iters_)) + sizeof(_impl_.throughput_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BenchmarkEntry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.BenchmarkEntry.name"));
        } else
          goto handle_unusual;
        continue;
      // int64 iters = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.iters_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double cpu_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.cpu_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double wall_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.wall_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double throughput = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          _impl_.throughput_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // map<string, .tensorflow.EntryValue> extras = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.extras_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.MetricEntry metrics = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_metrics(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BenchmarkEntry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.BenchmarkEntry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.BenchmarkEntry.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 iters = 2;
  if (this->_internal_iters() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_iters(), target);
  }

  // double cpu_time = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_time = this->_internal_cpu_time();
  uint64_t raw_cpu_time;
  memcpy(&raw_cpu_time, &tmp_cpu_time, sizeof(tmp_cpu_time));
  if (raw_cpu_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_cpu_time(), target);
  }

  // double wall_time = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_wall_time = this->_internal_wall_time();
  uint64_t raw_wall_time;
  memcpy(&raw_wall_time, &tmp_wall_time, sizeof(tmp_wall_time));
  if (raw_wall_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_wall_time(), target);
  }

  // double throughput = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_throughput = this->_internal_throughput();
  uint64_t raw_throughput;
  memcpy(&raw_throughput, &tmp_throughput, sizeof(tmp_throughput));
  if (raw_throughput != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_throughput(), target);
  }

  // map<string, .tensorflow.EntryValue> extras = 6;
  if (!this->_internal_extras().empty()) {
    using MapType = ::_pb::Map<std::string, ::tensorflow::EntryValue>;
    using WireHelper = BenchmarkEntry_ExtrasEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_extras();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "tensorflow.BenchmarkEntry.ExtrasEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // repeated .tensorflow.MetricEntry metrics = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_metrics_size()); i < n; i++) {
    const auto& repfield = this->_internal_metrics(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.BenchmarkEntry)
  return target;
}

size_t BenchmarkEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.BenchmarkEntry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .tensorflow.EntryValue> extras = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_extras_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::EntryValue >::const_iterator
      it = this->_internal_extras().begin();
      it != this->_internal_extras().end(); ++it) {
    total_size += BenchmarkEntry_ExtrasEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .tensorflow.MetricEntry metrics = 7;
  total_size += 1UL * this->_internal_metrics_size();
  for (const auto& msg : this->_impl_.metrics_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 iters = 2;
  if (this->_internal_iters() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_iters());
  }

  // double cpu_time = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_time = this->_internal_cpu_time();
  uint64_t raw_cpu_time;
  memcpy(&raw_cpu_time, &tmp_cpu_time, sizeof(tmp_cpu_time));
  if (raw_cpu_time != 0) {
    total_size += 1 + 8;
  }

  // double wall_time = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_wall_time = this->_internal_wall_time();
  uint64_t raw_wall_time;
  memcpy(&raw_wall_time, &tmp_wall_time, sizeof(tmp_wall_time));
  if (raw_wall_time != 0) {
    total_size += 1 + 8;
  }

  // double throughput = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_throughput = this->_internal_throughput();
  uint64_t raw_throughput;
  memcpy(&raw_throughput, &tmp_throughput, sizeof(tmp_throughput));
  if (raw_throughput != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BenchmarkEntry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BenchmarkEntry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BenchmarkEntry::GetClassData() const { return &_class_data_; }


void BenchmarkEntry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BenchmarkEntry*>(&to_msg);
  auto& from = static_cast<const BenchmarkEntry&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.BenchmarkEntry)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.extras_.MergeFrom(from._impl_.extras_);
  _this->_impl_.metrics_.MergeFrom(from._impl_.metrics_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_iters() != 0) {
    _this->_internal_set_iters(from._internal_iters());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_cpu_time = from._internal_cpu_time();
  uint64_t raw_cpu_time;
  memcpy(&raw_cpu_time, &tmp_cpu_time, sizeof(tmp_cpu_time));
  if (raw_cpu_time != 0) {
    _this->_internal_set_cpu_time(from._internal_cpu_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_wall_time = from._internal_wall_time();
  uint64_t raw_wall_time;
  memcpy(&raw_wall_time, &tmp_wall_time, sizeof(tmp_wall_time));
  if (raw_wall_time != 0) {
    _this->_internal_set_wall_time(from._internal_wall_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_throughput = from._internal_throughput();
  uint64_t raw_throughput;
  memcpy(&raw_throughput, &tmp_throughput, sizeof(tmp_throughput));
  if (raw_throughput != 0) {
    _this->_internal_set_throughput(from._internal_throughput());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BenchmarkEntry::CopyFrom(const BenchmarkEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.BenchmarkEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BenchmarkEntry::IsInitialized() const {
  return true;
}

void BenchmarkEntry::InternalSwap(BenchmarkEntry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.extras_.InternalSwap(&other->_impl_.extras_);
  _impl_.metrics_.InternalSwap(&other->_impl_.metrics_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BenchmarkEntry, _impl_.throughput_)
      + sizeof(BenchmarkEntry::_impl_.throughput_)
      - PROTOBUF_FIELD_OFFSET(BenchmarkEntry, _impl_.iters_)>(
          reinterpret_cast<char*>(&_impl_.iters_),
          reinterpret_cast<char*>(&other->_impl_.iters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BenchmarkEntry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2ftest_5flog_2eproto[3]);
}

// ===================================================================

class BenchmarkEntries::_Internal {
 public:
};

BenchmarkEntries::BenchmarkEntries(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.BenchmarkEntries)
}
BenchmarkEntries::BenchmarkEntries(const BenchmarkEntries& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BenchmarkEntries* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_){from._impl_.entry_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.BenchmarkEntries)
}

inline void BenchmarkEntries::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.entry_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

BenchmarkEntries::~BenchmarkEntries() {
  // @@protoc_insertion_point(destructor:tensorflow.BenchmarkEntries)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BenchmarkEntries::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.entry_.~RepeatedPtrField();
}

void BenchmarkEntries::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BenchmarkEntries::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.BenchmarkEntries)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.entry_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BenchmarkEntries::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.BenchmarkEntry entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_entry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BenchmarkEntries::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.BenchmarkEntries)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.BenchmarkEntry entry = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_entry_size()); i < n; i++) {
    const auto& repfield = this->_internal_entry(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.BenchmarkEntries)
  return target;
}

size_t BenchmarkEntries::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.BenchmarkEntries)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.BenchmarkEntry entry = 1;
  total_size += 1UL * this->_internal_entry_size();
  for (const auto& msg : this->_impl_.entry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BenchmarkEntries::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BenchmarkEntries::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BenchmarkEntries::GetClassData() const { return &_class_data_; }


void BenchmarkEntries::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BenchmarkEntries*>(&to_msg);
  auto& from = static_cast<const BenchmarkEntries&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.BenchmarkEntries)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.entry_.MergeFrom(from._impl_.entry_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BenchmarkEntries::CopyFrom(const BenchmarkEntries& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.BenchmarkEntries)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BenchmarkEntries::IsInitialized() const {
  return true;
}

void BenchmarkEntries::InternalSwap(BenchmarkEntries* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.entry_.InternalSwap(&other->_impl_.entry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BenchmarkEntries::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2ftest_5flog_2eproto[4]);
}

// ===================================================================

class BuildConfiguration::_Internal {
 public:
};

BuildConfiguration::BuildConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.BuildConfiguration)
}
BuildConfiguration::BuildConfiguration(const BuildConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BuildConfiguration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cc_flags_){from._impl_.cc_flags_}
    , decltype(_impl_.opts_){from._impl_.opts_}
    , decltype(_impl_.mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mode().empty()) {
    _this->_impl_.mode_.Set(from._internal_mode(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.BuildConfiguration)
}

inline void BuildConfiguration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cc_flags_){arena}
    , decltype(_impl_.opts_){arena}
    , decltype(_impl_.mode_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BuildConfiguration::~BuildConfiguration() {
  // @@protoc_insertion_point(destructor:tensorflow.BuildConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BuildConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cc_flags_.~RepeatedPtrField();
  _impl_.opts_.~RepeatedPtrField();
  _impl_.mode_.Destroy();
}

void BuildConfiguration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BuildConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.BuildConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cc_flags_.Clear();
  _impl_.opts_.Clear();
  _impl_.mode_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BuildConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.BuildConfiguration.mode"));
        } else
          goto handle_unusual;
        continue;
      // repeated string cc_flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_cc_flags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.BuildConfiguration.cc_flags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string opts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_opts();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.BuildConfiguration.opts"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BuildConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.BuildConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mode = 1;
  if (!this->_internal_mode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mode().data(), static_cast<int>(this->_internal_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.BuildConfiguration.mode");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mode(), target);
  }

  // repeated string cc_flags = 2;
  for (int i = 0, n = this->_internal_cc_flags_size(); i < n; i++) {
    const auto& s = this->_internal_cc_flags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.BuildConfiguration.cc_flags");
    target = stream->WriteString(2, s, target);
  }

  // repeated string opts = 3;
  for (int i = 0, n = this->_internal_opts_size(); i < n; i++) {
    const auto& s = this->_internal_opts(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.BuildConfiguration.opts");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.BuildConfiguration)
  return target;
}

size_t BuildConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.BuildConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string cc_flags = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.cc_flags_.size());
  for (int i = 0, n = _impl_.cc_flags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.cc_flags_.Get(i));
  }

  // repeated string opts = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.opts_.size());
  for (int i = 0, n = _impl_.opts_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.opts_.Get(i));
  }

  // string mode = 1;
  if (!this->_internal_mode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BuildConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BuildConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BuildConfiguration::GetClassData() const { return &_class_data_; }


void BuildConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BuildConfiguration*>(&to_msg);
  auto& from = static_cast<const BuildConfiguration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.BuildConfiguration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cc_flags_.MergeFrom(from._impl_.cc_flags_);
  _this->_impl_.opts_.MergeFrom(from._impl_.opts_);
  if (!from._internal_mode().empty()) {
    _this->_internal_set_mode(from._internal_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BuildConfiguration::CopyFrom(const BuildConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.BuildConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildConfiguration::IsInitialized() const {
  return true;
}

void BuildConfiguration::InternalSwap(BuildConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cc_flags_.InternalSwap(&other->_impl_.cc_flags_);
  _impl_.opts_.InternalSwap(&other->_impl_.opts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.mode_, lhs_arena,
      &other->_impl_.mode_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata BuildConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2ftest_5flog_2eproto[5]);
}

// ===================================================================

class CommitId::_Internal {
 public:
};

CommitId::CommitId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CommitId)
}
CommitId::CommitId(const CommitId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommitId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.snapshot_){}
    , decltype(_impl_.pending_changelist_){}
    , decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.snapshot_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.snapshot_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_snapshot().empty()) {
    _this->_impl_.snapshot_.Set(from._internal_snapshot(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.pending_changelist_ = from._impl_.pending_changelist_;
  clear_has_kind();
  switch (from.kind_case()) {
    case kChangelist: {
      _this->_internal_set_changelist(from._internal_changelist());
      break;
    }
    case kHash: {
      _this->_internal_set_hash(from._internal_hash());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.CommitId)
}

inline void CommitId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.snapshot_){}
    , decltype(_impl_.pending_changelist_){int64_t{0}}
    , decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.snapshot_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.snapshot_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_kind();
}

CommitId::~CommitId() {
  // @@protoc_insertion_point(destructor:tensorflow.CommitId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CommitId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.snapshot_.Destroy();
  if (has_kind()) {
    clear_kind();
  }
}

void CommitId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommitId::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.CommitId)
  switch (kind_case()) {
    case kChangelist: {
      // No need to clear
      break;
    }
    case kHash: {
      _impl_.kind_.hash_.Destroy();
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}


void CommitId::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CommitId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.snapshot_.ClearToEmpty();
  _impl_.pending_changelist_ = int64_t{0};
  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommitId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 changelist = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_changelist(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.CommitId.hash"));
        } else
          goto handle_unusual;
        continue;
      // string snapshot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_snapshot();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.CommitId.snapshot"));
        } else
          goto handle_unusual;
        continue;
      // int64 pending_changelist = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.pending_changelist_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommitId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CommitId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 changelist = 1;
  if (_internal_has_changelist()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_changelist(), target);
  }

  // string hash = 2;
  if (_internal_has_hash()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hash().data(), static_cast<int>(this->_internal_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CommitId.hash");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_hash(), target);
  }

  // string snapshot = 3;
  if (!this->_internal_snapshot().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_snapshot().data(), static_cast<int>(this->_internal_snapshot().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CommitId.snapshot");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_snapshot(), target);
  }

  // int64 pending_changelist = 4;
  if (this->_internal_pending_changelist() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_pending_changelist(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CommitId)
  return target;
}

size_t CommitId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CommitId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string snapshot = 3;
  if (!this->_internal_snapshot().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_snapshot());
  }

  // int64 pending_changelist = 4;
  if (this->_internal_pending_changelist() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_pending_changelist());
  }

  switch (kind_case()) {
    // int64 changelist = 1;
    case kChangelist: {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_changelist());
      break;
    }
    // string hash = 2;
    case kHash: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hash());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommitId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommitId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommitId::GetClassData() const { return &_class_data_; }


void CommitId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommitId*>(&to_msg);
  auto& from = static_cast<const CommitId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CommitId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_snapshot().empty()) {
    _this->_internal_set_snapshot(from._internal_snapshot());
  }
  if (from._internal_pending_changelist() != 0) {
    _this->_internal_set_pending_changelist(from._internal_pending_changelist());
  }
  switch (from.kind_case()) {
    case kChangelist: {
      _this->_internal_set_changelist(from._internal_changelist());
      break;
    }
    case kHash: {
      _this->_internal_set_hash(from._internal_hash());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommitId::CopyFrom(const CommitId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CommitId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommitId::IsInitialized() const {
  return true;
}

void CommitId::InternalSwap(CommitId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.snapshot_, lhs_arena,
      &other->_impl_.snapshot_, rhs_arena
  );
  swap(_impl_.pending_changelist_, other->_impl_.pending_changelist_);
  swap(_impl_.kind_, other->_impl_.kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommitId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2ftest_5flog_2eproto[6]);
}

// ===================================================================

CPUInfo_CacheSizeEntry_DoNotUse::CPUInfo_CacheSizeEntry_DoNotUse() {}
CPUInfo_CacheSizeEntry_DoNotUse::CPUInfo_CacheSizeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CPUInfo_CacheSizeEntry_DoNotUse::MergeFrom(const CPUInfo_CacheSizeEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CPUInfo_CacheSizeEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2ftest_5flog_2eproto[7]);
}

// ===================================================================

class CPUInfo::_Internal {
 public:
};

CPUInfo::CPUInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CPUInfo::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:tensorflow.CPUInfo)
}
CPUInfo::CPUInfo(const CPUInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CPUInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.cache_size_)*/{}
    , decltype(_impl_.cpu_info_){}
    , decltype(_impl_.cpu_governor_){}
    , decltype(_impl_.num_cores_){}
    , decltype(_impl_.num_cores_allowed_){}
    , decltype(_impl_.mhz_per_cpu_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.cache_size_.MergeFrom(from._impl_.cache_size_);
  _impl_.cpu_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpu_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cpu_info().empty()) {
    _this->_impl_.cpu_info_.Set(from._internal_cpu_info(), 
      _this->GetArenaForAllocation());
  }
  _impl_.cpu_governor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpu_governor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cpu_governor().empty()) {
    _this->_impl_.cpu_governor_.Set(from._internal_cpu_governor(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.num_cores_, &from._impl_.num_cores_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mhz_per_cpu_) -
    reinterpret_cast<char*>(&_impl_.num_cores_)) + sizeof(_impl_.mhz_per_cpu_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.CPUInfo)
}

inline void CPUInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.cache_size_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.cpu_info_){}
    , decltype(_impl_.cpu_governor_){}
    , decltype(_impl_.num_cores_){int64_t{0}}
    , decltype(_impl_.num_cores_allowed_){int64_t{0}}
    , decltype(_impl_.mhz_per_cpu_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.cpu_info_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpu_info_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.cpu_governor_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.cpu_governor_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CPUInfo::~CPUInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.CPUInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CPUInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cache_size_.Destruct();
  _impl_.cache_size_.~MapField();
  _impl_.cpu_info_.Destroy();
  _impl_.cpu_governor_.Destroy();
}

void CPUInfo::ArenaDtor(void* object) {
  CPUInfo* _this = reinterpret_cast< CPUInfo* >(object);
  _this->_impl_.cache_size_.Destruct();
}
void CPUInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CPUInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CPUInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cache_size_.Clear();
  _impl_.cpu_info_.ClearToEmpty();
  _impl_.cpu_governor_.ClearToEmpty();
  ::memset(&_impl_.num_cores_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mhz_per_cpu_) -
      reinterpret_cast<char*>(&_impl_.num_cores_)) + sizeof(_impl_.mhz_per_cpu_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CPUInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 num_cores = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.num_cores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 num_cores_allowed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_cores_allowed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double mhz_per_cpu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.mhz_per_cpu_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // string cpu_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_cpu_info();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.CPUInfo.cpu_info"));
        } else
          goto handle_unusual;
        continue;
      // string cpu_governor = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_cpu_governor();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.CPUInfo.cpu_governor"));
        } else
          goto handle_unusual;
        continue;
      // map<string, int64> cache_size = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.cache_size_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CPUInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CPUInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 num_cores = 1;
  if (this->_internal_num_cores() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_num_cores(), target);
  }

  // int64 num_cores_allowed = 2;
  if (this->_internal_num_cores_allowed() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_num_cores_allowed(), target);
  }

  // double mhz_per_cpu = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mhz_per_cpu = this->_internal_mhz_per_cpu();
  uint64_t raw_mhz_per_cpu;
  memcpy(&raw_mhz_per_cpu, &tmp_mhz_per_cpu, sizeof(tmp_mhz_per_cpu));
  if (raw_mhz_per_cpu != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_mhz_per_cpu(), target);
  }

  // string cpu_info = 4;
  if (!this->_internal_cpu_info().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpu_info().data(), static_cast<int>(this->_internal_cpu_info().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CPUInfo.cpu_info");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_cpu_info(), target);
  }

  // string cpu_governor = 5;
  if (!this->_internal_cpu_governor().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpu_governor().data(), static_cast<int>(this->_internal_cpu_governor().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CPUInfo.cpu_governor");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_cpu_governor(), target);
  }

  // map<string, int64> cache_size = 6;
  if (!this->_internal_cache_size().empty()) {
    using MapType = ::_pb::Map<std::string, int64_t>;
    using WireHelper = CPUInfo_CacheSizeEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_cache_size();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "tensorflow.CPUInfo.CacheSizeEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(6, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CPUInfo)
  return target;
}

size_t CPUInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CPUInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int64> cache_size = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_cache_size_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int64_t >::const_iterator
      it = this->_internal_cache_size().begin();
      it != this->_internal_cache_size().end(); ++it) {
    total_size += CPUInfo_CacheSizeEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string cpu_info = 4;
  if (!this->_internal_cpu_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpu_info());
  }

  // string cpu_governor = 5;
  if (!this->_internal_cpu_governor().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpu_governor());
  }

  // int64 num_cores = 1;
  if (this->_internal_num_cores() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_cores());
  }

  // int64 num_cores_allowed = 2;
  if (this->_internal_num_cores_allowed() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_cores_allowed());
  }

  // double mhz_per_cpu = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mhz_per_cpu = this->_internal_mhz_per_cpu();
  uint64_t raw_mhz_per_cpu;
  memcpy(&raw_mhz_per_cpu, &tmp_mhz_per_cpu, sizeof(tmp_mhz_per_cpu));
  if (raw_mhz_per_cpu != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CPUInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CPUInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CPUInfo::GetClassData() const { return &_class_data_; }


void CPUInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CPUInfo*>(&to_msg);
  auto& from = static_cast<const CPUInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CPUInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cache_size_.MergeFrom(from._impl_.cache_size_);
  if (!from._internal_cpu_info().empty()) {
    _this->_internal_set_cpu_info(from._internal_cpu_info());
  }
  if (!from._internal_cpu_governor().empty()) {
    _this->_internal_set_cpu_governor(from._internal_cpu_governor());
  }
  if (from._internal_num_cores() != 0) {
    _this->_internal_set_num_cores(from._internal_num_cores());
  }
  if (from._internal_num_cores_allowed() != 0) {
    _this->_internal_set_num_cores_allowed(from._internal_num_cores_allowed());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mhz_per_cpu = from._internal_mhz_per_cpu();
  uint64_t raw_mhz_per_cpu;
  memcpy(&raw_mhz_per_cpu, &tmp_mhz_per_cpu, sizeof(tmp_mhz_per_cpu));
  if (raw_mhz_per_cpu != 0) {
    _this->_internal_set_mhz_per_cpu(from._internal_mhz_per_cpu());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CPUInfo::CopyFrom(const CPUInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CPUInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CPUInfo::IsInitialized() const {
  return true;
}

void CPUInfo::InternalSwap(CPUInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cache_size_.InternalSwap(&other->_impl_.cache_size_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cpu_info_, lhs_arena,
      &other->_impl_.cpu_info_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.cpu_governor_, lhs_arena,
      &other->_impl_.cpu_governor_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CPUInfo, _impl_.mhz_per_cpu_)
      + sizeof(CPUInfo::_impl_.mhz_per_cpu_)
      - PROTOBUF_FIELD_OFFSET(CPUInfo, _impl_.num_cores_)>(
          reinterpret_cast<char*>(&_impl_.num_cores_),
          reinterpret_cast<char*>(&other->_impl_.num_cores_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CPUInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2ftest_5flog_2eproto[8]);
}

// ===================================================================

class MemoryInfo::_Internal {
 public:
};

MemoryInfo::MemoryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MemoryInfo)
}
MemoryInfo::MemoryInfo(const MemoryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MemoryInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.total_){}
    , decltype(_impl_.available_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.total_, &from._impl_.total_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.available_) -
    reinterpret_cast<char*>(&_impl_.total_)) + sizeof(_impl_.available_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.MemoryInfo)
}

inline void MemoryInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.total_){int64_t{0}}
    , decltype(_impl_.available_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MemoryInfo::~MemoryInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.MemoryInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MemoryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MemoryInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MemoryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MemoryInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.total_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.available_) -
      reinterpret_cast<char*>(&_impl_.total_)) + sizeof(_impl_.available_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MemoryInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 total = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.total_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 available = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.available_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MemoryInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MemoryInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 total = 1;
  if (this->_internal_total() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_total(), target);
  }

  // int64 available = 2;
  if (this->_internal_available() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_available(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MemoryInfo)
  return target;
}

size_t MemoryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MemoryInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 total = 1;
  if (this->_internal_total() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_total());
  }

  // int64 available = 2;
  if (this->_internal_available() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_available());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MemoryInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MemoryInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MemoryInfo::GetClassData() const { return &_class_data_; }


void MemoryInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MemoryInfo*>(&to_msg);
  auto& from = static_cast<const MemoryInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MemoryInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_total() != 0) {
    _this->_internal_set_total(from._internal_total());
  }
  if (from._internal_available() != 0) {
    _this->_internal_set_available(from._internal_available());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MemoryInfo::CopyFrom(const MemoryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MemoryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryInfo::IsInitialized() const {
  return true;
}

void MemoryInfo::InternalSwap(MemoryInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MemoryInfo, _impl_.available_)
      + sizeof(MemoryInfo::_impl_.available_)
      - PROTOBUF_FIELD_OFFSET(MemoryInfo, _impl_.total_)>(
          reinterpret_cast<char*>(&_impl_.total_),
          reinterpret_cast<char*>(&other->_impl_.total_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MemoryInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2ftest_5flog_2eproto[9]);
}

// ===================================================================

class GPUInfo::_Internal {
 public:
};

GPUInfo::GPUInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GPUInfo)
}
GPUInfo::GPUInfo(const GPUInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GPUInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.model_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.bus_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    _this->_impl_.model_.Set(from._internal_model(), 
      _this->GetArenaForAllocation());
  }
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_uuid().empty()) {
    _this->_impl_.uuid_.Set(from._internal_uuid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.bus_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bus_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bus_id().empty()) {
    _this->_impl_.bus_id_.Set(from._internal_bus_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.GPUInfo)
}

inline void GPUInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.model_){}
    , decltype(_impl_.uuid_){}
    , decltype(_impl_.bus_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.uuid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.uuid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bus_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bus_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GPUInfo::~GPUInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.GPUInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GPUInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.model_.Destroy();
  _impl_.uuid_.Destroy();
  _impl_.bus_id_.Destroy();
}

void GPUInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GPUInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GPUInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.model_.ClearToEmpty();
  _impl_.uuid_.ClearToEmpty();
  _impl_.bus_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPUInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string model = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.GPUInfo.model"));
        } else
          goto handle_unusual;
        continue;
      // string uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_uuid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.GPUInfo.uuid"));
        } else
          goto handle_unusual;
        continue;
      // string bus_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_bus_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.GPUInfo.bus_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GPUInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GPUInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1;
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GPUInfo.model");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model(), target);
  }

  // string uuid = 2;
  if (!this->_internal_uuid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GPUInfo.uuid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uuid(), target);
  }

  // string bus_id = 3;
  if (!this->_internal_bus_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bus_id().data(), static_cast<int>(this->_internal_bus_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GPUInfo.bus_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_bus_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GPUInfo)
  return target;
}

size_t GPUInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GPUInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string model = 1;
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // string uuid = 2;
  if (!this->_internal_uuid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // string bus_id = 3;
  if (!this->_internal_bus_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bus_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GPUInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GPUInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GPUInfo::GetClassData() const { return &_class_data_; }


void GPUInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GPUInfo*>(&to_msg);
  auto& from = static_cast<const GPUInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GPUInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_model().empty()) {
    _this->_internal_set_model(from._internal_model());
  }
  if (!from._internal_uuid().empty()) {
    _this->_internal_set_uuid(from._internal_uuid());
  }
  if (!from._internal_bus_id().empty()) {
    _this->_internal_set_bus_id(from._internal_bus_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GPUInfo::CopyFrom(const GPUInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GPUInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPUInfo::IsInitialized() const {
  return true;
}

void GPUInfo::InternalSwap(GPUInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_, lhs_arena,
      &other->_impl_.model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.uuid_, lhs_arena,
      &other->_impl_.uuid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bus_id_, lhs_arena,
      &other->_impl_.bus_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GPUInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2ftest_5flog_2eproto[10]);
}

// ===================================================================

class PlatformInfo::_Internal {
 public:
};

PlatformInfo::PlatformInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.PlatformInfo)
}
PlatformInfo::PlatformInfo(const PlatformInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlatformInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bits_){}
    , decltype(_impl_.linkage_){}
    , decltype(_impl_.machine_){}
    , decltype(_impl_.release_){}
    , decltype(_impl_.system_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.bits_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bits_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bits().empty()) {
    _this->_impl_.bits_.Set(from._internal_bits(), 
      _this->GetArenaForAllocation());
  }
  _impl_.linkage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.linkage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_linkage().empty()) {
    _this->_impl_.linkage_.Set(from._internal_linkage(), 
      _this->GetArenaForAllocation());
  }
  _impl_.machine_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.machine_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_machine().empty()) {
    _this->_impl_.machine_.Set(from._internal_machine(), 
      _this->GetArenaForAllocation());
  }
  _impl_.release_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.release_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_release().empty()) {
    _this->_impl_.release_.Set(from._internal_release(), 
      _this->GetArenaForAllocation());
  }
  _impl_.system_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.system_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_system().empty()) {
    _this->_impl_.system_.Set(from._internal_system(), 
      _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.PlatformInfo)
}

inline void PlatformInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bits_){}
    , decltype(_impl_.linkage_){}
    , decltype(_impl_.machine_){}
    , decltype(_impl_.release_){}
    , decltype(_impl_.system_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.bits_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.bits_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.linkage_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.linkage_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.machine_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.machine_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.release_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.release_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.system_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.system_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PlatformInfo::~PlatformInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.PlatformInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlatformInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bits_.Destroy();
  _impl_.linkage_.Destroy();
  _impl_.machine_.Destroy();
  _impl_.release_.Destroy();
  _impl_.system_.Destroy();
  _impl_.version_.Destroy();
}

void PlatformInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlatformInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.PlatformInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bits_.ClearToEmpty();
  _impl_.linkage_.ClearToEmpty();
  _impl_.machine_.ClearToEmpty();
  _impl_.release_.ClearToEmpty();
  _impl_.system_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlatformInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string bits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_bits();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.PlatformInfo.bits"));
        } else
          goto handle_unusual;
        continue;
      // string linkage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_linkage();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.PlatformInfo.linkage"));
        } else
          goto handle_unusual;
        continue;
      // string machine = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_machine();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.PlatformInfo.machine"));
        } else
          goto handle_unusual;
        continue;
      // string release = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_release();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.PlatformInfo.release"));
        } else
          goto handle_unusual;
        continue;
      // string system = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_system();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.PlatformInfo.system"));
        } else
          goto handle_unusual;
        continue;
      // string version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.PlatformInfo.version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlatformInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.PlatformInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string bits = 1;
  if (!this->_internal_bits().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_bits().data(), static_cast<int>(this->_internal_bits().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.bits");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_bits(), target);
  }

  // string linkage = 2;
  if (!this->_internal_linkage().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_linkage().data(), static_cast<int>(this->_internal_linkage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.linkage");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_linkage(), target);
  }

  // string machine = 3;
  if (!this->_internal_machine().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_machine().data(), static_cast<int>(this->_internal_machine().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.machine");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_machine(), target);
  }

  // string release = 4;
  if (!this->_internal_release().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_release().data(), static_cast<int>(this->_internal_release().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.release");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_release(), target);
  }

  // string system = 5;
  if (!this->_internal_system().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_system().data(), static_cast<int>(this->_internal_system().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.system");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_system(), target);
  }

  // string version = 6;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PlatformInfo.version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.PlatformInfo)
  return target;
}

size_t PlatformInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.PlatformInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string bits = 1;
  if (!this->_internal_bits().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_bits());
  }

  // string linkage = 2;
  if (!this->_internal_linkage().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_linkage());
  }

  // string machine = 3;
  if (!this->_internal_machine().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_machine());
  }

  // string release = 4;
  if (!this->_internal_release().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_release());
  }

  // string system = 5;
  if (!this->_internal_system().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_system());
  }

  // string version = 6;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlatformInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlatformInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlatformInfo::GetClassData() const { return &_class_data_; }


void PlatformInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlatformInfo*>(&to_msg);
  auto& from = static_cast<const PlatformInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.PlatformInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_bits().empty()) {
    _this->_internal_set_bits(from._internal_bits());
  }
  if (!from._internal_linkage().empty()) {
    _this->_internal_set_linkage(from._internal_linkage());
  }
  if (!from._internal_machine().empty()) {
    _this->_internal_set_machine(from._internal_machine());
  }
  if (!from._internal_release().empty()) {
    _this->_internal_set_release(from._internal_release());
  }
  if (!from._internal_system().empty()) {
    _this->_internal_set_system(from._internal_system());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlatformInfo::CopyFrom(const PlatformInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.PlatformInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlatformInfo::IsInitialized() const {
  return true;
}

void PlatformInfo::InternalSwap(PlatformInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.bits_, lhs_arena,
      &other->_impl_.bits_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.linkage_, lhs_arena,
      &other->_impl_.linkage_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.machine_, lhs_arena,
      &other->_impl_.machine_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.release_, lhs_arena,
      &other->_impl_.release_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.system_, lhs_arena,
      &other->_impl_.system_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.version_, lhs_arena,
      &other->_impl_.version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PlatformInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2ftest_5flog_2eproto[11]);
}

// ===================================================================

class AvailableDeviceInfo::_Internal {
 public:
};

AvailableDeviceInfo::AvailableDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.AvailableDeviceInfo)
}
AvailableDeviceInfo::AvailableDeviceInfo(const AvailableDeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AvailableDeviceInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.physical_description_){}
    , decltype(_impl_.memory_limit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.physical_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.physical_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_physical_description().empty()) {
    _this->_impl_.physical_description_.Set(from._internal_physical_description(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.memory_limit_ = from._impl_.memory_limit_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.AvailableDeviceInfo)
}

inline void AvailableDeviceInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.physical_description_){}
    , decltype(_impl_.memory_limit_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.physical_description_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.physical_description_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AvailableDeviceInfo::~AvailableDeviceInfo() {
  // @@protoc_insertion_point(destructor:tensorflow.AvailableDeviceInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AvailableDeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.type_.Destroy();
  _impl_.physical_description_.Destroy();
}

void AvailableDeviceInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AvailableDeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.AvailableDeviceInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.physical_description_.ClearToEmpty();
  _impl_.memory_limit_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AvailableDeviceInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.AvailableDeviceInfo.name"));
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.AvailableDeviceInfo.type"));
        } else
          goto handle_unusual;
        continue;
      // int64 memory_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.memory_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string physical_description = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_physical_description();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.AvailableDeviceInfo.physical_description"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AvailableDeviceInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.AvailableDeviceInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AvailableDeviceInfo.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AvailableDeviceInfo.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // int64 memory_limit = 3;
  if (this->_internal_memory_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_memory_limit(), target);
  }

  // string physical_description = 4;
  if (!this->_internal_physical_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_physical_description().data(), static_cast<int>(this->_internal_physical_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.AvailableDeviceInfo.physical_description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_physical_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.AvailableDeviceInfo)
  return target;
}

size_t AvailableDeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.AvailableDeviceInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string physical_description = 4;
  if (!this->_internal_physical_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_physical_description());
  }

  // int64 memory_limit = 3;
  if (this->_internal_memory_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_memory_limit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AvailableDeviceInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AvailableDeviceInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AvailableDeviceInfo::GetClassData() const { return &_class_data_; }


void AvailableDeviceInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AvailableDeviceInfo*>(&to_msg);
  auto& from = static_cast<const AvailableDeviceInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.AvailableDeviceInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_physical_description().empty()) {
    _this->_internal_set_physical_description(from._internal_physical_description());
  }
  if (from._internal_memory_limit() != 0) {
    _this->_internal_set_memory_limit(from._internal_memory_limit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AvailableDeviceInfo::CopyFrom(const AvailableDeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.AvailableDeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AvailableDeviceInfo::IsInitialized() const {
  return true;
}

void AvailableDeviceInfo::InternalSwap(AvailableDeviceInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.physical_description_, lhs_arena,
      &other->_impl_.physical_description_, rhs_arena
  );
  swap(_impl_.memory_limit_, other->_impl_.memory_limit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AvailableDeviceInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2ftest_5flog_2eproto[12]);
}

// ===================================================================

class MachineConfiguration::_Internal {
 public:
  static const ::tensorflow::PlatformInfo& platform_info(const MachineConfiguration* msg);
  static const ::tensorflow::CPUInfo& cpu_info(const MachineConfiguration* msg);
  static const ::tensorflow::MemoryInfo& memory_info(const MachineConfiguration* msg);
};

const ::tensorflow::PlatformInfo&
MachineConfiguration::_Internal::platform_info(const MachineConfiguration* msg) {
  return *msg->_impl_.platform_info_;
}
const ::tensorflow::CPUInfo&
MachineConfiguration::_Internal::cpu_info(const MachineConfiguration* msg) {
  return *msg->_impl_.cpu_info_;
}
const ::tensorflow::MemoryInfo&
MachineConfiguration::_Internal::memory_info(const MachineConfiguration* msg) {
  return *msg->_impl_.memory_info_;
}
void MachineConfiguration::clear_device_info() {
  _impl_.device_info_.Clear();
}
MachineConfiguration::MachineConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MachineConfiguration)
}
MachineConfiguration::MachineConfiguration(const MachineConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MachineConfiguration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_info_){from._impl_.device_info_}
    , decltype(_impl_.available_device_info_){from._impl_.available_device_info_}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.serial_identifier_){}
    , decltype(_impl_.platform_info_){nullptr}
    , decltype(_impl_.cpu_info_){nullptr}
    , decltype(_impl_.memory_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_hostname().empty()) {
    _this->_impl_.hostname_.Set(from._internal_hostname(), 
      _this->GetArenaForAllocation());
  }
  _impl_.serial_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serial_identifier().empty()) {
    _this->_impl_.serial_identifier_.Set(from._internal_serial_identifier(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_platform_info()) {
    _this->_impl_.platform_info_ = new ::tensorflow::PlatformInfo(*from._impl_.platform_info_);
  }
  if (from._internal_has_cpu_info()) {
    _this->_impl_.cpu_info_ = new ::tensorflow::CPUInfo(*from._impl_.cpu_info_);
  }
  if (from._internal_has_memory_info()) {
    _this->_impl_.memory_info_ = new ::tensorflow::MemoryInfo(*from._impl_.memory_info_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.MachineConfiguration)
}

inline void MachineConfiguration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_info_){arena}
    , decltype(_impl_.available_device_info_){arena}
    , decltype(_impl_.hostname_){}
    , decltype(_impl_.serial_identifier_){}
    , decltype(_impl_.platform_info_){nullptr}
    , decltype(_impl_.cpu_info_){nullptr}
    , decltype(_impl_.memory_info_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.hostname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hostname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.serial_identifier_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.serial_identifier_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MachineConfiguration::~MachineConfiguration() {
  // @@protoc_insertion_point(destructor:tensorflow.MachineConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MachineConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_info_.~RepeatedPtrField();
  _impl_.available_device_info_.~RepeatedPtrField();
  _impl_.hostname_.Destroy();
  _impl_.serial_identifier_.Destroy();
  if (this != internal_default_instance()) delete _impl_.platform_info_;
  if (this != internal_default_instance()) delete _impl_.cpu_info_;
  if (this != internal_default_instance()) delete _impl_.memory_info_;
}

void MachineConfiguration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MachineConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MachineConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_info_.Clear();
  _impl_.available_device_info_.Clear();
  _impl_.hostname_.ClearToEmpty();
  _impl_.serial_identifier_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.platform_info_ != nullptr) {
    delete _impl_.platform_info_;
  }
  _impl_.platform_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.cpu_info_ != nullptr) {
    delete _impl_.cpu_info_;
  }
  _impl_.cpu_info_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.memory_info_ != nullptr) {
    delete _impl_.memory_info_;
  }
  _impl_.memory_info_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MachineConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string hostname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_hostname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.MachineConfiguration.hostname"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.PlatformInfo platform_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_platform_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.CPUInfo cpu_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cpu_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any device_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_device_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.AvailableDeviceInfo available_device_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_available_device_info(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.MemoryInfo memory_info = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_memory_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string serial_identifier = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_serial_identifier();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.MachineConfiguration.serial_identifier"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MachineConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MachineConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string hostname = 1;
  if (!this->_internal_hostname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hostname().data(), static_cast<int>(this->_internal_hostname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MachineConfiguration.hostname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hostname(), target);
  }

  // .tensorflow.PlatformInfo platform_info = 2;
  if (this->_internal_has_platform_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::platform_info(this),
        _Internal::platform_info(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.CPUInfo cpu_info = 3;
  if (this->_internal_has_cpu_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::cpu_info(this),
        _Internal::cpu_info(this).GetCachedSize(), target, stream);
  }

  // repeated .google.protobuf.Any device_info = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_device_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_device_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tensorflow.AvailableDeviceInfo available_device_info = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_available_device_info_size()); i < n; i++) {
    const auto& repfield = this->_internal_available_device_info(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tensorflow.MemoryInfo memory_info = 6;
  if (this->_internal_has_memory_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::memory_info(this),
        _Internal::memory_info(this).GetCachedSize(), target, stream);
  }

  // string serial_identifier = 7;
  if (!this->_internal_serial_identifier().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serial_identifier().data(), static_cast<int>(this->_internal_serial_identifier().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.MachineConfiguration.serial_identifier");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_serial_identifier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MachineConfiguration)
  return target;
}

size_t MachineConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MachineConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any device_info = 4;
  total_size += 1UL * this->_internal_device_info_size();
  for (const auto& msg : this->_impl_.device_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.AvailableDeviceInfo available_device_info = 5;
  total_size += 1UL * this->_internal_available_device_info_size();
  for (const auto& msg : this->_impl_.available_device_info_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string hostname = 1;
  if (!this->_internal_hostname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hostname());
  }

  // string serial_identifier = 7;
  if (!this->_internal_serial_identifier().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial_identifier());
  }

  // .tensorflow.PlatformInfo platform_info = 2;
  if (this->_internal_has_platform_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.platform_info_);
  }

  // .tensorflow.CPUInfo cpu_info = 3;
  if (this->_internal_has_cpu_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.cpu_info_);
  }

  // .tensorflow.MemoryInfo memory_info = 6;
  if (this->_internal_has_memory_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.memory_info_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MachineConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MachineConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MachineConfiguration::GetClassData() const { return &_class_data_; }


void MachineConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MachineConfiguration*>(&to_msg);
  auto& from = static_cast<const MachineConfiguration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MachineConfiguration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.device_info_.MergeFrom(from._impl_.device_info_);
  _this->_impl_.available_device_info_.MergeFrom(from._impl_.available_device_info_);
  if (!from._internal_hostname().empty()) {
    _this->_internal_set_hostname(from._internal_hostname());
  }
  if (!from._internal_serial_identifier().empty()) {
    _this->_internal_set_serial_identifier(from._internal_serial_identifier());
  }
  if (from._internal_has_platform_info()) {
    _this->_internal_mutable_platform_info()->::tensorflow::PlatformInfo::MergeFrom(
        from._internal_platform_info());
  }
  if (from._internal_has_cpu_info()) {
    _this->_internal_mutable_cpu_info()->::tensorflow::CPUInfo::MergeFrom(
        from._internal_cpu_info());
  }
  if (from._internal_has_memory_info()) {
    _this->_internal_mutable_memory_info()->::tensorflow::MemoryInfo::MergeFrom(
        from._internal_memory_info());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MachineConfiguration::CopyFrom(const MachineConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MachineConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineConfiguration::IsInitialized() const {
  return true;
}

void MachineConfiguration::InternalSwap(MachineConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.device_info_.InternalSwap(&other->_impl_.device_info_);
  _impl_.available_device_info_.InternalSwap(&other->_impl_.available_device_info_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hostname_, lhs_arena,
      &other->_impl_.hostname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.serial_identifier_, lhs_arena,
      &other->_impl_.serial_identifier_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MachineConfiguration, _impl_.memory_info_)
      + sizeof(MachineConfiguration::_impl_.memory_info_)
      - PROTOBUF_FIELD_OFFSET(MachineConfiguration, _impl_.platform_info_)>(
          reinterpret_cast<char*>(&_impl_.platform_info_),
          reinterpret_cast<char*>(&other->_impl_.platform_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MachineConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2ftest_5flog_2eproto[13]);
}

// ===================================================================

RunConfiguration_EnvVarsEntry_DoNotUse::RunConfiguration_EnvVarsEntry_DoNotUse() {}
RunConfiguration_EnvVarsEntry_DoNotUse::RunConfiguration_EnvVarsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void RunConfiguration_EnvVarsEntry_DoNotUse::MergeFrom(const RunConfiguration_EnvVarsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata RunConfiguration_EnvVarsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2ftest_5flog_2eproto[14]);
}

// ===================================================================

class RunConfiguration::_Internal {
 public:
};

RunConfiguration::RunConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &RunConfiguration::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:tensorflow.RunConfiguration)
}
RunConfiguration::RunConfiguration(const RunConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RunConfiguration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.argument_){from._impl_.argument_}
    , /*decltype(_impl_.env_vars_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.env_vars_.MergeFrom(from._impl_.env_vars_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.RunConfiguration)
}

inline void RunConfiguration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.argument_){arena}
    , /*decltype(_impl_.env_vars_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RunConfiguration::~RunConfiguration() {
  // @@protoc_insertion_point(destructor:tensorflow.RunConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void RunConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.argument_.~RepeatedPtrField();
  _impl_.env_vars_.Destruct();
  _impl_.env_vars_.~MapField();
}

void RunConfiguration::ArenaDtor(void* object) {
  RunConfiguration* _this = reinterpret_cast< RunConfiguration* >(object);
  _this->_impl_.env_vars_.Destruct();
}
void RunConfiguration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RunConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.RunConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.argument_.Clear();
  _impl_.env_vars_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string argument = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_argument();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.RunConfiguration.argument"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> env_vars = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.env_vars_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RunConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.RunConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string argument = 1;
  for (int i = 0, n = this->_internal_argument_size(); i < n; i++) {
    const auto& s = this->_internal_argument(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.RunConfiguration.argument");
    target = stream->WriteString(1, s, target);
  }

  // map<string, string> env_vars = 2;
  if (!this->_internal_env_vars().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = RunConfiguration_EnvVarsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_env_vars();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "tensorflow.RunConfiguration.EnvVarsEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "tensorflow.RunConfiguration.EnvVarsEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.RunConfiguration)
  return target;
}

size_t RunConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.RunConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string argument = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.argument_.size());
  for (int i = 0, n = _impl_.argument_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.argument_.Get(i));
  }

  // map<string, string> env_vars = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_env_vars_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_env_vars().begin();
      it != this->_internal_env_vars().end(); ++it) {
    total_size += RunConfiguration_EnvVarsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RunConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunConfiguration::GetClassData() const { return &_class_data_; }


void RunConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RunConfiguration*>(&to_msg);
  auto& from = static_cast<const RunConfiguration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.RunConfiguration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.argument_.MergeFrom(from._impl_.argument_);
  _this->_impl_.env_vars_.MergeFrom(from._impl_.env_vars_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunConfiguration::CopyFrom(const RunConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.RunConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunConfiguration::IsInitialized() const {
  return true;
}

void RunConfiguration::InternalSwap(RunConfiguration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.argument_.InternalSwap(&other->_impl_.argument_);
  _impl_.env_vars_.InternalSwap(&other->_impl_.env_vars_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2ftest_5flog_2eproto[15]);
}

// ===================================================================

class TestResults::_Internal {
 public:
  static const ::tensorflow::BenchmarkEntries& entries(const TestResults* msg);
  static const ::tensorflow::BuildConfiguration& build_configuration(const TestResults* msg);
  static const ::tensorflow::CommitId& commit_id(const TestResults* msg);
  static const ::tensorflow::MachineConfiguration& machine_configuration(const TestResults* msg);
  static const ::tensorflow::RunConfiguration& run_configuration(const TestResults* msg);
};

const ::tensorflow::BenchmarkEntries&
TestResults::_Internal::entries(const TestResults* msg) {
  return *msg->_impl_.entries_;
}
const ::tensorflow::BuildConfiguration&
TestResults::_Internal::build_configuration(const TestResults* msg) {
  return *msg->_impl_.build_configuration_;
}
const ::tensorflow::CommitId&
TestResults::_Internal::commit_id(const TestResults* msg) {
  return *msg->_impl_.commit_id_;
}
const ::tensorflow::MachineConfiguration&
TestResults::_Internal::machine_configuration(const TestResults* msg) {
  return *msg->_impl_.machine_configuration_;
}
const ::tensorflow::RunConfiguration&
TestResults::_Internal::run_configuration(const TestResults* msg) {
  return *msg->_impl_.run_configuration_;
}
TestResults::TestResults(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TestResults)
}
TestResults::TestResults(const TestResults& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TestResults* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.run_mode_){}
    , decltype(_impl_.tf_version_){}
    , decltype(_impl_.entries_){nullptr}
    , decltype(_impl_.build_configuration_){nullptr}
    , decltype(_impl_.commit_id_){nullptr}
    , decltype(_impl_.machine_configuration_){nullptr}
    , decltype(_impl_.run_configuration_){nullptr}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.run_time_){}
    , decltype(_impl_.benchmark_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target().empty()) {
    _this->_impl_.target_.Set(from._internal_target(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.run_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.run_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_run_mode().empty()) {
    _this->_impl_.run_mode_.Set(from._internal_run_mode(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tf_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tf_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tf_version().empty()) {
    _this->_impl_.tf_version_.Set(from._internal_tf_version(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_entries()) {
    _this->_impl_.entries_ = new ::tensorflow::BenchmarkEntries(*from._impl_.entries_);
  }
  if (from._internal_has_build_configuration()) {
    _this->_impl_.build_configuration_ = new ::tensorflow::BuildConfiguration(*from._impl_.build_configuration_);
  }
  if (from._internal_has_commit_id()) {
    _this->_impl_.commit_id_ = new ::tensorflow::CommitId(*from._impl_.commit_id_);
  }
  if (from._internal_has_machine_configuration()) {
    _this->_impl_.machine_configuration_ = new ::tensorflow::MachineConfiguration(*from._impl_.machine_configuration_);
  }
  if (from._internal_has_run_configuration()) {
    _this->_impl_.run_configuration_ = new ::tensorflow::RunConfiguration(*from._impl_.run_configuration_);
  }
  ::memcpy(&_impl_.start_time_, &from._impl_.start_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.benchmark_type_) -
    reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.benchmark_type_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.TestResults)
}

inline void TestResults::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.run_mode_){}
    , decltype(_impl_.tf_version_){}
    , decltype(_impl_.entries_){nullptr}
    , decltype(_impl_.build_configuration_){nullptr}
    , decltype(_impl_.commit_id_){nullptr}
    , decltype(_impl_.machine_configuration_){nullptr}
    , decltype(_impl_.run_configuration_){nullptr}
    , decltype(_impl_.start_time_){int64_t{0}}
    , decltype(_impl_.run_time_){0}
    , decltype(_impl_.benchmark_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.target_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.target_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.run_mode_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.run_mode_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tf_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tf_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TestResults::~TestResults() {
  // @@protoc_insertion_point(destructor:tensorflow.TestResults)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TestResults::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_.Destroy();
  _impl_.name_.Destroy();
  _impl_.run_mode_.Destroy();
  _impl_.tf_version_.Destroy();
  if (this != internal_default_instance()) delete _impl_.entries_;
  if (this != internal_default_instance()) delete _impl_.build_configuration_;
  if (this != internal_default_instance()) delete _impl_.commit_id_;
  if (this != internal_default_instance()) delete _impl_.machine_configuration_;
  if (this != internal_default_instance()) delete _impl_.run_configuration_;
}

void TestResults::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TestResults::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TestResults)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.run_mode_.ClearToEmpty();
  _impl_.tf_version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.entries_ != nullptr) {
    delete _impl_.entries_;
  }
  _impl_.entries_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.build_configuration_ != nullptr) {
    delete _impl_.build_configuration_;
  }
  _impl_.build_configuration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.commit_id_ != nullptr) {
    delete _impl_.commit_id_;
  }
  _impl_.commit_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.machine_configuration_ != nullptr) {
    delete _impl_.machine_configuration_;
  }
  _impl_.machine_configuration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.run_configuration_ != nullptr) {
    delete _impl_.run_configuration_;
  }
  _impl_.run_configuration_ = nullptr;
  ::memset(&_impl_.start_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.benchmark_type_) -
      reinterpret_cast<char*>(&_impl_.start_time_)) + sizeof(_impl_.benchmark_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TestResults::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_target();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.TestResults.target"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.BenchmarkEntries entries = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_entries(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.BuildConfiguration build_configuration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_build_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.CommitId commit_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 start_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.start_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double run_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.run_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.MachineConfiguration machine_configuration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_machine_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.RunConfiguration run_configuration = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_run_configuration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.TestResults.name"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TestResults.BenchmarkType benchmark_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_benchmark_type(static_cast<::tensorflow::TestResults_BenchmarkType>(val));
        } else
          goto handle_unusual;
        continue;
      // string run_mode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_run_mode();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.TestResults.run_mode"));
        } else
          goto handle_unusual;
        continue;
      // string tf_version = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_tf_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.TestResults.tf_version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TestResults::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TestResults)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string target = 1;
  if (!this->_internal_target().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TestResults.target");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_target(), target);
  }

  // .tensorflow.BenchmarkEntries entries = 2;
  if (this->_internal_has_entries()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::entries(this),
        _Internal::entries(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.BuildConfiguration build_configuration = 3;
  if (this->_internal_has_build_configuration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::build_configuration(this),
        _Internal::build_configuration(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.CommitId commit_id = 4;
  if (this->_internal_has_commit_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::commit_id(this),
        _Internal::commit_id(this).GetCachedSize(), target, stream);
  }

  // int64 start_time = 5;
  if (this->_internal_start_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_start_time(), target);
  }

  // double run_time = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_run_time = this->_internal_run_time();
  uint64_t raw_run_time;
  memcpy(&raw_run_time, &tmp_run_time, sizeof(tmp_run_time));
  if (raw_run_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_run_time(), target);
  }

  // .tensorflow.MachineConfiguration machine_configuration = 7;
  if (this->_internal_has_machine_configuration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::machine_configuration(this),
        _Internal::machine_configuration(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.RunConfiguration run_configuration = 8;
  if (this->_internal_has_run_configuration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::run_configuration(this),
        _Internal::run_configuration(this).GetCachedSize(), target, stream);
  }

  // string name = 9;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TestResults.name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_name(), target);
  }

  // .tensorflow.TestResults.BenchmarkType benchmark_type = 10;
  if (this->_internal_benchmark_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      10, this->_internal_benchmark_type(), target);
  }

  // string run_mode = 11;
  if (!this->_internal_run_mode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_run_mode().data(), static_cast<int>(this->_internal_run_mode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TestResults.run_mode");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_run_mode(), target);
  }

  // string tf_version = 12;
  if (!this->_internal_tf_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tf_version().data(), static_cast<int>(this->_internal_tf_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TestResults.tf_version");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_tf_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TestResults)
  return target;
}

size_t TestResults::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TestResults)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string target = 1;
  if (!this->_internal_target().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // string name = 9;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string run_mode = 11;
  if (!this->_internal_run_mode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_run_mode());
  }

  // string tf_version = 12;
  if (!this->_internal_tf_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tf_version());
  }

  // .tensorflow.BenchmarkEntries entries = 2;
  if (this->_internal_has_entries()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.entries_);
  }

  // .tensorflow.BuildConfiguration build_configuration = 3;
  if (this->_internal_has_build_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.build_configuration_);
  }

  // .tensorflow.CommitId commit_id = 4;
  if (this->_internal_has_commit_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.commit_id_);
  }

  // .tensorflow.MachineConfiguration machine_configuration = 7;
  if (this->_internal_has_machine_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.machine_configuration_);
  }

  // .tensorflow.RunConfiguration run_configuration = 8;
  if (this->_internal_has_run_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.run_configuration_);
  }

  // int64 start_time = 5;
  if (this->_internal_start_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_start_time());
  }

  // double run_time = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_run_time = this->_internal_run_time();
  uint64_t raw_run_time;
  memcpy(&raw_run_time, &tmp_run_time, sizeof(tmp_run_time));
  if (raw_run_time != 0) {
    total_size += 1 + 8;
  }

  // .tensorflow.TestResults.BenchmarkType benchmark_type = 10;
  if (this->_internal_benchmark_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_benchmark_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TestResults::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TestResults::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TestResults::GetClassData() const { return &_class_data_; }


void TestResults::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TestResults*>(&to_msg);
  auto& from = static_cast<const TestResults&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TestResults)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_target().empty()) {
    _this->_internal_set_target(from._internal_target());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_run_mode().empty()) {
    _this->_internal_set_run_mode(from._internal_run_mode());
  }
  if (!from._internal_tf_version().empty()) {
    _this->_internal_set_tf_version(from._internal_tf_version());
  }
  if (from._internal_has_entries()) {
    _this->_internal_mutable_entries()->::tensorflow::BenchmarkEntries::MergeFrom(
        from._internal_entries());
  }
  if (from._internal_has_build_configuration()) {
    _this->_internal_mutable_build_configuration()->::tensorflow::BuildConfiguration::MergeFrom(
        from._internal_build_configuration());
  }
  if (from._internal_has_commit_id()) {
    _this->_internal_mutable_commit_id()->::tensorflow::CommitId::MergeFrom(
        from._internal_commit_id());
  }
  if (from._internal_has_machine_configuration()) {
    _this->_internal_mutable_machine_configuration()->::tensorflow::MachineConfiguration::MergeFrom(
        from._internal_machine_configuration());
  }
  if (from._internal_has_run_configuration()) {
    _this->_internal_mutable_run_configuration()->::tensorflow::RunConfiguration::MergeFrom(
        from._internal_run_configuration());
  }
  if (from._internal_start_time() != 0) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_run_time = from._internal_run_time();
  uint64_t raw_run_time;
  memcpy(&raw_run_time, &tmp_run_time, sizeof(tmp_run_time));
  if (raw_run_time != 0) {
    _this->_internal_set_run_time(from._internal_run_time());
  }
  if (from._internal_benchmark_type() != 0) {
    _this->_internal_set_benchmark_type(from._internal_benchmark_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TestResults::CopyFrom(const TestResults& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TestResults)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestResults::IsInitialized() const {
  return true;
}

void TestResults::InternalSwap(TestResults* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.target_, lhs_arena,
      &other->_impl_.target_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.run_mode_, lhs_arena,
      &other->_impl_.run_mode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tf_version_, lhs_arena,
      &other->_impl_.tf_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TestResults, _impl_.benchmark_type_)
      + sizeof(TestResults::_impl_.benchmark_type_)
      - PROTOBUF_FIELD_OFFSET(TestResults, _impl_.entries_)>(
          reinterpret_cast<char*>(&_impl_.entries_),
          reinterpret_cast<char*>(&other->_impl_.entries_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TestResults::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_getter, &descriptor_table_tsl_2fprotobuf_2ftest_5flog_2eproto_once,
      file_level_metadata_tsl_2fprotobuf_2ftest_5flog_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::EntryValue*
Arena::CreateMaybeMessage< ::tensorflow::EntryValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::EntryValue >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MetricEntry*
Arena::CreateMaybeMessage< ::tensorflow::MetricEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MetricEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::BenchmarkEntry_ExtrasEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tensorflow::BenchmarkEntry_ExtrasEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::BenchmarkEntry_ExtrasEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::BenchmarkEntry*
Arena::CreateMaybeMessage< ::tensorflow::BenchmarkEntry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::BenchmarkEntry >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::BenchmarkEntries*
Arena::CreateMaybeMessage< ::tensorflow::BenchmarkEntries >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::BenchmarkEntries >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::BuildConfiguration*
Arena::CreateMaybeMessage< ::tensorflow::BuildConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::BuildConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CommitId*
Arena::CreateMaybeMessage< ::tensorflow::CommitId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CommitId >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CPUInfo_CacheSizeEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tensorflow::CPUInfo_CacheSizeEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CPUInfo_CacheSizeEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CPUInfo*
Arena::CreateMaybeMessage< ::tensorflow::CPUInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CPUInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MemoryInfo*
Arena::CreateMaybeMessage< ::tensorflow::MemoryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MemoryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GPUInfo*
Arena::CreateMaybeMessage< ::tensorflow::GPUInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GPUInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::PlatformInfo*
Arena::CreateMaybeMessage< ::tensorflow::PlatformInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::PlatformInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::AvailableDeviceInfo*
Arena::CreateMaybeMessage< ::tensorflow::AvailableDeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::AvailableDeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MachineConfiguration*
Arena::CreateMaybeMessage< ::tensorflow::MachineConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MachineConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RunConfiguration_EnvVarsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tensorflow::RunConfiguration_EnvVarsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RunConfiguration_EnvVarsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::RunConfiguration*
Arena::CreateMaybeMessage< ::tensorflow::RunConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::RunConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TestResults*
Arena::CreateMaybeMessage< ::tensorflow::TestResults >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TestResults >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
