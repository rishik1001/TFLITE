// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/conv_autotuning.proto

#include "tensorflow/core/protobuf/conv_autotuning.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR ConvolutionProto::ConvolutionProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_)*/nullptr
  , /*decltype(_impl_.filter_)*/nullptr
  , /*decltype(_impl_.output_)*/nullptr
  , /*decltype(_impl_.conv_desc_)*/nullptr
  , /*decltype(_impl_.kind_)*/0
  , /*decltype(_impl_.activation_)*/0
  , /*decltype(_impl_.conv_scale_)*/0
  , /*decltype(_impl_.side_value_scale_)*/0
  , /*decltype(_impl_.input_address_)*/int64_t{0}
  , /*decltype(_impl_.filter_address_)*/int64_t{0}
  , /*decltype(_impl_.output_address_)*/int64_t{0}
  , /*decltype(_impl_.bias_address_)*/int64_t{0}
  , /*decltype(_impl_.side_input_address_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ConvolutionProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ConvolutionProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ConvolutionProtoDefaultTypeInternal() {}
  union {
    ConvolutionProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ConvolutionProtoDefaultTypeInternal _ConvolutionProto_default_instance_;
PROTOBUF_CONSTEXPR MatmulProto::MatmulProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ab_dtype_)*/0
  , /*decltype(_impl_.c_dtype_)*/0
  , /*decltype(_impl_.m_)*/uint64_t{0u}
  , /*decltype(_impl_.n_)*/uint64_t{0u}
  , /*decltype(_impl_.trans_a_)*/false
  , /*decltype(_impl_.trans_b_)*/false
  , /*decltype(_impl_.activation_)*/0
  , /*decltype(_impl_.k_)*/uint64_t{0u}
  , /*decltype(_impl_.lda_)*/int64_t{0}
  , /*decltype(_impl_.ldb_)*/int64_t{0}
  , /*decltype(_impl_.ldc_)*/int64_t{0}
  , /*decltype(_impl_.a_address_)*/int64_t{0}
  , /*decltype(_impl_.b_address_)*/int64_t{0}
  , /*decltype(_impl_.c_address_)*/int64_t{0}
  , /*decltype(_impl_.bias_address_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MatmulProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MatmulProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MatmulProtoDefaultTypeInternal() {}
  union {
    MatmulProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MatmulProtoDefaultTypeInternal _MatmulProto_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, _impl_.kind_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, _impl_.filter_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, _impl_.output_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, _impl_.conv_desc_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, _impl_.conv_scale_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, _impl_.side_value_scale_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, _impl_.activation_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, _impl_.input_address_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, _impl_.filter_address_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, _impl_.output_address_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, _impl_.bias_address_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ConvolutionProto, _impl_.side_input_address_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MatmulProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::MatmulProto, _impl_.ab_dtype_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MatmulProto, _impl_.c_dtype_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MatmulProto, _impl_.trans_a_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MatmulProto, _impl_.trans_b_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MatmulProto, _impl_.m_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MatmulProto, _impl_.n_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MatmulProto, _impl_.k_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MatmulProto, _impl_.lda_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MatmulProto, _impl_.ldb_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MatmulProto, _impl_.ldc_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MatmulProto, _impl_.activation_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MatmulProto, _impl_.a_address_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MatmulProto, _impl_.b_address_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MatmulProto, _impl_.c_address_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::MatmulProto, _impl_.bias_address_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::ConvolutionProto)},
  { 19, -1, -1, sizeof(::tensorflow::MatmulProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_ConvolutionProto_default_instance_._instance,
  &::tensorflow::_MatmulProto_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.tensorflow/core/protobuf/conv_autotuni"
  "ng.proto\022\ntensorflow\032\026tsl/protobuf/dnn.p"
  "roto\"\235\004\n\020ConvolutionProto\0222\n\004kind\030\001 \001(\0162"
  "$.stream_executor.dnn.ConvolutionKind\0229\n"
  "\005input\030\002 \001(\0132*.stream_executor.dnn.Tenso"
  "rDescriptorProto\022:\n\006filter\030\003 \001(\0132*.strea"
  "m_executor.dnn.TensorDescriptorProto\022:\n\006"
  "output\030\004 \001(\0132*.stream_executor.dnn.Tenso"
  "rDescriptorProto\022B\n\tconv_desc\030\005 \001(\0132/.st"
  "ream_executor.dnn.ConvolutionDescriptorP"
  "roto\022\022\n\nconv_scale\030\006 \001(\001\022\030\n\020side_value_s"
  "cale\030\007 \001(\001\0227\n\nactivation\030\010 \001(\0162#.stream_"
  "executor.dnn.ActivationMode\022\025\n\rinput_add"
  "ress\030\t \001(\003\022\026\n\016filter_address\030\n \001(\003\022\026\n\016ou"
  "tput_address\030\013 \001(\003\022\024\n\014bias_address\030\014 \001(\003"
  "\022\032\n\022side_input_address\030\r \001(\003\"\340\002\n\013MatmulP"
  "roto\022/\n\010ab_dtype\030\001 \001(\0162\035.stream_executor"
  ".dnn.DataType\022.\n\007c_dtype\030\002 \001(\0162\035.stream_"
  "executor.dnn.DataType\022\017\n\007trans_a\030\003 \001(\010\022\017"
  "\n\007trans_b\030\004 \001(\010\022\t\n\001m\030\005 \001(\004\022\t\n\001n\030\006 \001(\004\022\t\n"
  "\001k\030\007 \001(\004\022\013\n\003lda\030\010 \001(\003\022\013\n\003ldb\030\t \001(\003\022\013\n\003ld"
  "c\030\n \001(\003\0227\n\nactivation\030\013 \001(\0162#.stream_exe"
  "cutor.dnn.ActivationMode\022\021\n\ta_address\030\014 "
  "\001(\003\022\021\n\tb_address\030\r \001(\003\022\021\n\tc_address\030\016 \001("
  "\003\022\024\n\014bias_address\030\017 \001(\003BWZUgithub.com/te"
  "nsorflow/tensorflow/tensorflow/go/core/p"
  "rotobuf/for_core_protos_go_protob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto_deps[1] = {
  &::descriptor_table_tsl_2fprotobuf_2fdnn_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto = {
    false, false, 1080, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto,
    "tensorflow/core/protobuf/conv_autotuning.proto",
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto);
namespace tensorflow {

// ===================================================================

class ConvolutionProto::_Internal {
 public:
  static const ::stream_executor::dnn::TensorDescriptorProto& input(const ConvolutionProto* msg);
  static const ::stream_executor::dnn::TensorDescriptorProto& filter(const ConvolutionProto* msg);
  static const ::stream_executor::dnn::TensorDescriptorProto& output(const ConvolutionProto* msg);
  static const ::stream_executor::dnn::ConvolutionDescriptorProto& conv_desc(const ConvolutionProto* msg);
};

const ::stream_executor::dnn::TensorDescriptorProto&
ConvolutionProto::_Internal::input(const ConvolutionProto* msg) {
  return *msg->_impl_.input_;
}
const ::stream_executor::dnn::TensorDescriptorProto&
ConvolutionProto::_Internal::filter(const ConvolutionProto* msg) {
  return *msg->_impl_.filter_;
}
const ::stream_executor::dnn::TensorDescriptorProto&
ConvolutionProto::_Internal::output(const ConvolutionProto* msg) {
  return *msg->_impl_.output_;
}
const ::stream_executor::dnn::ConvolutionDescriptorProto&
ConvolutionProto::_Internal::conv_desc(const ConvolutionProto* msg) {
  return *msg->_impl_.conv_desc_;
}
void ConvolutionProto::clear_input() {
  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
}
void ConvolutionProto::clear_filter() {
  if (GetArenaForAllocation() == nullptr && _impl_.filter_ != nullptr) {
    delete _impl_.filter_;
  }
  _impl_.filter_ = nullptr;
}
void ConvolutionProto::clear_output() {
  if (GetArenaForAllocation() == nullptr && _impl_.output_ != nullptr) {
    delete _impl_.output_;
  }
  _impl_.output_ = nullptr;
}
void ConvolutionProto::clear_conv_desc() {
  if (GetArenaForAllocation() == nullptr && _impl_.conv_desc_ != nullptr) {
    delete _impl_.conv_desc_;
  }
  _impl_.conv_desc_ = nullptr;
}
ConvolutionProto::ConvolutionProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ConvolutionProto)
}
ConvolutionProto::ConvolutionProto(const ConvolutionProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ConvolutionProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_){nullptr}
    , decltype(_impl_.filter_){nullptr}
    , decltype(_impl_.output_){nullptr}
    , decltype(_impl_.conv_desc_){nullptr}
    , decltype(_impl_.kind_){}
    , decltype(_impl_.activation_){}
    , decltype(_impl_.conv_scale_){}
    , decltype(_impl_.side_value_scale_){}
    , decltype(_impl_.input_address_){}
    , decltype(_impl_.filter_address_){}
    , decltype(_impl_.output_address_){}
    , decltype(_impl_.bias_address_){}
    , decltype(_impl_.side_input_address_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_input()) {
    _this->_impl_.input_ = new ::stream_executor::dnn::TensorDescriptorProto(*from._impl_.input_);
  }
  if (from._internal_has_filter()) {
    _this->_impl_.filter_ = new ::stream_executor::dnn::TensorDescriptorProto(*from._impl_.filter_);
  }
  if (from._internal_has_output()) {
    _this->_impl_.output_ = new ::stream_executor::dnn::TensorDescriptorProto(*from._impl_.output_);
  }
  if (from._internal_has_conv_desc()) {
    _this->_impl_.conv_desc_ = new ::stream_executor::dnn::ConvolutionDescriptorProto(*from._impl_.conv_desc_);
  }
  ::memcpy(&_impl_.kind_, &from._impl_.kind_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.side_input_address_) -
    reinterpret_cast<char*>(&_impl_.kind_)) + sizeof(_impl_.side_input_address_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.ConvolutionProto)
}

inline void ConvolutionProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.input_){nullptr}
    , decltype(_impl_.filter_){nullptr}
    , decltype(_impl_.output_){nullptr}
    , decltype(_impl_.conv_desc_){nullptr}
    , decltype(_impl_.kind_){0}
    , decltype(_impl_.activation_){0}
    , decltype(_impl_.conv_scale_){0}
    , decltype(_impl_.side_value_scale_){0}
    , decltype(_impl_.input_address_){int64_t{0}}
    , decltype(_impl_.filter_address_){int64_t{0}}
    , decltype(_impl_.output_address_){int64_t{0}}
    , decltype(_impl_.bias_address_){int64_t{0}}
    , decltype(_impl_.side_input_address_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ConvolutionProto::~ConvolutionProto() {
  // @@protoc_insertion_point(destructor:tensorflow.ConvolutionProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ConvolutionProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.input_;
  if (this != internal_default_instance()) delete _impl_.filter_;
  if (this != internal_default_instance()) delete _impl_.output_;
  if (this != internal_default_instance()) delete _impl_.conv_desc_;
}

void ConvolutionProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ConvolutionProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ConvolutionProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.input_ != nullptr) {
    delete _impl_.input_;
  }
  _impl_.input_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.filter_ != nullptr) {
    delete _impl_.filter_;
  }
  _impl_.filter_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.output_ != nullptr) {
    delete _impl_.output_;
  }
  _impl_.output_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.conv_desc_ != nullptr) {
    delete _impl_.conv_desc_;
  }
  _impl_.conv_desc_ = nullptr;
  ::memset(&_impl_.kind_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.side_input_address_) -
      reinterpret_cast<char*>(&_impl_.kind_)) + sizeof(_impl_.side_input_address_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConvolutionProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .stream_executor.dnn.ConvolutionKind kind = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kind(static_cast<::stream_executor::dnn::ConvolutionKind>(val));
        } else
          goto handle_unusual;
        continue;
      // .stream_executor.dnn.TensorDescriptorProto input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_input(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .stream_executor.dnn.TensorDescriptorProto filter = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_filter(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .stream_executor.dnn.TensorDescriptorProto output = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_output(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_conv_desc(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double conv_scale = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          _impl_.conv_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double side_value_scale = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.side_value_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .stream_executor.dnn.ActivationMode activation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_activation(static_cast<::stream_executor::dnn::ActivationMode>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 input_address = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.input_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 filter_address = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.filter_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 output_address = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.output_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 bias_address = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.bias_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 side_input_address = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.side_input_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ConvolutionProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ConvolutionProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .stream_executor.dnn.ConvolutionKind kind = 1;
  if (this->_internal_kind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_kind(), target);
  }

  // .stream_executor.dnn.TensorDescriptorProto input = 2;
  if (this->_internal_has_input()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::input(this),
        _Internal::input(this).GetCachedSize(), target, stream);
  }

  // .stream_executor.dnn.TensorDescriptorProto filter = 3;
  if (this->_internal_has_filter()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::filter(this),
        _Internal::filter(this).GetCachedSize(), target, stream);
  }

  // .stream_executor.dnn.TensorDescriptorProto output = 4;
  if (this->_internal_has_output()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::output(this),
        _Internal::output(this).GetCachedSize(), target, stream);
  }

  // .stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 5;
  if (this->_internal_has_conv_desc()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::conv_desc(this),
        _Internal::conv_desc(this).GetCachedSize(), target, stream);
  }

  // double conv_scale = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_conv_scale = this->_internal_conv_scale();
  uint64_t raw_conv_scale;
  memcpy(&raw_conv_scale, &tmp_conv_scale, sizeof(tmp_conv_scale));
  if (raw_conv_scale != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_conv_scale(), target);
  }

  // double side_value_scale = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_side_value_scale = this->_internal_side_value_scale();
  uint64_t raw_side_value_scale;
  memcpy(&raw_side_value_scale, &tmp_side_value_scale, sizeof(tmp_side_value_scale));
  if (raw_side_value_scale != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_side_value_scale(), target);
  }

  // .stream_executor.dnn.ActivationMode activation = 8;
  if (this->_internal_activation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      8, this->_internal_activation(), target);
  }

  // int64 input_address = 9;
  if (this->_internal_input_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_input_address(), target);
  }

  // int64 filter_address = 10;
  if (this->_internal_filter_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_filter_address(), target);
  }

  // int64 output_address = 11;
  if (this->_internal_output_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_output_address(), target);
  }

  // int64 bias_address = 12;
  if (this->_internal_bias_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_bias_address(), target);
  }

  // int64 side_input_address = 13;
  if (this->_internal_side_input_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_side_input_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ConvolutionProto)
  return target;
}

size_t ConvolutionProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ConvolutionProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .stream_executor.dnn.TensorDescriptorProto input = 2;
  if (this->_internal_has_input()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.input_);
  }

  // .stream_executor.dnn.TensorDescriptorProto filter = 3;
  if (this->_internal_has_filter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.filter_);
  }

  // .stream_executor.dnn.TensorDescriptorProto output = 4;
  if (this->_internal_has_output()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.output_);
  }

  // .stream_executor.dnn.ConvolutionDescriptorProto conv_desc = 5;
  if (this->_internal_has_conv_desc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.conv_desc_);
  }

  // .stream_executor.dnn.ConvolutionKind kind = 1;
  if (this->_internal_kind() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_kind());
  }

  // .stream_executor.dnn.ActivationMode activation = 8;
  if (this->_internal_activation() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_activation());
  }

  // double conv_scale = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_conv_scale = this->_internal_conv_scale();
  uint64_t raw_conv_scale;
  memcpy(&raw_conv_scale, &tmp_conv_scale, sizeof(tmp_conv_scale));
  if (raw_conv_scale != 0) {
    total_size += 1 + 8;
  }

  // double side_value_scale = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_side_value_scale = this->_internal_side_value_scale();
  uint64_t raw_side_value_scale;
  memcpy(&raw_side_value_scale, &tmp_side_value_scale, sizeof(tmp_side_value_scale));
  if (raw_side_value_scale != 0) {
    total_size += 1 + 8;
  }

  // int64 input_address = 9;
  if (this->_internal_input_address() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_input_address());
  }

  // int64 filter_address = 10;
  if (this->_internal_filter_address() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_filter_address());
  }

  // int64 output_address = 11;
  if (this->_internal_output_address() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_output_address());
  }

  // int64 bias_address = 12;
  if (this->_internal_bias_address() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bias_address());
  }

  // int64 side_input_address = 13;
  if (this->_internal_side_input_address() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_side_input_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConvolutionProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ConvolutionProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConvolutionProto::GetClassData() const { return &_class_data_; }


void ConvolutionProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ConvolutionProto*>(&to_msg);
  auto& from = static_cast<const ConvolutionProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ConvolutionProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_input()) {
    _this->_internal_mutable_input()->::stream_executor::dnn::TensorDescriptorProto::MergeFrom(
        from._internal_input());
  }
  if (from._internal_has_filter()) {
    _this->_internal_mutable_filter()->::stream_executor::dnn::TensorDescriptorProto::MergeFrom(
        from._internal_filter());
  }
  if (from._internal_has_output()) {
    _this->_internal_mutable_output()->::stream_executor::dnn::TensorDescriptorProto::MergeFrom(
        from._internal_output());
  }
  if (from._internal_has_conv_desc()) {
    _this->_internal_mutable_conv_desc()->::stream_executor::dnn::ConvolutionDescriptorProto::MergeFrom(
        from._internal_conv_desc());
  }
  if (from._internal_kind() != 0) {
    _this->_internal_set_kind(from._internal_kind());
  }
  if (from._internal_activation() != 0) {
    _this->_internal_set_activation(from._internal_activation());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_conv_scale = from._internal_conv_scale();
  uint64_t raw_conv_scale;
  memcpy(&raw_conv_scale, &tmp_conv_scale, sizeof(tmp_conv_scale));
  if (raw_conv_scale != 0) {
    _this->_internal_set_conv_scale(from._internal_conv_scale());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_side_value_scale = from._internal_side_value_scale();
  uint64_t raw_side_value_scale;
  memcpy(&raw_side_value_scale, &tmp_side_value_scale, sizeof(tmp_side_value_scale));
  if (raw_side_value_scale != 0) {
    _this->_internal_set_side_value_scale(from._internal_side_value_scale());
  }
  if (from._internal_input_address() != 0) {
    _this->_internal_set_input_address(from._internal_input_address());
  }
  if (from._internal_filter_address() != 0) {
    _this->_internal_set_filter_address(from._internal_filter_address());
  }
  if (from._internal_output_address() != 0) {
    _this->_internal_set_output_address(from._internal_output_address());
  }
  if (from._internal_bias_address() != 0) {
    _this->_internal_set_bias_address(from._internal_bias_address());
  }
  if (from._internal_side_input_address() != 0) {
    _this->_internal_set_side_input_address(from._internal_side_input_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConvolutionProto::CopyFrom(const ConvolutionProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ConvolutionProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConvolutionProto::IsInitialized() const {
  return true;
}

void ConvolutionProto::InternalSwap(ConvolutionProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ConvolutionProto, _impl_.side_input_address_)
      + sizeof(ConvolutionProto::_impl_.side_input_address_)
      - PROTOBUF_FIELD_OFFSET(ConvolutionProto, _impl_.input_)>(
          reinterpret_cast<char*>(&_impl_.input_),
          reinterpret_cast<char*>(&other->_impl_.input_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ConvolutionProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto[0]);
}

// ===================================================================

class MatmulProto::_Internal {
 public:
};

MatmulProto::MatmulProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.MatmulProto)
}
MatmulProto::MatmulProto(const MatmulProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MatmulProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ab_dtype_){}
    , decltype(_impl_.c_dtype_){}
    , decltype(_impl_.m_){}
    , decltype(_impl_.n_){}
    , decltype(_impl_.trans_a_){}
    , decltype(_impl_.trans_b_){}
    , decltype(_impl_.activation_){}
    , decltype(_impl_.k_){}
    , decltype(_impl_.lda_){}
    , decltype(_impl_.ldb_){}
    , decltype(_impl_.ldc_){}
    , decltype(_impl_.a_address_){}
    , decltype(_impl_.b_address_){}
    , decltype(_impl_.c_address_){}
    , decltype(_impl_.bias_address_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ab_dtype_, &from._impl_.ab_dtype_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bias_address_) -
    reinterpret_cast<char*>(&_impl_.ab_dtype_)) + sizeof(_impl_.bias_address_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.MatmulProto)
}

inline void MatmulProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ab_dtype_){0}
    , decltype(_impl_.c_dtype_){0}
    , decltype(_impl_.m_){uint64_t{0u}}
    , decltype(_impl_.n_){uint64_t{0u}}
    , decltype(_impl_.trans_a_){false}
    , decltype(_impl_.trans_b_){false}
    , decltype(_impl_.activation_){0}
    , decltype(_impl_.k_){uint64_t{0u}}
    , decltype(_impl_.lda_){int64_t{0}}
    , decltype(_impl_.ldb_){int64_t{0}}
    , decltype(_impl_.ldc_){int64_t{0}}
    , decltype(_impl_.a_address_){int64_t{0}}
    , decltype(_impl_.b_address_){int64_t{0}}
    , decltype(_impl_.c_address_){int64_t{0}}
    , decltype(_impl_.bias_address_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MatmulProto::~MatmulProto() {
  // @@protoc_insertion_point(destructor:tensorflow.MatmulProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MatmulProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MatmulProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MatmulProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.MatmulProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ab_dtype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bias_address_) -
      reinterpret_cast<char*>(&_impl_.ab_dtype_)) + sizeof(_impl_.bias_address_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MatmulProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .stream_executor.dnn.DataType ab_dtype = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ab_dtype(static_cast<::stream_executor::dnn::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // .stream_executor.dnn.DataType c_dtype = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_c_dtype(static_cast<::stream_executor::dnn::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // bool trans_a = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.trans_a_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool trans_b = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.trans_b_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 m = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.m_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 n = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 k = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.k_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 lda = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.lda_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ldb = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.ldb_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ldc = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.ldc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .stream_executor.dnn.ActivationMode activation = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_activation(static_cast<::stream_executor::dnn::ActivationMode>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 a_address = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.a_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 b_address = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.b_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 c_address = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.c_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 bias_address = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.bias_address_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MatmulProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.MatmulProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .stream_executor.dnn.DataType ab_dtype = 1;
  if (this->_internal_ab_dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_ab_dtype(), target);
  }

  // .stream_executor.dnn.DataType c_dtype = 2;
  if (this->_internal_c_dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_c_dtype(), target);
  }

  // bool trans_a = 3;
  if (this->_internal_trans_a() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_trans_a(), target);
  }

  // bool trans_b = 4;
  if (this->_internal_trans_b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_trans_b(), target);
  }

  // uint64 m = 5;
  if (this->_internal_m() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(5, this->_internal_m(), target);
  }

  // uint64 n = 6;
  if (this->_internal_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(6, this->_internal_n(), target);
  }

  // uint64 k = 7;
  if (this->_internal_k() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(7, this->_internal_k(), target);
  }

  // int64 lda = 8;
  if (this->_internal_lda() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_lda(), target);
  }

  // int64 ldb = 9;
  if (this->_internal_ldb() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_ldb(), target);
  }

  // int64 ldc = 10;
  if (this->_internal_ldc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_ldc(), target);
  }

  // .stream_executor.dnn.ActivationMode activation = 11;
  if (this->_internal_activation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      11, this->_internal_activation(), target);
  }

  // int64 a_address = 12;
  if (this->_internal_a_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_a_address(), target);
  }

  // int64 b_address = 13;
  if (this->_internal_b_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(13, this->_internal_b_address(), target);
  }

  // int64 c_address = 14;
  if (this->_internal_c_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(14, this->_internal_c_address(), target);
  }

  // int64 bias_address = 15;
  if (this->_internal_bias_address() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(15, this->_internal_bias_address(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.MatmulProto)
  return target;
}

size_t MatmulProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.MatmulProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .stream_executor.dnn.DataType ab_dtype = 1;
  if (this->_internal_ab_dtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_ab_dtype());
  }

  // .stream_executor.dnn.DataType c_dtype = 2;
  if (this->_internal_c_dtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_c_dtype());
  }

  // uint64 m = 5;
  if (this->_internal_m() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_m());
  }

  // uint64 n = 6;
  if (this->_internal_n() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_n());
  }

  // bool trans_a = 3;
  if (this->_internal_trans_a() != 0) {
    total_size += 1 + 1;
  }

  // bool trans_b = 4;
  if (this->_internal_trans_b() != 0) {
    total_size += 1 + 1;
  }

  // .stream_executor.dnn.ActivationMode activation = 11;
  if (this->_internal_activation() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_activation());
  }

  // uint64 k = 7;
  if (this->_internal_k() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_k());
  }

  // int64 lda = 8;
  if (this->_internal_lda() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_lda());
  }

  // int64 ldb = 9;
  if (this->_internal_ldb() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ldb());
  }

  // int64 ldc = 10;
  if (this->_internal_ldc() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_ldc());
  }

  // int64 a_address = 12;
  if (this->_internal_a_address() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_a_address());
  }

  // int64 b_address = 13;
  if (this->_internal_b_address() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_b_address());
  }

  // int64 c_address = 14;
  if (this->_internal_c_address() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_c_address());
  }

  // int64 bias_address = 15;
  if (this->_internal_bias_address() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_bias_address());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MatmulProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MatmulProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MatmulProto::GetClassData() const { return &_class_data_; }


void MatmulProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MatmulProto*>(&to_msg);
  auto& from = static_cast<const MatmulProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.MatmulProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ab_dtype() != 0) {
    _this->_internal_set_ab_dtype(from._internal_ab_dtype());
  }
  if (from._internal_c_dtype() != 0) {
    _this->_internal_set_c_dtype(from._internal_c_dtype());
  }
  if (from._internal_m() != 0) {
    _this->_internal_set_m(from._internal_m());
  }
  if (from._internal_n() != 0) {
    _this->_internal_set_n(from._internal_n());
  }
  if (from._internal_trans_a() != 0) {
    _this->_internal_set_trans_a(from._internal_trans_a());
  }
  if (from._internal_trans_b() != 0) {
    _this->_internal_set_trans_b(from._internal_trans_b());
  }
  if (from._internal_activation() != 0) {
    _this->_internal_set_activation(from._internal_activation());
  }
  if (from._internal_k() != 0) {
    _this->_internal_set_k(from._internal_k());
  }
  if (from._internal_lda() != 0) {
    _this->_internal_set_lda(from._internal_lda());
  }
  if (from._internal_ldb() != 0) {
    _this->_internal_set_ldb(from._internal_ldb());
  }
  if (from._internal_ldc() != 0) {
    _this->_internal_set_ldc(from._internal_ldc());
  }
  if (from._internal_a_address() != 0) {
    _this->_internal_set_a_address(from._internal_a_address());
  }
  if (from._internal_b_address() != 0) {
    _this->_internal_set_b_address(from._internal_b_address());
  }
  if (from._internal_c_address() != 0) {
    _this->_internal_set_c_address(from._internal_c_address());
  }
  if (from._internal_bias_address() != 0) {
    _this->_internal_set_bias_address(from._internal_bias_address());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MatmulProto::CopyFrom(const MatmulProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.MatmulProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatmulProto::IsInitialized() const {
  return true;
}

void MatmulProto::InternalSwap(MatmulProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MatmulProto, _impl_.bias_address_)
      + sizeof(MatmulProto::_impl_.bias_address_)
      - PROTOBUF_FIELD_OFFSET(MatmulProto, _impl_.ab_dtype_)>(
          reinterpret_cast<char*>(&_impl_.ab_dtype_),
          reinterpret_cast<char*>(&other->_impl_.ab_dtype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MatmulProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fconv_5fautotuning_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::ConvolutionProto*
Arena::CreateMaybeMessage< ::tensorflow::ConvolutionProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ConvolutionProto >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::MatmulProto*
Arena::CreateMaybeMessage< ::tensorflow::MatmulProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::MatmulProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
