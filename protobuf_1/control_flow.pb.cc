// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/control_flow.proto

#include "tensorflow/core/protobuf/control_flow.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR ValuesDef_ExternalValuesEntry_DoNotUse::ValuesDef_ExternalValuesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct ValuesDef_ExternalValuesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValuesDef_ExternalValuesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValuesDef_ExternalValuesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ValuesDef_ExternalValuesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValuesDef_ExternalValuesEntry_DoNotUseDefaultTypeInternal _ValuesDef_ExternalValuesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR ValuesDef::ValuesDef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.external_values_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ValuesDefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ValuesDefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ValuesDefDefaultTypeInternal() {}
  union {
    ValuesDef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ValuesDefDefaultTypeInternal _ValuesDef_default_instance_;
PROTOBUF_CONSTEXPR ControlFlowContextDef::ControlFlowContextDef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ctxt_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ControlFlowContextDefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ControlFlowContextDefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ControlFlowContextDefDefaultTypeInternal() {}
  union {
    ControlFlowContextDef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ControlFlowContextDefDefaultTypeInternal _ControlFlowContextDef_default_instance_;
PROTOBUF_CONSTEXPR CondContextDef::CondContextDef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.nested_contexts_)*/{}
  , /*decltype(_impl_.context_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pred_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pivot_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.values_def_)*/nullptr
  , /*decltype(_impl_.branch_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CondContextDefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CondContextDefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CondContextDefDefaultTypeInternal() {}
  union {
    CondContextDef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CondContextDefDefaultTypeInternal _CondContextDef_default_instance_;
PROTOBUF_CONSTEXPR WhileContextDef::WhileContextDef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.loop_exit_names_)*/{}
  , /*decltype(_impl_.loop_enter_names_)*/{}
  , /*decltype(_impl_.nested_contexts_)*/{}
  , /*decltype(_impl_.context_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pivot_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pivot_for_pred_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.pivot_for_body_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.maximum_iterations_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.values_def_)*/nullptr
  , /*decltype(_impl_.parallel_iterations_)*/0
  , /*decltype(_impl_.back_prop_)*/false
  , /*decltype(_impl_.swap_memory_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WhileContextDefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WhileContextDefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WhileContextDefDefaultTypeInternal() {}
  union {
    WhileContextDef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WhileContextDefDefaultTypeInternal _WhileContextDef_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::tensorflow::ValuesDef_ExternalValuesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ValuesDef_ExternalValuesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ValuesDef_ExternalValuesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ValuesDef_ExternalValuesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ValuesDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ValuesDef, _impl_.values_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::ValuesDef, _impl_.external_values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ControlFlowContextDef, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ControlFlowContextDef, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::ControlFlowContextDef, _impl_.ctxt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CondContextDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CondContextDef, _impl_.context_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CondContextDef, _impl_.pred_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CondContextDef, _impl_.pivot_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CondContextDef, _impl_.branch_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CondContextDef, _impl_.values_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CondContextDef, _impl_.nested_contexts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, _impl_.context_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, _impl_.parallel_iterations_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, _impl_.back_prop_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, _impl_.swap_memory_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, _impl_.pivot_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, _impl_.pivot_for_pred_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, _impl_.pivot_for_body_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, _impl_.loop_exit_names_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, _impl_.loop_enter_names_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, _impl_.values_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, _impl_.maximum_iterations_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::WhileContextDef, _impl_.nested_contexts_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::tensorflow::ValuesDef_ExternalValuesEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::tensorflow::ValuesDef)},
  { 18, -1, -1, sizeof(::tensorflow::ControlFlowContextDef)},
  { 27, -1, -1, sizeof(::tensorflow::CondContextDef)},
  { 39, -1, -1, sizeof(::tensorflow::WhileContextDef)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_ValuesDef_ExternalValuesEntry_DoNotUse_default_instance_._instance,
  &::tensorflow::_ValuesDef_default_instance_._instance,
  &::tensorflow::_ControlFlowContextDef_default_instance_._instance,
  &::tensorflow::_CondContextDef_default_instance_._instance,
  &::tensorflow::_WhileContextDef_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+tensorflow/core/protobuf/control_flow."
  "proto\022\ntensorflow\"\226\001\n\tValuesDef\022\016\n\006value"
  "s\030\001 \003(\t\022B\n\017external_values\030\002 \003(\0132).tenso"
  "rflow.ValuesDef.ExternalValuesEntry\0325\n\023E"
  "xternalValuesEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\t:\0028\001\"\203\001\n\025ControlFlowContextDef\022/\n\t"
  "cond_ctxt\030\001 \001(\0132\032.tensorflow.CondContext"
  "DefH\000\0221\n\nwhile_ctxt\030\002 \001(\0132\033.tensorflow.W"
  "hileContextDefH\000B\006\n\004ctxt\"\304\001\n\016CondContext"
  "Def\022\024\n\014context_name\030\001 \001(\t\022\021\n\tpred_name\030\002"
  " \001(\t\022\022\n\npivot_name\030\003 \001(\t\022\016\n\006branch\030\004 \001(\005"
  "\022)\n\nvalues_def\030\005 \001(\0132\025.tensorflow.Values"
  "Def\022:\n\017nested_contexts\030\006 \003(\0132!.tensorflo"
  "w.ControlFlowContextDef\"\365\002\n\017WhileContext"
  "Def\022\024\n\014context_name\030\001 \001(\t\022\033\n\023parallel_it"
  "erations\030\002 \001(\005\022\021\n\tback_prop\030\003 \001(\010\022\023\n\013swa"
  "p_memory\030\004 \001(\010\022\022\n\npivot_name\030\005 \001(\t\022\033\n\023pi"
  "vot_for_pred_name\030\006 \001(\t\022\033\n\023pivot_for_bod"
  "y_name\030\007 \001(\t\022\027\n\017loop_exit_names\030\010 \003(\t\022\030\n"
  "\020loop_enter_names\030\n \003(\t\022)\n\nvalues_def\030\t "
  "\001(\0132\025.tensorflow.ValuesDef\022\037\n\027maximum_it"
  "erations_name\030\013 \001(\t\022:\n\017nested_contexts\030\014"
  " \003(\0132!.tensorflow.ControlFlowContextDefB"
  "\211\001\n\030org.tensorflow.frameworkB\021ControlFlo"
  "wProtosP\001ZUgithub.com/tensorflow/tensorf"
  "low/tensorflow/go/core/protobuf/for_core"
  "_protos_go_proto\370\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto = {
    false, false, 1067, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto,
    "tensorflow/core/protobuf/control_flow.proto",
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto);
namespace tensorflow {

// ===================================================================

ValuesDef_ExternalValuesEntry_DoNotUse::ValuesDef_ExternalValuesEntry_DoNotUse() {}
ValuesDef_ExternalValuesEntry_DoNotUse::ValuesDef_ExternalValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ValuesDef_ExternalValuesEntry_DoNotUse::MergeFrom(const ValuesDef_ExternalValuesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ValuesDef_ExternalValuesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto[0]);
}

// ===================================================================

class ValuesDef::_Internal {
 public:
};

ValuesDef::ValuesDef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &ValuesDef::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:tensorflow.ValuesDef)
}
ValuesDef::ValuesDef(const ValuesDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ValuesDef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_.external_values_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.external_values_.MergeFrom(from._impl_.external_values_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ValuesDef)
}

inline void ValuesDef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_.external_values_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ValuesDef::~ValuesDef() {
  // @@protoc_insertion_point(destructor:tensorflow.ValuesDef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void ValuesDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
  _impl_.external_values_.Destruct();
  _impl_.external_values_.~MapField();
}

void ValuesDef::ArenaDtor(void* object) {
  ValuesDef* _this = reinterpret_cast< ValuesDef* >(object);
  _this->_impl_.external_values_.Destruct();
}
void ValuesDef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ValuesDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ValuesDef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _impl_.external_values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ValuesDef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_values();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.ValuesDef.values"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, string> external_values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.external_values_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ValuesDef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ValuesDef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string values = 1;
  for (int i = 0, n = this->_internal_values_size(); i < n; i++) {
    const auto& s = this->_internal_values(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.ValuesDef.values");
    target = stream->WriteString(1, s, target);
  }

  // map<string, string> external_values = 2;
  if (!this->_internal_external_values().empty()) {
    using MapType = ::_pb::Map<std::string, std::string>;
    using WireHelper = ValuesDef_ExternalValuesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_external_values();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "tensorflow.ValuesDef.ExternalValuesEntry.key");
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.second.data(), static_cast<int>(entry.second.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "tensorflow.ValuesDef.ExternalValuesEntry.value");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ValuesDef)
  return target;
}

size_t ValuesDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ValuesDef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string values = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.values_.size());
  for (int i = 0, n = _impl_.values_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.values_.Get(i));
  }

  // map<string, string> external_values = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_external_values_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_external_values().begin();
      it != this->_internal_external_values().end(); ++it) {
    total_size += ValuesDef_ExternalValuesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ValuesDef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ValuesDef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ValuesDef::GetClassData() const { return &_class_data_; }


void ValuesDef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ValuesDef*>(&to_msg);
  auto& from = static_cast<const ValuesDef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ValuesDef)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_impl_.external_values_.MergeFrom(from._impl_.external_values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ValuesDef::CopyFrom(const ValuesDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ValuesDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ValuesDef::IsInitialized() const {
  return true;
}

void ValuesDef::InternalSwap(ValuesDef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  _impl_.external_values_.InternalSwap(&other->_impl_.external_values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ValuesDef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto[1]);
}

// ===================================================================

class ControlFlowContextDef::_Internal {
 public:
  static const ::tensorflow::CondContextDef& cond_ctxt(const ControlFlowContextDef* msg);
  static const ::tensorflow::WhileContextDef& while_ctxt(const ControlFlowContextDef* msg);
};

const ::tensorflow::CondContextDef&
ControlFlowContextDef::_Internal::cond_ctxt(const ControlFlowContextDef* msg) {
  return *msg->_impl_.ctxt_.cond_ctxt_;
}
const ::tensorflow::WhileContextDef&
ControlFlowContextDef::_Internal::while_ctxt(const ControlFlowContextDef* msg) {
  return *msg->_impl_.ctxt_.while_ctxt_;
}
void ControlFlowContextDef::set_allocated_cond_ctxt(::tensorflow::CondContextDef* cond_ctxt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ctxt();
  if (cond_ctxt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cond_ctxt);
    if (message_arena != submessage_arena) {
      cond_ctxt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cond_ctxt, submessage_arena);
    }
    set_has_cond_ctxt();
    _impl_.ctxt_.cond_ctxt_ = cond_ctxt;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ControlFlowContextDef.cond_ctxt)
}
void ControlFlowContextDef::set_allocated_while_ctxt(::tensorflow::WhileContextDef* while_ctxt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ctxt();
  if (while_ctxt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(while_ctxt);
    if (message_arena != submessage_arena) {
      while_ctxt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, while_ctxt, submessage_arena);
    }
    set_has_while_ctxt();
    _impl_.ctxt_.while_ctxt_ = while_ctxt;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.ControlFlowContextDef.while_ctxt)
}
ControlFlowContextDef::ControlFlowContextDef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ControlFlowContextDef)
}
ControlFlowContextDef::ControlFlowContextDef(const ControlFlowContextDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ControlFlowContextDef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ctxt_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_ctxt();
  switch (from.ctxt_case()) {
    case kCondCtxt: {
      _this->_internal_mutable_cond_ctxt()->::tensorflow::CondContextDef::MergeFrom(
          from._internal_cond_ctxt());
      break;
    }
    case kWhileCtxt: {
      _this->_internal_mutable_while_ctxt()->::tensorflow::WhileContextDef::MergeFrom(
          from._internal_while_ctxt());
      break;
    }
    case CTXT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.ControlFlowContextDef)
}

inline void ControlFlowContextDef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ctxt_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_ctxt();
}

ControlFlowContextDef::~ControlFlowContextDef() {
  // @@protoc_insertion_point(destructor:tensorflow.ControlFlowContextDef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ControlFlowContextDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_ctxt()) {
    clear_ctxt();
  }
}

void ControlFlowContextDef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ControlFlowContextDef::clear_ctxt() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.ControlFlowContextDef)
  switch (ctxt_case()) {
    case kCondCtxt: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ctxt_.cond_ctxt_;
      }
      break;
    }
    case kWhileCtxt: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.ctxt_.while_ctxt_;
      }
      break;
    }
    case CTXT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = CTXT_NOT_SET;
}


void ControlFlowContextDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ControlFlowContextDef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_ctxt();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlFlowContextDef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.CondContextDef cond_ctxt = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cond_ctxt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.WhileContextDef while_ctxt = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_while_ctxt(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlFlowContextDef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ControlFlowContextDef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.CondContextDef cond_ctxt = 1;
  if (_internal_has_cond_ctxt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::cond_ctxt(this),
        _Internal::cond_ctxt(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.WhileContextDef while_ctxt = 2;
  if (_internal_has_while_ctxt()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::while_ctxt(this),
        _Internal::while_ctxt(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ControlFlowContextDef)
  return target;
}

size_t ControlFlowContextDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ControlFlowContextDef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (ctxt_case()) {
    // .tensorflow.CondContextDef cond_ctxt = 1;
    case kCondCtxt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ctxt_.cond_ctxt_);
      break;
    }
    // .tensorflow.WhileContextDef while_ctxt = 2;
    case kWhileCtxt: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ctxt_.while_ctxt_);
      break;
    }
    case CTXT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlFlowContextDef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ControlFlowContextDef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlFlowContextDef::GetClassData() const { return &_class_data_; }


void ControlFlowContextDef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ControlFlowContextDef*>(&to_msg);
  auto& from = static_cast<const ControlFlowContextDef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ControlFlowContextDef)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.ctxt_case()) {
    case kCondCtxt: {
      _this->_internal_mutable_cond_ctxt()->::tensorflow::CondContextDef::MergeFrom(
          from._internal_cond_ctxt());
      break;
    }
    case kWhileCtxt: {
      _this->_internal_mutable_while_ctxt()->::tensorflow::WhileContextDef::MergeFrom(
          from._internal_while_ctxt());
      break;
    }
    case CTXT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlFlowContextDef::CopyFrom(const ControlFlowContextDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ControlFlowContextDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlFlowContextDef::IsInitialized() const {
  return true;
}

void ControlFlowContextDef::InternalSwap(ControlFlowContextDef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.ctxt_, other->_impl_.ctxt_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlFlowContextDef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto[2]);
}

// ===================================================================

class CondContextDef::_Internal {
 public:
  static const ::tensorflow::ValuesDef& values_def(const CondContextDef* msg);
};

const ::tensorflow::ValuesDef&
CondContextDef::_Internal::values_def(const CondContextDef* msg) {
  return *msg->_impl_.values_def_;
}
CondContextDef::CondContextDef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CondContextDef)
}
CondContextDef::CondContextDef(const CondContextDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CondContextDef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.nested_contexts_){from._impl_.nested_contexts_}
    , decltype(_impl_.context_name_){}
    , decltype(_impl_.pred_name_){}
    , decltype(_impl_.pivot_name_){}
    , decltype(_impl_.values_def_){nullptr}
    , decltype(_impl_.branch_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.context_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.context_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_context_name().empty()) {
    _this->_impl_.context_name_.Set(from._internal_context_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pred_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pred_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pred_name().empty()) {
    _this->_impl_.pred_name_.Set(from._internal_pred_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pivot_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pivot_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pivot_name().empty()) {
    _this->_impl_.pivot_name_.Set(from._internal_pivot_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_values_def()) {
    _this->_impl_.values_def_ = new ::tensorflow::ValuesDef(*from._impl_.values_def_);
  }
  _this->_impl_.branch_ = from._impl_.branch_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.CondContextDef)
}

inline void CondContextDef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.nested_contexts_){arena}
    , decltype(_impl_.context_name_){}
    , decltype(_impl_.pred_name_){}
    , decltype(_impl_.pivot_name_){}
    , decltype(_impl_.values_def_){nullptr}
    , decltype(_impl_.branch_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.context_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.context_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pred_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pred_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pivot_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pivot_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CondContextDef::~CondContextDef() {
  // @@protoc_insertion_point(destructor:tensorflow.CondContextDef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CondContextDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.nested_contexts_.~RepeatedPtrField();
  _impl_.context_name_.Destroy();
  _impl_.pred_name_.Destroy();
  _impl_.pivot_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.values_def_;
}

void CondContextDef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CondContextDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CondContextDef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nested_contexts_.Clear();
  _impl_.context_name_.ClearToEmpty();
  _impl_.pred_name_.ClearToEmpty();
  _impl_.pivot_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.values_def_ != nullptr) {
    delete _impl_.values_def_;
  }
  _impl_.values_def_ = nullptr;
  _impl_.branch_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CondContextDef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string context_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_context_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.CondContextDef.context_name"));
        } else
          goto handle_unusual;
        continue;
      // string pred_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_pred_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.CondContextDef.pred_name"));
        } else
          goto handle_unusual;
        continue;
      // string pivot_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_pivot_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.CondContextDef.pivot_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 branch = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.branch_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.ValuesDef values_def = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_values_def(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.ControlFlowContextDef nested_contexts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nested_contexts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CondContextDef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CondContextDef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string context_name = 1;
  if (!this->_internal_context_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_context_name().data(), static_cast<int>(this->_internal_context_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CondContextDef.context_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_context_name(), target);
  }

  // string pred_name = 2;
  if (!this->_internal_pred_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pred_name().data(), static_cast<int>(this->_internal_pred_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CondContextDef.pred_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pred_name(), target);
  }

  // string pivot_name = 3;
  if (!this->_internal_pivot_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pivot_name().data(), static_cast<int>(this->_internal_pivot_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CondContextDef.pivot_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_pivot_name(), target);
  }

  // int32 branch = 4;
  if (this->_internal_branch() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_branch(), target);
  }

  // .tensorflow.ValuesDef values_def = 5;
  if (this->_internal_has_values_def()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::values_def(this),
        _Internal::values_def(this).GetCachedSize(), target, stream);
  }

  // repeated .tensorflow.ControlFlowContextDef nested_contexts = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nested_contexts_size()); i < n; i++) {
    const auto& repfield = this->_internal_nested_contexts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CondContextDef)
  return target;
}

size_t CondContextDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CondContextDef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.ControlFlowContextDef nested_contexts = 6;
  total_size += 1UL * this->_internal_nested_contexts_size();
  for (const auto& msg : this->_impl_.nested_contexts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string context_name = 1;
  if (!this->_internal_context_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_context_name());
  }

  // string pred_name = 2;
  if (!this->_internal_pred_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pred_name());
  }

  // string pivot_name = 3;
  if (!this->_internal_pivot_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pivot_name());
  }

  // .tensorflow.ValuesDef values_def = 5;
  if (this->_internal_has_values_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.values_def_);
  }

  // int32 branch = 4;
  if (this->_internal_branch() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_branch());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CondContextDef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CondContextDef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CondContextDef::GetClassData() const { return &_class_data_; }


void CondContextDef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CondContextDef*>(&to_msg);
  auto& from = static_cast<const CondContextDef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CondContextDef)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.nested_contexts_.MergeFrom(from._impl_.nested_contexts_);
  if (!from._internal_context_name().empty()) {
    _this->_internal_set_context_name(from._internal_context_name());
  }
  if (!from._internal_pred_name().empty()) {
    _this->_internal_set_pred_name(from._internal_pred_name());
  }
  if (!from._internal_pivot_name().empty()) {
    _this->_internal_set_pivot_name(from._internal_pivot_name());
  }
  if (from._internal_has_values_def()) {
    _this->_internal_mutable_values_def()->::tensorflow::ValuesDef::MergeFrom(
        from._internal_values_def());
  }
  if (from._internal_branch() != 0) {
    _this->_internal_set_branch(from._internal_branch());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CondContextDef::CopyFrom(const CondContextDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CondContextDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CondContextDef::IsInitialized() const {
  return true;
}

void CondContextDef::InternalSwap(CondContextDef* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.nested_contexts_.InternalSwap(&other->_impl_.nested_contexts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.context_name_, lhs_arena,
      &other->_impl_.context_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pred_name_, lhs_arena,
      &other->_impl_.pred_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pivot_name_, lhs_arena,
      &other->_impl_.pivot_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CondContextDef, _impl_.branch_)
      + sizeof(CondContextDef::_impl_.branch_)
      - PROTOBUF_FIELD_OFFSET(CondContextDef, _impl_.values_def_)>(
          reinterpret_cast<char*>(&_impl_.values_def_),
          reinterpret_cast<char*>(&other->_impl_.values_def_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CondContextDef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto[3]);
}

// ===================================================================

class WhileContextDef::_Internal {
 public:
  static const ::tensorflow::ValuesDef& values_def(const WhileContextDef* msg);
};

const ::tensorflow::ValuesDef&
WhileContextDef::_Internal::values_def(const WhileContextDef* msg) {
  return *msg->_impl_.values_def_;
}
WhileContextDef::WhileContextDef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.WhileContextDef)
}
WhileContextDef::WhileContextDef(const WhileContextDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WhileContextDef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.loop_exit_names_){from._impl_.loop_exit_names_}
    , decltype(_impl_.loop_enter_names_){from._impl_.loop_enter_names_}
    , decltype(_impl_.nested_contexts_){from._impl_.nested_contexts_}
    , decltype(_impl_.context_name_){}
    , decltype(_impl_.pivot_name_){}
    , decltype(_impl_.pivot_for_pred_name_){}
    , decltype(_impl_.pivot_for_body_name_){}
    , decltype(_impl_.maximum_iterations_name_){}
    , decltype(_impl_.values_def_){nullptr}
    , decltype(_impl_.parallel_iterations_){}
    , decltype(_impl_.back_prop_){}
    , decltype(_impl_.swap_memory_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.context_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.context_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_context_name().empty()) {
    _this->_impl_.context_name_.Set(from._internal_context_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pivot_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pivot_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pivot_name().empty()) {
    _this->_impl_.pivot_name_.Set(from._internal_pivot_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pivot_for_pred_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pivot_for_pred_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pivot_for_pred_name().empty()) {
    _this->_impl_.pivot_for_pred_name_.Set(from._internal_pivot_for_pred_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.pivot_for_body_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pivot_for_body_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_pivot_for_body_name().empty()) {
    _this->_impl_.pivot_for_body_name_.Set(from._internal_pivot_for_body_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.maximum_iterations_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.maximum_iterations_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_maximum_iterations_name().empty()) {
    _this->_impl_.maximum_iterations_name_.Set(from._internal_maximum_iterations_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_values_def()) {
    _this->_impl_.values_def_ = new ::tensorflow::ValuesDef(*from._impl_.values_def_);
  }
  ::memcpy(&_impl_.parallel_iterations_, &from._impl_.parallel_iterations_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.swap_memory_) -
    reinterpret_cast<char*>(&_impl_.parallel_iterations_)) + sizeof(_impl_.swap_memory_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.WhileContextDef)
}

inline void WhileContextDef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.loop_exit_names_){arena}
    , decltype(_impl_.loop_enter_names_){arena}
    , decltype(_impl_.nested_contexts_){arena}
    , decltype(_impl_.context_name_){}
    , decltype(_impl_.pivot_name_){}
    , decltype(_impl_.pivot_for_pred_name_){}
    , decltype(_impl_.pivot_for_body_name_){}
    , decltype(_impl_.maximum_iterations_name_){}
    , decltype(_impl_.values_def_){nullptr}
    , decltype(_impl_.parallel_iterations_){0}
    , decltype(_impl_.back_prop_){false}
    , decltype(_impl_.swap_memory_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.context_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.context_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pivot_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pivot_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pivot_for_pred_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pivot_for_pred_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.pivot_for_body_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.pivot_for_body_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.maximum_iterations_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.maximum_iterations_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WhileContextDef::~WhileContextDef() {
  // @@protoc_insertion_point(destructor:tensorflow.WhileContextDef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WhileContextDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.loop_exit_names_.~RepeatedPtrField();
  _impl_.loop_enter_names_.~RepeatedPtrField();
  _impl_.nested_contexts_.~RepeatedPtrField();
  _impl_.context_name_.Destroy();
  _impl_.pivot_name_.Destroy();
  _impl_.pivot_for_pred_name_.Destroy();
  _impl_.pivot_for_body_name_.Destroy();
  _impl_.maximum_iterations_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.values_def_;
}

void WhileContextDef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WhileContextDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.WhileContextDef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.loop_exit_names_.Clear();
  _impl_.loop_enter_names_.Clear();
  _impl_.nested_contexts_.Clear();
  _impl_.context_name_.ClearToEmpty();
  _impl_.pivot_name_.ClearToEmpty();
  _impl_.pivot_for_pred_name_.ClearToEmpty();
  _impl_.pivot_for_body_name_.ClearToEmpty();
  _impl_.maximum_iterations_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.values_def_ != nullptr) {
    delete _impl_.values_def_;
  }
  _impl_.values_def_ = nullptr;
  ::memset(&_impl_.parallel_iterations_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.swap_memory_) -
      reinterpret_cast<char*>(&_impl_.parallel_iterations_)) + sizeof(_impl_.swap_memory_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WhileContextDef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string context_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_context_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.WhileContextDef.context_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 parallel_iterations = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.parallel_iterations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool back_prop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.back_prop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool swap_memory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.swap_memory_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string pivot_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_pivot_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.WhileContextDef.pivot_name"));
        } else
          goto handle_unusual;
        continue;
      // string pivot_for_pred_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_pivot_for_pred_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.WhileContextDef.pivot_for_pred_name"));
        } else
          goto handle_unusual;
        continue;
      // string pivot_for_body_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_pivot_for_body_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.WhileContextDef.pivot_for_body_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string loop_exit_names = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_loop_exit_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.WhileContextDef.loop_exit_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.ValuesDef values_def = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_values_def(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string loop_enter_names = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_loop_enter_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.WhileContextDef.loop_enter_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string maximum_iterations_name = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_maximum_iterations_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.WhileContextDef.maximum_iterations_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.ControlFlowContextDef nested_contexts = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_nested_contexts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WhileContextDef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.WhileContextDef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string context_name = 1;
  if (!this->_internal_context_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_context_name().data(), static_cast<int>(this->_internal_context_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.WhileContextDef.context_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_context_name(), target);
  }

  // int32 parallel_iterations = 2;
  if (this->_internal_parallel_iterations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_parallel_iterations(), target);
  }

  // bool back_prop = 3;
  if (this->_internal_back_prop() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_back_prop(), target);
  }

  // bool swap_memory = 4;
  if (this->_internal_swap_memory() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_swap_memory(), target);
  }

  // string pivot_name = 5;
  if (!this->_internal_pivot_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pivot_name().data(), static_cast<int>(this->_internal_pivot_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.WhileContextDef.pivot_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_pivot_name(), target);
  }

  // string pivot_for_pred_name = 6;
  if (!this->_internal_pivot_for_pred_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pivot_for_pred_name().data(), static_cast<int>(this->_internal_pivot_for_pred_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.WhileContextDef.pivot_for_pred_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_pivot_for_pred_name(), target);
  }

  // string pivot_for_body_name = 7;
  if (!this->_internal_pivot_for_body_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pivot_for_body_name().data(), static_cast<int>(this->_internal_pivot_for_body_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.WhileContextDef.pivot_for_body_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_pivot_for_body_name(), target);
  }

  // repeated string loop_exit_names = 8;
  for (int i = 0, n = this->_internal_loop_exit_names_size(); i < n; i++) {
    const auto& s = this->_internal_loop_exit_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.WhileContextDef.loop_exit_names");
    target = stream->WriteString(8, s, target);
  }

  // .tensorflow.ValuesDef values_def = 9;
  if (this->_internal_has_values_def()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::values_def(this),
        _Internal::values_def(this).GetCachedSize(), target, stream);
  }

  // repeated string loop_enter_names = 10;
  for (int i = 0, n = this->_internal_loop_enter_names_size(); i < n; i++) {
    const auto& s = this->_internal_loop_enter_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.WhileContextDef.loop_enter_names");
    target = stream->WriteString(10, s, target);
  }

  // string maximum_iterations_name = 11;
  if (!this->_internal_maximum_iterations_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_maximum_iterations_name().data(), static_cast<int>(this->_internal_maximum_iterations_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.WhileContextDef.maximum_iterations_name");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_maximum_iterations_name(), target);
  }

  // repeated .tensorflow.ControlFlowContextDef nested_contexts = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_nested_contexts_size()); i < n; i++) {
    const auto& repfield = this->_internal_nested_contexts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.WhileContextDef)
  return target;
}

size_t WhileContextDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.WhileContextDef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string loop_exit_names = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.loop_exit_names_.size());
  for (int i = 0, n = _impl_.loop_exit_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.loop_exit_names_.Get(i));
  }

  // repeated string loop_enter_names = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.loop_enter_names_.size());
  for (int i = 0, n = _impl_.loop_enter_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.loop_enter_names_.Get(i));
  }

  // repeated .tensorflow.ControlFlowContextDef nested_contexts = 12;
  total_size += 1UL * this->_internal_nested_contexts_size();
  for (const auto& msg : this->_impl_.nested_contexts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string context_name = 1;
  if (!this->_internal_context_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_context_name());
  }

  // string pivot_name = 5;
  if (!this->_internal_pivot_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pivot_name());
  }

  // string pivot_for_pred_name = 6;
  if (!this->_internal_pivot_for_pred_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pivot_for_pred_name());
  }

  // string pivot_for_body_name = 7;
  if (!this->_internal_pivot_for_body_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pivot_for_body_name());
  }

  // string maximum_iterations_name = 11;
  if (!this->_internal_maximum_iterations_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_maximum_iterations_name());
  }

  // .tensorflow.ValuesDef values_def = 9;
  if (this->_internal_has_values_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.values_def_);
  }

  // int32 parallel_iterations = 2;
  if (this->_internal_parallel_iterations() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_parallel_iterations());
  }

  // bool back_prop = 3;
  if (this->_internal_back_prop() != 0) {
    total_size += 1 + 1;
  }

  // bool swap_memory = 4;
  if (this->_internal_swap_memory() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WhileContextDef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WhileContextDef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WhileContextDef::GetClassData() const { return &_class_data_; }


void WhileContextDef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WhileContextDef*>(&to_msg);
  auto& from = static_cast<const WhileContextDef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.WhileContextDef)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.loop_exit_names_.MergeFrom(from._impl_.loop_exit_names_);
  _this->_impl_.loop_enter_names_.MergeFrom(from._impl_.loop_enter_names_);
  _this->_impl_.nested_contexts_.MergeFrom(from._impl_.nested_contexts_);
  if (!from._internal_context_name().empty()) {
    _this->_internal_set_context_name(from._internal_context_name());
  }
  if (!from._internal_pivot_name().empty()) {
    _this->_internal_set_pivot_name(from._internal_pivot_name());
  }
  if (!from._internal_pivot_for_pred_name().empty()) {
    _this->_internal_set_pivot_for_pred_name(from._internal_pivot_for_pred_name());
  }
  if (!from._internal_pivot_for_body_name().empty()) {
    _this->_internal_set_pivot_for_body_name(from._internal_pivot_for_body_name());
  }
  if (!from._internal_maximum_iterations_name().empty()) {
    _this->_internal_set_maximum_iterations_name(from._internal_maximum_iterations_name());
  }
  if (from._internal_has_values_def()) {
    _this->_internal_mutable_values_def()->::tensorflow::ValuesDef::MergeFrom(
        from._internal_values_def());
  }
  if (from._internal_parallel_iterations() != 0) {
    _this->_internal_set_parallel_iterations(from._internal_parallel_iterations());
  }
  if (from._internal_back_prop() != 0) {
    _this->_internal_set_back_prop(from._internal_back_prop());
  }
  if (from._internal_swap_memory() != 0) {
    _this->_internal_set_swap_memory(from._internal_swap_memory());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WhileContextDef::CopyFrom(const WhileContextDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.WhileContextDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhileContextDef::IsInitialized() const {
  return true;
}

void WhileContextDef::InternalSwap(WhileContextDef* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.loop_exit_names_.InternalSwap(&other->_impl_.loop_exit_names_);
  _impl_.loop_enter_names_.InternalSwap(&other->_impl_.loop_enter_names_);
  _impl_.nested_contexts_.InternalSwap(&other->_impl_.nested_contexts_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.context_name_, lhs_arena,
      &other->_impl_.context_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pivot_name_, lhs_arena,
      &other->_impl_.pivot_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pivot_for_pred_name_, lhs_arena,
      &other->_impl_.pivot_for_pred_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.pivot_for_body_name_, lhs_arena,
      &other->_impl_.pivot_for_body_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.maximum_iterations_name_, lhs_arena,
      &other->_impl_.maximum_iterations_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WhileContextDef, _impl_.swap_memory_)
      + sizeof(WhileContextDef::_impl_.swap_memory_)
      - PROTOBUF_FIELD_OFFSET(WhileContextDef, _impl_.values_def_)>(
          reinterpret_cast<char*>(&_impl_.values_def_),
          reinterpret_cast<char*>(&other->_impl_.values_def_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WhileContextDef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fcontrol_5fflow_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::ValuesDef_ExternalValuesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tensorflow::ValuesDef_ExternalValuesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ValuesDef_ExternalValuesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ValuesDef*
Arena::CreateMaybeMessage< ::tensorflow::ValuesDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ValuesDef >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ControlFlowContextDef*
Arena::CreateMaybeMessage< ::tensorflow::ControlFlowContextDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ControlFlowContextDef >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CondContextDef*
Arena::CreateMaybeMessage< ::tensorflow::CondContextDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CondContextDef >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::WhileContextDef*
Arena::CreateMaybeMessage< ::tensorflow::WhileContextDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::WhileContextDef >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
