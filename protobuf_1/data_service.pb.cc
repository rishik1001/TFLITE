// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/data_service.proto

#include "tensorflow/core/protobuf/data_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
namespace data {
PROTOBUF_CONSTEXPR ProcessingModeDef::ProcessingModeDef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sharding_policy_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ProcessingModeDefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ProcessingModeDefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ProcessingModeDefDefaultTypeInternal() {}
  union {
    ProcessingModeDef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ProcessingModeDefDefaultTypeInternal _ProcessingModeDef_default_instance_;
PROTOBUF_CONSTEXPR DataServiceMetadata::DataServiceMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cardinality_)*/int64_t{0}
  , /*decltype(_impl_.compression_)*/0
  , /*decltype(_impl_.optional_element_spec_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DataServiceMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataServiceMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataServiceMetadataDefaultTypeInternal() {}
  union {
    DataServiceMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataServiceMetadataDefaultTypeInternal _DataServiceMetadata_default_instance_;
PROTOBUF_CONSTEXPR CrossTrainerCacheOptions::CrossTrainerCacheOptions(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.trainer_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CrossTrainerCacheOptionsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CrossTrainerCacheOptionsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CrossTrainerCacheOptionsDefaultTypeInternal() {}
  union {
    CrossTrainerCacheOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CrossTrainerCacheOptionsDefaultTypeInternal _CrossTrainerCacheOptions_default_instance_;
PROTOBUF_CONSTEXPR DataServiceConfig::DataServiceConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.deployment_mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DataServiceConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataServiceConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataServiceConfigDefaultTypeInternal() {}
  union {
    DataServiceConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataServiceConfigDefaultTypeInternal _DataServiceConfig_default_instance_;
}  // namespace data
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto[3];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::ProcessingModeDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::ProcessingModeDef, _impl_.sharding_policy_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::DataServiceMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::DataServiceMetadata, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::DataServiceMetadata, _impl_.compression_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::DataServiceMetadata, _impl_.cardinality_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::DataServiceMetadata, _impl_.optional_element_spec_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::CrossTrainerCacheOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::CrossTrainerCacheOptions, _impl_.trainer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::DataServiceConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::DataServiceConfig, _impl_.deployment_mode_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::data::ProcessingModeDef)},
  { 7, -1, -1, sizeof(::tensorflow::data::DataServiceMetadata)},
  { 17, -1, -1, sizeof(::tensorflow::data::CrossTrainerCacheOptions)},
  { 24, -1, -1, sizeof(::tensorflow::data::DataServiceConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::data::_ProcessingModeDef_default_instance_._instance,
  &::tensorflow::data::_DataServiceMetadata_default_instance_._instance,
  &::tensorflow::data::_CrossTrainerCacheOptions_default_instance_._instance,
  &::tensorflow::data::_DataServiceConfig_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n+tensorflow/core/protobuf/data_service."
  "proto\022\017tensorflow.data\"\267\001\n\021ProcessingMod"
  "eDef\022J\n\017sharding_policy\030\001 \001(\01621.tensorfl"
  "ow.data.ProcessingModeDef.ShardingPolicy"
  "\"V\n\016ShardingPolicy\022\007\n\003OFF\020\000\022\013\n\007DYNAMIC\020\001"
  "\022\010\n\004FILE\020\002\022\010\n\004DATA\020\003\022\020\n\014FILE_OR_DATA\020\004\022\010"
  "\n\004HINT\020\005\"\373\001\n\023DataServiceMetadata\022\026\n\014elem"
  "ent_spec\030\001 \001(\014H\000\022E\n\013compression\030\002 \001(\01620."
  "tensorflow.data.DataServiceMetadata.Comp"
  "ression\022\023\n\013cardinality\030\003 \001(\003\"W\n\013Compress"
  "ion\022\033\n\027COMPRESSION_UNSPECIFIED\020\000\022\023\n\017COMP"
  "RESSION_OFF\020\001\022\026\n\022COMPRESSION_SNAPPY\020\002B\027\n"
  "\025optional_element_spec\".\n\030CrossTrainerCa"
  "cheOptions\022\022\n\ntrainer_id\030\001 \001(\t\"M\n\021DataSe"
  "rviceConfig\0228\n\017deployment_mode\030\001 \001(\0162\037.t"
  "ensorflow.data.DeploymentMode*\210\001\n\016Deploy"
  "mentMode\022\037\n\033DEPLOYMENT_MODE_UNSPECIFIED\020"
  "\000\022\035\n\031DEPLOYMENT_MODE_COLOCATED\020\001\022\032\n\026DEPL"
  "OYMENT_MODE_REMOTE\020\002\022\032\n\026DEPLOYMENT_MODE_"
  "HYBRID\020\003BWZUgithub.com/tensorflow/tensor"
  "flow/tensorflow/go/core/protobuf/for_cor"
  "e_protos_go_protob\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto = {
    false, false, 865, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto,
    "tensorflow/core/protobuf/data_service.proto",
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto);
namespace tensorflow {
namespace data {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProcessingModeDef_ShardingPolicy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto[0];
}
bool ProcessingModeDef_ShardingPolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ProcessingModeDef_ShardingPolicy ProcessingModeDef::OFF;
constexpr ProcessingModeDef_ShardingPolicy ProcessingModeDef::DYNAMIC;
constexpr ProcessingModeDef_ShardingPolicy ProcessingModeDef::FILE;
constexpr ProcessingModeDef_ShardingPolicy ProcessingModeDef::DATA;
constexpr ProcessingModeDef_ShardingPolicy ProcessingModeDef::FILE_OR_DATA;
constexpr ProcessingModeDef_ShardingPolicy ProcessingModeDef::HINT;
constexpr ProcessingModeDef_ShardingPolicy ProcessingModeDef::ShardingPolicy_MIN;
constexpr ProcessingModeDef_ShardingPolicy ProcessingModeDef::ShardingPolicy_MAX;
constexpr int ProcessingModeDef::ShardingPolicy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataServiceMetadata_Compression_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto[1];
}
bool DataServiceMetadata_Compression_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr DataServiceMetadata_Compression DataServiceMetadata::COMPRESSION_UNSPECIFIED;
constexpr DataServiceMetadata_Compression DataServiceMetadata::COMPRESSION_OFF;
constexpr DataServiceMetadata_Compression DataServiceMetadata::COMPRESSION_SNAPPY;
constexpr DataServiceMetadata_Compression DataServiceMetadata::Compression_MIN;
constexpr DataServiceMetadata_Compression DataServiceMetadata::Compression_MAX;
constexpr int DataServiceMetadata::Compression_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeploymentMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto[2];
}
bool DeploymentMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ProcessingModeDef::_Internal {
 public:
};

ProcessingModeDef::ProcessingModeDef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.ProcessingModeDef)
}
ProcessingModeDef::ProcessingModeDef(const ProcessingModeDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ProcessingModeDef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sharding_policy_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.sharding_policy_ = from._impl_.sharding_policy_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.ProcessingModeDef)
}

inline void ProcessingModeDef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sharding_policy_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ProcessingModeDef::~ProcessingModeDef() {
  // @@protoc_insertion_point(destructor:tensorflow.data.ProcessingModeDef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ProcessingModeDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProcessingModeDef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ProcessingModeDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.ProcessingModeDef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.sharding_policy_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProcessingModeDef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.data.ProcessingModeDef.ShardingPolicy sharding_policy = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sharding_policy(static_cast<::tensorflow::data::ProcessingModeDef_ShardingPolicy>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProcessingModeDef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.ProcessingModeDef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.data.ProcessingModeDef.ShardingPolicy sharding_policy = 1;
  if (this->_internal_sharding_policy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_sharding_policy(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.ProcessingModeDef)
  return target;
}

size_t ProcessingModeDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.ProcessingModeDef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.data.ProcessingModeDef.ShardingPolicy sharding_policy = 1;
  if (this->_internal_sharding_policy() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sharding_policy());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProcessingModeDef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ProcessingModeDef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProcessingModeDef::GetClassData() const { return &_class_data_; }


void ProcessingModeDef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ProcessingModeDef*>(&to_msg);
  auto& from = static_cast<const ProcessingModeDef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.ProcessingModeDef)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sharding_policy() != 0) {
    _this->_internal_set_sharding_policy(from._internal_sharding_policy());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProcessingModeDef::CopyFrom(const ProcessingModeDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.ProcessingModeDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProcessingModeDef::IsInitialized() const {
  return true;
}

void ProcessingModeDef::InternalSwap(ProcessingModeDef* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.sharding_policy_, other->_impl_.sharding_policy_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ProcessingModeDef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto[0]);
}

// ===================================================================

class DataServiceMetadata::_Internal {
 public:
};

DataServiceMetadata::DataServiceMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.DataServiceMetadata)
}
DataServiceMetadata::DataServiceMetadata(const DataServiceMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataServiceMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cardinality_){}
    , decltype(_impl_.compression_){}
    , decltype(_impl_.optional_element_spec_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.cardinality_, &from._impl_.cardinality_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.compression_) -
    reinterpret_cast<char*>(&_impl_.cardinality_)) + sizeof(_impl_.compression_));
  clear_has_optional_element_spec();
  switch (from.optional_element_spec_case()) {
    case kElementSpec: {
      _this->_internal_set_element_spec(from._internal_element_spec());
      break;
    }
    case OPTIONAL_ELEMENT_SPEC_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.DataServiceMetadata)
}

inline void DataServiceMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cardinality_){int64_t{0}}
    , decltype(_impl_.compression_){0}
    , decltype(_impl_.optional_element_spec_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_optional_element_spec();
}

DataServiceMetadata::~DataServiceMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.data.DataServiceMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataServiceMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_optional_element_spec()) {
    clear_optional_element_spec();
  }
}

void DataServiceMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataServiceMetadata::clear_optional_element_spec() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.data.DataServiceMetadata)
  switch (optional_element_spec_case()) {
    case kElementSpec: {
      _impl_.optional_element_spec_.element_spec_.Destroy();
      break;
    }
    case OPTIONAL_ELEMENT_SPEC_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = OPTIONAL_ELEMENT_SPEC_NOT_SET;
}


void DataServiceMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.DataServiceMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.cardinality_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.compression_) -
      reinterpret_cast<char*>(&_impl_.cardinality_)) + sizeof(_impl_.compression_));
  clear_optional_element_spec();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataServiceMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes element_spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_element_spec();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.data.DataServiceMetadata.Compression compression = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_compression(static_cast<::tensorflow::data::DataServiceMetadata_Compression>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 cardinality = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.cardinality_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataServiceMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.DataServiceMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes element_spec = 1;
  if (_internal_has_element_spec()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_element_spec(), target);
  }

  // .tensorflow.data.DataServiceMetadata.Compression compression = 2;
  if (this->_internal_compression() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_compression(), target);
  }

  // int64 cardinality = 3;
  if (this->_internal_cardinality() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_cardinality(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.DataServiceMetadata)
  return target;
}

size_t DataServiceMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.DataServiceMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 cardinality = 3;
  if (this->_internal_cardinality() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cardinality());
  }

  // .tensorflow.data.DataServiceMetadata.Compression compression = 2;
  if (this->_internal_compression() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_compression());
  }

  switch (optional_element_spec_case()) {
    // bytes element_spec = 1;
    case kElementSpec: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_element_spec());
      break;
    }
    case OPTIONAL_ELEMENT_SPEC_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataServiceMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataServiceMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataServiceMetadata::GetClassData() const { return &_class_data_; }


void DataServiceMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataServiceMetadata*>(&to_msg);
  auto& from = static_cast<const DataServiceMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.DataServiceMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cardinality() != 0) {
    _this->_internal_set_cardinality(from._internal_cardinality());
  }
  if (from._internal_compression() != 0) {
    _this->_internal_set_compression(from._internal_compression());
  }
  switch (from.optional_element_spec_case()) {
    case kElementSpec: {
      _this->_internal_set_element_spec(from._internal_element_spec());
      break;
    }
    case OPTIONAL_ELEMENT_SPEC_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataServiceMetadata::CopyFrom(const DataServiceMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.DataServiceMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataServiceMetadata::IsInitialized() const {
  return true;
}

void DataServiceMetadata::InternalSwap(DataServiceMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DataServiceMetadata, _impl_.compression_)
      + sizeof(DataServiceMetadata::_impl_.compression_)
      - PROTOBUF_FIELD_OFFSET(DataServiceMetadata, _impl_.cardinality_)>(
          reinterpret_cast<char*>(&_impl_.cardinality_),
          reinterpret_cast<char*>(&other->_impl_.cardinality_));
  swap(_impl_.optional_element_spec_, other->_impl_.optional_element_spec_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataServiceMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto[1]);
}

// ===================================================================

class CrossTrainerCacheOptions::_Internal {
 public:
};

CrossTrainerCacheOptions::CrossTrainerCacheOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.CrossTrainerCacheOptions)
}
CrossTrainerCacheOptions::CrossTrainerCacheOptions(const CrossTrainerCacheOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CrossTrainerCacheOptions* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.trainer_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.trainer_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trainer_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_trainer_id().empty()) {
    _this->_impl_.trainer_id_.Set(from._internal_trainer_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.CrossTrainerCacheOptions)
}

inline void CrossTrainerCacheOptions::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.trainer_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.trainer_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.trainer_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CrossTrainerCacheOptions::~CrossTrainerCacheOptions() {
  // @@protoc_insertion_point(destructor:tensorflow.data.CrossTrainerCacheOptions)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CrossTrainerCacheOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.trainer_id_.Destroy();
}

void CrossTrainerCacheOptions::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CrossTrainerCacheOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.CrossTrainerCacheOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.trainer_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CrossTrainerCacheOptions::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string trainer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_trainer_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.data.CrossTrainerCacheOptions.trainer_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CrossTrainerCacheOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.CrossTrainerCacheOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string trainer_id = 1;
  if (!this->_internal_trainer_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_trainer_id().data(), static_cast<int>(this->_internal_trainer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.CrossTrainerCacheOptions.trainer_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_trainer_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.CrossTrainerCacheOptions)
  return target;
}

size_t CrossTrainerCacheOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.CrossTrainerCacheOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string trainer_id = 1;
  if (!this->_internal_trainer_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trainer_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CrossTrainerCacheOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CrossTrainerCacheOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CrossTrainerCacheOptions::GetClassData() const { return &_class_data_; }


void CrossTrainerCacheOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CrossTrainerCacheOptions*>(&to_msg);
  auto& from = static_cast<const CrossTrainerCacheOptions&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.CrossTrainerCacheOptions)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_trainer_id().empty()) {
    _this->_internal_set_trainer_id(from._internal_trainer_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CrossTrainerCacheOptions::CopyFrom(const CrossTrainerCacheOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.CrossTrainerCacheOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CrossTrainerCacheOptions::IsInitialized() const {
  return true;
}

void CrossTrainerCacheOptions::InternalSwap(CrossTrainerCacheOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.trainer_id_, lhs_arena,
      &other->_impl_.trainer_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CrossTrainerCacheOptions::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto[2]);
}

// ===================================================================

class DataServiceConfig::_Internal {
 public:
};

DataServiceConfig::DataServiceConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.DataServiceConfig)
}
DataServiceConfig::DataServiceConfig(const DataServiceConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DataServiceConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.deployment_mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.deployment_mode_ = from._impl_.deployment_mode_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.DataServiceConfig)
}

inline void DataServiceConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.deployment_mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DataServiceConfig::~DataServiceConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.data.DataServiceConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DataServiceConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DataServiceConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DataServiceConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.DataServiceConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.deployment_mode_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataServiceConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.data.DeploymentMode deployment_mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_deployment_mode(static_cast<::tensorflow::data::DeploymentMode>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DataServiceConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.DataServiceConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.data.DeploymentMode deployment_mode = 1;
  if (this->_internal_deployment_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_deployment_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.DataServiceConfig)
  return target;
}

size_t DataServiceConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.DataServiceConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.data.DeploymentMode deployment_mode = 1;
  if (this->_internal_deployment_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_deployment_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DataServiceConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DataServiceConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DataServiceConfig::GetClassData() const { return &_class_data_; }


void DataServiceConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DataServiceConfig*>(&to_msg);
  auto& from = static_cast<const DataServiceConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.DataServiceConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_deployment_mode() != 0) {
    _this->_internal_set_deployment_mode(from._internal_deployment_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DataServiceConfig::CopyFrom(const DataServiceConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.DataServiceConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataServiceConfig::IsInitialized() const {
  return true;
}

void DataServiceConfig::InternalSwap(DataServiceConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.deployment_mode_, other->_impl_.deployment_mode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataServiceConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace data
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::data::ProcessingModeDef*
Arena::CreateMaybeMessage< ::tensorflow::data::ProcessingModeDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::ProcessingModeDef >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::data::DataServiceMetadata*
Arena::CreateMaybeMessage< ::tensorflow::data::DataServiceMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::DataServiceMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::data::CrossTrainerCacheOptions*
Arena::CreateMaybeMessage< ::tensorflow::data::CrossTrainerCacheOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::CrossTrainerCacheOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::data::DataServiceConfig*
Arena::CreateMaybeMessage< ::tensorflow::data::DataServiceConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::DataServiceConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
