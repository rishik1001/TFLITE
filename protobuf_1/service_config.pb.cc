// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/service_config.proto

#include "tensorflow/core/protobuf/service_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
namespace data {
namespace experimental {
PROTOBUF_CONSTEXPR DispatcherConfig::DispatcherConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.worker_addresses_)*/{}
  , /*decltype(_impl_.protocol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.work_dir_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/int64_t{0}
  , /*decltype(_impl_.job_gc_check_interval_ms_)*/int64_t{0}
  , /*decltype(_impl_.job_gc_timeout_ms_)*/int64_t{0}
  , /*decltype(_impl_.client_timeout_ms_)*/int64_t{0}
  , /*decltype(_impl_.fault_tolerant_mode_)*/false
  , /*decltype(_impl_.gc_dynamic_sharding_jobs_)*/false
  , /*decltype(_impl_.deployment_mode_)*/0
  , /*decltype(_impl_.worker_timeout_ms_)*/int64_t{0}
  , /*decltype(_impl_.worker_max_concurrent_snapshots_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DispatcherConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DispatcherConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DispatcherConfigDefaultTypeInternal() {}
  union {
    DispatcherConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DispatcherConfigDefaultTypeInternal _DispatcherConfig_default_instance_;
PROTOBUF_CONSTEXPR WorkerConfig::WorkerConfig(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.worker_tags_)*/{}
  , /*decltype(_impl_.protocol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.dispatcher_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.worker_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_transfer_protocol_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_transfer_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.port_)*/int64_t{0}
  , /*decltype(_impl_.heartbeat_interval_ms_)*/int64_t{0}
  , /*decltype(_impl_.dispatcher_timeout_ms_)*/int64_t{0}
  , /*decltype(_impl_.shutdown_quiet_period_ms_)*/int64_t{0}
  , /*decltype(_impl_.cross_trainer_cache_size_bytes_)*/int64_t{0}
  , /*decltype(_impl_.snapshot_max_chunk_size_bytes_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WorkerConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorkerConfigDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorkerConfigDefaultTypeInternal() {}
  union {
    WorkerConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorkerConfigDefaultTypeInternal _WorkerConfig_default_instance_;
}  // namespace experimental
}  // namespace data
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.work_dir_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.fault_tolerant_mode_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.worker_addresses_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.deployment_mode_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.job_gc_check_interval_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.job_gc_timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.gc_dynamic_sharding_jobs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.client_timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.worker_timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DispatcherConfig, _impl_.worker_max_concurrent_snapshots_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.port_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.protocol_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.dispatcher_address_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.worker_address_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.worker_tags_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.heartbeat_interval_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.dispatcher_timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.data_transfer_protocol_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.data_transfer_address_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.cross_trainer_cache_size_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.snapshot_max_chunk_size_bytes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::WorkerConfig, _impl_.shutdown_quiet_period_ms_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::data::experimental::DispatcherConfig)},
  { 18, -1, -1, sizeof(::tensorflow::data::experimental::WorkerConfig)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::data::experimental::_DispatcherConfig_default_instance_._instance,
  &::tensorflow::data::experimental::_WorkerConfig_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-tensorflow/core/protobuf/service_confi"
  "g.proto\022\034tensorflow.data.experimental\032+t"
  "ensorflow/core/protobuf/data_service.pro"
  "to\"\363\002\n\020DispatcherConfig\022\014\n\004port\030\001 \001(\003\022\020\n"
  "\010protocol\030\002 \001(\t\022\020\n\010work_dir\030\003 \001(\t\022\033\n\023fau"
  "lt_tolerant_mode\030\004 \001(\010\022\030\n\020worker_address"
  "es\030\007 \003(\t\0228\n\017deployment_mode\030\t \001(\0162\037.tens"
  "orflow.data.DeploymentMode\022 \n\030job_gc_che"
  "ck_interval_ms\030\005 \001(\003\022\031\n\021job_gc_timeout_m"
  "s\030\006 \001(\003\022 \n\030gc_dynamic_sharding_jobs\030\013 \001("
  "\010\022\031\n\021client_timeout_ms\030\010 \001(\003\022\031\n\021worker_t"
  "imeout_ms\030\n \001(\003\022\'\n\037worker_max_concurrent"
  "_snapshots\030\014 \001(\003\"\345\002\n\014WorkerConfig\022\014\n\004por"
  "t\030\001 \001(\003\022\020\n\010protocol\030\002 \001(\t\022\032\n\022dispatcher_"
  "address\030\003 \001(\t\022\026\n\016worker_address\030\004 \001(\t\022\023\n"
  "\013worker_tags\030\n \003(\t\022\035\n\025heartbeat_interval"
  "_ms\030\005 \001(\003\022\035\n\025dispatcher_timeout_ms\030\006 \001(\003"
  "\022\036\n\026data_transfer_protocol\030\007 \001(\t\022\035\n\025data"
  "_transfer_address\030\010 \001(\t\022&\n\036cross_trainer"
  "_cache_size_bytes\030\013 \001(\003\022%\n\035snapshot_max_"
  "chunk_size_bytes\030\014 \001(\003\022 \n\030shutdown_quiet"
  "_period_ms\030\t \001(\003BWZUgithub.com/tensorflo"
  "w/tensorflow/tensorflow/go/core/protobuf"
  "/for_core_protos_go_protob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto_deps[1] = {
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fdata_5fservice_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto = {
    false, false, 953, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto,
    "tensorflow/core/protobuf/service_config.proto",
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto_deps, 1, 2,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto);
namespace tensorflow {
namespace data {
namespace experimental {

// ===================================================================

class DispatcherConfig::_Internal {
 public:
};

DispatcherConfig::DispatcherConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.experimental.DispatcherConfig)
}
DispatcherConfig::DispatcherConfig(const DispatcherConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DispatcherConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.worker_addresses_){from._impl_.worker_addresses_}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.work_dir_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.job_gc_check_interval_ms_){}
    , decltype(_impl_.job_gc_timeout_ms_){}
    , decltype(_impl_.client_timeout_ms_){}
    , decltype(_impl_.fault_tolerant_mode_){}
    , decltype(_impl_.gc_dynamic_sharding_jobs_){}
    , decltype(_impl_.deployment_mode_){}
    , decltype(_impl_.worker_timeout_ms_){}
    , decltype(_impl_.worker_max_concurrent_snapshots_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_protocol().empty()) {
    _this->_impl_.protocol_.Set(from._internal_protocol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.work_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.work_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_work_dir().empty()) {
    _this->_impl_.work_dir_.Set(from._internal_work_dir(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.worker_max_concurrent_snapshots_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.worker_max_concurrent_snapshots_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.experimental.DispatcherConfig)
}

inline void DispatcherConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.worker_addresses_){arena}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.work_dir_){}
    , decltype(_impl_.port_){int64_t{0}}
    , decltype(_impl_.job_gc_check_interval_ms_){int64_t{0}}
    , decltype(_impl_.job_gc_timeout_ms_){int64_t{0}}
    , decltype(_impl_.client_timeout_ms_){int64_t{0}}
    , decltype(_impl_.fault_tolerant_mode_){false}
    , decltype(_impl_.gc_dynamic_sharding_jobs_){false}
    , decltype(_impl_.deployment_mode_){0}
    , decltype(_impl_.worker_timeout_ms_){int64_t{0}}
    , decltype(_impl_.worker_max_concurrent_snapshots_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.work_dir_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.work_dir_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DispatcherConfig::~DispatcherConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.data.experimental.DispatcherConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DispatcherConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.worker_addresses_.~RepeatedPtrField();
  _impl_.protocol_.Destroy();
  _impl_.work_dir_.Destroy();
}

void DispatcherConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DispatcherConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.experimental.DispatcherConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.worker_addresses_.Clear();
  _impl_.protocol_.ClearToEmpty();
  _impl_.work_dir_.ClearToEmpty();
  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.worker_max_concurrent_snapshots_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.worker_max_concurrent_snapshots_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DispatcherConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string protocol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_protocol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.data.experimental.DispatcherConfig.protocol"));
        } else
          goto handle_unusual;
        continue;
      // string work_dir = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_work_dir();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.data.experimental.DispatcherConfig.work_dir"));
        } else
          goto handle_unusual;
        continue;
      // bool fault_tolerant_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.fault_tolerant_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 job_gc_check_interval_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.job_gc_check_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 job_gc_timeout_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.job_gc_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string worker_addresses = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_worker_addresses();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.data.experimental.DispatcherConfig.worker_addresses"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 client_timeout_ms = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.client_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.data.DeploymentMode deployment_mode = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_deployment_mode(static_cast<::tensorflow::data::DeploymentMode>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 worker_timeout_ms = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.worker_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool gc_dynamic_sharding_jobs = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.gc_dynamic_sharding_jobs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 worker_max_concurrent_snapshots = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.worker_max_concurrent_snapshots_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DispatcherConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.experimental.DispatcherConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_port(), target);
  }

  // string protocol = 2;
  if (!this->_internal_protocol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.DispatcherConfig.protocol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_protocol(), target);
  }

  // string work_dir = 3;
  if (!this->_internal_work_dir().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_work_dir().data(), static_cast<int>(this->_internal_work_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.DispatcherConfig.work_dir");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_work_dir(), target);
  }

  // bool fault_tolerant_mode = 4;
  if (this->_internal_fault_tolerant_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_fault_tolerant_mode(), target);
  }

  // int64 job_gc_check_interval_ms = 5;
  if (this->_internal_job_gc_check_interval_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_job_gc_check_interval_ms(), target);
  }

  // int64 job_gc_timeout_ms = 6;
  if (this->_internal_job_gc_timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_job_gc_timeout_ms(), target);
  }

  // repeated string worker_addresses = 7;
  for (int i = 0, n = this->_internal_worker_addresses_size(); i < n; i++) {
    const auto& s = this->_internal_worker_addresses(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.DispatcherConfig.worker_addresses");
    target = stream->WriteString(7, s, target);
  }

  // int64 client_timeout_ms = 8;
  if (this->_internal_client_timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_client_timeout_ms(), target);
  }

  // .tensorflow.data.DeploymentMode deployment_mode = 9;
  if (this->_internal_deployment_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      9, this->_internal_deployment_mode(), target);
  }

  // int64 worker_timeout_ms = 10;
  if (this->_internal_worker_timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_worker_timeout_ms(), target);
  }

  // bool gc_dynamic_sharding_jobs = 11;
  if (this->_internal_gc_dynamic_sharding_jobs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(11, this->_internal_gc_dynamic_sharding_jobs(), target);
  }

  // int64 worker_max_concurrent_snapshots = 12;
  if (this->_internal_worker_max_concurrent_snapshots() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_worker_max_concurrent_snapshots(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.experimental.DispatcherConfig)
  return target;
}

size_t DispatcherConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.experimental.DispatcherConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string worker_addresses = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.worker_addresses_.size());
  for (int i = 0, n = _impl_.worker_addresses_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.worker_addresses_.Get(i));
  }

  // string protocol = 2;
  if (!this->_internal_protocol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // string work_dir = 3;
  if (!this->_internal_work_dir().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_work_dir());
  }

  // int64 port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_port());
  }

  // int64 job_gc_check_interval_ms = 5;
  if (this->_internal_job_gc_check_interval_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_job_gc_check_interval_ms());
  }

  // int64 job_gc_timeout_ms = 6;
  if (this->_internal_job_gc_timeout_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_job_gc_timeout_ms());
  }

  // int64 client_timeout_ms = 8;
  if (this->_internal_client_timeout_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_client_timeout_ms());
  }

  // bool fault_tolerant_mode = 4;
  if (this->_internal_fault_tolerant_mode() != 0) {
    total_size += 1 + 1;
  }

  // bool gc_dynamic_sharding_jobs = 11;
  if (this->_internal_gc_dynamic_sharding_jobs() != 0) {
    total_size += 1 + 1;
  }

  // .tensorflow.data.DeploymentMode deployment_mode = 9;
  if (this->_internal_deployment_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_deployment_mode());
  }

  // int64 worker_timeout_ms = 10;
  if (this->_internal_worker_timeout_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_worker_timeout_ms());
  }

  // int64 worker_max_concurrent_snapshots = 12;
  if (this->_internal_worker_max_concurrent_snapshots() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_worker_max_concurrent_snapshots());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DispatcherConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DispatcherConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DispatcherConfig::GetClassData() const { return &_class_data_; }


void DispatcherConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DispatcherConfig*>(&to_msg);
  auto& from = static_cast<const DispatcherConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.experimental.DispatcherConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.worker_addresses_.MergeFrom(from._impl_.worker_addresses_);
  if (!from._internal_protocol().empty()) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  if (!from._internal_work_dir().empty()) {
    _this->_internal_set_work_dir(from._internal_work_dir());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_job_gc_check_interval_ms() != 0) {
    _this->_internal_set_job_gc_check_interval_ms(from._internal_job_gc_check_interval_ms());
  }
  if (from._internal_job_gc_timeout_ms() != 0) {
    _this->_internal_set_job_gc_timeout_ms(from._internal_job_gc_timeout_ms());
  }
  if (from._internal_client_timeout_ms() != 0) {
    _this->_internal_set_client_timeout_ms(from._internal_client_timeout_ms());
  }
  if (from._internal_fault_tolerant_mode() != 0) {
    _this->_internal_set_fault_tolerant_mode(from._internal_fault_tolerant_mode());
  }
  if (from._internal_gc_dynamic_sharding_jobs() != 0) {
    _this->_internal_set_gc_dynamic_sharding_jobs(from._internal_gc_dynamic_sharding_jobs());
  }
  if (from._internal_deployment_mode() != 0) {
    _this->_internal_set_deployment_mode(from._internal_deployment_mode());
  }
  if (from._internal_worker_timeout_ms() != 0) {
    _this->_internal_set_worker_timeout_ms(from._internal_worker_timeout_ms());
  }
  if (from._internal_worker_max_concurrent_snapshots() != 0) {
    _this->_internal_set_worker_max_concurrent_snapshots(from._internal_worker_max_concurrent_snapshots());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DispatcherConfig::CopyFrom(const DispatcherConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.experimental.DispatcherConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DispatcherConfig::IsInitialized() const {
  return true;
}

void DispatcherConfig::InternalSwap(DispatcherConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.worker_addresses_.InternalSwap(&other->_impl_.worker_addresses_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.protocol_, lhs_arena,
      &other->_impl_.protocol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.work_dir_, lhs_arena,
      &other->_impl_.work_dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.worker_max_concurrent_snapshots_)
      + sizeof(DispatcherConfig::_impl_.worker_max_concurrent_snapshots_)
      - PROTOBUF_FIELD_OFFSET(DispatcherConfig, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DispatcherConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto[0]);
}

// ===================================================================

class WorkerConfig::_Internal {
 public:
};

WorkerConfig::WorkerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.experimental.WorkerConfig)
}
WorkerConfig::WorkerConfig(const WorkerConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WorkerConfig* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.worker_tags_){from._impl_.worker_tags_}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.dispatcher_address_){}
    , decltype(_impl_.worker_address_){}
    , decltype(_impl_.data_transfer_protocol_){}
    , decltype(_impl_.data_transfer_address_){}
    , decltype(_impl_.port_){}
    , decltype(_impl_.heartbeat_interval_ms_){}
    , decltype(_impl_.dispatcher_timeout_ms_){}
    , decltype(_impl_.shutdown_quiet_period_ms_){}
    , decltype(_impl_.cross_trainer_cache_size_bytes_){}
    , decltype(_impl_.snapshot_max_chunk_size_bytes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_protocol().empty()) {
    _this->_impl_.protocol_.Set(from._internal_protocol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.dispatcher_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dispatcher_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dispatcher_address().empty()) {
    _this->_impl_.dispatcher_address_.Set(from._internal_dispatcher_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.worker_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worker_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_worker_address().empty()) {
    _this->_impl_.worker_address_.Set(from._internal_worker_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_transfer_protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_transfer_protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_transfer_protocol().empty()) {
    _this->_impl_.data_transfer_protocol_.Set(from._internal_data_transfer_protocol(), 
      _this->GetArenaForAllocation());
  }
  _impl_.data_transfer_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_transfer_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data_transfer_address().empty()) {
    _this->_impl_.data_transfer_address_.Set(from._internal_data_transfer_address(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.port_, &from._impl_.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.snapshot_max_chunk_size_bytes_) -
    reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.snapshot_max_chunk_size_bytes_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.experimental.WorkerConfig)
}

inline void WorkerConfig::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.worker_tags_){arena}
    , decltype(_impl_.protocol_){}
    , decltype(_impl_.dispatcher_address_){}
    , decltype(_impl_.worker_address_){}
    , decltype(_impl_.data_transfer_protocol_){}
    , decltype(_impl_.data_transfer_address_){}
    , decltype(_impl_.port_){int64_t{0}}
    , decltype(_impl_.heartbeat_interval_ms_){int64_t{0}}
    , decltype(_impl_.dispatcher_timeout_ms_){int64_t{0}}
    , decltype(_impl_.shutdown_quiet_period_ms_){int64_t{0}}
    , decltype(_impl_.cross_trainer_cache_size_bytes_){int64_t{0}}
    , decltype(_impl_.snapshot_max_chunk_size_bytes_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dispatcher_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.dispatcher_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.worker_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.worker_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_transfer_protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_transfer_protocol_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_transfer_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_transfer_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WorkerConfig::~WorkerConfig() {
  // @@protoc_insertion_point(destructor:tensorflow.data.experimental.WorkerConfig)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorkerConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.worker_tags_.~RepeatedPtrField();
  _impl_.protocol_.Destroy();
  _impl_.dispatcher_address_.Destroy();
  _impl_.worker_address_.Destroy();
  _impl_.data_transfer_protocol_.Destroy();
  _impl_.data_transfer_address_.Destroy();
}

void WorkerConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WorkerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.experimental.WorkerConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.worker_tags_.Clear();
  _impl_.protocol_.ClearToEmpty();
  _impl_.dispatcher_address_.ClearToEmpty();
  _impl_.worker_address_.ClearToEmpty();
  _impl_.data_transfer_protocol_.ClearToEmpty();
  _impl_.data_transfer_address_.ClearToEmpty();
  ::memset(&_impl_.port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.snapshot_max_chunk_size_bytes_) -
      reinterpret_cast<char*>(&_impl_.port_)) + sizeof(_impl_.snapshot_max_chunk_size_bytes_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorkerConfig::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 port = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string protocol = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_protocol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.data.experimental.WorkerConfig.protocol"));
        } else
          goto handle_unusual;
        continue;
      // string dispatcher_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dispatcher_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.data.experimental.WorkerConfig.dispatcher_address"));
        } else
          goto handle_unusual;
        continue;
      // string worker_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_worker_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.data.experimental.WorkerConfig.worker_address"));
        } else
          goto handle_unusual;
        continue;
      // int64 heartbeat_interval_ms = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.heartbeat_interval_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 dispatcher_timeout_ms = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.dispatcher_timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string data_transfer_protocol = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_data_transfer_protocol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.data.experimental.WorkerConfig.data_transfer_protocol"));
        } else
          goto handle_unusual;
        continue;
      // string data_transfer_address = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_data_transfer_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.data.experimental.WorkerConfig.data_transfer_address"));
        } else
          goto handle_unusual;
        continue;
      // int64 shutdown_quiet_period_ms = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.shutdown_quiet_period_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string worker_tags = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_worker_tags();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.data.experimental.WorkerConfig.worker_tags"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 cross_trainer_cache_size_bytes = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.cross_trainer_cache_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 snapshot_max_chunk_size_bytes = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.snapshot_max_chunk_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorkerConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.experimental.WorkerConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 port = 1;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_port(), target);
  }

  // string protocol = 2;
  if (!this->_internal_protocol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_protocol().data(), static_cast<int>(this->_internal_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.WorkerConfig.protocol");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_protocol(), target);
  }

  // string dispatcher_address = 3;
  if (!this->_internal_dispatcher_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dispatcher_address().data(), static_cast<int>(this->_internal_dispatcher_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.WorkerConfig.dispatcher_address");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dispatcher_address(), target);
  }

  // string worker_address = 4;
  if (!this->_internal_worker_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_worker_address().data(), static_cast<int>(this->_internal_worker_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.WorkerConfig.worker_address");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_worker_address(), target);
  }

  // int64 heartbeat_interval_ms = 5;
  if (this->_internal_heartbeat_interval_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_heartbeat_interval_ms(), target);
  }

  // int64 dispatcher_timeout_ms = 6;
  if (this->_internal_dispatcher_timeout_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_dispatcher_timeout_ms(), target);
  }

  // string data_transfer_protocol = 7;
  if (!this->_internal_data_transfer_protocol().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data_transfer_protocol().data(), static_cast<int>(this->_internal_data_transfer_protocol().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.WorkerConfig.data_transfer_protocol");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_data_transfer_protocol(), target);
  }

  // string data_transfer_address = 8;
  if (!this->_internal_data_transfer_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data_transfer_address().data(), static_cast<int>(this->_internal_data_transfer_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.WorkerConfig.data_transfer_address");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_data_transfer_address(), target);
  }

  // int64 shutdown_quiet_period_ms = 9;
  if (this->_internal_shutdown_quiet_period_ms() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(9, this->_internal_shutdown_quiet_period_ms(), target);
  }

  // repeated string worker_tags = 10;
  for (int i = 0, n = this->_internal_worker_tags_size(); i < n; i++) {
    const auto& s = this->_internal_worker_tags(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.WorkerConfig.worker_tags");
    target = stream->WriteString(10, s, target);
  }

  // int64 cross_trainer_cache_size_bytes = 11;
  if (this->_internal_cross_trainer_cache_size_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(11, this->_internal_cross_trainer_cache_size_bytes(), target);
  }

  // int64 snapshot_max_chunk_size_bytes = 12;
  if (this->_internal_snapshot_max_chunk_size_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(12, this->_internal_snapshot_max_chunk_size_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.experimental.WorkerConfig)
  return target;
}

size_t WorkerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.experimental.WorkerConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string worker_tags = 10;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.worker_tags_.size());
  for (int i = 0, n = _impl_.worker_tags_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.worker_tags_.Get(i));
  }

  // string protocol = 2;
  if (!this->_internal_protocol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_protocol());
  }

  // string dispatcher_address = 3;
  if (!this->_internal_dispatcher_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dispatcher_address());
  }

  // string worker_address = 4;
  if (!this->_internal_worker_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_worker_address());
  }

  // string data_transfer_protocol = 7;
  if (!this->_internal_data_transfer_protocol().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data_transfer_protocol());
  }

  // string data_transfer_address = 8;
  if (!this->_internal_data_transfer_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data_transfer_address());
  }

  // int64 port = 1;
  if (this->_internal_port() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_port());
  }

  // int64 heartbeat_interval_ms = 5;
  if (this->_internal_heartbeat_interval_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_heartbeat_interval_ms());
  }

  // int64 dispatcher_timeout_ms = 6;
  if (this->_internal_dispatcher_timeout_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_dispatcher_timeout_ms());
  }

  // int64 shutdown_quiet_period_ms = 9;
  if (this->_internal_shutdown_quiet_period_ms() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_shutdown_quiet_period_ms());
  }

  // int64 cross_trainer_cache_size_bytes = 11;
  if (this->_internal_cross_trainer_cache_size_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_cross_trainer_cache_size_bytes());
  }

  // int64 snapshot_max_chunk_size_bytes = 12;
  if (this->_internal_snapshot_max_chunk_size_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_snapshot_max_chunk_size_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorkerConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WorkerConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorkerConfig::GetClassData() const { return &_class_data_; }


void WorkerConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WorkerConfig*>(&to_msg);
  auto& from = static_cast<const WorkerConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.experimental.WorkerConfig)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.worker_tags_.MergeFrom(from._impl_.worker_tags_);
  if (!from._internal_protocol().empty()) {
    _this->_internal_set_protocol(from._internal_protocol());
  }
  if (!from._internal_dispatcher_address().empty()) {
    _this->_internal_set_dispatcher_address(from._internal_dispatcher_address());
  }
  if (!from._internal_worker_address().empty()) {
    _this->_internal_set_worker_address(from._internal_worker_address());
  }
  if (!from._internal_data_transfer_protocol().empty()) {
    _this->_internal_set_data_transfer_protocol(from._internal_data_transfer_protocol());
  }
  if (!from._internal_data_transfer_address().empty()) {
    _this->_internal_set_data_transfer_address(from._internal_data_transfer_address());
  }
  if (from._internal_port() != 0) {
    _this->_internal_set_port(from._internal_port());
  }
  if (from._internal_heartbeat_interval_ms() != 0) {
    _this->_internal_set_heartbeat_interval_ms(from._internal_heartbeat_interval_ms());
  }
  if (from._internal_dispatcher_timeout_ms() != 0) {
    _this->_internal_set_dispatcher_timeout_ms(from._internal_dispatcher_timeout_ms());
  }
  if (from._internal_shutdown_quiet_period_ms() != 0) {
    _this->_internal_set_shutdown_quiet_period_ms(from._internal_shutdown_quiet_period_ms());
  }
  if (from._internal_cross_trainer_cache_size_bytes() != 0) {
    _this->_internal_set_cross_trainer_cache_size_bytes(from._internal_cross_trainer_cache_size_bytes());
  }
  if (from._internal_snapshot_max_chunk_size_bytes() != 0) {
    _this->_internal_set_snapshot_max_chunk_size_bytes(from._internal_snapshot_max_chunk_size_bytes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorkerConfig::CopyFrom(const WorkerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.experimental.WorkerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorkerConfig::IsInitialized() const {
  return true;
}

void WorkerConfig::InternalSwap(WorkerConfig* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.worker_tags_.InternalSwap(&other->_impl_.worker_tags_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.protocol_, lhs_arena,
      &other->_impl_.protocol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.dispatcher_address_, lhs_arena,
      &other->_impl_.dispatcher_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.worker_address_, lhs_arena,
      &other->_impl_.worker_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_transfer_protocol_, lhs_arena,
      &other->_impl_.data_transfer_protocol_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_transfer_address_, lhs_arena,
      &other->_impl_.data_transfer_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.snapshot_max_chunk_size_bytes_)
      + sizeof(WorkerConfig::_impl_.snapshot_max_chunk_size_bytes_)
      - PROTOBUF_FIELD_OFFSET(WorkerConfig, _impl_.port_)>(
          reinterpret_cast<char*>(&_impl_.port_),
          reinterpret_cast<char*>(&other->_impl_.port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WorkerConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fservice_5fconfig_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace experimental
}  // namespace data
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::data::experimental::DispatcherConfig*
Arena::CreateMaybeMessage< ::tensorflow::data::experimental::DispatcherConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::experimental::DispatcherConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::data::experimental::WorkerConfig*
Arena::CreateMaybeMessage< ::tensorflow::data::experimental::WorkerConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::experimental::WorkerConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
