// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/tpu/tpu_embedding_configuration.proto

#include "tensorflow/core/protobuf/tpu/tpu_embedding_configuration.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
namespace tpu {
PROTOBUF_CONSTEXPR TPUEmbeddingConfiguration_TableDescriptor::TPUEmbeddingConfiguration_TableDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.optimization_parameters_)*/nullptr
  , /*decltype(_impl_.vocabulary_size_)*/int64_t{0}
  , /*decltype(_impl_.dimension_)*/0
  , /*decltype(_impl_.num_features_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TPUEmbeddingConfiguration_TableDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TPUEmbeddingConfiguration_TableDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TPUEmbeddingConfiguration_TableDescriptorDefaultTypeInternal() {}
  union {
    TPUEmbeddingConfiguration_TableDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TPUEmbeddingConfiguration_TableDescriptorDefaultTypeInternal _TPUEmbeddingConfiguration_TableDescriptor_default_instance_;
PROTOBUF_CONSTEXPR TPUEmbeddingConfiguration_FeatureDescriptor::TPUEmbeddingConfiguration_FeatureDescriptor(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_shape_)*/{}
  , /*decltype(_impl_._input_shape_cached_byte_size_)*/{0}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.table_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TPUEmbeddingConfiguration_FeatureDescriptorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TPUEmbeddingConfiguration_FeatureDescriptorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TPUEmbeddingConfiguration_FeatureDescriptorDefaultTypeInternal() {}
  union {
    TPUEmbeddingConfiguration_FeatureDescriptor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TPUEmbeddingConfiguration_FeatureDescriptorDefaultTypeInternal _TPUEmbeddingConfiguration_FeatureDescriptor_default_instance_;
PROTOBUF_CONSTEXPR TPUEmbeddingConfiguration_SpmdSharding::TPUEmbeddingConfiguration_SpmdSharding(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.enabled_)*/false
  , /*decltype(_impl_.num_cores_per_replica_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TPUEmbeddingConfiguration_SpmdShardingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TPUEmbeddingConfiguration_SpmdShardingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TPUEmbeddingConfiguration_SpmdShardingDefaultTypeInternal() {}
  union {
    TPUEmbeddingConfiguration_SpmdSharding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TPUEmbeddingConfiguration_SpmdShardingDefaultTypeInternal _TPUEmbeddingConfiguration_SpmdSharding_default_instance_;
PROTOBUF_CONSTEXPR TPUEmbeddingConfiguration::TPUEmbeddingConfiguration(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.table_descriptor_)*/{}
  , /*decltype(_impl_.feature_descriptor_)*/{}
  , /*decltype(_impl_.profile_data_directory_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spmd_sharding_)*/nullptr
  , /*decltype(_impl_.mode_)*/0
  , /*decltype(_impl_.batch_size_per_tensor_core_)*/0
  , /*decltype(_impl_.num_hosts_)*/0
  , /*decltype(_impl_.num_tensor_cores_)*/0
  , /*decltype(_impl_.sharding_strategy_)*/0
  , /*decltype(_impl_.pipeline_execution_with_tensor_core_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TPUEmbeddingConfigurationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TPUEmbeddingConfigurationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TPUEmbeddingConfigurationDefaultTypeInternal() {}
  union {
    TPUEmbeddingConfiguration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TPUEmbeddingConfigurationDefaultTypeInternal _TPUEmbeddingConfiguration_default_instance_;
PROTOBUF_CONSTEXPR TPUEmbeddingError::TPUEmbeddingError(
    ::_pbi::ConstantInitialized) {}
struct TPUEmbeddingErrorDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TPUEmbeddingErrorDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TPUEmbeddingErrorDefaultTypeInternal() {}
  union {
    TPUEmbeddingError _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TPUEmbeddingErrorDefaultTypeInternal _TPUEmbeddingError_default_instance_;
}  // namespace tpu
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto[5];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto[2];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration_TableDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration_TableDescriptor, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration_TableDescriptor, _impl_.vocabulary_size_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration_TableDescriptor, _impl_.dimension_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration_TableDescriptor, _impl_.num_features_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration_TableDescriptor, _impl_.optimization_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration_FeatureDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration_FeatureDescriptor, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration_FeatureDescriptor, _impl_.table_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration_FeatureDescriptor, _impl_.input_shape_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration_SpmdSharding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration_SpmdSharding, _impl_.enabled_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration_SpmdSharding, _impl_.num_cores_per_replica_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration, _impl_.table_descriptor_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration, _impl_.mode_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration, _impl_.batch_size_per_tensor_core_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration, _impl_.num_hosts_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration, _impl_.num_tensor_cores_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration, _impl_.sharding_strategy_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration, _impl_.pipeline_execution_with_tensor_core_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration, _impl_.profile_data_directory_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration, _impl_.feature_descriptor_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingConfiguration, _impl_.spmd_sharding_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::tpu::TPUEmbeddingError, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::tpu::TPUEmbeddingConfiguration_TableDescriptor)},
  { 11, -1, -1, sizeof(::tensorflow::tpu::TPUEmbeddingConfiguration_FeatureDescriptor)},
  { 20, -1, -1, sizeof(::tensorflow::tpu::TPUEmbeddingConfiguration_SpmdSharding)},
  { 28, -1, -1, sizeof(::tensorflow::tpu::TPUEmbeddingConfiguration)},
  { 44, -1, -1, sizeof(::tensorflow::tpu::TPUEmbeddingError)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::tpu::_TPUEmbeddingConfiguration_TableDescriptor_default_instance_._instance,
  &::tensorflow::tpu::_TPUEmbeddingConfiguration_FeatureDescriptor_default_instance_._instance,
  &::tensorflow::tpu::_TPUEmbeddingConfiguration_SpmdSharding_default_instance_._instance,
  &::tensorflow::tpu::_TPUEmbeddingConfiguration_default_instance_._instance,
  &::tensorflow::tpu::_TPUEmbeddingError_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n>tensorflow/core/protobuf/tpu/tpu_embed"
  "ding_configuration.proto\022\016tensorflow.tpu"
  "\032:tensorflow/core/protobuf/tpu/optimizat"
  "ion_parameters.proto\"\223\010\n\031TPUEmbeddingCon"
  "figuration\022S\n\020table_descriptor\030\001 \003(\01329.t"
  "ensorflow.tpu.TPUEmbeddingConfiguration."
  "TableDescriptor\022<\n\004mode\030\002 \001(\0162..tensorfl"
  "ow.tpu.TPUEmbeddingConfiguration.Mode\022\"\n"
  "\032batch_size_per_tensor_core\030\003 \001(\005\022\021\n\tnum"
  "_hosts\030\004 \001(\005\022\030\n\020num_tensor_cores\030\005 \001(\005\022U"
  "\n\021sharding_strategy\030\006 \001(\0162:.tensorflow.t"
  "pu.TPUEmbeddingConfiguration.ShardingStr"
  "ategy\022+\n#pipeline_execution_with_tensor_"
  "core\030\007 \001(\010\022\036\n\026profile_data_directory\030\t \001"
  "(\t\022W\n\022feature_descriptor\030\n \003(\0132;.tensorf"
  "low.tpu.TPUEmbeddingConfiguration.Featur"
  "eDescriptor\022M\n\rspmd_sharding\030\013 \001(\01326.ten"
  "sorflow.tpu.TPUEmbeddingConfiguration.Sp"
  "mdSharding\032\252\001\n\017TableDescriptor\022\014\n\004name\030\001"
  " \001(\t\022\027\n\017vocabulary_size\030\002 \001(\003\022\021\n\tdimensi"
  "on\030\003 \001(\005\022\024\n\014num_features\030\004 \001(\005\022G\n\027optimi"
  "zation_parameters\030\005 \001(\0132&.tensorflow.tpu"
  ".OptimizationParameters\032H\n\021FeatureDescri"
  "ptor\022\014\n\004name\030\001 \001(\t\022\020\n\010table_id\030\002 \001(\005\022\023\n\013"
  "input_shape\030\003 \003(\005\032>\n\014SpmdSharding\022\017\n\007ena"
  "bled\030\001 \001(\010\022\035\n\025num_cores_per_replica\030\002 \001("
  "\005\"L\n\004Mode\022\017\n\013UNSPECIFIED\020\000\022\r\n\tINFERENCE\020"
  "\001\022\014\n\010TRAINING\020\002\022\026\n\022BACKWARD_PASS_ONLY\020\003\""
  ",\n\020ShardingStrategy\022\017\n\013DIV_DEFAULT\020\000\022\007\n\003"
  "MOD\020\001J\004\010\010\020\tR\routput_layout\"\023\n\021TPUEmbeddi"
  "ngErrorb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto_deps[1] = {
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2foptimization_5fparameters_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto = {
    false, false, 1215, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto,
    "tensorflow/core/protobuf/tpu/tpu_embedding_configuration.proto",
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto(&descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto);
namespace tensorflow {
namespace tpu {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TPUEmbeddingConfiguration_Mode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto[0];
}
bool TPUEmbeddingConfiguration_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TPUEmbeddingConfiguration_Mode TPUEmbeddingConfiguration::UNSPECIFIED;
constexpr TPUEmbeddingConfiguration_Mode TPUEmbeddingConfiguration::INFERENCE;
constexpr TPUEmbeddingConfiguration_Mode TPUEmbeddingConfiguration::TRAINING;
constexpr TPUEmbeddingConfiguration_Mode TPUEmbeddingConfiguration::BACKWARD_PASS_ONLY;
constexpr TPUEmbeddingConfiguration_Mode TPUEmbeddingConfiguration::Mode_MIN;
constexpr TPUEmbeddingConfiguration_Mode TPUEmbeddingConfiguration::Mode_MAX;
constexpr int TPUEmbeddingConfiguration::Mode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TPUEmbeddingConfiguration_ShardingStrategy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto[1];
}
bool TPUEmbeddingConfiguration_ShardingStrategy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TPUEmbeddingConfiguration_ShardingStrategy TPUEmbeddingConfiguration::DIV_DEFAULT;
constexpr TPUEmbeddingConfiguration_ShardingStrategy TPUEmbeddingConfiguration::MOD;
constexpr TPUEmbeddingConfiguration_ShardingStrategy TPUEmbeddingConfiguration::ShardingStrategy_MIN;
constexpr TPUEmbeddingConfiguration_ShardingStrategy TPUEmbeddingConfiguration::ShardingStrategy_MAX;
constexpr int TPUEmbeddingConfiguration::ShardingStrategy_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class TPUEmbeddingConfiguration_TableDescriptor::_Internal {
 public:
  static const ::tensorflow::tpu::OptimizationParameters& optimization_parameters(const TPUEmbeddingConfiguration_TableDescriptor* msg);
};

const ::tensorflow::tpu::OptimizationParameters&
TPUEmbeddingConfiguration_TableDescriptor::_Internal::optimization_parameters(const TPUEmbeddingConfiguration_TableDescriptor* msg) {
  return *msg->_impl_.optimization_parameters_;
}
void TPUEmbeddingConfiguration_TableDescriptor::clear_optimization_parameters() {
  if (GetArenaForAllocation() == nullptr && _impl_.optimization_parameters_ != nullptr) {
    delete _impl_.optimization_parameters_;
  }
  _impl_.optimization_parameters_ = nullptr;
}
TPUEmbeddingConfiguration_TableDescriptor::TPUEmbeddingConfiguration_TableDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.tpu.TPUEmbeddingConfiguration.TableDescriptor)
}
TPUEmbeddingConfiguration_TableDescriptor::TPUEmbeddingConfiguration_TableDescriptor(const TPUEmbeddingConfiguration_TableDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TPUEmbeddingConfiguration_TableDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.optimization_parameters_){nullptr}
    , decltype(_impl_.vocabulary_size_){}
    , decltype(_impl_.dimension_){}
    , decltype(_impl_.num_features_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_optimization_parameters()) {
    _this->_impl_.optimization_parameters_ = new ::tensorflow::tpu::OptimizationParameters(*from._impl_.optimization_parameters_);
  }
  ::memcpy(&_impl_.vocabulary_size_, &from._impl_.vocabulary_size_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_features_) -
    reinterpret_cast<char*>(&_impl_.vocabulary_size_)) + sizeof(_impl_.num_features_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.tpu.TPUEmbeddingConfiguration.TableDescriptor)
}

inline void TPUEmbeddingConfiguration_TableDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.optimization_parameters_){nullptr}
    , decltype(_impl_.vocabulary_size_){int64_t{0}}
    , decltype(_impl_.dimension_){0}
    , decltype(_impl_.num_features_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TPUEmbeddingConfiguration_TableDescriptor::~TPUEmbeddingConfiguration_TableDescriptor() {
  // @@protoc_insertion_point(destructor:tensorflow.tpu.TPUEmbeddingConfiguration.TableDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TPUEmbeddingConfiguration_TableDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.optimization_parameters_;
}

void TPUEmbeddingConfiguration_TableDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TPUEmbeddingConfiguration_TableDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tpu.TPUEmbeddingConfiguration.TableDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.optimization_parameters_ != nullptr) {
    delete _impl_.optimization_parameters_;
  }
  _impl_.optimization_parameters_ = nullptr;
  ::memset(&_impl_.vocabulary_size_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_features_) -
      reinterpret_cast<char*>(&_impl_.vocabulary_size_)) + sizeof(_impl_.num_features_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TPUEmbeddingConfiguration_TableDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.tpu.TPUEmbeddingConfiguration.TableDescriptor.name"));
        } else
          goto handle_unusual;
        continue;
      // int64 vocabulary_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.vocabulary_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dimension = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.dimension_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num_features = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.num_features_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.tpu.OptimizationParameters optimization_parameters = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_optimization_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TPUEmbeddingConfiguration_TableDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tpu.TPUEmbeddingConfiguration.TableDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tpu.TPUEmbeddingConfiguration.TableDescriptor.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 vocabulary_size = 2;
  if (this->_internal_vocabulary_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_vocabulary_size(), target);
  }

  // int32 dimension = 3;
  if (this->_internal_dimension() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_dimension(), target);
  }

  // int32 num_features = 4;
  if (this->_internal_num_features() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_features(), target);
  }

  // .tensorflow.tpu.OptimizationParameters optimization_parameters = 5;
  if (this->_internal_has_optimization_parameters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::optimization_parameters(this),
        _Internal::optimization_parameters(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tpu.TPUEmbeddingConfiguration.TableDescriptor)
  return target;
}

size_t TPUEmbeddingConfiguration_TableDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tpu.TPUEmbeddingConfiguration.TableDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .tensorflow.tpu.OptimizationParameters optimization_parameters = 5;
  if (this->_internal_has_optimization_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.optimization_parameters_);
  }

  // int64 vocabulary_size = 2;
  if (this->_internal_vocabulary_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_vocabulary_size());
  }

  // int32 dimension = 3;
  if (this->_internal_dimension() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dimension());
  }

  // int32 num_features = 4;
  if (this->_internal_num_features() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_features());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TPUEmbeddingConfiguration_TableDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TPUEmbeddingConfiguration_TableDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TPUEmbeddingConfiguration_TableDescriptor::GetClassData() const { return &_class_data_; }


void TPUEmbeddingConfiguration_TableDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TPUEmbeddingConfiguration_TableDescriptor*>(&to_msg);
  auto& from = static_cast<const TPUEmbeddingConfiguration_TableDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tpu.TPUEmbeddingConfiguration.TableDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_optimization_parameters()) {
    _this->_internal_mutable_optimization_parameters()->::tensorflow::tpu::OptimizationParameters::MergeFrom(
        from._internal_optimization_parameters());
  }
  if (from._internal_vocabulary_size() != 0) {
    _this->_internal_set_vocabulary_size(from._internal_vocabulary_size());
  }
  if (from._internal_dimension() != 0) {
    _this->_internal_set_dimension(from._internal_dimension());
  }
  if (from._internal_num_features() != 0) {
    _this->_internal_set_num_features(from._internal_num_features());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TPUEmbeddingConfiguration_TableDescriptor::CopyFrom(const TPUEmbeddingConfiguration_TableDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tpu.TPUEmbeddingConfiguration.TableDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPUEmbeddingConfiguration_TableDescriptor::IsInitialized() const {
  return true;
}

void TPUEmbeddingConfiguration_TableDescriptor::InternalSwap(TPUEmbeddingConfiguration_TableDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TPUEmbeddingConfiguration_TableDescriptor, _impl_.num_features_)
      + sizeof(TPUEmbeddingConfiguration_TableDescriptor::_impl_.num_features_)
      - PROTOBUF_FIELD_OFFSET(TPUEmbeddingConfiguration_TableDescriptor, _impl_.optimization_parameters_)>(
          reinterpret_cast<char*>(&_impl_.optimization_parameters_),
          reinterpret_cast<char*>(&other->_impl_.optimization_parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TPUEmbeddingConfiguration_TableDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto[0]);
}

// ===================================================================

class TPUEmbeddingConfiguration_FeatureDescriptor::_Internal {
 public:
};

TPUEmbeddingConfiguration_FeatureDescriptor::TPUEmbeddingConfiguration_FeatureDescriptor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.tpu.TPUEmbeddingConfiguration.FeatureDescriptor)
}
TPUEmbeddingConfiguration_FeatureDescriptor::TPUEmbeddingConfiguration_FeatureDescriptor(const TPUEmbeddingConfiguration_FeatureDescriptor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TPUEmbeddingConfiguration_FeatureDescriptor* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_shape_){from._impl_.input_shape_}
    , /*decltype(_impl_._input_shape_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.table_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.table_id_ = from._impl_.table_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.tpu.TPUEmbeddingConfiguration.FeatureDescriptor)
}

inline void TPUEmbeddingConfiguration_FeatureDescriptor::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.input_shape_){arena}
    , /*decltype(_impl_._input_shape_cached_byte_size_)*/{0}
    , decltype(_impl_.name_){}
    , decltype(_impl_.table_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TPUEmbeddingConfiguration_FeatureDescriptor::~TPUEmbeddingConfiguration_FeatureDescriptor() {
  // @@protoc_insertion_point(destructor:tensorflow.tpu.TPUEmbeddingConfiguration.FeatureDescriptor)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TPUEmbeddingConfiguration_FeatureDescriptor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_shape_.~RepeatedField();
  _impl_.name_.Destroy();
}

void TPUEmbeddingConfiguration_FeatureDescriptor::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TPUEmbeddingConfiguration_FeatureDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tpu.TPUEmbeddingConfiguration.FeatureDescriptor)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_shape_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.table_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TPUEmbeddingConfiguration_FeatureDescriptor::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.tpu.TPUEmbeddingConfiguration.FeatureDescriptor.name"));
        } else
          goto handle_unusual;
        continue;
      // int32 table_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.table_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 input_shape = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_input_shape(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_input_shape(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TPUEmbeddingConfiguration_FeatureDescriptor::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tpu.TPUEmbeddingConfiguration.FeatureDescriptor)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tpu.TPUEmbeddingConfiguration.FeatureDescriptor.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 table_id = 2;
  if (this->_internal_table_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_table_id(), target);
  }

  // repeated int32 input_shape = 3;
  {
    int byte_size = _impl_._input_shape_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_input_shape(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tpu.TPUEmbeddingConfiguration.FeatureDescriptor)
  return target;
}

size_t TPUEmbeddingConfiguration_FeatureDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tpu.TPUEmbeddingConfiguration.FeatureDescriptor)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 input_shape = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.input_shape_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._input_shape_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 table_id = 2;
  if (this->_internal_table_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_table_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TPUEmbeddingConfiguration_FeatureDescriptor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TPUEmbeddingConfiguration_FeatureDescriptor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TPUEmbeddingConfiguration_FeatureDescriptor::GetClassData() const { return &_class_data_; }


void TPUEmbeddingConfiguration_FeatureDescriptor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TPUEmbeddingConfiguration_FeatureDescriptor*>(&to_msg);
  auto& from = static_cast<const TPUEmbeddingConfiguration_FeatureDescriptor&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tpu.TPUEmbeddingConfiguration.FeatureDescriptor)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.input_shape_.MergeFrom(from._impl_.input_shape_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_table_id() != 0) {
    _this->_internal_set_table_id(from._internal_table_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TPUEmbeddingConfiguration_FeatureDescriptor::CopyFrom(const TPUEmbeddingConfiguration_FeatureDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tpu.TPUEmbeddingConfiguration.FeatureDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPUEmbeddingConfiguration_FeatureDescriptor::IsInitialized() const {
  return true;
}

void TPUEmbeddingConfiguration_FeatureDescriptor::InternalSwap(TPUEmbeddingConfiguration_FeatureDescriptor* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.input_shape_.InternalSwap(&other->_impl_.input_shape_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.table_id_, other->_impl_.table_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TPUEmbeddingConfiguration_FeatureDescriptor::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto[1]);
}

// ===================================================================

class TPUEmbeddingConfiguration_SpmdSharding::_Internal {
 public:
};

TPUEmbeddingConfiguration_SpmdSharding::TPUEmbeddingConfiguration_SpmdSharding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.tpu.TPUEmbeddingConfiguration.SpmdSharding)
}
TPUEmbeddingConfiguration_SpmdSharding::TPUEmbeddingConfiguration_SpmdSharding(const TPUEmbeddingConfiguration_SpmdSharding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TPUEmbeddingConfiguration_SpmdSharding* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.enabled_){}
    , decltype(_impl_.num_cores_per_replica_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.enabled_, &from._impl_.enabled_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_cores_per_replica_) -
    reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.num_cores_per_replica_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.tpu.TPUEmbeddingConfiguration.SpmdSharding)
}

inline void TPUEmbeddingConfiguration_SpmdSharding::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.enabled_){false}
    , decltype(_impl_.num_cores_per_replica_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TPUEmbeddingConfiguration_SpmdSharding::~TPUEmbeddingConfiguration_SpmdSharding() {
  // @@protoc_insertion_point(destructor:tensorflow.tpu.TPUEmbeddingConfiguration.SpmdSharding)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TPUEmbeddingConfiguration_SpmdSharding::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TPUEmbeddingConfiguration_SpmdSharding::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TPUEmbeddingConfiguration_SpmdSharding::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tpu.TPUEmbeddingConfiguration.SpmdSharding)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.enabled_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_cores_per_replica_) -
      reinterpret_cast<char*>(&_impl_.enabled_)) + sizeof(_impl_.num_cores_per_replica_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TPUEmbeddingConfiguration_SpmdSharding::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool enabled = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num_cores_per_replica = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_cores_per_replica_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TPUEmbeddingConfiguration_SpmdSharding::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tpu.TPUEmbeddingConfiguration.SpmdSharding)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_enabled(), target);
  }

  // int32 num_cores_per_replica = 2;
  if (this->_internal_num_cores_per_replica() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_cores_per_replica(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tpu.TPUEmbeddingConfiguration.SpmdSharding)
  return target;
}

size_t TPUEmbeddingConfiguration_SpmdSharding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tpu.TPUEmbeddingConfiguration.SpmdSharding)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool enabled = 1;
  if (this->_internal_enabled() != 0) {
    total_size += 1 + 1;
  }

  // int32 num_cores_per_replica = 2;
  if (this->_internal_num_cores_per_replica() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_cores_per_replica());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TPUEmbeddingConfiguration_SpmdSharding::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TPUEmbeddingConfiguration_SpmdSharding::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TPUEmbeddingConfiguration_SpmdSharding::GetClassData() const { return &_class_data_; }


void TPUEmbeddingConfiguration_SpmdSharding::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TPUEmbeddingConfiguration_SpmdSharding*>(&to_msg);
  auto& from = static_cast<const TPUEmbeddingConfiguration_SpmdSharding&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tpu.TPUEmbeddingConfiguration.SpmdSharding)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_enabled() != 0) {
    _this->_internal_set_enabled(from._internal_enabled());
  }
  if (from._internal_num_cores_per_replica() != 0) {
    _this->_internal_set_num_cores_per_replica(from._internal_num_cores_per_replica());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TPUEmbeddingConfiguration_SpmdSharding::CopyFrom(const TPUEmbeddingConfiguration_SpmdSharding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tpu.TPUEmbeddingConfiguration.SpmdSharding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPUEmbeddingConfiguration_SpmdSharding::IsInitialized() const {
  return true;
}

void TPUEmbeddingConfiguration_SpmdSharding::InternalSwap(TPUEmbeddingConfiguration_SpmdSharding* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TPUEmbeddingConfiguration_SpmdSharding, _impl_.num_cores_per_replica_)
      + sizeof(TPUEmbeddingConfiguration_SpmdSharding::_impl_.num_cores_per_replica_)
      - PROTOBUF_FIELD_OFFSET(TPUEmbeddingConfiguration_SpmdSharding, _impl_.enabled_)>(
          reinterpret_cast<char*>(&_impl_.enabled_),
          reinterpret_cast<char*>(&other->_impl_.enabled_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TPUEmbeddingConfiguration_SpmdSharding::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto[2]);
}

// ===================================================================

class TPUEmbeddingConfiguration::_Internal {
 public:
  static const ::tensorflow::tpu::TPUEmbeddingConfiguration_SpmdSharding& spmd_sharding(const TPUEmbeddingConfiguration* msg);
};

const ::tensorflow::tpu::TPUEmbeddingConfiguration_SpmdSharding&
TPUEmbeddingConfiguration::_Internal::spmd_sharding(const TPUEmbeddingConfiguration* msg) {
  return *msg->_impl_.spmd_sharding_;
}
TPUEmbeddingConfiguration::TPUEmbeddingConfiguration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.tpu.TPUEmbeddingConfiguration)
}
TPUEmbeddingConfiguration::TPUEmbeddingConfiguration(const TPUEmbeddingConfiguration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TPUEmbeddingConfiguration* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.table_descriptor_){from._impl_.table_descriptor_}
    , decltype(_impl_.feature_descriptor_){from._impl_.feature_descriptor_}
    , decltype(_impl_.profile_data_directory_){}
    , decltype(_impl_.spmd_sharding_){nullptr}
    , decltype(_impl_.mode_){}
    , decltype(_impl_.batch_size_per_tensor_core_){}
    , decltype(_impl_.num_hosts_){}
    , decltype(_impl_.num_tensor_cores_){}
    , decltype(_impl_.sharding_strategy_){}
    , decltype(_impl_.pipeline_execution_with_tensor_core_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.profile_data_directory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profile_data_directory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_profile_data_directory().empty()) {
    _this->_impl_.profile_data_directory_.Set(from._internal_profile_data_directory(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_spmd_sharding()) {
    _this->_impl_.spmd_sharding_ = new ::tensorflow::tpu::TPUEmbeddingConfiguration_SpmdSharding(*from._impl_.spmd_sharding_);
  }
  ::memcpy(&_impl_.mode_, &from._impl_.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.pipeline_execution_with_tensor_core_) -
    reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.pipeline_execution_with_tensor_core_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.tpu.TPUEmbeddingConfiguration)
}

inline void TPUEmbeddingConfiguration::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.table_descriptor_){arena}
    , decltype(_impl_.feature_descriptor_){arena}
    , decltype(_impl_.profile_data_directory_){}
    , decltype(_impl_.spmd_sharding_){nullptr}
    , decltype(_impl_.mode_){0}
    , decltype(_impl_.batch_size_per_tensor_core_){0}
    , decltype(_impl_.num_hosts_){0}
    , decltype(_impl_.num_tensor_cores_){0}
    , decltype(_impl_.sharding_strategy_){0}
    , decltype(_impl_.pipeline_execution_with_tensor_core_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.profile_data_directory_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.profile_data_directory_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TPUEmbeddingConfiguration::~TPUEmbeddingConfiguration() {
  // @@protoc_insertion_point(destructor:tensorflow.tpu.TPUEmbeddingConfiguration)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TPUEmbeddingConfiguration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.table_descriptor_.~RepeatedPtrField();
  _impl_.feature_descriptor_.~RepeatedPtrField();
  _impl_.profile_data_directory_.Destroy();
  if (this != internal_default_instance()) delete _impl_.spmd_sharding_;
}

void TPUEmbeddingConfiguration::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TPUEmbeddingConfiguration::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.tpu.TPUEmbeddingConfiguration)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.table_descriptor_.Clear();
  _impl_.feature_descriptor_.Clear();
  _impl_.profile_data_directory_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.spmd_sharding_ != nullptr) {
    delete _impl_.spmd_sharding_;
  }
  _impl_.spmd_sharding_ = nullptr;
  ::memset(&_impl_.mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.pipeline_execution_with_tensor_core_) -
      reinterpret_cast<char*>(&_impl_.mode_)) + sizeof(_impl_.pipeline_execution_with_tensor_core_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TPUEmbeddingConfiguration::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.tpu.TPUEmbeddingConfiguration.TableDescriptor table_descriptor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_table_descriptor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.tpu.TPUEmbeddingConfiguration.Mode mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::tensorflow::tpu::TPUEmbeddingConfiguration_Mode>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 batch_size_per_tensor_core = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.batch_size_per_tensor_core_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num_hosts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.num_hosts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 num_tensor_cores = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.num_tensor_cores_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.tpu.TPUEmbeddingConfiguration.ShardingStrategy sharding_strategy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sharding_strategy(static_cast<::tensorflow::tpu::TPUEmbeddingConfiguration_ShardingStrategy>(val));
        } else
          goto handle_unusual;
        continue;
      // bool pipeline_execution_with_tensor_core = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.pipeline_execution_with_tensor_core_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string profile_data_directory = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_profile_data_directory();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.tpu.TPUEmbeddingConfiguration.profile_data_directory"));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.tpu.TPUEmbeddingConfiguration.FeatureDescriptor feature_descriptor = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_feature_descriptor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.tpu.TPUEmbeddingConfiguration.SpmdSharding spmd_sharding = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_spmd_sharding(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TPUEmbeddingConfiguration::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.tpu.TPUEmbeddingConfiguration)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.tpu.TPUEmbeddingConfiguration.TableDescriptor table_descriptor = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_table_descriptor_size()); i < n; i++) {
    const auto& repfield = this->_internal_table_descriptor(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tensorflow.tpu.TPUEmbeddingConfiguration.Mode mode = 2;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_mode(), target);
  }

  // int32 batch_size_per_tensor_core = 3;
  if (this->_internal_batch_size_per_tensor_core() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_batch_size_per_tensor_core(), target);
  }

  // int32 num_hosts = 4;
  if (this->_internal_num_hosts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_hosts(), target);
  }

  // int32 num_tensor_cores = 5;
  if (this->_internal_num_tensor_cores() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_num_tensor_cores(), target);
  }

  // .tensorflow.tpu.TPUEmbeddingConfiguration.ShardingStrategy sharding_strategy = 6;
  if (this->_internal_sharding_strategy() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_sharding_strategy(), target);
  }

  // bool pipeline_execution_with_tensor_core = 7;
  if (this->_internal_pipeline_execution_with_tensor_core() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_pipeline_execution_with_tensor_core(), target);
  }

  // string profile_data_directory = 9;
  if (!this->_internal_profile_data_directory().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_profile_data_directory().data(), static_cast<int>(this->_internal_profile_data_directory().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.tpu.TPUEmbeddingConfiguration.profile_data_directory");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_profile_data_directory(), target);
  }

  // repeated .tensorflow.tpu.TPUEmbeddingConfiguration.FeatureDescriptor feature_descriptor = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_feature_descriptor_size()); i < n; i++) {
    const auto& repfield = this->_internal_feature_descriptor(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tensorflow.tpu.TPUEmbeddingConfiguration.SpmdSharding spmd_sharding = 11;
  if (this->_internal_has_spmd_sharding()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::spmd_sharding(this),
        _Internal::spmd_sharding(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.tpu.TPUEmbeddingConfiguration)
  return target;
}

size_t TPUEmbeddingConfiguration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.tpu.TPUEmbeddingConfiguration)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.tpu.TPUEmbeddingConfiguration.TableDescriptor table_descriptor = 1;
  total_size += 1UL * this->_internal_table_descriptor_size();
  for (const auto& msg : this->_impl_.table_descriptor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.tpu.TPUEmbeddingConfiguration.FeatureDescriptor feature_descriptor = 10;
  total_size += 1UL * this->_internal_feature_descriptor_size();
  for (const auto& msg : this->_impl_.feature_descriptor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string profile_data_directory = 9;
  if (!this->_internal_profile_data_directory().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_profile_data_directory());
  }

  // .tensorflow.tpu.TPUEmbeddingConfiguration.SpmdSharding spmd_sharding = 11;
  if (this->_internal_has_spmd_sharding()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.spmd_sharding_);
  }

  // .tensorflow.tpu.TPUEmbeddingConfiguration.Mode mode = 2;
  if (this->_internal_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // int32 batch_size_per_tensor_core = 3;
  if (this->_internal_batch_size_per_tensor_core() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_batch_size_per_tensor_core());
  }

  // int32 num_hosts = 4;
  if (this->_internal_num_hosts() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_hosts());
  }

  // int32 num_tensor_cores = 5;
  if (this->_internal_num_tensor_cores() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_tensor_cores());
  }

  // .tensorflow.tpu.TPUEmbeddingConfiguration.ShardingStrategy sharding_strategy = 6;
  if (this->_internal_sharding_strategy() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sharding_strategy());
  }

  // bool pipeline_execution_with_tensor_core = 7;
  if (this->_internal_pipeline_execution_with_tensor_core() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TPUEmbeddingConfiguration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TPUEmbeddingConfiguration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TPUEmbeddingConfiguration::GetClassData() const { return &_class_data_; }


void TPUEmbeddingConfiguration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TPUEmbeddingConfiguration*>(&to_msg);
  auto& from = static_cast<const TPUEmbeddingConfiguration&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.tpu.TPUEmbeddingConfiguration)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.table_descriptor_.MergeFrom(from._impl_.table_descriptor_);
  _this->_impl_.feature_descriptor_.MergeFrom(from._impl_.feature_descriptor_);
  if (!from._internal_profile_data_directory().empty()) {
    _this->_internal_set_profile_data_directory(from._internal_profile_data_directory());
  }
  if (from._internal_has_spmd_sharding()) {
    _this->_internal_mutable_spmd_sharding()->::tensorflow::tpu::TPUEmbeddingConfiguration_SpmdSharding::MergeFrom(
        from._internal_spmd_sharding());
  }
  if (from._internal_mode() != 0) {
    _this->_internal_set_mode(from._internal_mode());
  }
  if (from._internal_batch_size_per_tensor_core() != 0) {
    _this->_internal_set_batch_size_per_tensor_core(from._internal_batch_size_per_tensor_core());
  }
  if (from._internal_num_hosts() != 0) {
    _this->_internal_set_num_hosts(from._internal_num_hosts());
  }
  if (from._internal_num_tensor_cores() != 0) {
    _this->_internal_set_num_tensor_cores(from._internal_num_tensor_cores());
  }
  if (from._internal_sharding_strategy() != 0) {
    _this->_internal_set_sharding_strategy(from._internal_sharding_strategy());
  }
  if (from._internal_pipeline_execution_with_tensor_core() != 0) {
    _this->_internal_set_pipeline_execution_with_tensor_core(from._internal_pipeline_execution_with_tensor_core());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TPUEmbeddingConfiguration::CopyFrom(const TPUEmbeddingConfiguration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.tpu.TPUEmbeddingConfiguration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TPUEmbeddingConfiguration::IsInitialized() const {
  return true;
}

void TPUEmbeddingConfiguration::InternalSwap(TPUEmbeddingConfiguration* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.table_descriptor_.InternalSwap(&other->_impl_.table_descriptor_);
  _impl_.feature_descriptor_.InternalSwap(&other->_impl_.feature_descriptor_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.profile_data_directory_, lhs_arena,
      &other->_impl_.profile_data_directory_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TPUEmbeddingConfiguration, _impl_.pipeline_execution_with_tensor_core_)
      + sizeof(TPUEmbeddingConfiguration::_impl_.pipeline_execution_with_tensor_core_)
      - PROTOBUF_FIELD_OFFSET(TPUEmbeddingConfiguration, _impl_.spmd_sharding_)>(
          reinterpret_cast<char*>(&_impl_.spmd_sharding_),
          reinterpret_cast<char*>(&other->_impl_.spmd_sharding_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TPUEmbeddingConfiguration::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto[3]);
}

// ===================================================================

class TPUEmbeddingError::_Internal {
 public:
};

TPUEmbeddingError::TPUEmbeddingError(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tensorflow.tpu.TPUEmbeddingError)
}
TPUEmbeddingError::TPUEmbeddingError(const TPUEmbeddingError& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  TPUEmbeddingError* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.tpu.TPUEmbeddingError)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TPUEmbeddingError::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TPUEmbeddingError::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TPUEmbeddingError::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2ftpu_2ftpu_5fembedding_5fconfiguration_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tpu
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::tpu::TPUEmbeddingConfiguration_TableDescriptor*
Arena::CreateMaybeMessage< ::tensorflow::tpu::TPUEmbeddingConfiguration_TableDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::tpu::TPUEmbeddingConfiguration_TableDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tpu::TPUEmbeddingConfiguration_FeatureDescriptor*
Arena::CreateMaybeMessage< ::tensorflow::tpu::TPUEmbeddingConfiguration_FeatureDescriptor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::tpu::TPUEmbeddingConfiguration_FeatureDescriptor >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tpu::TPUEmbeddingConfiguration_SpmdSharding*
Arena::CreateMaybeMessage< ::tensorflow::tpu::TPUEmbeddingConfiguration_SpmdSharding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::tpu::TPUEmbeddingConfiguration_SpmdSharding >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tpu::TPUEmbeddingConfiguration*
Arena::CreateMaybeMessage< ::tensorflow::tpu::TPUEmbeddingConfiguration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::tpu::TPUEmbeddingConfiguration >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::tpu::TPUEmbeddingError*
Arena::CreateMaybeMessage< ::tensorflow::tpu::TPUEmbeddingError >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::tpu::TPUEmbeddingError >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
