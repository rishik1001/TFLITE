// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/struct.proto

#include "tensorflow/core/protobuf/struct.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR StructuredValue::StructuredValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.kind_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct StructuredValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StructuredValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StructuredValueDefaultTypeInternal() {}
  union {
    StructuredValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StructuredValueDefaultTypeInternal _StructuredValue_default_instance_;
PROTOBUF_CONSTEXPR NoneValue::NoneValue(
    ::_pbi::ConstantInitialized) {}
struct NoneValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NoneValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NoneValueDefaultTypeInternal() {}
  union {
    NoneValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NoneValueDefaultTypeInternal _NoneValue_default_instance_;
PROTOBUF_CONSTEXPR ListValue::ListValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListValueDefaultTypeInternal() {}
  union {
    ListValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListValueDefaultTypeInternal _ListValue_default_instance_;
PROTOBUF_CONSTEXPR TupleValue::TupleValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TupleValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TupleValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TupleValueDefaultTypeInternal() {}
  union {
    TupleValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TupleValueDefaultTypeInternal _TupleValue_default_instance_;
PROTOBUF_CONSTEXPR DictValue_FieldsEntry_DoNotUse::DictValue_FieldsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct DictValue_FieldsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DictValue_FieldsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DictValue_FieldsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    DictValue_FieldsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DictValue_FieldsEntry_DoNotUseDefaultTypeInternal _DictValue_FieldsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR DictValue::DictValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fields_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DictValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DictValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DictValueDefaultTypeInternal() {}
  union {
    DictValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DictValueDefaultTypeInternal _DictValue_default_instance_;
PROTOBUF_CONSTEXPR PairValue::PairValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.key_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PairValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PairValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PairValueDefaultTypeInternal() {}
  union {
    PairValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PairValueDefaultTypeInternal _PairValue_default_instance_;
PROTOBUF_CONSTEXPR NamedTupleValue::NamedTupleValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.values_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct NamedTupleValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NamedTupleValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~NamedTupleValueDefaultTypeInternal() {}
  union {
    NamedTupleValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NamedTupleValueDefaultTypeInternal _NamedTupleValue_default_instance_;
PROTOBUF_CONSTEXPR TensorSpecProto::TensorSpecProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shape_)*/nullptr
  , /*decltype(_impl_.dtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TensorSpecProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TensorSpecProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TensorSpecProtoDefaultTypeInternal() {}
  union {
    TensorSpecProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TensorSpecProtoDefaultTypeInternal _TensorSpecProto_default_instance_;
PROTOBUF_CONSTEXPR BoundedTensorSpecProto::BoundedTensorSpecProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.shape_)*/nullptr
  , /*decltype(_impl_.minimum_)*/nullptr
  , /*decltype(_impl_.maximum_)*/nullptr
  , /*decltype(_impl_.dtype_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct BoundedTensorSpecProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoundedTensorSpecProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoundedTensorSpecProtoDefaultTypeInternal() {}
  union {
    BoundedTensorSpecProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoundedTensorSpecProtoDefaultTypeInternal _BoundedTensorSpecProto_default_instance_;
PROTOBUF_CONSTEXPR TypeSpecProto::TypeSpecProto(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_spec_class_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_state_)*/nullptr
  , /*decltype(_impl_.type_spec_class_)*/0
  , /*decltype(_impl_.num_flat_components_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TypeSpecProtoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TypeSpecProtoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TypeSpecProtoDefaultTypeInternal() {}
  union {
    TypeSpecProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TypeSpecProtoDefaultTypeInternal _TypeSpecProto_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto[11];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::StructuredValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::StructuredValue, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::StructuredValue, _impl_.kind_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::NoneValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ListValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ListValue, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TupleValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TupleValue, _impl_.values_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DictValue_FieldsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DictValue_FieldsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DictValue_FieldsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DictValue_FieldsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DictValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DictValue, _impl_.fields_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::PairValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::PairValue, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::PairValue, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::NamedTupleValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::NamedTupleValue, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::NamedTupleValue, _impl_.values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorSpecProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorSpecProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorSpecProto, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TensorSpecProto, _impl_.dtype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BoundedTensorSpecProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::BoundedTensorSpecProto, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BoundedTensorSpecProto, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BoundedTensorSpecProto, _impl_.dtype_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BoundedTensorSpecProto, _impl_.minimum_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::BoundedTensorSpecProto, _impl_.maximum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TypeSpecProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TypeSpecProto, _impl_.type_spec_class_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TypeSpecProto, _impl_.type_state_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TypeSpecProto, _impl_.type_spec_class_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::TypeSpecProto, _impl_.num_flat_components_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::StructuredValue)},
  { 23, -1, -1, sizeof(::tensorflow::NoneValue)},
  { 29, -1, -1, sizeof(::tensorflow::ListValue)},
  { 36, -1, -1, sizeof(::tensorflow::TupleValue)},
  { 43, 51, -1, sizeof(::tensorflow::DictValue_FieldsEntry_DoNotUse)},
  { 53, -1, -1, sizeof(::tensorflow::DictValue)},
  { 60, -1, -1, sizeof(::tensorflow::PairValue)},
  { 68, -1, -1, sizeof(::tensorflow::NamedTupleValue)},
  { 76, -1, -1, sizeof(::tensorflow::TensorSpecProto)},
  { 85, -1, -1, sizeof(::tensorflow::BoundedTensorSpecProto)},
  { 96, -1, -1, sizeof(::tensorflow::TypeSpecProto)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_StructuredValue_default_instance_._instance,
  &::tensorflow::_NoneValue_default_instance_._instance,
  &::tensorflow::_ListValue_default_instance_._instance,
  &::tensorflow::_TupleValue_default_instance_._instance,
  &::tensorflow::_DictValue_FieldsEntry_DoNotUse_default_instance_._instance,
  &::tensorflow::_DictValue_default_instance_._instance,
  &::tensorflow::_PairValue_default_instance_._instance,
  &::tensorflow::_NamedTupleValue_default_instance_._instance,
  &::tensorflow::_TensorSpecProto_default_instance_._instance,
  &::tensorflow::_BoundedTensorSpecProto_default_instance_._instance,
  &::tensorflow::_TypeSpecProto_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%tensorflow/core/protobuf/struct.proto\022"
  "\ntensorflow\032&tensorflow/core/framework/t"
  "ensor.proto\032,tensorflow/core/framework/t"
  "ensor_shape.proto\032%tensorflow/core/frame"
  "work/types.proto\"\361\005\n\017StructuredValue\022+\n\n"
  "none_value\030\001 \001(\0132\025.tensorflow.NoneValueH"
  "\000\022\027\n\rfloat64_value\030\013 \001(\001H\000\022\025\n\013int64_valu"
  "e\030\014 \001(\022H\000\022\026\n\014string_value\030\r \001(\tH\000\022\024\n\nboo"
  "l_value\030\016 \001(\010H\000\022:\n\022tensor_shape_value\030\037 "
  "\001(\0132\034.tensorflow.TensorShapeProtoH\000\0222\n\022t"
  "ensor_dtype_value\030  \001(\0162\024.tensorflow.Dat"
  "aTypeH\000\0228\n\021tensor_spec_value\030! \001(\0132\033.ten"
  "sorflow.TensorSpecProtoH\000\0224\n\017type_spec_v"
  "alue\030\" \001(\0132\031.tensorflow.TypeSpecProtoH\000\022"
  "G\n\031bounded_tensor_spec_value\030# \001(\0132\".ten"
  "sorflow.BoundedTensorSpecProtoH\000\022+\n\nlist"
  "_value\0303 \001(\0132\025.tensorflow.ListValueH\000\022-\n"
  "\013tuple_value\0304 \001(\0132\026.tensorflow.TupleVal"
  "ueH\000\022+\n\ndict_value\0305 \001(\0132\025.tensorflow.Di"
  "ctValueH\000\0228\n\021named_tuple_value\0306 \001(\0132\033.t"
  "ensorflow.NamedTupleValueH\000\022/\n\014tensor_va"
  "lue\0307 \001(\0132\027.tensorflow.TensorProtoH\000\022.\n\013"
  "numpy_value\0308 \001(\0132\027.tensorflow.TensorPro"
  "toH\000B\006\n\004kind\"\013\n\tNoneValue\"8\n\tListValue\022+"
  "\n\006values\030\001 \003(\0132\033.tensorflow.StructuredVa"
  "lue\"9\n\nTupleValue\022+\n\006values\030\001 \003(\0132\033.tens"
  "orflow.StructuredValue\"\212\001\n\tDictValue\0221\n\006"
  "fields\030\001 \003(\0132!.tensorflow.DictValue.Fiel"
  "dsEntry\032J\n\013FieldsEntry\022\013\n\003key\030\001 \001(\t\022*\n\005v"
  "alue\030\002 \001(\0132\033.tensorflow.StructuredValue:"
  "\0028\001\"D\n\tPairValue\022\013\n\003key\030\001 \001(\t\022*\n\005value\030\002"
  " \001(\0132\033.tensorflow.StructuredValue\"F\n\017Nam"
  "edTupleValue\022\014\n\004name\030\001 \001(\t\022%\n\006values\030\002 \003"
  "(\0132\025.tensorflow.PairValue\"q\n\017TensorSpecP"
  "roto\022\014\n\004name\030\001 \001(\t\022+\n\005shape\030\002 \001(\0132\034.tens"
  "orflow.TensorShapeProto\022#\n\005dtype\030\003 \001(\0162\024"
  ".tensorflow.DataType\"\314\001\n\026BoundedTensorSp"
  "ecProto\022\014\n\004name\030\001 \001(\t\022+\n\005shape\030\002 \001(\0132\034.t"
  "ensorflow.TensorShapeProto\022#\n\005dtype\030\003 \001("
  "\0162\024.tensorflow.DataType\022(\n\007minimum\030\004 \001(\013"
  "2\027.tensorflow.TensorProto\022(\n\007maximum\030\005 \001"
  "(\0132\027.tensorflow.TensorProto\"\370\003\n\rTypeSpec"
  "Proto\022@\n\017type_spec_class\030\001 \001(\0162\'.tensorf"
  "low.TypeSpecProto.TypeSpecClass\022/\n\ntype_"
  "state\030\002 \001(\0132\033.tensorflow.StructuredValue"
  "\022\034\n\024type_spec_class_name\030\003 \001(\t\022\033\n\023num_fl"
  "at_components\030\004 \001(\005\"\270\002\n\rTypeSpecClass\022\013\n"
  "\007UNKNOWN\020\000\022\026\n\022SPARSE_TENSOR_SPEC\020\001\022\027\n\023IN"
  "DEXED_SLICES_SPEC\020\002\022\026\n\022RAGGED_TENSOR_SPE"
  "C\020\003\022\025\n\021TENSOR_ARRAY_SPEC\020\004\022\025\n\021DATA_DATAS"
  "ET_SPEC\020\005\022\026\n\022DATA_ITERATOR_SPEC\020\006\022\021\n\rOPT"
  "IONAL_SPEC\020\007\022\024\n\020PER_REPLICA_SPEC\020\010\022\021\n\rVA"
  "RIABLE_SPEC\020\t\022\026\n\022ROW_PARTITION_SPEC\020\n\022\030\n"
  "\024REGISTERED_TYPE_SPEC\020\014\022\027\n\023EXTENSION_TYP"
  "E_SPEC\020\r\"\004\010\013\020\013BWZUgithub.com/tensorflow/"
  "tensorflow/tensorflow/go/core/protobuf/f"
  "or_core_protos_go_protob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_deps[3] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto = {
    false, false, 2271, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto,
    "tensorflow/core/protobuf/struct.proto",
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_deps, 3, 11,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TypeSpecProto_TypeSpecClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto[0];
}
bool TypeSpecProto_TypeSpecClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::UNKNOWN;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::SPARSE_TENSOR_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::INDEXED_SLICES_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::RAGGED_TENSOR_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::TENSOR_ARRAY_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::DATA_DATASET_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::DATA_ITERATOR_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::OPTIONAL_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::PER_REPLICA_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::VARIABLE_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::ROW_PARTITION_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::REGISTERED_TYPE_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::EXTENSION_TYPE_SPEC;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::TypeSpecClass_MIN;
constexpr TypeSpecProto_TypeSpecClass TypeSpecProto::TypeSpecClass_MAX;
constexpr int TypeSpecProto::TypeSpecClass_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class StructuredValue::_Internal {
 public:
  static const ::tensorflow::NoneValue& none_value(const StructuredValue* msg);
  static const ::tensorflow::TensorShapeProto& tensor_shape_value(const StructuredValue* msg);
  static const ::tensorflow::TensorSpecProto& tensor_spec_value(const StructuredValue* msg);
  static const ::tensorflow::TypeSpecProto& type_spec_value(const StructuredValue* msg);
  static const ::tensorflow::BoundedTensorSpecProto& bounded_tensor_spec_value(const StructuredValue* msg);
  static const ::tensorflow::ListValue& list_value(const StructuredValue* msg);
  static const ::tensorflow::TupleValue& tuple_value(const StructuredValue* msg);
  static const ::tensorflow::DictValue& dict_value(const StructuredValue* msg);
  static const ::tensorflow::NamedTupleValue& named_tuple_value(const StructuredValue* msg);
  static const ::tensorflow::TensorProto& tensor_value(const StructuredValue* msg);
  static const ::tensorflow::TensorProto& numpy_value(const StructuredValue* msg);
};

const ::tensorflow::NoneValue&
StructuredValue::_Internal::none_value(const StructuredValue* msg) {
  return *msg->_impl_.kind_.none_value_;
}
const ::tensorflow::TensorShapeProto&
StructuredValue::_Internal::tensor_shape_value(const StructuredValue* msg) {
  return *msg->_impl_.kind_.tensor_shape_value_;
}
const ::tensorflow::TensorSpecProto&
StructuredValue::_Internal::tensor_spec_value(const StructuredValue* msg) {
  return *msg->_impl_.kind_.tensor_spec_value_;
}
const ::tensorflow::TypeSpecProto&
StructuredValue::_Internal::type_spec_value(const StructuredValue* msg) {
  return *msg->_impl_.kind_.type_spec_value_;
}
const ::tensorflow::BoundedTensorSpecProto&
StructuredValue::_Internal::bounded_tensor_spec_value(const StructuredValue* msg) {
  return *msg->_impl_.kind_.bounded_tensor_spec_value_;
}
const ::tensorflow::ListValue&
StructuredValue::_Internal::list_value(const StructuredValue* msg) {
  return *msg->_impl_.kind_.list_value_;
}
const ::tensorflow::TupleValue&
StructuredValue::_Internal::tuple_value(const StructuredValue* msg) {
  return *msg->_impl_.kind_.tuple_value_;
}
const ::tensorflow::DictValue&
StructuredValue::_Internal::dict_value(const StructuredValue* msg) {
  return *msg->_impl_.kind_.dict_value_;
}
const ::tensorflow::NamedTupleValue&
StructuredValue::_Internal::named_tuple_value(const StructuredValue* msg) {
  return *msg->_impl_.kind_.named_tuple_value_;
}
const ::tensorflow::TensorProto&
StructuredValue::_Internal::tensor_value(const StructuredValue* msg) {
  return *msg->_impl_.kind_.tensor_value_;
}
const ::tensorflow::TensorProto&
StructuredValue::_Internal::numpy_value(const StructuredValue* msg) {
  return *msg->_impl_.kind_.numpy_value_;
}
void StructuredValue::set_allocated_none_value(::tensorflow::NoneValue* none_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (none_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(none_value);
    if (message_arena != submessage_arena) {
      none_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, none_value, submessage_arena);
    }
    set_has_none_value();
    _impl_.kind_.none_value_ = none_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.none_value)
}
void StructuredValue::set_allocated_tensor_shape_value(::tensorflow::TensorShapeProto* tensor_shape_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (tensor_shape_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_shape_value));
    if (message_arena != submessage_arena) {
      tensor_shape_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor_shape_value, submessage_arena);
    }
    set_has_tensor_shape_value();
    _impl_.kind_.tensor_shape_value_ = tensor_shape_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.tensor_shape_value)
}
void StructuredValue::clear_tensor_shape_value() {
  if (_internal_has_tensor_shape_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.tensor_shape_value_;
    }
    clear_has_kind();
  }
}
void StructuredValue::set_allocated_tensor_spec_value(::tensorflow::TensorSpecProto* tensor_spec_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (tensor_spec_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tensor_spec_value);
    if (message_arena != submessage_arena) {
      tensor_spec_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor_spec_value, submessage_arena);
    }
    set_has_tensor_spec_value();
    _impl_.kind_.tensor_spec_value_ = tensor_spec_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.tensor_spec_value)
}
void StructuredValue::set_allocated_type_spec_value(::tensorflow::TypeSpecProto* type_spec_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (type_spec_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(type_spec_value);
    if (message_arena != submessage_arena) {
      type_spec_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_spec_value, submessage_arena);
    }
    set_has_type_spec_value();
    _impl_.kind_.type_spec_value_ = type_spec_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.type_spec_value)
}
void StructuredValue::set_allocated_bounded_tensor_spec_value(::tensorflow::BoundedTensorSpecProto* bounded_tensor_spec_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (bounded_tensor_spec_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bounded_tensor_spec_value);
    if (message_arena != submessage_arena) {
      bounded_tensor_spec_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bounded_tensor_spec_value, submessage_arena);
    }
    set_has_bounded_tensor_spec_value();
    _impl_.kind_.bounded_tensor_spec_value_ = bounded_tensor_spec_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.bounded_tensor_spec_value)
}
void StructuredValue::set_allocated_list_value(::tensorflow::ListValue* list_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (list_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(list_value);
    if (message_arena != submessage_arena) {
      list_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list_value, submessage_arena);
    }
    set_has_list_value();
    _impl_.kind_.list_value_ = list_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.list_value)
}
void StructuredValue::set_allocated_tuple_value(::tensorflow::TupleValue* tuple_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (tuple_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tuple_value);
    if (message_arena != submessage_arena) {
      tuple_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tuple_value, submessage_arena);
    }
    set_has_tuple_value();
    _impl_.kind_.tuple_value_ = tuple_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.tuple_value)
}
void StructuredValue::set_allocated_dict_value(::tensorflow::DictValue* dict_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (dict_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dict_value);
    if (message_arena != submessage_arena) {
      dict_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dict_value, submessage_arena);
    }
    set_has_dict_value();
    _impl_.kind_.dict_value_ = dict_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.dict_value)
}
void StructuredValue::set_allocated_named_tuple_value(::tensorflow::NamedTupleValue* named_tuple_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (named_tuple_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(named_tuple_value);
    if (message_arena != submessage_arena) {
      named_tuple_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, named_tuple_value, submessage_arena);
    }
    set_has_named_tuple_value();
    _impl_.kind_.named_tuple_value_ = named_tuple_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.named_tuple_value)
}
void StructuredValue::set_allocated_tensor_value(::tensorflow::TensorProto* tensor_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (tensor_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor_value));
    if (message_arena != submessage_arena) {
      tensor_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor_value, submessage_arena);
    }
    set_has_tensor_value();
    _impl_.kind_.tensor_value_ = tensor_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.tensor_value)
}
void StructuredValue::clear_tensor_value() {
  if (_internal_has_tensor_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.tensor_value_;
    }
    clear_has_kind();
  }
}
void StructuredValue::set_allocated_numpy_value(::tensorflow::TensorProto* numpy_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_kind();
  if (numpy_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(numpy_value));
    if (message_arena != submessage_arena) {
      numpy_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, numpy_value, submessage_arena);
    }
    set_has_numpy_value();
    _impl_.kind_.numpy_value_ = numpy_value;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.StructuredValue.numpy_value)
}
void StructuredValue::clear_numpy_value() {
  if (_internal_has_numpy_value()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.kind_.numpy_value_;
    }
    clear_has_kind();
  }
}
StructuredValue::StructuredValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.StructuredValue)
}
StructuredValue::StructuredValue(const StructuredValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StructuredValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_kind();
  switch (from.kind_case()) {
    case kNoneValue: {
      _this->_internal_mutable_none_value()->::tensorflow::NoneValue::MergeFrom(
          from._internal_none_value());
      break;
    }
    case kFloat64Value: {
      _this->_internal_set_float64_value(from._internal_float64_value());
      break;
    }
    case kInt64Value: {
      _this->_internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kTensorShapeValue: {
      _this->_internal_mutable_tensor_shape_value()->::tensorflow::TensorShapeProto::MergeFrom(
          from._internal_tensor_shape_value());
      break;
    }
    case kTensorDtypeValue: {
      _this->_internal_set_tensor_dtype_value(from._internal_tensor_dtype_value());
      break;
    }
    case kTensorSpecValue: {
      _this->_internal_mutable_tensor_spec_value()->::tensorflow::TensorSpecProto::MergeFrom(
          from._internal_tensor_spec_value());
      break;
    }
    case kTypeSpecValue: {
      _this->_internal_mutable_type_spec_value()->::tensorflow::TypeSpecProto::MergeFrom(
          from._internal_type_spec_value());
      break;
    }
    case kBoundedTensorSpecValue: {
      _this->_internal_mutable_bounded_tensor_spec_value()->::tensorflow::BoundedTensorSpecProto::MergeFrom(
          from._internal_bounded_tensor_spec_value());
      break;
    }
    case kListValue: {
      _this->_internal_mutable_list_value()->::tensorflow::ListValue::MergeFrom(
          from._internal_list_value());
      break;
    }
    case kTupleValue: {
      _this->_internal_mutable_tuple_value()->::tensorflow::TupleValue::MergeFrom(
          from._internal_tuple_value());
      break;
    }
    case kDictValue: {
      _this->_internal_mutable_dict_value()->::tensorflow::DictValue::MergeFrom(
          from._internal_dict_value());
      break;
    }
    case kNamedTupleValue: {
      _this->_internal_mutable_named_tuple_value()->::tensorflow::NamedTupleValue::MergeFrom(
          from._internal_named_tuple_value());
      break;
    }
    case kTensorValue: {
      _this->_internal_mutable_tensor_value()->::tensorflow::TensorProto::MergeFrom(
          from._internal_tensor_value());
      break;
    }
    case kNumpyValue: {
      _this->_internal_mutable_numpy_value()->::tensorflow::TensorProto::MergeFrom(
          from._internal_numpy_value());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.StructuredValue)
}

inline void StructuredValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.kind_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_kind();
}

StructuredValue::~StructuredValue() {
  // @@protoc_insertion_point(destructor:tensorflow.StructuredValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StructuredValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_kind()) {
    clear_kind();
  }
}

void StructuredValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StructuredValue::clear_kind() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.StructuredValue)
  switch (kind_case()) {
    case kNoneValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.none_value_;
      }
      break;
    }
    case kFloat64Value: {
      // No need to clear
      break;
    }
    case kInt64Value: {
      // No need to clear
      break;
    }
    case kStringValue: {
      _impl_.kind_.string_value_.Destroy();
      break;
    }
    case kBoolValue: {
      // No need to clear
      break;
    }
    case kTensorShapeValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.tensor_shape_value_;
      }
      break;
    }
    case kTensorDtypeValue: {
      // No need to clear
      break;
    }
    case kTensorSpecValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.tensor_spec_value_;
      }
      break;
    }
    case kTypeSpecValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.type_spec_value_;
      }
      break;
    }
    case kBoundedTensorSpecValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.bounded_tensor_spec_value_;
      }
      break;
    }
    case kListValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.list_value_;
      }
      break;
    }
    case kTupleValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.tuple_value_;
      }
      break;
    }
    case kDictValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.dict_value_;
      }
      break;
    }
    case kNamedTupleValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.named_tuple_value_;
      }
      break;
    }
    case kTensorValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.tensor_value_;
      }
      break;
    }
    case kNumpyValue: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.kind_.numpy_value_;
      }
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = KIND_NOT_SET;
}


void StructuredValue::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.StructuredValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_kind();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StructuredValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.NoneValue none_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_none_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double float64_value = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 89)) {
          _internal_set_float64_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // sint64 int64_value = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _internal_set_int64_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string string_value = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_string_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.StructuredValue.string_value"));
        } else
          goto handle_unusual;
        continue;
      // bool bool_value = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _internal_set_bool_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TensorShapeProto tensor_shape_value = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor_shape_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.DataType tensor_dtype_value = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tensor_dtype_value(static_cast<::tensorflow::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TensorSpecProto tensor_spec_value = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor_spec_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TypeSpecProto type_spec_value = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_spec_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.BoundedTensorSpecProto bounded_tensor_spec_value = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_bounded_tensor_spec_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.ListValue list_value = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_list_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TupleValue tuple_value = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_tuple_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.DictValue dict_value = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_dict_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.NamedTupleValue named_tuple_value = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_named_tuple_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TensorProto tensor_value = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TensorProto numpy_value = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_numpy_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StructuredValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.StructuredValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.NoneValue none_value = 1;
  if (_internal_has_none_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::none_value(this),
        _Internal::none_value(this).GetCachedSize(), target, stream);
  }

  // double float64_value = 11;
  if (_internal_has_float64_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(11, this->_internal_float64_value(), target);
  }

  // sint64 int64_value = 12;
  if (_internal_has_int64_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteSInt64ToArray(12, this->_internal_int64_value(), target);
  }

  // string string_value = 13;
  if (_internal_has_string_value()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string_value().data(), static_cast<int>(this->_internal_string_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.StructuredValue.string_value");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_string_value(), target);
  }

  // bool bool_value = 14;
  if (_internal_has_bool_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(14, this->_internal_bool_value(), target);
  }

  // .tensorflow.TensorShapeProto tensor_shape_value = 31;
  if (_internal_has_tensor_shape_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, _Internal::tensor_shape_value(this),
        _Internal::tensor_shape_value(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.DataType tensor_dtype_value = 32;
  if (_internal_has_tensor_dtype_value()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      32, this->_internal_tensor_dtype_value(), target);
  }

  // .tensorflow.TensorSpecProto tensor_spec_value = 33;
  if (_internal_has_tensor_spec_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, _Internal::tensor_spec_value(this),
        _Internal::tensor_spec_value(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.TypeSpecProto type_spec_value = 34;
  if (_internal_has_type_spec_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, _Internal::type_spec_value(this),
        _Internal::type_spec_value(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.BoundedTensorSpecProto bounded_tensor_spec_value = 35;
  if (_internal_has_bounded_tensor_spec_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::bounded_tensor_spec_value(this),
        _Internal::bounded_tensor_spec_value(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.ListValue list_value = 51;
  if (_internal_has_list_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(51, _Internal::list_value(this),
        _Internal::list_value(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.TupleValue tuple_value = 52;
  if (_internal_has_tuple_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(52, _Internal::tuple_value(this),
        _Internal::tuple_value(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.DictValue dict_value = 53;
  if (_internal_has_dict_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(53, _Internal::dict_value(this),
        _Internal::dict_value(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.NamedTupleValue named_tuple_value = 54;
  if (_internal_has_named_tuple_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(54, _Internal::named_tuple_value(this),
        _Internal::named_tuple_value(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.TensorProto tensor_value = 55;
  if (_internal_has_tensor_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(55, _Internal::tensor_value(this),
        _Internal::tensor_value(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.TensorProto numpy_value = 56;
  if (_internal_has_numpy_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(56, _Internal::numpy_value(this),
        _Internal::numpy_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.StructuredValue)
  return target;
}

size_t StructuredValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.StructuredValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (kind_case()) {
    // .tensorflow.NoneValue none_value = 1;
    case kNoneValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.none_value_);
      break;
    }
    // double float64_value = 11;
    case kFloat64Value: {
      total_size += 1 + 8;
      break;
    }
    // sint64 int64_value = 12;
    case kInt64Value: {
      total_size += ::_pbi::WireFormatLite::SInt64SizePlusOne(this->_internal_int64_value());
      break;
    }
    // string string_value = 13;
    case kStringValue: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string_value());
      break;
    }
    // bool bool_value = 14;
    case kBoolValue: {
      total_size += 1 + 1;
      break;
    }
    // .tensorflow.TensorShapeProto tensor_shape_value = 31;
    case kTensorShapeValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.tensor_shape_value_);
      break;
    }
    // .tensorflow.DataType tensor_dtype_value = 32;
    case kTensorDtypeValue: {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_tensor_dtype_value());
      break;
    }
    // .tensorflow.TensorSpecProto tensor_spec_value = 33;
    case kTensorSpecValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.tensor_spec_value_);
      break;
    }
    // .tensorflow.TypeSpecProto type_spec_value = 34;
    case kTypeSpecValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.type_spec_value_);
      break;
    }
    // .tensorflow.BoundedTensorSpecProto bounded_tensor_spec_value = 35;
    case kBoundedTensorSpecValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.bounded_tensor_spec_value_);
      break;
    }
    // .tensorflow.ListValue list_value = 51;
    case kListValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.list_value_);
      break;
    }
    // .tensorflow.TupleValue tuple_value = 52;
    case kTupleValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.tuple_value_);
      break;
    }
    // .tensorflow.DictValue dict_value = 53;
    case kDictValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.dict_value_);
      break;
    }
    // .tensorflow.NamedTupleValue named_tuple_value = 54;
    case kNamedTupleValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.named_tuple_value_);
      break;
    }
    // .tensorflow.TensorProto tensor_value = 55;
    case kTensorValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.tensor_value_);
      break;
    }
    // .tensorflow.TensorProto numpy_value = 56;
    case kNumpyValue: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.kind_.numpy_value_);
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StructuredValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StructuredValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StructuredValue::GetClassData() const { return &_class_data_; }


void StructuredValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StructuredValue*>(&to_msg);
  auto& from = static_cast<const StructuredValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.StructuredValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.kind_case()) {
    case kNoneValue: {
      _this->_internal_mutable_none_value()->::tensorflow::NoneValue::MergeFrom(
          from._internal_none_value());
      break;
    }
    case kFloat64Value: {
      _this->_internal_set_float64_value(from._internal_float64_value());
      break;
    }
    case kInt64Value: {
      _this->_internal_set_int64_value(from._internal_int64_value());
      break;
    }
    case kStringValue: {
      _this->_internal_set_string_value(from._internal_string_value());
      break;
    }
    case kBoolValue: {
      _this->_internal_set_bool_value(from._internal_bool_value());
      break;
    }
    case kTensorShapeValue: {
      _this->_internal_mutable_tensor_shape_value()->::tensorflow::TensorShapeProto::MergeFrom(
          from._internal_tensor_shape_value());
      break;
    }
    case kTensorDtypeValue: {
      _this->_internal_set_tensor_dtype_value(from._internal_tensor_dtype_value());
      break;
    }
    case kTensorSpecValue: {
      _this->_internal_mutable_tensor_spec_value()->::tensorflow::TensorSpecProto::MergeFrom(
          from._internal_tensor_spec_value());
      break;
    }
    case kTypeSpecValue: {
      _this->_internal_mutable_type_spec_value()->::tensorflow::TypeSpecProto::MergeFrom(
          from._internal_type_spec_value());
      break;
    }
    case kBoundedTensorSpecValue: {
      _this->_internal_mutable_bounded_tensor_spec_value()->::tensorflow::BoundedTensorSpecProto::MergeFrom(
          from._internal_bounded_tensor_spec_value());
      break;
    }
    case kListValue: {
      _this->_internal_mutable_list_value()->::tensorflow::ListValue::MergeFrom(
          from._internal_list_value());
      break;
    }
    case kTupleValue: {
      _this->_internal_mutable_tuple_value()->::tensorflow::TupleValue::MergeFrom(
          from._internal_tuple_value());
      break;
    }
    case kDictValue: {
      _this->_internal_mutable_dict_value()->::tensorflow::DictValue::MergeFrom(
          from._internal_dict_value());
      break;
    }
    case kNamedTupleValue: {
      _this->_internal_mutable_named_tuple_value()->::tensorflow::NamedTupleValue::MergeFrom(
          from._internal_named_tuple_value());
      break;
    }
    case kTensorValue: {
      _this->_internal_mutable_tensor_value()->::tensorflow::TensorProto::MergeFrom(
          from._internal_tensor_value());
      break;
    }
    case kNumpyValue: {
      _this->_internal_mutable_numpy_value()->::tensorflow::TensorProto::MergeFrom(
          from._internal_numpy_value());
      break;
    }
    case KIND_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StructuredValue::CopyFrom(const StructuredValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.StructuredValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StructuredValue::IsInitialized() const {
  return true;
}

void StructuredValue::InternalSwap(StructuredValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.kind_, other->_impl_.kind_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata StructuredValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto[0]);
}

// ===================================================================

class NoneValue::_Internal {
 public:
};

NoneValue::NoneValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tensorflow.NoneValue)
}
NoneValue::NoneValue(const NoneValue& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  NoneValue* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.NoneValue)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NoneValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NoneValue::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata NoneValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto[1]);
}

// ===================================================================

class ListValue::_Internal {
 public:
};

ListValue::ListValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ListValue)
}
ListValue::ListValue(const ListValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ListValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ListValue)
}

inline void ListValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ListValue::~ListValue() {
  // @@protoc_insertion_point(destructor:tensorflow.ListValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
}

void ListValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListValue::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ListValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.StructuredValue values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ListValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.StructuredValue values = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ListValue)
  return target;
}

size_t ListValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ListValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.StructuredValue values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_impl_.values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ListValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListValue::GetClassData() const { return &_class_data_; }


void ListValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ListValue*>(&to_msg);
  auto& from = static_cast<const ListValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ListValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListValue::CopyFrom(const ListValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ListValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListValue::IsInitialized() const {
  return true;
}

void ListValue::InternalSwap(ListValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto[2]);
}

// ===================================================================

class TupleValue::_Internal {
 public:
};

TupleValue::TupleValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TupleValue)
}
TupleValue::TupleValue(const TupleValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TupleValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.TupleValue)
}

inline void TupleValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TupleValue::~TupleValue() {
  // @@protoc_insertion_point(destructor:tensorflow.TupleValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TupleValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
}

void TupleValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TupleValue::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TupleValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TupleValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.StructuredValue values = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TupleValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TupleValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.StructuredValue values = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TupleValue)
  return target;
}

size_t TupleValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TupleValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.StructuredValue values = 1;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_impl_.values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TupleValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TupleValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TupleValue::GetClassData() const { return &_class_data_; }


void TupleValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TupleValue*>(&to_msg);
  auto& from = static_cast<const TupleValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TupleValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TupleValue::CopyFrom(const TupleValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TupleValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TupleValue::IsInitialized() const {
  return true;
}

void TupleValue::InternalSwap(TupleValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TupleValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto[3]);
}

// ===================================================================

DictValue_FieldsEntry_DoNotUse::DictValue_FieldsEntry_DoNotUse() {}
DictValue_FieldsEntry_DoNotUse::DictValue_FieldsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void DictValue_FieldsEntry_DoNotUse::MergeFrom(const DictValue_FieldsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata DictValue_FieldsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto[4]);
}

// ===================================================================

class DictValue::_Internal {
 public:
};

DictValue::DictValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &DictValue::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:tensorflow.DictValue)
}
DictValue::DictValue(const DictValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DictValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.fields_)*/{}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.fields_.MergeFrom(from._impl_.fields_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.DictValue)
}

inline void DictValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.fields_)*/{::_pbi::ArenaInitialized(), arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

DictValue::~DictValue() {
  // @@protoc_insertion_point(destructor:tensorflow.DictValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void DictValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.fields_.Destruct();
  _impl_.fields_.~MapField();
}

void DictValue::ArenaDtor(void* object) {
  DictValue* _this = reinterpret_cast< DictValue* >(object);
  _this->_impl_.fields_.Destruct();
}
void DictValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DictValue::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DictValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fields_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DictValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .tensorflow.StructuredValue> fields = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.fields_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DictValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DictValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .tensorflow.StructuredValue> fields = 1;
  if (!this->_internal_fields().empty()) {
    using MapType = ::_pb::Map<std::string, ::tensorflow::StructuredValue>;
    using WireHelper = DictValue_FieldsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_fields();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "tensorflow.DictValue.FieldsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DictValue)
  return target;
}

size_t DictValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DictValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .tensorflow.StructuredValue> fields = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_fields_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::StructuredValue >::const_iterator
      it = this->_internal_fields().begin();
      it != this->_internal_fields().end(); ++it) {
    total_size += DictValue_FieldsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DictValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DictValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DictValue::GetClassData() const { return &_class_data_; }


void DictValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DictValue*>(&to_msg);
  auto& from = static_cast<const DictValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DictValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.fields_.MergeFrom(from._impl_.fields_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DictValue::CopyFrom(const DictValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DictValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictValue::IsInitialized() const {
  return true;
}

void DictValue::InternalSwap(DictValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fields_.InternalSwap(&other->_impl_.fields_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DictValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto[5]);
}

// ===================================================================

class PairValue::_Internal {
 public:
  static const ::tensorflow::StructuredValue& value(const PairValue* msg);
};

const ::tensorflow::StructuredValue&
PairValue::_Internal::value(const PairValue* msg) {
  return *msg->_impl_.value_;
}
PairValue::PairValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.PairValue)
}
PairValue::PairValue(const PairValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PairValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_value()) {
    _this->_impl_.value_ = new ::tensorflow::StructuredValue(*from._impl_.value_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.PairValue)
}

inline void PairValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.key_){}
    , decltype(_impl_.value_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.key_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PairValue::~PairValue() {
  // @@protoc_insertion_point(destructor:tensorflow.PairValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PairValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.key_.Destroy();
  if (this != internal_default_instance()) delete _impl_.value_;
}

void PairValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PairValue::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.PairValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.key_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.value_ != nullptr) {
    delete _impl_.value_;
  }
  _impl_.value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PairValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.PairValue.key"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.StructuredValue value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PairValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.PairValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.PairValue.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // .tensorflow.StructuredValue value = 2;
  if (this->_internal_has_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::value(this),
        _Internal::value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.PairValue)
  return target;
}

size_t PairValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.PairValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // .tensorflow.StructuredValue value = 2;
  if (this->_internal_has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.value_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PairValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PairValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PairValue::GetClassData() const { return &_class_data_; }


void PairValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PairValue*>(&to_msg);
  auto& from = static_cast<const PairValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.PairValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  if (from._internal_has_value()) {
    _this->_internal_mutable_value()->::tensorflow::StructuredValue::MergeFrom(
        from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PairValue::CopyFrom(const PairValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.PairValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PairValue::IsInitialized() const {
  return true;
}

void PairValue::InternalSwap(PairValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.key_, lhs_arena,
      &other->_impl_.key_, rhs_arena
  );
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PairValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto[6]);
}

// ===================================================================

class NamedTupleValue::_Internal {
 public:
};

NamedTupleValue::NamedTupleValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.NamedTupleValue)
}
NamedTupleValue::NamedTupleValue(const NamedTupleValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  NamedTupleValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){from._impl_.values_}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.NamedTupleValue)
}

inline void NamedTupleValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.values_){arena}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

NamedTupleValue::~NamedTupleValue() {
  // @@protoc_insertion_point(destructor:tensorflow.NamedTupleValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void NamedTupleValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.values_.~RepeatedPtrField();
  _impl_.name_.Destroy();
}

void NamedTupleValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void NamedTupleValue::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.NamedTupleValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.values_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NamedTupleValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.NamedTupleValue.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.PairValue values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_values(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NamedTupleValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.NamedTupleValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.NamedTupleValue.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // repeated .tensorflow.PairValue values = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_values_size()); i < n; i++) {
    const auto& repfield = this->_internal_values(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.NamedTupleValue)
  return target;
}

size_t NamedTupleValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.NamedTupleValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.PairValue values = 2;
  total_size += 1UL * this->_internal_values_size();
  for (const auto& msg : this->_impl_.values_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NamedTupleValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    NamedTupleValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NamedTupleValue::GetClassData() const { return &_class_data_; }


void NamedTupleValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<NamedTupleValue*>(&to_msg);
  auto& from = static_cast<const NamedTupleValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.NamedTupleValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.values_.MergeFrom(from._impl_.values_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NamedTupleValue::CopyFrom(const NamedTupleValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.NamedTupleValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NamedTupleValue::IsInitialized() const {
  return true;
}

void NamedTupleValue::InternalSwap(NamedTupleValue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.values_.InternalSwap(&other->_impl_.values_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata NamedTupleValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto[7]);
}

// ===================================================================

class TensorSpecProto::_Internal {
 public:
  static const ::tensorflow::TensorShapeProto& shape(const TensorSpecProto* msg);
};

const ::tensorflow::TensorShapeProto&
TensorSpecProto::_Internal::shape(const TensorSpecProto* msg) {
  return *msg->_impl_.shape_;
}
void TensorSpecProto::clear_shape() {
  if (GetArenaForAllocation() == nullptr && _impl_.shape_ != nullptr) {
    delete _impl_.shape_;
  }
  _impl_.shape_ = nullptr;
}
TensorSpecProto::TensorSpecProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TensorSpecProto)
}
TensorSpecProto::TensorSpecProto(const TensorSpecProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TensorSpecProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.dtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_shape()) {
    _this->_impl_.shape_ = new ::tensorflow::TensorShapeProto(*from._impl_.shape_);
  }
  _this->_impl_.dtype_ = from._impl_.dtype_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.TensorSpecProto)
}

inline void TensorSpecProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.dtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TensorSpecProto::~TensorSpecProto() {
  // @@protoc_insertion_point(destructor:tensorflow.TensorSpecProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TensorSpecProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.shape_;
}

void TensorSpecProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TensorSpecProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TensorSpecProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.shape_ != nullptr) {
    delete _impl_.shape_;
  }
  _impl_.shape_ = nullptr;
  _impl_.dtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorSpecProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.TensorSpecProto.name"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TensorShapeProto shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.DataType dtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::tensorflow::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TensorSpecProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TensorSpecProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TensorSpecProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->_internal_has_shape()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::shape(this),
        _Internal::shape(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.DataType dtype = 3;
  if (this->_internal_dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_dtype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TensorSpecProto)
  return target;
}

size_t TensorSpecProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TensorSpecProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->_internal_has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shape_);
  }

  // .tensorflow.DataType dtype = 3;
  if (this->_internal_dtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TensorSpecProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TensorSpecProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TensorSpecProto::GetClassData() const { return &_class_data_; }


void TensorSpecProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TensorSpecProto*>(&to_msg);
  auto& from = static_cast<const TensorSpecProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TensorSpecProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_shape()) {
    _this->_internal_mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(
        from._internal_shape());
  }
  if (from._internal_dtype() != 0) {
    _this->_internal_set_dtype(from._internal_dtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TensorSpecProto::CopyFrom(const TensorSpecProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TensorSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorSpecProto::IsInitialized() const {
  return true;
}

void TensorSpecProto::InternalSwap(TensorSpecProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TensorSpecProto, _impl_.dtype_)
      + sizeof(TensorSpecProto::_impl_.dtype_)
      - PROTOBUF_FIELD_OFFSET(TensorSpecProto, _impl_.shape_)>(
          reinterpret_cast<char*>(&_impl_.shape_),
          reinterpret_cast<char*>(&other->_impl_.shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorSpecProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto[8]);
}

// ===================================================================

class BoundedTensorSpecProto::_Internal {
 public:
  static const ::tensorflow::TensorShapeProto& shape(const BoundedTensorSpecProto* msg);
  static const ::tensorflow::TensorProto& minimum(const BoundedTensorSpecProto* msg);
  static const ::tensorflow::TensorProto& maximum(const BoundedTensorSpecProto* msg);
};

const ::tensorflow::TensorShapeProto&
BoundedTensorSpecProto::_Internal::shape(const BoundedTensorSpecProto* msg) {
  return *msg->_impl_.shape_;
}
const ::tensorflow::TensorProto&
BoundedTensorSpecProto::_Internal::minimum(const BoundedTensorSpecProto* msg) {
  return *msg->_impl_.minimum_;
}
const ::tensorflow::TensorProto&
BoundedTensorSpecProto::_Internal::maximum(const BoundedTensorSpecProto* msg) {
  return *msg->_impl_.maximum_;
}
void BoundedTensorSpecProto::clear_shape() {
  if (GetArenaForAllocation() == nullptr && _impl_.shape_ != nullptr) {
    delete _impl_.shape_;
  }
  _impl_.shape_ = nullptr;
}
void BoundedTensorSpecProto::clear_minimum() {
  if (GetArenaForAllocation() == nullptr && _impl_.minimum_ != nullptr) {
    delete _impl_.minimum_;
  }
  _impl_.minimum_ = nullptr;
}
void BoundedTensorSpecProto::clear_maximum() {
  if (GetArenaForAllocation() == nullptr && _impl_.maximum_ != nullptr) {
    delete _impl_.maximum_;
  }
  _impl_.maximum_ = nullptr;
}
BoundedTensorSpecProto::BoundedTensorSpecProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.BoundedTensorSpecProto)
}
BoundedTensorSpecProto::BoundedTensorSpecProto(const BoundedTensorSpecProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  BoundedTensorSpecProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.minimum_){nullptr}
    , decltype(_impl_.maximum_){nullptr}
    , decltype(_impl_.dtype_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_shape()) {
    _this->_impl_.shape_ = new ::tensorflow::TensorShapeProto(*from._impl_.shape_);
  }
  if (from._internal_has_minimum()) {
    _this->_impl_.minimum_ = new ::tensorflow::TensorProto(*from._impl_.minimum_);
  }
  if (from._internal_has_maximum()) {
    _this->_impl_.maximum_ = new ::tensorflow::TensorProto(*from._impl_.maximum_);
  }
  _this->_impl_.dtype_ = from._impl_.dtype_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.BoundedTensorSpecProto)
}

inline void BoundedTensorSpecProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.shape_){nullptr}
    , decltype(_impl_.minimum_){nullptr}
    , decltype(_impl_.maximum_){nullptr}
    , decltype(_impl_.dtype_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

BoundedTensorSpecProto::~BoundedTensorSpecProto() {
  // @@protoc_insertion_point(destructor:tensorflow.BoundedTensorSpecProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void BoundedTensorSpecProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.shape_;
  if (this != internal_default_instance()) delete _impl_.minimum_;
  if (this != internal_default_instance()) delete _impl_.maximum_;
}

void BoundedTensorSpecProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void BoundedTensorSpecProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.BoundedTensorSpecProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.shape_ != nullptr) {
    delete _impl_.shape_;
  }
  _impl_.shape_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.minimum_ != nullptr) {
    delete _impl_.minimum_;
  }
  _impl_.minimum_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.maximum_ != nullptr) {
    delete _impl_.maximum_;
  }
  _impl_.maximum_ = nullptr;
  _impl_.dtype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundedTensorSpecProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.BoundedTensorSpecProto.name"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TensorShapeProto shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.DataType dtype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dtype(static_cast<::tensorflow::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TensorProto minimum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_minimum(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TensorProto maximum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_maximum(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoundedTensorSpecProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.BoundedTensorSpecProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.BoundedTensorSpecProto.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->_internal_has_shape()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::shape(this),
        _Internal::shape(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.DataType dtype = 3;
  if (this->_internal_dtype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_dtype(), target);
  }

  // .tensorflow.TensorProto minimum = 4;
  if (this->_internal_has_minimum()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::minimum(this),
        _Internal::minimum(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.TensorProto maximum = 5;
  if (this->_internal_has_maximum()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::maximum(this),
        _Internal::maximum(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.BoundedTensorSpecProto)
  return target;
}

size_t BoundedTensorSpecProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.BoundedTensorSpecProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .tensorflow.TensorShapeProto shape = 2;
  if (this->_internal_has_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.shape_);
  }

  // .tensorflow.TensorProto minimum = 4;
  if (this->_internal_has_minimum()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.minimum_);
  }

  // .tensorflow.TensorProto maximum = 5;
  if (this->_internal_has_maximum()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.maximum_);
  }

  // .tensorflow.DataType dtype = 3;
  if (this->_internal_dtype() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_dtype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoundedTensorSpecProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    BoundedTensorSpecProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoundedTensorSpecProto::GetClassData() const { return &_class_data_; }


void BoundedTensorSpecProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<BoundedTensorSpecProto*>(&to_msg);
  auto& from = static_cast<const BoundedTensorSpecProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.BoundedTensorSpecProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_shape()) {
    _this->_internal_mutable_shape()->::tensorflow::TensorShapeProto::MergeFrom(
        from._internal_shape());
  }
  if (from._internal_has_minimum()) {
    _this->_internal_mutable_minimum()->::tensorflow::TensorProto::MergeFrom(
        from._internal_minimum());
  }
  if (from._internal_has_maximum()) {
    _this->_internal_mutable_maximum()->::tensorflow::TensorProto::MergeFrom(
        from._internal_maximum());
  }
  if (from._internal_dtype() != 0) {
    _this->_internal_set_dtype(from._internal_dtype());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoundedTensorSpecProto::CopyFrom(const BoundedTensorSpecProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.BoundedTensorSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundedTensorSpecProto::IsInitialized() const {
  return true;
}

void BoundedTensorSpecProto::InternalSwap(BoundedTensorSpecProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundedTensorSpecProto, _impl_.dtype_)
      + sizeof(BoundedTensorSpecProto::_impl_.dtype_)
      - PROTOBUF_FIELD_OFFSET(BoundedTensorSpecProto, _impl_.shape_)>(
          reinterpret_cast<char*>(&_impl_.shape_),
          reinterpret_cast<char*>(&other->_impl_.shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundedTensorSpecProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto[9]);
}

// ===================================================================

class TypeSpecProto::_Internal {
 public:
  static const ::tensorflow::StructuredValue& type_state(const TypeSpecProto* msg);
};

const ::tensorflow::StructuredValue&
TypeSpecProto::_Internal::type_state(const TypeSpecProto* msg) {
  return *msg->_impl_.type_state_;
}
TypeSpecProto::TypeSpecProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TypeSpecProto)
}
TypeSpecProto::TypeSpecProto(const TypeSpecProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TypeSpecProto* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_spec_class_name_){}
    , decltype(_impl_.type_state_){nullptr}
    , decltype(_impl_.type_spec_class_){}
    , decltype(_impl_.num_flat_components_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.type_spec_class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_spec_class_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type_spec_class_name().empty()) {
    _this->_impl_.type_spec_class_name_.Set(from._internal_type_spec_class_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_type_state()) {
    _this->_impl_.type_state_ = new ::tensorflow::StructuredValue(*from._impl_.type_state_);
  }
  ::memcpy(&_impl_.type_spec_class_, &from._impl_.type_spec_class_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.num_flat_components_) -
    reinterpret_cast<char*>(&_impl_.type_spec_class_)) + sizeof(_impl_.num_flat_components_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.TypeSpecProto)
}

inline void TypeSpecProto::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_spec_class_name_){}
    , decltype(_impl_.type_state_){nullptr}
    , decltype(_impl_.type_spec_class_){0}
    , decltype(_impl_.num_flat_components_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.type_spec_class_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_spec_class_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TypeSpecProto::~TypeSpecProto() {
  // @@protoc_insertion_point(destructor:tensorflow.TypeSpecProto)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TypeSpecProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.type_spec_class_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.type_state_;
}

void TypeSpecProto::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TypeSpecProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TypeSpecProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_spec_class_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.type_state_ != nullptr) {
    delete _impl_.type_state_;
  }
  _impl_.type_state_ = nullptr;
  ::memset(&_impl_.type_spec_class_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.num_flat_components_) -
      reinterpret_cast<char*>(&_impl_.type_spec_class_)) + sizeof(_impl_.num_flat_components_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypeSpecProto::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.TypeSpecProto.TypeSpecClass type_spec_class = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type_spec_class(static_cast<::tensorflow::TypeSpecProto_TypeSpecClass>(val));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.StructuredValue type_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_state(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type_spec_class_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_type_spec_class_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.TypeSpecProto.type_spec_class_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 num_flat_components = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.num_flat_components_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TypeSpecProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TypeSpecProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TypeSpecProto.TypeSpecClass type_spec_class = 1;
  if (this->_internal_type_spec_class() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type_spec_class(), target);
  }

  // .tensorflow.StructuredValue type_state = 2;
  if (this->_internal_has_type_state()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::type_state(this),
        _Internal::type_state(this).GetCachedSize(), target, stream);
  }

  // string type_spec_class_name = 3;
  if (!this->_internal_type_spec_class_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_spec_class_name().data(), static_cast<int>(this->_internal_type_spec_class_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TypeSpecProto.type_spec_class_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_type_spec_class_name(), target);
  }

  // int32 num_flat_components = 4;
  if (this->_internal_num_flat_components() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_num_flat_components(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TypeSpecProto)
  return target;
}

size_t TypeSpecProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TypeSpecProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type_spec_class_name = 3;
  if (!this->_internal_type_spec_class_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type_spec_class_name());
  }

  // .tensorflow.StructuredValue type_state = 2;
  if (this->_internal_has_type_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.type_state_);
  }

  // .tensorflow.TypeSpecProto.TypeSpecClass type_spec_class = 1;
  if (this->_internal_type_spec_class() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_type_spec_class());
  }

  // int32 num_flat_components = 4;
  if (this->_internal_num_flat_components() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_flat_components());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypeSpecProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TypeSpecProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypeSpecProto::GetClassData() const { return &_class_data_; }


void TypeSpecProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TypeSpecProto*>(&to_msg);
  auto& from = static_cast<const TypeSpecProto&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TypeSpecProto)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type_spec_class_name().empty()) {
    _this->_internal_set_type_spec_class_name(from._internal_type_spec_class_name());
  }
  if (from._internal_has_type_state()) {
    _this->_internal_mutable_type_state()->::tensorflow::StructuredValue::MergeFrom(
        from._internal_type_state());
  }
  if (from._internal_type_spec_class() != 0) {
    _this->_internal_set_type_spec_class(from._internal_type_spec_class());
  }
  if (from._internal_num_flat_components() != 0) {
    _this->_internal_set_num_flat_components(from._internal_num_flat_components());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypeSpecProto::CopyFrom(const TypeSpecProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TypeSpecProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeSpecProto::IsInitialized() const {
  return true;
}

void TypeSpecProto::InternalSwap(TypeSpecProto* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_spec_class_name_, lhs_arena,
      &other->_impl_.type_spec_class_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TypeSpecProto, _impl_.num_flat_components_)
      + sizeof(TypeSpecProto::_impl_.num_flat_components_)
      - PROTOBUF_FIELD_OFFSET(TypeSpecProto, _impl_.type_state_)>(
          reinterpret_cast<char*>(&_impl_.type_state_),
          reinterpret_cast<char*>(&other->_impl_.type_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeSpecProto::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fstruct_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::StructuredValue*
Arena::CreateMaybeMessage< ::tensorflow::StructuredValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::StructuredValue >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::NoneValue*
Arena::CreateMaybeMessage< ::tensorflow::NoneValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::NoneValue >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ListValue*
Arena::CreateMaybeMessage< ::tensorflow::ListValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ListValue >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TupleValue*
Arena::CreateMaybeMessage< ::tensorflow::TupleValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TupleValue >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DictValue_FieldsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tensorflow::DictValue_FieldsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DictValue_FieldsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DictValue*
Arena::CreateMaybeMessage< ::tensorflow::DictValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DictValue >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::PairValue*
Arena::CreateMaybeMessage< ::tensorflow::PairValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::PairValue >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::NamedTupleValue*
Arena::CreateMaybeMessage< ::tensorflow::NamedTupleValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::NamedTupleValue >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TensorSpecProto*
Arena::CreateMaybeMessage< ::tensorflow::TensorSpecProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TensorSpecProto >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::BoundedTensorSpecProto*
Arena::CreateMaybeMessage< ::tensorflow::BoundedTensorSpecProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::BoundedTensorSpecProto >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::TypeSpecProto*
Arena::CreateMaybeMessage< ::tensorflow::TypeSpecProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TypeSpecProto >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
