// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/debug_event.proto

#include "tensorflow/core/protobuf/debug_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR DebugEvent::DebugEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.wall_time_)*/0
  , /*decltype(_impl_.step_)*/int64_t{0}
  , /*decltype(_impl_.what_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct DebugEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugEventDefaultTypeInternal() {}
  union {
    DebugEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugEventDefaultTypeInternal _DebugEvent_default_instance_;
PROTOBUF_CONSTEXPR DebugMetadata::DebugMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tensorflow_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tfdbg_run_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DebugMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebugMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebugMetadataDefaultTypeInternal() {}
  union {
    DebugMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebugMetadataDefaultTypeInternal _DebugMetadata_default_instance_;
PROTOBUF_CONSTEXPR SourceFile::SourceFile(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.lines_)*/{}
  , /*decltype(_impl_.file_path_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.host_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SourceFileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SourceFileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SourceFileDefaultTypeInternal() {}
  union {
    SourceFile _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SourceFileDefaultTypeInternal _SourceFile_default_instance_;
PROTOBUF_CONSTEXPR StackFrameWithId::StackFrameWithId(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.file_line_col_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StackFrameWithIdDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StackFrameWithIdDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StackFrameWithIdDefaultTypeInternal() {}
  union {
    StackFrameWithId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StackFrameWithIdDefaultTypeInternal _StackFrameWithId_default_instance_;
PROTOBUF_CONSTEXPR CodeLocation::CodeLocation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.stack_frame_ids_)*/{}
  , /*decltype(_impl_.host_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CodeLocationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CodeLocationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CodeLocationDefaultTypeInternal() {}
  union {
    CodeLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CodeLocationDefaultTypeInternal _CodeLocation_default_instance_;
PROTOBUF_CONSTEXPR GraphOpCreation::GraphOpCreation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_names_)*/{}
  , /*decltype(_impl_.output_tensor_ids_)*/{}
  , /*decltype(_impl_._output_tensor_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.op_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.op_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.graph_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.graph_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_location_)*/nullptr
  , /*decltype(_impl_.num_outputs_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphOpCreationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphOpCreationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphOpCreationDefaultTypeInternal() {}
  union {
    GraphOpCreation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphOpCreationDefaultTypeInternal _GraphOpCreation_default_instance_;
PROTOBUF_CONSTEXPR DebuggedGraph::DebuggedGraph(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.instrumented_ops_)*/{}
  , /*decltype(_impl_.graph_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.graph_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.original_graph_def_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.instrumented_graph_def_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.outer_context_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DebuggedGraphDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebuggedGraphDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebuggedGraphDefaultTypeInternal() {}
  union {
    DebuggedGraph _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebuggedGraphDefaultTypeInternal _DebuggedGraph_default_instance_;
PROTOBUF_CONSTEXPR DebuggedDevice::DebuggedDevice(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DebuggedDeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DebuggedDeviceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DebuggedDeviceDefaultTypeInternal() {}
  union {
    DebuggedDevice _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DebuggedDeviceDefaultTypeInternal _DebuggedDevice_default_instance_;
PROTOBUF_CONSTEXPR Execution::Execution(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.input_tensor_ids_)*/{}
  , /*decltype(_impl_._input_tensor_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.output_tensor_ids_)*/{}
  , /*decltype(_impl_._output_tensor_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.tensor_protos_)*/{}
  , /*decltype(_impl_.output_tensor_device_ids_)*/{}
  , /*decltype(_impl_._output_tensor_device_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.op_type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.graph_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.code_location_)*/nullptr
  , /*decltype(_impl_.num_outputs_)*/0
  , /*decltype(_impl_.tensor_debug_mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExecutionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExecutionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExecutionDefaultTypeInternal() {}
  union {
    Execution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExecutionDefaultTypeInternal _Execution_default_instance_;
PROTOBUF_CONSTEXPR GraphExecutionTrace::GraphExecutionTrace(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tfdbg_context_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.op_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tensor_proto_)*/nullptr
  , /*decltype(_impl_.output_slot_)*/0
  , /*decltype(_impl_.tensor_debug_mode_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GraphExecutionTraceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GraphExecutionTraceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GraphExecutionTraceDefaultTypeInternal() {}
  union {
    GraphExecutionTrace _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GraphExecutionTraceDefaultTypeInternal _GraphExecutionTrace_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto[10];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugEvent, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugEvent, _impl_.wall_time_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugEvent, _impl_.step_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugEvent, _impl_.what_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugMetadata, _impl_.tensorflow_version_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugMetadata, _impl_.file_version_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebugMetadata, _impl_.tfdbg_run_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SourceFile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SourceFile, _impl_.file_path_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SourceFile, _impl_.host_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SourceFile, _impl_.lines_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::StackFrameWithId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::StackFrameWithId, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::StackFrameWithId, _impl_.file_line_col_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CodeLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::CodeLocation, _impl_.host_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::CodeLocation, _impl_.stack_frame_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphOpCreation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphOpCreation, _impl_.op_type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphOpCreation, _impl_.op_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphOpCreation, _impl_.graph_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphOpCreation, _impl_.graph_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphOpCreation, _impl_.device_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphOpCreation, _impl_.input_names_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphOpCreation, _impl_.num_outputs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphOpCreation, _impl_.code_location_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphOpCreation, _impl_.output_tensor_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedGraph, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedGraph, _impl_.graph_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedGraph, _impl_.graph_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedGraph, _impl_.instrumented_ops_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedGraph, _impl_.original_graph_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedGraph, _impl_.instrumented_graph_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedGraph, _impl_.outer_context_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedDevice, _impl_.device_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::DebuggedDevice, _impl_.device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::Execution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::Execution, _impl_.op_type_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Execution, _impl_.num_outputs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Execution, _impl_.graph_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Execution, _impl_.input_tensor_ids_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Execution, _impl_.output_tensor_ids_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Execution, _impl_.tensor_debug_mode_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Execution, _impl_.tensor_protos_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Execution, _impl_.code_location_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::Execution, _impl_.output_tensor_device_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphExecutionTrace, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphExecutionTrace, _impl_.tfdbg_context_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphExecutionTrace, _impl_.op_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphExecutionTrace, _impl_.output_slot_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphExecutionTrace, _impl_.tensor_debug_mode_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphExecutionTrace, _impl_.tensor_proto_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::GraphExecutionTrace, _impl_.device_name_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::DebugEvent)},
  { 18, -1, -1, sizeof(::tensorflow::DebugMetadata)},
  { 27, -1, -1, sizeof(::tensorflow::SourceFile)},
  { 36, -1, -1, sizeof(::tensorflow::StackFrameWithId)},
  { 44, -1, -1, sizeof(::tensorflow::CodeLocation)},
  { 52, -1, -1, sizeof(::tensorflow::GraphOpCreation)},
  { 67, -1, -1, sizeof(::tensorflow::DebuggedGraph)},
  { 79, -1, -1, sizeof(::tensorflow::DebuggedDevice)},
  { 87, -1, -1, sizeof(::tensorflow::Execution)},
  { 102, -1, -1, sizeof(::tensorflow::GraphExecutionTrace)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_DebugEvent_default_instance_._instance,
  &::tensorflow::_DebugMetadata_default_instance_._instance,
  &::tensorflow::_SourceFile_default_instance_._instance,
  &::tensorflow::_StackFrameWithId_default_instance_._instance,
  &::tensorflow::_CodeLocation_default_instance_._instance,
  &::tensorflow::_GraphOpCreation_default_instance_._instance,
  &::tensorflow::_DebuggedGraph_default_instance_._instance,
  &::tensorflow::_DebuggedDevice_default_instance_._instance,
  &::tensorflow::_Execution_default_instance_._instance,
  &::tensorflow::_GraphExecutionTrace_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*tensorflow/core/protobuf/debug_event.p"
  "roto\022\ntensorflow\0320tensorflow/core/framew"
  "ork/graph_debug_info.proto\032&tensorflow/c"
  "ore/framework/tensor.proto\"\376\003\n\nDebugEven"
  "t\022\021\n\twall_time\030\001 \001(\001\022\014\n\004step\030\002 \001(\003\0223\n\016de"
  "bug_metadata\030\003 \001(\0132\031.tensorflow.DebugMet"
  "adataH\000\022-\n\013source_file\030\004 \001(\0132\026.tensorflo"
  "w.SourceFileH\000\022;\n\023stack_frame_with_id\030\006 "
  "\001(\0132\034.tensorflow.StackFrameWithIdH\000\0228\n\021g"
  "raph_op_creation\030\007 \001(\0132\033.tensorflow.Grap"
  "hOpCreationH\000\0223\n\016debugged_graph\030\010 \001(\0132\031."
  "tensorflow.DebuggedGraphH\000\022*\n\texecution\030"
  "\t \001(\0132\025.tensorflow.ExecutionH\000\022@\n\025graph_"
  "execution_trace\030\n \001(\0132\037.tensorflow.Graph"
  "ExecutionTraceH\000\022\022\n\010graph_id\030\013 \001(\tH\000\0225\n\017"
  "debugged_device\030\014 \001(\0132\032.tensorflow.Debug"
  "gedDeviceH\000B\006\n\004what\"W\n\rDebugMetadata\022\032\n\022"
  "tensorflow_version\030\001 \001(\t\022\024\n\014file_version"
  "\030\002 \001(\t\022\024\n\014tfdbg_run_id\030\003 \001(\t\"A\n\nSourceFi"
  "le\022\021\n\tfile_path\030\001 \001(\t\022\021\n\thost_name\030\002 \001(\t"
  "\022\r\n\005lines\030\003 \003(\t\"]\n\020StackFrameWithId\022\n\n\002i"
  "d\030\001 \001(\t\022=\n\rfile_line_col\030\002 \001(\0132&.tensorf"
  "low.GraphDebugInfo.FileLineCol\":\n\014CodeLo"
  "cation\022\021\n\thost_name\030\001 \001(\t\022\027\n\017stack_frame"
  "_ids\030\002 \003(\t\"\344\001\n\017GraphOpCreation\022\017\n\007op_typ"
  "e\030\001 \001(\t\022\017\n\007op_name\030\002 \001(\t\022\022\n\ngraph_name\030\003"
  " \001(\t\022\020\n\010graph_id\030\004 \001(\t\022\023\n\013device_name\030\005 "
  "\001(\t\022\023\n\013input_names\030\006 \003(\t\022\023\n\013num_outputs\030"
  "\007 \001(\005\022/\n\rcode_location\030\010 \001(\0132\030.tensorflo"
  "w.CodeLocation\022\031\n\021output_tensor_ids\030\t \003("
  "\005\"\245\001\n\rDebuggedGraph\022\020\n\010graph_id\030\001 \001(\t\022\022\n"
  "\ngraph_name\030\002 \001(\t\022\030\n\020instrumented_ops\030\003 "
  "\003(\t\022\032\n\022original_graph_def\030\004 \001(\014\022\036\n\026instr"
  "umented_graph_def\030\005 \001(\014\022\030\n\020outer_context"
  "_id\030\006 \001(\t\"8\n\016DebuggedDevice\022\023\n\013device_na"
  "me\030\001 \001(\t\022\021\n\tdevice_id\030\002 \001(\005\"\263\002\n\tExecutio"
  "n\022\017\n\007op_type\030\001 \001(\t\022\023\n\013num_outputs\030\002 \001(\005\022"
  "\020\n\010graph_id\030\003 \001(\t\022\030\n\020input_tensor_ids\030\004 "
  "\003(\003\022\031\n\021output_tensor_ids\030\005 \003(\003\0226\n\021tensor"
  "_debug_mode\030\006 \001(\0162\033.tensorflow.TensorDeb"
  "ugMode\022.\n\rtensor_protos\030\007 \003(\0132\027.tensorfl"
  "ow.TensorProto\022/\n\rcode_location\030\010 \001(\0132\030."
  "tensorflow.CodeLocation\022 \n\030output_tensor"
  "_device_ids\030\t \003(\005\"\321\001\n\023GraphExecutionTrac"
  "e\022\030\n\020tfdbg_context_id\030\001 \001(\t\022\017\n\007op_name\030\002"
  " \001(\t\022\023\n\013output_slot\030\003 \001(\005\0226\n\021tensor_debu"
  "g_mode\030\004 \001(\0162\033.tensorflow.TensorDebugMod"
  "e\022-\n\014tensor_proto\030\005 \001(\0132\027.tensorflow.Ten"
  "sorProto\022\023\n\013device_name\030\006 \001(\t*\266\001\n\017Tensor"
  "DebugMode\022\017\n\013UNSPECIFIED\020\000\022\r\n\tNO_TENSOR\020"
  "\001\022\017\n\013CURT_HEALTH\020\002\022\022\n\016CONCISE_HEALTH\020\003\022\017"
  "\n\013FULL_HEALTH\020\004\022\t\n\005SHAPE\020\005\022\021\n\rFULL_NUMER"
  "ICS\020\006\022\017\n\013FULL_TENSOR\020\007\022\036\n\032REDUCE_INF_NAN"
  "_THREE_SLOTS\020\010B\203\001\n\023org.tensorflow.utilB\020"
  "DebugEventProtosP\001ZUgithub.com/tensorflo"
  "w/tensorflow/tensorflow/go/core/protobuf"
  "/for_core_protos_go_proto\370\001\001b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_deps[2] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2fgraph_5fdebug_5finfo_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto = {
    false, false, 2276, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto,
    "tensorflow/core/protobuf/debug_event.proto",
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_deps, 2, 10,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TensorDebugMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto[0];
}
bool TensorDebugMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class DebugEvent::_Internal {
 public:
  static const ::tensorflow::DebugMetadata& debug_metadata(const DebugEvent* msg);
  static const ::tensorflow::SourceFile& source_file(const DebugEvent* msg);
  static const ::tensorflow::StackFrameWithId& stack_frame_with_id(const DebugEvent* msg);
  static const ::tensorflow::GraphOpCreation& graph_op_creation(const DebugEvent* msg);
  static const ::tensorflow::DebuggedGraph& debugged_graph(const DebugEvent* msg);
  static const ::tensorflow::Execution& execution(const DebugEvent* msg);
  static const ::tensorflow::GraphExecutionTrace& graph_execution_trace(const DebugEvent* msg);
  static const ::tensorflow::DebuggedDevice& debugged_device(const DebugEvent* msg);
};

const ::tensorflow::DebugMetadata&
DebugEvent::_Internal::debug_metadata(const DebugEvent* msg) {
  return *msg->_impl_.what_.debug_metadata_;
}
const ::tensorflow::SourceFile&
DebugEvent::_Internal::source_file(const DebugEvent* msg) {
  return *msg->_impl_.what_.source_file_;
}
const ::tensorflow::StackFrameWithId&
DebugEvent::_Internal::stack_frame_with_id(const DebugEvent* msg) {
  return *msg->_impl_.what_.stack_frame_with_id_;
}
const ::tensorflow::GraphOpCreation&
DebugEvent::_Internal::graph_op_creation(const DebugEvent* msg) {
  return *msg->_impl_.what_.graph_op_creation_;
}
const ::tensorflow::DebuggedGraph&
DebugEvent::_Internal::debugged_graph(const DebugEvent* msg) {
  return *msg->_impl_.what_.debugged_graph_;
}
const ::tensorflow::Execution&
DebugEvent::_Internal::execution(const DebugEvent* msg) {
  return *msg->_impl_.what_.execution_;
}
const ::tensorflow::GraphExecutionTrace&
DebugEvent::_Internal::graph_execution_trace(const DebugEvent* msg) {
  return *msg->_impl_.what_.graph_execution_trace_;
}
const ::tensorflow::DebuggedDevice&
DebugEvent::_Internal::debugged_device(const DebugEvent* msg) {
  return *msg->_impl_.what_.debugged_device_;
}
void DebugEvent::set_allocated_debug_metadata(::tensorflow::DebugMetadata* debug_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_what();
  if (debug_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(debug_metadata);
    if (message_arena != submessage_arena) {
      debug_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debug_metadata, submessage_arena);
    }
    set_has_debug_metadata();
    _impl_.what_.debug_metadata_ = debug_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.debug_metadata)
}
void DebugEvent::set_allocated_source_file(::tensorflow::SourceFile* source_file) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_what();
  if (source_file) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(source_file);
    if (message_arena != submessage_arena) {
      source_file = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_file, submessage_arena);
    }
    set_has_source_file();
    _impl_.what_.source_file_ = source_file;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.source_file)
}
void DebugEvent::set_allocated_stack_frame_with_id(::tensorflow::StackFrameWithId* stack_frame_with_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_what();
  if (stack_frame_with_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(stack_frame_with_id);
    if (message_arena != submessage_arena) {
      stack_frame_with_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stack_frame_with_id, submessage_arena);
    }
    set_has_stack_frame_with_id();
    _impl_.what_.stack_frame_with_id_ = stack_frame_with_id;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.stack_frame_with_id)
}
void DebugEvent::set_allocated_graph_op_creation(::tensorflow::GraphOpCreation* graph_op_creation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_what();
  if (graph_op_creation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(graph_op_creation);
    if (message_arena != submessage_arena) {
      graph_op_creation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph_op_creation, submessage_arena);
    }
    set_has_graph_op_creation();
    _impl_.what_.graph_op_creation_ = graph_op_creation;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.graph_op_creation)
}
void DebugEvent::set_allocated_debugged_graph(::tensorflow::DebuggedGraph* debugged_graph) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_what();
  if (debugged_graph) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(debugged_graph);
    if (message_arena != submessage_arena) {
      debugged_graph = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debugged_graph, submessage_arena);
    }
    set_has_debugged_graph();
    _impl_.what_.debugged_graph_ = debugged_graph;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.debugged_graph)
}
void DebugEvent::set_allocated_execution(::tensorflow::Execution* execution) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_what();
  if (execution) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(execution);
    if (message_arena != submessage_arena) {
      execution = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, execution, submessage_arena);
    }
    set_has_execution();
    _impl_.what_.execution_ = execution;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.execution)
}
void DebugEvent::set_allocated_graph_execution_trace(::tensorflow::GraphExecutionTrace* graph_execution_trace) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_what();
  if (graph_execution_trace) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(graph_execution_trace);
    if (message_arena != submessage_arena) {
      graph_execution_trace = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, graph_execution_trace, submessage_arena);
    }
    set_has_graph_execution_trace();
    _impl_.what_.graph_execution_trace_ = graph_execution_trace;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.graph_execution_trace)
}
void DebugEvent::set_allocated_debugged_device(::tensorflow::DebuggedDevice* debugged_device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_what();
  if (debugged_device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(debugged_device);
    if (message_arena != submessage_arena) {
      debugged_device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debugged_device, submessage_arena);
    }
    set_has_debugged_device();
    _impl_.what_.debugged_device_ = debugged_device;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.DebugEvent.debugged_device)
}
DebugEvent::DebugEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DebugEvent)
}
DebugEvent::DebugEvent(const DebugEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.wall_time_){}
    , decltype(_impl_.step_){}
    , decltype(_impl_.what_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.wall_time_, &from._impl_.wall_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.step_) -
    reinterpret_cast<char*>(&_impl_.wall_time_)) + sizeof(_impl_.step_));
  clear_has_what();
  switch (from.what_case()) {
    case kDebugMetadata: {
      _this->_internal_mutable_debug_metadata()->::tensorflow::DebugMetadata::MergeFrom(
          from._internal_debug_metadata());
      break;
    }
    case kSourceFile: {
      _this->_internal_mutable_source_file()->::tensorflow::SourceFile::MergeFrom(
          from._internal_source_file());
      break;
    }
    case kStackFrameWithId: {
      _this->_internal_mutable_stack_frame_with_id()->::tensorflow::StackFrameWithId::MergeFrom(
          from._internal_stack_frame_with_id());
      break;
    }
    case kGraphOpCreation: {
      _this->_internal_mutable_graph_op_creation()->::tensorflow::GraphOpCreation::MergeFrom(
          from._internal_graph_op_creation());
      break;
    }
    case kDebuggedGraph: {
      _this->_internal_mutable_debugged_graph()->::tensorflow::DebuggedGraph::MergeFrom(
          from._internal_debugged_graph());
      break;
    }
    case kExecution: {
      _this->_internal_mutable_execution()->::tensorflow::Execution::MergeFrom(
          from._internal_execution());
      break;
    }
    case kGraphExecutionTrace: {
      _this->_internal_mutable_graph_execution_trace()->::tensorflow::GraphExecutionTrace::MergeFrom(
          from._internal_graph_execution_trace());
      break;
    }
    case kGraphId: {
      _this->_internal_set_graph_id(from._internal_graph_id());
      break;
    }
    case kDebuggedDevice: {
      _this->_internal_mutable_debugged_device()->::tensorflow::DebuggedDevice::MergeFrom(
          from._internal_debugged_device());
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.DebugEvent)
}

inline void DebugEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.wall_time_){0}
    , decltype(_impl_.step_){int64_t{0}}
    , decltype(_impl_.what_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_what();
}

DebugEvent::~DebugEvent() {
  // @@protoc_insertion_point(destructor:tensorflow.DebugEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_what()) {
    clear_what();
  }
}

void DebugEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugEvent::clear_what() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.DebugEvent)
  switch (what_case()) {
    case kDebugMetadata: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.what_.debug_metadata_;
      }
      break;
    }
    case kSourceFile: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.what_.source_file_;
      }
      break;
    }
    case kStackFrameWithId: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.what_.stack_frame_with_id_;
      }
      break;
    }
    case kGraphOpCreation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.what_.graph_op_creation_;
      }
      break;
    }
    case kDebuggedGraph: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.what_.debugged_graph_;
      }
      break;
    }
    case kExecution: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.what_.execution_;
      }
      break;
    }
    case kGraphExecutionTrace: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.what_.graph_execution_trace_;
      }
      break;
    }
    case kGraphId: {
      _impl_.what_.graph_id_.Destroy();
      break;
    }
    case kDebuggedDevice: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.what_.debugged_device_;
      }
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = WHAT_NOT_SET;
}


void DebugEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DebugEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.wall_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.step_) -
      reinterpret_cast<char*>(&_impl_.wall_time_)) + sizeof(_impl_.step_));
  clear_what();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double wall_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.wall_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int64 step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.DebugMetadata debug_metadata = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_debug_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.SourceFile source_file = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_file(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.StackFrameWithId stack_frame_with_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_stack_frame_with_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.GraphOpCreation graph_op_creation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph_op_creation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.DebuggedGraph debugged_graph = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_debugged_graph(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.Execution execution = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_execution(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.GraphExecutionTrace graph_execution_trace = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_graph_execution_trace(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string graph_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_graph_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.DebugEvent.graph_id"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.DebuggedDevice debugged_device = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_debugged_device(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DebugEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double wall_time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_wall_time = this->_internal_wall_time();
  uint64_t raw_wall_time;
  memcpy(&raw_wall_time, &tmp_wall_time, sizeof(tmp_wall_time));
  if (raw_wall_time != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_wall_time(), target);
  }

  // int64 step = 2;
  if (this->_internal_step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_step(), target);
  }

  // .tensorflow.DebugMetadata debug_metadata = 3;
  if (_internal_has_debug_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::debug_metadata(this),
        _Internal::debug_metadata(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.SourceFile source_file = 4;
  if (_internal_has_source_file()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::source_file(this),
        _Internal::source_file(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.StackFrameWithId stack_frame_with_id = 6;
  if (_internal_has_stack_frame_with_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::stack_frame_with_id(this),
        _Internal::stack_frame_with_id(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.GraphOpCreation graph_op_creation = 7;
  if (_internal_has_graph_op_creation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::graph_op_creation(this),
        _Internal::graph_op_creation(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.DebuggedGraph debugged_graph = 8;
  if (_internal_has_debugged_graph()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::debugged_graph(this),
        _Internal::debugged_graph(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.Execution execution = 9;
  if (_internal_has_execution()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::execution(this),
        _Internal::execution(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.GraphExecutionTrace graph_execution_trace = 10;
  if (_internal_has_graph_execution_trace()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::graph_execution_trace(this),
        _Internal::graph_execution_trace(this).GetCachedSize(), target, stream);
  }

  // string graph_id = 11;
  if (_internal_has_graph_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_graph_id().data(), static_cast<int>(this->_internal_graph_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugEvent.graph_id");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_graph_id(), target);
  }

  // .tensorflow.DebuggedDevice debugged_device = 12;
  if (_internal_has_debugged_device()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::debugged_device(this),
        _Internal::debugged_device(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DebugEvent)
  return target;
}

size_t DebugEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DebugEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double wall_time = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_wall_time = this->_internal_wall_time();
  uint64_t raw_wall_time;
  memcpy(&raw_wall_time, &tmp_wall_time, sizeof(tmp_wall_time));
  if (raw_wall_time != 0) {
    total_size += 1 + 8;
  }

  // int64 step = 2;
  if (this->_internal_step() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_step());
  }

  switch (what_case()) {
    // .tensorflow.DebugMetadata debug_metadata = 3;
    case kDebugMetadata: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.what_.debug_metadata_);
      break;
    }
    // .tensorflow.SourceFile source_file = 4;
    case kSourceFile: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.what_.source_file_);
      break;
    }
    // .tensorflow.StackFrameWithId stack_frame_with_id = 6;
    case kStackFrameWithId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.what_.stack_frame_with_id_);
      break;
    }
    // .tensorflow.GraphOpCreation graph_op_creation = 7;
    case kGraphOpCreation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.what_.graph_op_creation_);
      break;
    }
    // .tensorflow.DebuggedGraph debugged_graph = 8;
    case kDebuggedGraph: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.what_.debugged_graph_);
      break;
    }
    // .tensorflow.Execution execution = 9;
    case kExecution: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.what_.execution_);
      break;
    }
    // .tensorflow.GraphExecutionTrace graph_execution_trace = 10;
    case kGraphExecutionTrace: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.what_.graph_execution_trace_);
      break;
    }
    // string graph_id = 11;
    case kGraphId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_graph_id());
      break;
    }
    // .tensorflow.DebuggedDevice debugged_device = 12;
    case kDebuggedDevice: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.what_.debugged_device_);
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugEvent::GetClassData() const { return &_class_data_; }


void DebugEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugEvent*>(&to_msg);
  auto& from = static_cast<const DebugEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DebugEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_wall_time = from._internal_wall_time();
  uint64_t raw_wall_time;
  memcpy(&raw_wall_time, &tmp_wall_time, sizeof(tmp_wall_time));
  if (raw_wall_time != 0) {
    _this->_internal_set_wall_time(from._internal_wall_time());
  }
  if (from._internal_step() != 0) {
    _this->_internal_set_step(from._internal_step());
  }
  switch (from.what_case()) {
    case kDebugMetadata: {
      _this->_internal_mutable_debug_metadata()->::tensorflow::DebugMetadata::MergeFrom(
          from._internal_debug_metadata());
      break;
    }
    case kSourceFile: {
      _this->_internal_mutable_source_file()->::tensorflow::SourceFile::MergeFrom(
          from._internal_source_file());
      break;
    }
    case kStackFrameWithId: {
      _this->_internal_mutable_stack_frame_with_id()->::tensorflow::StackFrameWithId::MergeFrom(
          from._internal_stack_frame_with_id());
      break;
    }
    case kGraphOpCreation: {
      _this->_internal_mutable_graph_op_creation()->::tensorflow::GraphOpCreation::MergeFrom(
          from._internal_graph_op_creation());
      break;
    }
    case kDebuggedGraph: {
      _this->_internal_mutable_debugged_graph()->::tensorflow::DebuggedGraph::MergeFrom(
          from._internal_debugged_graph());
      break;
    }
    case kExecution: {
      _this->_internal_mutable_execution()->::tensorflow::Execution::MergeFrom(
          from._internal_execution());
      break;
    }
    case kGraphExecutionTrace: {
      _this->_internal_mutable_graph_execution_trace()->::tensorflow::GraphExecutionTrace::MergeFrom(
          from._internal_graph_execution_trace());
      break;
    }
    case kGraphId: {
      _this->_internal_set_graph_id(from._internal_graph_id());
      break;
    }
    case kDebuggedDevice: {
      _this->_internal_mutable_debugged_device()->::tensorflow::DebuggedDevice::MergeFrom(
          from._internal_debugged_device());
      break;
    }
    case WHAT_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugEvent::CopyFrom(const DebugEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DebugEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugEvent::IsInitialized() const {
  return true;
}

void DebugEvent::InternalSwap(DebugEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DebugEvent, _impl_.step_)
      + sizeof(DebugEvent::_impl_.step_)
      - PROTOBUF_FIELD_OFFSET(DebugEvent, _impl_.wall_time_)>(
          reinterpret_cast<char*>(&_impl_.wall_time_),
          reinterpret_cast<char*>(&other->_impl_.wall_time_));
  swap(_impl_.what_, other->_impl_.what_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto[0]);
}

// ===================================================================

class DebugMetadata::_Internal {
 public:
};

DebugMetadata::DebugMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DebugMetadata)
}
DebugMetadata::DebugMetadata(const DebugMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebugMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tensorflow_version_){}
    , decltype(_impl_.file_version_){}
    , decltype(_impl_.tfdbg_run_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tensorflow_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tensorflow_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tensorflow_version().empty()) {
    _this->_impl_.tensorflow_version_.Set(from._internal_tensorflow_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.file_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_version().empty()) {
    _this->_impl_.file_version_.Set(from._internal_file_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.tfdbg_run_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tfdbg_run_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tfdbg_run_id().empty()) {
    _this->_impl_.tfdbg_run_id_.Set(from._internal_tfdbg_run_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.DebugMetadata)
}

inline void DebugMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tensorflow_version_){}
    , decltype(_impl_.file_version_){}
    , decltype(_impl_.tfdbg_run_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tensorflow_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tensorflow_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.file_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tfdbg_run_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tfdbg_run_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DebugMetadata::~DebugMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.DebugMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebugMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tensorflow_version_.Destroy();
  _impl_.file_version_.Destroy();
  _impl_.tfdbg_run_id_.Destroy();
}

void DebugMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebugMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DebugMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tensorflow_version_.ClearToEmpty();
  _impl_.file_version_.ClearToEmpty();
  _impl_.tfdbg_run_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebugMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tensorflow_version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tensorflow_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.DebugMetadata.tensorflow_version"));
        } else
          goto handle_unusual;
        continue;
      // string file_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_file_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.DebugMetadata.file_version"));
        } else
          goto handle_unusual;
        continue;
      // string tfdbg_run_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_tfdbg_run_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.DebugMetadata.tfdbg_run_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebugMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DebugMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tensorflow_version = 1;
  if (!this->_internal_tensorflow_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tensorflow_version().data(), static_cast<int>(this->_internal_tensorflow_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugMetadata.tensorflow_version");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tensorflow_version(), target);
  }

  // string file_version = 2;
  if (!this->_internal_file_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_version().data(), static_cast<int>(this->_internal_file_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugMetadata.file_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_version(), target);
  }

  // string tfdbg_run_id = 3;
  if (!this->_internal_tfdbg_run_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tfdbg_run_id().data(), static_cast<int>(this->_internal_tfdbg_run_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebugMetadata.tfdbg_run_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_tfdbg_run_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DebugMetadata)
  return target;
}

size_t DebugMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DebugMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tensorflow_version = 1;
  if (!this->_internal_tensorflow_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tensorflow_version());
  }

  // string file_version = 2;
  if (!this->_internal_file_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_version());
  }

  // string tfdbg_run_id = 3;
  if (!this->_internal_tfdbg_run_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tfdbg_run_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebugMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebugMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebugMetadata::GetClassData() const { return &_class_data_; }


void DebugMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebugMetadata*>(&to_msg);
  auto& from = static_cast<const DebugMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DebugMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tensorflow_version().empty()) {
    _this->_internal_set_tensorflow_version(from._internal_tensorflow_version());
  }
  if (!from._internal_file_version().empty()) {
    _this->_internal_set_file_version(from._internal_file_version());
  }
  if (!from._internal_tfdbg_run_id().empty()) {
    _this->_internal_set_tfdbg_run_id(from._internal_tfdbg_run_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebugMetadata::CopyFrom(const DebugMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DebugMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebugMetadata::IsInitialized() const {
  return true;
}

void DebugMetadata::InternalSwap(DebugMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tensorflow_version_, lhs_arena,
      &other->_impl_.tensorflow_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_version_, lhs_arena,
      &other->_impl_.file_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tfdbg_run_id_, lhs_arena,
      &other->_impl_.tfdbg_run_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DebugMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto[1]);
}

// ===================================================================

class SourceFile::_Internal {
 public:
};

SourceFile::SourceFile(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SourceFile)
}
SourceFile::SourceFile(const SourceFile& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SourceFile* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.lines_){from._impl_.lines_}
    , decltype(_impl_.file_path_){}
    , decltype(_impl_.host_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_file_path().empty()) {
    _this->_impl_.file_path_.Set(from._internal_file_path(), 
      _this->GetArenaForAllocation());
  }
  _impl_.host_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host_name().empty()) {
    _this->_impl_.host_name_.Set(from._internal_host_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.SourceFile)
}

inline void SourceFile::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.lines_){arena}
    , decltype(_impl_.file_path_){}
    , decltype(_impl_.host_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.file_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.file_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SourceFile::~SourceFile() {
  // @@protoc_insertion_point(destructor:tensorflow.SourceFile)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SourceFile::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.lines_.~RepeatedPtrField();
  _impl_.file_path_.Destroy();
  _impl_.host_name_.Destroy();
}

void SourceFile::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SourceFile::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SourceFile)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.lines_.Clear();
  _impl_.file_path_.ClearToEmpty();
  _impl_.host_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SourceFile::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string file_path = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_file_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.SourceFile.file_path"));
        } else
          goto handle_unusual;
        continue;
      // string host_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_host_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.SourceFile.host_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string lines = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_lines();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.SourceFile.lines"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SourceFile::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SourceFile)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_path = 1;
  if (!this->_internal_file_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_path().data(), static_cast<int>(this->_internal_file_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SourceFile.file_path");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_path(), target);
  }

  // string host_name = 2;
  if (!this->_internal_host_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_name().data(), static_cast<int>(this->_internal_host_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SourceFile.host_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_host_name(), target);
  }

  // repeated string lines = 3;
  for (int i = 0, n = this->_internal_lines_size(); i < n; i++) {
    const auto& s = this->_internal_lines(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SourceFile.lines");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SourceFile)
  return target;
}

size_t SourceFile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SourceFile)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string lines = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.lines_.size());
  for (int i = 0, n = _impl_.lines_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.lines_.Get(i));
  }

  // string file_path = 1;
  if (!this->_internal_file_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_path());
  }

  // string host_name = 2;
  if (!this->_internal_host_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SourceFile::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SourceFile::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SourceFile::GetClassData() const { return &_class_data_; }


void SourceFile::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SourceFile*>(&to_msg);
  auto& from = static_cast<const SourceFile&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SourceFile)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.lines_.MergeFrom(from._impl_.lines_);
  if (!from._internal_file_path().empty()) {
    _this->_internal_set_file_path(from._internal_file_path());
  }
  if (!from._internal_host_name().empty()) {
    _this->_internal_set_host_name(from._internal_host_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SourceFile::CopyFrom(const SourceFile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SourceFile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SourceFile::IsInitialized() const {
  return true;
}

void SourceFile::InternalSwap(SourceFile* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.lines_.InternalSwap(&other->_impl_.lines_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.file_path_, lhs_arena,
      &other->_impl_.file_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_name_, lhs_arena,
      &other->_impl_.host_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SourceFile::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto[2]);
}

// ===================================================================

class StackFrameWithId::_Internal {
 public:
  static const ::tensorflow::GraphDebugInfo_FileLineCol& file_line_col(const StackFrameWithId* msg);
};

const ::tensorflow::GraphDebugInfo_FileLineCol&
StackFrameWithId::_Internal::file_line_col(const StackFrameWithId* msg) {
  return *msg->_impl_.file_line_col_;
}
void StackFrameWithId::clear_file_line_col() {
  if (GetArenaForAllocation() == nullptr && _impl_.file_line_col_ != nullptr) {
    delete _impl_.file_line_col_;
  }
  _impl_.file_line_col_ = nullptr;
}
StackFrameWithId::StackFrameWithId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.StackFrameWithId)
}
StackFrameWithId::StackFrameWithId(const StackFrameWithId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StackFrameWithId* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.file_line_col_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_file_line_col()) {
    _this->_impl_.file_line_col_ = new ::tensorflow::GraphDebugInfo_FileLineCol(*from._impl_.file_line_col_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.StackFrameWithId)
}

inline void StackFrameWithId::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.file_line_col_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StackFrameWithId::~StackFrameWithId() {
  // @@protoc_insertion_point(destructor:tensorflow.StackFrameWithId)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StackFrameWithId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.file_line_col_;
}

void StackFrameWithId::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StackFrameWithId::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.StackFrameWithId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.file_line_col_ != nullptr) {
    delete _impl_.file_line_col_;
  }
  _impl_.file_line_col_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StackFrameWithId::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.StackFrameWithId.id"));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.GraphDebugInfo.FileLineCol file_line_col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_file_line_col(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StackFrameWithId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.StackFrameWithId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.StackFrameWithId.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .tensorflow.GraphDebugInfo.FileLineCol file_line_col = 2;
  if (this->_internal_has_file_line_col()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::file_line_col(this),
        _Internal::file_line_col(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.StackFrameWithId)
  return target;
}

size_t StackFrameWithId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.StackFrameWithId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .tensorflow.GraphDebugInfo.FileLineCol file_line_col = 2;
  if (this->_internal_has_file_line_col()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.file_line_col_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StackFrameWithId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StackFrameWithId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StackFrameWithId::GetClassData() const { return &_class_data_; }


void StackFrameWithId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StackFrameWithId*>(&to_msg);
  auto& from = static_cast<const StackFrameWithId&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.StackFrameWithId)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_has_file_line_col()) {
    _this->_internal_mutable_file_line_col()->::tensorflow::GraphDebugInfo_FileLineCol::MergeFrom(
        from._internal_file_line_col());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StackFrameWithId::CopyFrom(const StackFrameWithId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.StackFrameWithId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StackFrameWithId::IsInitialized() const {
  return true;
}

void StackFrameWithId::InternalSwap(StackFrameWithId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  swap(_impl_.file_line_col_, other->_impl_.file_line_col_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StackFrameWithId::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto[3]);
}

// ===================================================================

class CodeLocation::_Internal {
 public:
};

CodeLocation::CodeLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.CodeLocation)
}
CodeLocation::CodeLocation(const CodeLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CodeLocation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.stack_frame_ids_){from._impl_.stack_frame_ids_}
    , decltype(_impl_.host_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.host_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_host_name().empty()) {
    _this->_impl_.host_name_.Set(from._internal_host_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.CodeLocation)
}

inline void CodeLocation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.stack_frame_ids_){arena}
    , decltype(_impl_.host_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.host_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.host_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CodeLocation::~CodeLocation() {
  // @@protoc_insertion_point(destructor:tensorflow.CodeLocation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CodeLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.stack_frame_ids_.~RepeatedPtrField();
  _impl_.host_name_.Destroy();
}

void CodeLocation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CodeLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.CodeLocation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.stack_frame_ids_.Clear();
  _impl_.host_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CodeLocation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string host_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_host_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.CodeLocation.host_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string stack_frame_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_stack_frame_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.CodeLocation.stack_frame_ids"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CodeLocation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.CodeLocation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string host_name = 1;
  if (!this->_internal_host_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_name().data(), static_cast<int>(this->_internal_host_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CodeLocation.host_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_host_name(), target);
  }

  // repeated string stack_frame_ids = 2;
  for (int i = 0, n = this->_internal_stack_frame_ids_size(); i < n; i++) {
    const auto& s = this->_internal_stack_frame_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.CodeLocation.stack_frame_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.CodeLocation)
  return target;
}

size_t CodeLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.CodeLocation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string stack_frame_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.stack_frame_ids_.size());
  for (int i = 0, n = _impl_.stack_frame_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.stack_frame_ids_.Get(i));
  }

  // string host_name = 1;
  if (!this->_internal_host_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CodeLocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CodeLocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CodeLocation::GetClassData() const { return &_class_data_; }


void CodeLocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CodeLocation*>(&to_msg);
  auto& from = static_cast<const CodeLocation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.CodeLocation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.stack_frame_ids_.MergeFrom(from._impl_.stack_frame_ids_);
  if (!from._internal_host_name().empty()) {
    _this->_internal_set_host_name(from._internal_host_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CodeLocation::CopyFrom(const CodeLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.CodeLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CodeLocation::IsInitialized() const {
  return true;
}

void CodeLocation::InternalSwap(CodeLocation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.stack_frame_ids_.InternalSwap(&other->_impl_.stack_frame_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.host_name_, lhs_arena,
      &other->_impl_.host_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata CodeLocation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto[4]);
}

// ===================================================================

class GraphOpCreation::_Internal {
 public:
  static const ::tensorflow::CodeLocation& code_location(const GraphOpCreation* msg);
};

const ::tensorflow::CodeLocation&
GraphOpCreation::_Internal::code_location(const GraphOpCreation* msg) {
  return *msg->_impl_.code_location_;
}
GraphOpCreation::GraphOpCreation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphOpCreation)
}
GraphOpCreation::GraphOpCreation(const GraphOpCreation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GraphOpCreation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_names_){from._impl_.input_names_}
    , decltype(_impl_.output_tensor_ids_){from._impl_.output_tensor_ids_}
    , /*decltype(_impl_._output_tensor_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.op_type_){}
    , decltype(_impl_.op_name_){}
    , decltype(_impl_.graph_name_){}
    , decltype(_impl_.graph_id_){}
    , decltype(_impl_.device_name_){}
    , decltype(_impl_.code_location_){nullptr}
    , decltype(_impl_.num_outputs_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.op_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_op_type().empty()) {
    _this->_impl_.op_type_.Set(from._internal_op_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.op_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_op_name().empty()) {
    _this->_impl_.op_name_.Set(from._internal_op_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.graph_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.graph_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_graph_name().empty()) {
    _this->_impl_.graph_name_.Set(from._internal_graph_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.graph_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.graph_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_graph_id().empty()) {
    _this->_impl_.graph_id_.Set(from._internal_graph_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_name().empty()) {
    _this->_impl_.device_name_.Set(from._internal_device_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_code_location()) {
    _this->_impl_.code_location_ = new ::tensorflow::CodeLocation(*from._impl_.code_location_);
  }
  _this->_impl_.num_outputs_ = from._impl_.num_outputs_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphOpCreation)
}

inline void GraphOpCreation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.input_names_){arena}
    , decltype(_impl_.output_tensor_ids_){arena}
    , /*decltype(_impl_._output_tensor_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.op_type_){}
    , decltype(_impl_.op_name_){}
    , decltype(_impl_.graph_name_){}
    , decltype(_impl_.graph_id_){}
    , decltype(_impl_.device_name_){}
    , decltype(_impl_.code_location_){nullptr}
    , decltype(_impl_.num_outputs_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.op_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.op_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.graph_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.graph_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.graph_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.graph_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GraphOpCreation::~GraphOpCreation() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphOpCreation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphOpCreation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_names_.~RepeatedPtrField();
  _impl_.output_tensor_ids_.~RepeatedField();
  _impl_.op_type_.Destroy();
  _impl_.op_name_.Destroy();
  _impl_.graph_name_.Destroy();
  _impl_.graph_id_.Destroy();
  _impl_.device_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.code_location_;
}

void GraphOpCreation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphOpCreation::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphOpCreation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_names_.Clear();
  _impl_.output_tensor_ids_.Clear();
  _impl_.op_type_.ClearToEmpty();
  _impl_.op_name_.ClearToEmpty();
  _impl_.graph_name_.ClearToEmpty();
  _impl_.graph_id_.ClearToEmpty();
  _impl_.device_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.code_location_ != nullptr) {
    delete _impl_.code_location_;
  }
  _impl_.code_location_ = nullptr;
  _impl_.num_outputs_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphOpCreation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string op_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_op_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.GraphOpCreation.op_type"));
        } else
          goto handle_unusual;
        continue;
      // string op_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_op_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.GraphOpCreation.op_name"));
        } else
          goto handle_unusual;
        continue;
      // string graph_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_graph_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.GraphOpCreation.graph_name"));
        } else
          goto handle_unusual;
        continue;
      // string graph_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_graph_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.GraphOpCreation.graph_id"));
        } else
          goto handle_unusual;
        continue;
      // string device_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_device_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.GraphOpCreation.device_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string input_names = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_input_names();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.GraphOpCreation.input_names"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 num_outputs = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.num_outputs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.CodeLocation code_location = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_code_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 output_tensor_ids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_output_tensor_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_output_tensor_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphOpCreation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphOpCreation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string op_type = 1;
  if (!this->_internal_op_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op_type().data(), static_cast<int>(this->_internal_op_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.op_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_op_type(), target);
  }

  // string op_name = 2;
  if (!this->_internal_op_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op_name().data(), static_cast<int>(this->_internal_op_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.op_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_op_name(), target);
  }

  // string graph_name = 3;
  if (!this->_internal_graph_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_graph_name().data(), static_cast<int>(this->_internal_graph_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.graph_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_graph_name(), target);
  }

  // string graph_id = 4;
  if (!this->_internal_graph_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_graph_id().data(), static_cast<int>(this->_internal_graph_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.graph_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_graph_id(), target);
  }

  // string device_name = 5;
  if (!this->_internal_device_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.device_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_device_name(), target);
  }

  // repeated string input_names = 6;
  for (int i = 0, n = this->_internal_input_names_size(); i < n; i++) {
    const auto& s = this->_internal_input_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphOpCreation.input_names");
    target = stream->WriteString(6, s, target);
  }

  // int32 num_outputs = 7;
  if (this->_internal_num_outputs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_num_outputs(), target);
  }

  // .tensorflow.CodeLocation code_location = 8;
  if (this->_internal_has_code_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::code_location(this),
        _Internal::code_location(this).GetCachedSize(), target, stream);
  }

  // repeated int32 output_tensor_ids = 9;
  {
    int byte_size = _impl_._output_tensor_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_output_tensor_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphOpCreation)
  return target;
}

size_t GraphOpCreation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphOpCreation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string input_names = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.input_names_.size());
  for (int i = 0, n = _impl_.input_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.input_names_.Get(i));
  }

  // repeated int32 output_tensor_ids = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.output_tensor_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._output_tensor_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string op_type = 1;
  if (!this->_internal_op_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_type());
  }

  // string op_name = 2;
  if (!this->_internal_op_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_name());
  }

  // string graph_name = 3;
  if (!this->_internal_graph_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_graph_name());
  }

  // string graph_id = 4;
  if (!this->_internal_graph_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_graph_id());
  }

  // string device_name = 5;
  if (!this->_internal_device_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_name());
  }

  // .tensorflow.CodeLocation code_location = 8;
  if (this->_internal_has_code_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.code_location_);
  }

  // int32 num_outputs = 7;
  if (this->_internal_num_outputs() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_outputs());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphOpCreation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GraphOpCreation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphOpCreation::GetClassData() const { return &_class_data_; }


void GraphOpCreation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GraphOpCreation*>(&to_msg);
  auto& from = static_cast<const GraphOpCreation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphOpCreation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.input_names_.MergeFrom(from._impl_.input_names_);
  _this->_impl_.output_tensor_ids_.MergeFrom(from._impl_.output_tensor_ids_);
  if (!from._internal_op_type().empty()) {
    _this->_internal_set_op_type(from._internal_op_type());
  }
  if (!from._internal_op_name().empty()) {
    _this->_internal_set_op_name(from._internal_op_name());
  }
  if (!from._internal_graph_name().empty()) {
    _this->_internal_set_graph_name(from._internal_graph_name());
  }
  if (!from._internal_graph_id().empty()) {
    _this->_internal_set_graph_id(from._internal_graph_id());
  }
  if (!from._internal_device_name().empty()) {
    _this->_internal_set_device_name(from._internal_device_name());
  }
  if (from._internal_has_code_location()) {
    _this->_internal_mutable_code_location()->::tensorflow::CodeLocation::MergeFrom(
        from._internal_code_location());
  }
  if (from._internal_num_outputs() != 0) {
    _this->_internal_set_num_outputs(from._internal_num_outputs());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphOpCreation::CopyFrom(const GraphOpCreation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphOpCreation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphOpCreation::IsInitialized() const {
  return true;
}

void GraphOpCreation::InternalSwap(GraphOpCreation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.input_names_.InternalSwap(&other->_impl_.input_names_);
  _impl_.output_tensor_ids_.InternalSwap(&other->_impl_.output_tensor_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.op_type_, lhs_arena,
      &other->_impl_.op_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.op_name_, lhs_arena,
      &other->_impl_.op_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.graph_name_, lhs_arena,
      &other->_impl_.graph_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.graph_id_, lhs_arena,
      &other->_impl_.graph_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_name_, lhs_arena,
      &other->_impl_.device_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphOpCreation, _impl_.num_outputs_)
      + sizeof(GraphOpCreation::_impl_.num_outputs_)
      - PROTOBUF_FIELD_OFFSET(GraphOpCreation, _impl_.code_location_)>(
          reinterpret_cast<char*>(&_impl_.code_location_),
          reinterpret_cast<char*>(&other->_impl_.code_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphOpCreation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto[5]);
}

// ===================================================================

class DebuggedGraph::_Internal {
 public:
};

DebuggedGraph::DebuggedGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DebuggedGraph)
}
DebuggedGraph::DebuggedGraph(const DebuggedGraph& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebuggedGraph* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.instrumented_ops_){from._impl_.instrumented_ops_}
    , decltype(_impl_.graph_id_){}
    , decltype(_impl_.graph_name_){}
    , decltype(_impl_.original_graph_def_){}
    , decltype(_impl_.instrumented_graph_def_){}
    , decltype(_impl_.outer_context_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.graph_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.graph_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_graph_id().empty()) {
    _this->_impl_.graph_id_.Set(from._internal_graph_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.graph_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.graph_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_graph_name().empty()) {
    _this->_impl_.graph_name_.Set(from._internal_graph_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.original_graph_def_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.original_graph_def_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_original_graph_def().empty()) {
    _this->_impl_.original_graph_def_.Set(from._internal_original_graph_def(), 
      _this->GetArenaForAllocation());
  }
  _impl_.instrumented_graph_def_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrumented_graph_def_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instrumented_graph_def().empty()) {
    _this->_impl_.instrumented_graph_def_.Set(from._internal_instrumented_graph_def(), 
      _this->GetArenaForAllocation());
  }
  _impl_.outer_context_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outer_context_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_outer_context_id().empty()) {
    _this->_impl_.outer_context_id_.Set(from._internal_outer_context_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.DebuggedGraph)
}

inline void DebuggedGraph::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.instrumented_ops_){arena}
    , decltype(_impl_.graph_id_){}
    , decltype(_impl_.graph_name_){}
    , decltype(_impl_.original_graph_def_){}
    , decltype(_impl_.instrumented_graph_def_){}
    , decltype(_impl_.outer_context_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.graph_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.graph_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.graph_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.graph_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.original_graph_def_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.original_graph_def_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.instrumented_graph_def_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.instrumented_graph_def_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.outer_context_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.outer_context_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DebuggedGraph::~DebuggedGraph() {
  // @@protoc_insertion_point(destructor:tensorflow.DebuggedGraph)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebuggedGraph::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.instrumented_ops_.~RepeatedPtrField();
  _impl_.graph_id_.Destroy();
  _impl_.graph_name_.Destroy();
  _impl_.original_graph_def_.Destroy();
  _impl_.instrumented_graph_def_.Destroy();
  _impl_.outer_context_id_.Destroy();
}

void DebuggedGraph::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebuggedGraph::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DebuggedGraph)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrumented_ops_.Clear();
  _impl_.graph_id_.ClearToEmpty();
  _impl_.graph_name_.ClearToEmpty();
  _impl_.original_graph_def_.ClearToEmpty();
  _impl_.instrumented_graph_def_.ClearToEmpty();
  _impl_.outer_context_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebuggedGraph::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string graph_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_graph_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.DebuggedGraph.graph_id"));
        } else
          goto handle_unusual;
        continue;
      // string graph_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_graph_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.DebuggedGraph.graph_name"));
        } else
          goto handle_unusual;
        continue;
      // repeated string instrumented_ops = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_instrumented_ops();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.DebuggedGraph.instrumented_ops"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes original_graph_def = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_original_graph_def();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes instrumented_graph_def = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_instrumented_graph_def();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string outer_context_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_outer_context_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.DebuggedGraph.outer_context_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebuggedGraph::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DebuggedGraph)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string graph_id = 1;
  if (!this->_internal_graph_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_graph_id().data(), static_cast<int>(this->_internal_graph_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedGraph.graph_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_graph_id(), target);
  }

  // string graph_name = 2;
  if (!this->_internal_graph_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_graph_name().data(), static_cast<int>(this->_internal_graph_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedGraph.graph_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_graph_name(), target);
  }

  // repeated string instrumented_ops = 3;
  for (int i = 0, n = this->_internal_instrumented_ops_size(); i < n; i++) {
    const auto& s = this->_internal_instrumented_ops(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedGraph.instrumented_ops");
    target = stream->WriteString(3, s, target);
  }

  // bytes original_graph_def = 4;
  if (!this->_internal_original_graph_def().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_original_graph_def(), target);
  }

  // bytes instrumented_graph_def = 5;
  if (!this->_internal_instrumented_graph_def().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_instrumented_graph_def(), target);
  }

  // string outer_context_id = 6;
  if (!this->_internal_outer_context_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_outer_context_id().data(), static_cast<int>(this->_internal_outer_context_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedGraph.outer_context_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_outer_context_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DebuggedGraph)
  return target;
}

size_t DebuggedGraph::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DebuggedGraph)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string instrumented_ops = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.instrumented_ops_.size());
  for (int i = 0, n = _impl_.instrumented_ops_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.instrumented_ops_.Get(i));
  }

  // string graph_id = 1;
  if (!this->_internal_graph_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_graph_id());
  }

  // string graph_name = 2;
  if (!this->_internal_graph_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_graph_name());
  }

  // bytes original_graph_def = 4;
  if (!this->_internal_original_graph_def().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_original_graph_def());
  }

  // bytes instrumented_graph_def = 5;
  if (!this->_internal_instrumented_graph_def().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_instrumented_graph_def());
  }

  // string outer_context_id = 6;
  if (!this->_internal_outer_context_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_outer_context_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebuggedGraph::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebuggedGraph::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebuggedGraph::GetClassData() const { return &_class_data_; }


void DebuggedGraph::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebuggedGraph*>(&to_msg);
  auto& from = static_cast<const DebuggedGraph&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DebuggedGraph)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.instrumented_ops_.MergeFrom(from._impl_.instrumented_ops_);
  if (!from._internal_graph_id().empty()) {
    _this->_internal_set_graph_id(from._internal_graph_id());
  }
  if (!from._internal_graph_name().empty()) {
    _this->_internal_set_graph_name(from._internal_graph_name());
  }
  if (!from._internal_original_graph_def().empty()) {
    _this->_internal_set_original_graph_def(from._internal_original_graph_def());
  }
  if (!from._internal_instrumented_graph_def().empty()) {
    _this->_internal_set_instrumented_graph_def(from._internal_instrumented_graph_def());
  }
  if (!from._internal_outer_context_id().empty()) {
    _this->_internal_set_outer_context_id(from._internal_outer_context_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebuggedGraph::CopyFrom(const DebuggedGraph& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DebuggedGraph)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebuggedGraph::IsInitialized() const {
  return true;
}

void DebuggedGraph::InternalSwap(DebuggedGraph* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instrumented_ops_.InternalSwap(&other->_impl_.instrumented_ops_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.graph_id_, lhs_arena,
      &other->_impl_.graph_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.graph_name_, lhs_arena,
      &other->_impl_.graph_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.original_graph_def_, lhs_arena,
      &other->_impl_.original_graph_def_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.instrumented_graph_def_, lhs_arena,
      &other->_impl_.instrumented_graph_def_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.outer_context_id_, lhs_arena,
      &other->_impl_.outer_context_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DebuggedGraph::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto[6]);
}

// ===================================================================

class DebuggedDevice::_Internal {
 public:
};

DebuggedDevice::DebuggedDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.DebuggedDevice)
}
DebuggedDevice::DebuggedDevice(const DebuggedDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DebuggedDevice* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_name_){}
    , decltype(_impl_.device_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_name().empty()) {
    _this->_impl_.device_name_.Set(from._internal_device_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.device_id_ = from._impl_.device_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.DebuggedDevice)
}

inline void DebuggedDevice::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_name_){}
    , decltype(_impl_.device_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DebuggedDevice::~DebuggedDevice() {
  // @@protoc_insertion_point(destructor:tensorflow.DebuggedDevice)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DebuggedDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_name_.Destroy();
}

void DebuggedDevice::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DebuggedDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.DebuggedDevice)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_name_.ClearToEmpty();
  _impl_.device_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DebuggedDevice::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string device_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_device_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.DebuggedDevice.device_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 device_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.device_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DebuggedDevice::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.DebuggedDevice)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string device_name = 1;
  if (!this->_internal_device_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.DebuggedDevice.device_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_device_name(), target);
  }

  // int32 device_id = 2;
  if (this->_internal_device_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.DebuggedDevice)
  return target;
}

size_t DebuggedDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.DebuggedDevice)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_name = 1;
  if (!this->_internal_device_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_name());
  }

  // int32 device_id = 2;
  if (this->_internal_device_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_device_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DebuggedDevice::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DebuggedDevice::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DebuggedDevice::GetClassData() const { return &_class_data_; }


void DebuggedDevice::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DebuggedDevice*>(&to_msg);
  auto& from = static_cast<const DebuggedDevice&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.DebuggedDevice)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_name().empty()) {
    _this->_internal_set_device_name(from._internal_device_name());
  }
  if (from._internal_device_id() != 0) {
    _this->_internal_set_device_id(from._internal_device_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DebuggedDevice::CopyFrom(const DebuggedDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.DebuggedDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DebuggedDevice::IsInitialized() const {
  return true;
}

void DebuggedDevice::InternalSwap(DebuggedDevice* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_name_, lhs_arena,
      &other->_impl_.device_name_, rhs_arena
  );
  swap(_impl_.device_id_, other->_impl_.device_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DebuggedDevice::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto[7]);
}

// ===================================================================

class Execution::_Internal {
 public:
  static const ::tensorflow::CodeLocation& code_location(const Execution* msg);
};

const ::tensorflow::CodeLocation&
Execution::_Internal::code_location(const Execution* msg) {
  return *msg->_impl_.code_location_;
}
void Execution::clear_tensor_protos() {
  _impl_.tensor_protos_.Clear();
}
Execution::Execution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.Execution)
}
Execution::Execution(const Execution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Execution* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.input_tensor_ids_){from._impl_.input_tensor_ids_}
    , /*decltype(_impl_._input_tensor_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.output_tensor_ids_){from._impl_.output_tensor_ids_}
    , /*decltype(_impl_._output_tensor_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.tensor_protos_){from._impl_.tensor_protos_}
    , decltype(_impl_.output_tensor_device_ids_){from._impl_.output_tensor_device_ids_}
    , /*decltype(_impl_._output_tensor_device_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.op_type_){}
    , decltype(_impl_.graph_id_){}
    , decltype(_impl_.code_location_){nullptr}
    , decltype(_impl_.num_outputs_){}
    , decltype(_impl_.tensor_debug_mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.op_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_op_type().empty()) {
    _this->_impl_.op_type_.Set(from._internal_op_type(), 
      _this->GetArenaForAllocation());
  }
  _impl_.graph_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.graph_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_graph_id().empty()) {
    _this->_impl_.graph_id_.Set(from._internal_graph_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_code_location()) {
    _this->_impl_.code_location_ = new ::tensorflow::CodeLocation(*from._impl_.code_location_);
  }
  ::memcpy(&_impl_.num_outputs_, &from._impl_.num_outputs_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tensor_debug_mode_) -
    reinterpret_cast<char*>(&_impl_.num_outputs_)) + sizeof(_impl_.tensor_debug_mode_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.Execution)
}

inline void Execution::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.input_tensor_ids_){arena}
    , /*decltype(_impl_._input_tensor_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.output_tensor_ids_){arena}
    , /*decltype(_impl_._output_tensor_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.tensor_protos_){arena}
    , decltype(_impl_.output_tensor_device_ids_){arena}
    , /*decltype(_impl_._output_tensor_device_ids_cached_byte_size_)*/{0}
    , decltype(_impl_.op_type_){}
    , decltype(_impl_.graph_id_){}
    , decltype(_impl_.code_location_){nullptr}
    , decltype(_impl_.num_outputs_){0}
    , decltype(_impl_.tensor_debug_mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.op_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.graph_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.graph_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Execution::~Execution() {
  // @@protoc_insertion_point(destructor:tensorflow.Execution)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Execution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.input_tensor_ids_.~RepeatedField();
  _impl_.output_tensor_ids_.~RepeatedField();
  _impl_.tensor_protos_.~RepeatedPtrField();
  _impl_.output_tensor_device_ids_.~RepeatedField();
  _impl_.op_type_.Destroy();
  _impl_.graph_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.code_location_;
}

void Execution::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Execution::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.Execution)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.input_tensor_ids_.Clear();
  _impl_.output_tensor_ids_.Clear();
  _impl_.tensor_protos_.Clear();
  _impl_.output_tensor_device_ids_.Clear();
  _impl_.op_type_.ClearToEmpty();
  _impl_.graph_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.code_location_ != nullptr) {
    delete _impl_.code_location_;
  }
  _impl_.code_location_ = nullptr;
  ::memset(&_impl_.num_outputs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tensor_debug_mode_) -
      reinterpret_cast<char*>(&_impl_.num_outputs_)) + sizeof(_impl_.tensor_debug_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Execution::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string op_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_op_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.Execution.op_type"));
        } else
          goto handle_unusual;
        continue;
      // int32 num_outputs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.num_outputs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string graph_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_graph_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.Execution.graph_id"));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 input_tensor_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_input_tensor_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_input_tensor_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 output_tensor_ids = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_output_tensor_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_output_tensor_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TensorDebugMode tensor_debug_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tensor_debug_mode(static_cast<::tensorflow::TensorDebugMode>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.TensorProto tensor_protos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tensor_protos(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.CodeLocation code_location = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_code_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 output_tensor_device_ids = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_output_tensor_device_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_output_tensor_device_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Execution::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.Execution)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string op_type = 1;
  if (!this->_internal_op_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op_type().data(), static_cast<int>(this->_internal_op_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.Execution.op_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_op_type(), target);
  }

  // int32 num_outputs = 2;
  if (this->_internal_num_outputs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_num_outputs(), target);
  }

  // string graph_id = 3;
  if (!this->_internal_graph_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_graph_id().data(), static_cast<int>(this->_internal_graph_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.Execution.graph_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_graph_id(), target);
  }

  // repeated int64 input_tensor_ids = 4;
  {
    int byte_size = _impl_._input_tensor_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_input_tensor_ids(), byte_size, target);
    }
  }

  // repeated int64 output_tensor_ids = 5;
  {
    int byte_size = _impl_._output_tensor_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          5, _internal_output_tensor_ids(), byte_size, target);
    }
  }

  // .tensorflow.TensorDebugMode tensor_debug_mode = 6;
  if (this->_internal_tensor_debug_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_tensor_debug_mode(), target);
  }

  // repeated .tensorflow.TensorProto tensor_protos = 7;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tensor_protos_size()); i < n; i++) {
    const auto& repfield = this->_internal_tensor_protos(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(7, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .tensorflow.CodeLocation code_location = 8;
  if (this->_internal_has_code_location()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::code_location(this),
        _Internal::code_location(this).GetCachedSize(), target, stream);
  }

  // repeated int32 output_tensor_device_ids = 9;
  {
    int byte_size = _impl_._output_tensor_device_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_output_tensor_device_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.Execution)
  return target;
}

size_t Execution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.Execution)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 input_tensor_ids = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.input_tensor_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._input_tensor_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int64 output_tensor_ids = 5;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.output_tensor_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._output_tensor_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .tensorflow.TensorProto tensor_protos = 7;
  total_size += 1UL * this->_internal_tensor_protos_size();
  for (const auto& msg : this->_impl_.tensor_protos_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 output_tensor_device_ids = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.output_tensor_device_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._output_tensor_device_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string op_type = 1;
  if (!this->_internal_op_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_type());
  }

  // string graph_id = 3;
  if (!this->_internal_graph_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_graph_id());
  }

  // .tensorflow.CodeLocation code_location = 8;
  if (this->_internal_has_code_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.code_location_);
  }

  // int32 num_outputs = 2;
  if (this->_internal_num_outputs() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_num_outputs());
  }

  // .tensorflow.TensorDebugMode tensor_debug_mode = 6;
  if (this->_internal_tensor_debug_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tensor_debug_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Execution::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Execution::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Execution::GetClassData() const { return &_class_data_; }


void Execution::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Execution*>(&to_msg);
  auto& from = static_cast<const Execution&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.Execution)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.input_tensor_ids_.MergeFrom(from._impl_.input_tensor_ids_);
  _this->_impl_.output_tensor_ids_.MergeFrom(from._impl_.output_tensor_ids_);
  _this->_impl_.tensor_protos_.MergeFrom(from._impl_.tensor_protos_);
  _this->_impl_.output_tensor_device_ids_.MergeFrom(from._impl_.output_tensor_device_ids_);
  if (!from._internal_op_type().empty()) {
    _this->_internal_set_op_type(from._internal_op_type());
  }
  if (!from._internal_graph_id().empty()) {
    _this->_internal_set_graph_id(from._internal_graph_id());
  }
  if (from._internal_has_code_location()) {
    _this->_internal_mutable_code_location()->::tensorflow::CodeLocation::MergeFrom(
        from._internal_code_location());
  }
  if (from._internal_num_outputs() != 0) {
    _this->_internal_set_num_outputs(from._internal_num_outputs());
  }
  if (from._internal_tensor_debug_mode() != 0) {
    _this->_internal_set_tensor_debug_mode(from._internal_tensor_debug_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Execution::CopyFrom(const Execution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.Execution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Execution::IsInitialized() const {
  return true;
}

void Execution::InternalSwap(Execution* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.input_tensor_ids_.InternalSwap(&other->_impl_.input_tensor_ids_);
  _impl_.output_tensor_ids_.InternalSwap(&other->_impl_.output_tensor_ids_);
  _impl_.tensor_protos_.InternalSwap(&other->_impl_.tensor_protos_);
  _impl_.output_tensor_device_ids_.InternalSwap(&other->_impl_.output_tensor_device_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.op_type_, lhs_arena,
      &other->_impl_.op_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.graph_id_, lhs_arena,
      &other->_impl_.graph_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Execution, _impl_.tensor_debug_mode_)
      + sizeof(Execution::_impl_.tensor_debug_mode_)
      - PROTOBUF_FIELD_OFFSET(Execution, _impl_.code_location_)>(
          reinterpret_cast<char*>(&_impl_.code_location_),
          reinterpret_cast<char*>(&other->_impl_.code_location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Execution::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto[8]);
}

// ===================================================================

class GraphExecutionTrace::_Internal {
 public:
  static const ::tensorflow::TensorProto& tensor_proto(const GraphExecutionTrace* msg);
};

const ::tensorflow::TensorProto&
GraphExecutionTrace::_Internal::tensor_proto(const GraphExecutionTrace* msg) {
  return *msg->_impl_.tensor_proto_;
}
void GraphExecutionTrace::clear_tensor_proto() {
  if (GetArenaForAllocation() == nullptr && _impl_.tensor_proto_ != nullptr) {
    delete _impl_.tensor_proto_;
  }
  _impl_.tensor_proto_ = nullptr;
}
GraphExecutionTrace::GraphExecutionTrace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.GraphExecutionTrace)
}
GraphExecutionTrace::GraphExecutionTrace(const GraphExecutionTrace& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GraphExecutionTrace* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tfdbg_context_id_){}
    , decltype(_impl_.op_name_){}
    , decltype(_impl_.device_name_){}
    , decltype(_impl_.tensor_proto_){nullptr}
    , decltype(_impl_.output_slot_){}
    , decltype(_impl_.tensor_debug_mode_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.tfdbg_context_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tfdbg_context_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tfdbg_context_id().empty()) {
    _this->_impl_.tfdbg_context_id_.Set(from._internal_tfdbg_context_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.op_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_op_name().empty()) {
    _this->_impl_.op_name_.Set(from._internal_op_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_name().empty()) {
    _this->_impl_.device_name_.Set(from._internal_device_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tensor_proto()) {
    _this->_impl_.tensor_proto_ = new ::tensorflow::TensorProto(*from._impl_.tensor_proto_);
  }
  ::memcpy(&_impl_.output_slot_, &from._impl_.output_slot_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tensor_debug_mode_) -
    reinterpret_cast<char*>(&_impl_.output_slot_)) + sizeof(_impl_.tensor_debug_mode_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.GraphExecutionTrace)
}

inline void GraphExecutionTrace::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tfdbg_context_id_){}
    , decltype(_impl_.op_name_){}
    , decltype(_impl_.device_name_){}
    , decltype(_impl_.tensor_proto_){nullptr}
    , decltype(_impl_.output_slot_){0}
    , decltype(_impl_.tensor_debug_mode_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.tfdbg_context_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.tfdbg_context_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.op_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.op_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GraphExecutionTrace::~GraphExecutionTrace() {
  // @@protoc_insertion_point(destructor:tensorflow.GraphExecutionTrace)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GraphExecutionTrace::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tfdbg_context_id_.Destroy();
  _impl_.op_name_.Destroy();
  _impl_.device_name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tensor_proto_;
}

void GraphExecutionTrace::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GraphExecutionTrace::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.GraphExecutionTrace)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tfdbg_context_id_.ClearToEmpty();
  _impl_.op_name_.ClearToEmpty();
  _impl_.device_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.tensor_proto_ != nullptr) {
    delete _impl_.tensor_proto_;
  }
  _impl_.tensor_proto_ = nullptr;
  ::memset(&_impl_.output_slot_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tensor_debug_mode_) -
      reinterpret_cast<char*>(&_impl_.output_slot_)) + sizeof(_impl_.tensor_debug_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GraphExecutionTrace::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tfdbg_context_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tfdbg_context_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.GraphExecutionTrace.tfdbg_context_id"));
        } else
          goto handle_unusual;
        continue;
      // string op_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_op_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.GraphExecutionTrace.op_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 output_slot = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.output_slot_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TensorDebugMode tensor_debug_mode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_tensor_debug_mode(static_cast<::tensorflow::TensorDebugMode>(val));
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TensorProto tensor_proto = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor_proto(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_device_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.GraphExecutionTrace.device_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GraphExecutionTrace::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.GraphExecutionTrace)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tfdbg_context_id = 1;
  if (!this->_internal_tfdbg_context_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tfdbg_context_id().data(), static_cast<int>(this->_internal_tfdbg_context_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphExecutionTrace.tfdbg_context_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tfdbg_context_id(), target);
  }

  // string op_name = 2;
  if (!this->_internal_op_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_op_name().data(), static_cast<int>(this->_internal_op_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphExecutionTrace.op_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_op_name(), target);
  }

  // int32 output_slot = 3;
  if (this->_internal_output_slot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_output_slot(), target);
  }

  // .tensorflow.TensorDebugMode tensor_debug_mode = 4;
  if (this->_internal_tensor_debug_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_tensor_debug_mode(), target);
  }

  // .tensorflow.TensorProto tensor_proto = 5;
  if (this->_internal_has_tensor_proto()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::tensor_proto(this),
        _Internal::tensor_proto(this).GetCachedSize(), target, stream);
  }

  // string device_name = 6;
  if (!this->_internal_device_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.GraphExecutionTrace.device_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_device_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.GraphExecutionTrace)
  return target;
}

size_t GraphExecutionTrace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.GraphExecutionTrace)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tfdbg_context_id = 1;
  if (!this->_internal_tfdbg_context_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tfdbg_context_id());
  }

  // string op_name = 2;
  if (!this->_internal_op_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_op_name());
  }

  // string device_name = 6;
  if (!this->_internal_device_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_name());
  }

  // .tensorflow.TensorProto tensor_proto = 5;
  if (this->_internal_has_tensor_proto()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tensor_proto_);
  }

  // int32 output_slot = 3;
  if (this->_internal_output_slot() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_output_slot());
  }

  // .tensorflow.TensorDebugMode tensor_debug_mode = 4;
  if (this->_internal_tensor_debug_mode() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_tensor_debug_mode());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GraphExecutionTrace::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GraphExecutionTrace::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GraphExecutionTrace::GetClassData() const { return &_class_data_; }


void GraphExecutionTrace::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GraphExecutionTrace*>(&to_msg);
  auto& from = static_cast<const GraphExecutionTrace&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.GraphExecutionTrace)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tfdbg_context_id().empty()) {
    _this->_internal_set_tfdbg_context_id(from._internal_tfdbg_context_id());
  }
  if (!from._internal_op_name().empty()) {
    _this->_internal_set_op_name(from._internal_op_name());
  }
  if (!from._internal_device_name().empty()) {
    _this->_internal_set_device_name(from._internal_device_name());
  }
  if (from._internal_has_tensor_proto()) {
    _this->_internal_mutable_tensor_proto()->::tensorflow::TensorProto::MergeFrom(
        from._internal_tensor_proto());
  }
  if (from._internal_output_slot() != 0) {
    _this->_internal_set_output_slot(from._internal_output_slot());
  }
  if (from._internal_tensor_debug_mode() != 0) {
    _this->_internal_set_tensor_debug_mode(from._internal_tensor_debug_mode());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GraphExecutionTrace::CopyFrom(const GraphExecutionTrace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.GraphExecutionTrace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphExecutionTrace::IsInitialized() const {
  return true;
}

void GraphExecutionTrace::InternalSwap(GraphExecutionTrace* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.tfdbg_context_id_, lhs_arena,
      &other->_impl_.tfdbg_context_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.op_name_, lhs_arena,
      &other->_impl_.op_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_name_, lhs_arena,
      &other->_impl_.device_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GraphExecutionTrace, _impl_.tensor_debug_mode_)
      + sizeof(GraphExecutionTrace::_impl_.tensor_debug_mode_)
      - PROTOBUF_FIELD_OFFSET(GraphExecutionTrace, _impl_.tensor_proto_)>(
          reinterpret_cast<char*>(&_impl_.tensor_proto_),
          reinterpret_cast<char*>(&other->_impl_.tensor_proto_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GraphExecutionTrace::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdebug_5fevent_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::DebugEvent*
Arena::CreateMaybeMessage< ::tensorflow::DebugEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DebugEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DebugMetadata*
Arena::CreateMaybeMessage< ::tensorflow::DebugMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DebugMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::SourceFile*
Arena::CreateMaybeMessage< ::tensorflow::SourceFile >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SourceFile >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::StackFrameWithId*
Arena::CreateMaybeMessage< ::tensorflow::StackFrameWithId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::StackFrameWithId >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::CodeLocation*
Arena::CreateMaybeMessage< ::tensorflow::CodeLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::CodeLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphOpCreation*
Arena::CreateMaybeMessage< ::tensorflow::GraphOpCreation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphOpCreation >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DebuggedGraph*
Arena::CreateMaybeMessage< ::tensorflow::DebuggedGraph >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DebuggedGraph >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::DebuggedDevice*
Arena::CreateMaybeMessage< ::tensorflow::DebuggedDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::DebuggedDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::Execution*
Arena::CreateMaybeMessage< ::tensorflow::Execution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::Execution >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::GraphExecutionTrace*
Arena::CreateMaybeMessage< ::tensorflow::GraphExecutionTrace >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::GraphExecutionTrace >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
