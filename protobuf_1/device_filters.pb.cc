// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/device_filters.proto

#include "tensorflow/core/protobuf/device_filters.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR TaskDeviceFilters::TaskDeviceFilters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_filters_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TaskDeviceFiltersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TaskDeviceFiltersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TaskDeviceFiltersDefaultTypeInternal() {}
  union {
    TaskDeviceFilters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TaskDeviceFiltersDefaultTypeInternal _TaskDeviceFilters_default_instance_;
PROTOBUF_CONSTEXPR JobDeviceFilters_TasksEntry_DoNotUse::JobDeviceFilters_TasksEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct JobDeviceFilters_TasksEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JobDeviceFilters_TasksEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JobDeviceFilters_TasksEntry_DoNotUseDefaultTypeInternal() {}
  union {
    JobDeviceFilters_TasksEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JobDeviceFilters_TasksEntry_DoNotUseDefaultTypeInternal _JobDeviceFilters_TasksEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR JobDeviceFilters::JobDeviceFilters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tasks_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct JobDeviceFiltersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JobDeviceFiltersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~JobDeviceFiltersDefaultTypeInternal() {}
  union {
    JobDeviceFilters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JobDeviceFiltersDefaultTypeInternal _JobDeviceFilters_default_instance_;
PROTOBUF_CONSTEXPR ClusterDeviceFilters::ClusterDeviceFilters(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.jobs_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ClusterDeviceFiltersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ClusterDeviceFiltersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ClusterDeviceFiltersDefaultTypeInternal() {}
  union {
    ClusterDeviceFilters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ClusterDeviceFiltersDefaultTypeInternal _ClusterDeviceFilters_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TaskDeviceFilters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::TaskDeviceFilters, _impl_.device_filters_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::JobDeviceFilters_TasksEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::JobDeviceFilters_TasksEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::JobDeviceFilters_TasksEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::JobDeviceFilters_TasksEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::JobDeviceFilters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::JobDeviceFilters, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::JobDeviceFilters, _impl_.tasks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ClusterDeviceFilters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::ClusterDeviceFilters, _impl_.jobs_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::TaskDeviceFilters)},
  { 7, 15, -1, sizeof(::tensorflow::JobDeviceFilters_TasksEntry_DoNotUse)},
  { 17, -1, -1, sizeof(::tensorflow::JobDeviceFilters)},
  { 25, -1, -1, sizeof(::tensorflow::ClusterDeviceFilters)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_TaskDeviceFilters_default_instance_._instance,
  &::tensorflow::_JobDeviceFilters_TasksEntry_DoNotUse_default_instance_._instance,
  &::tensorflow::_JobDeviceFilters_default_instance_._instance,
  &::tensorflow::_ClusterDeviceFilters_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-tensorflow/core/protobuf/device_filter"
  "s.proto\022\ntensorflow\"+\n\021TaskDeviceFilters"
  "\022\026\n\016device_filters\030\001 \003(\t\"\245\001\n\020JobDeviceFi"
  "lters\022\014\n\004name\030\001 \001(\t\0226\n\005tasks\030\002 \003(\0132\'.ten"
  "sorflow.JobDeviceFilters.TasksEntry\032K\n\nT"
  "asksEntry\022\013\n\003key\030\001 \001(\005\022,\n\005value\030\002 \001(\0132\035."
  "tensorflow.TaskDeviceFilters:\0028\001\"B\n\024Clus"
  "terDeviceFilters\022*\n\004jobs\030\001 \003(\0132\034.tensorf"
  "low.JobDeviceFiltersB\215\001\n\032org.tensorflow."
  "distruntimeB\023DeviceFiltersProtosP\001ZUgith"
  "ub.com/tensorflow/tensorflow/tensorflow/"
  "go/core/protobuf/for_core_protos_go_prot"
  "o\370\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto = {
    false, false, 492, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto,
    "tensorflow/core/protobuf/device_filters.proto",
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto_once, nullptr, 0, 4,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto);
namespace tensorflow {

// ===================================================================

class TaskDeviceFilters::_Internal {
 public:
};

TaskDeviceFilters::TaskDeviceFilters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.TaskDeviceFilters)
}
TaskDeviceFilters::TaskDeviceFilters(const TaskDeviceFilters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TaskDeviceFilters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_filters_){from._impl_.device_filters_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.TaskDeviceFilters)
}

inline void TaskDeviceFilters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_filters_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TaskDeviceFilters::~TaskDeviceFilters() {
  // @@protoc_insertion_point(destructor:tensorflow.TaskDeviceFilters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TaskDeviceFilters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_filters_.~RepeatedPtrField();
}

void TaskDeviceFilters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TaskDeviceFilters::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.TaskDeviceFilters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_filters_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TaskDeviceFilters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated string device_filters = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_device_filters();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.TaskDeviceFilters.device_filters"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TaskDeviceFilters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.TaskDeviceFilters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string device_filters = 1;
  for (int i = 0, n = this->_internal_device_filters_size(); i < n; i++) {
    const auto& s = this->_internal_device_filters(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.TaskDeviceFilters.device_filters");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.TaskDeviceFilters)
  return target;
}

size_t TaskDeviceFilters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.TaskDeviceFilters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string device_filters = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.device_filters_.size());
  for (int i = 0, n = _impl_.device_filters_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.device_filters_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TaskDeviceFilters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TaskDeviceFilters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TaskDeviceFilters::GetClassData() const { return &_class_data_; }


void TaskDeviceFilters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TaskDeviceFilters*>(&to_msg);
  auto& from = static_cast<const TaskDeviceFilters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.TaskDeviceFilters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.device_filters_.MergeFrom(from._impl_.device_filters_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TaskDeviceFilters::CopyFrom(const TaskDeviceFilters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.TaskDeviceFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskDeviceFilters::IsInitialized() const {
  return true;
}

void TaskDeviceFilters::InternalSwap(TaskDeviceFilters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.device_filters_.InternalSwap(&other->_impl_.device_filters_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TaskDeviceFilters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto[0]);
}

// ===================================================================

JobDeviceFilters_TasksEntry_DoNotUse::JobDeviceFilters_TasksEntry_DoNotUse() {}
JobDeviceFilters_TasksEntry_DoNotUse::JobDeviceFilters_TasksEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void JobDeviceFilters_TasksEntry_DoNotUse::MergeFrom(const JobDeviceFilters_TasksEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata JobDeviceFilters_TasksEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto[1]);
}

// ===================================================================

class JobDeviceFilters::_Internal {
 public:
};

JobDeviceFilters::JobDeviceFilters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &JobDeviceFilters::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:tensorflow.JobDeviceFilters)
}
JobDeviceFilters::JobDeviceFilters(const JobDeviceFilters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  JobDeviceFilters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.tasks_)*/{}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.tasks_.MergeFrom(from._impl_.tasks_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.JobDeviceFilters)
}

inline void JobDeviceFilters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.tasks_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

JobDeviceFilters::~JobDeviceFilters() {
  // @@protoc_insertion_point(destructor:tensorflow.JobDeviceFilters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void JobDeviceFilters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tasks_.Destruct();
  _impl_.tasks_.~MapField();
  _impl_.name_.Destroy();
}

void JobDeviceFilters::ArenaDtor(void* object) {
  JobDeviceFilters* _this = reinterpret_cast< JobDeviceFilters* >(object);
  _this->_impl_.tasks_.Destruct();
}
void JobDeviceFilters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void JobDeviceFilters::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.JobDeviceFilters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tasks_.Clear();
  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* JobDeviceFilters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.JobDeviceFilters.name"));
        } else
          goto handle_unusual;
        continue;
      // map<int32, .tensorflow.TaskDeviceFilters> tasks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.tasks_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* JobDeviceFilters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.JobDeviceFilters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.JobDeviceFilters.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<int32, .tensorflow.TaskDeviceFilters> tasks = 2;
  if (!this->_internal_tasks().empty()) {
    using MapType = ::_pb::Map<int32_t, ::tensorflow::TaskDeviceFilters>;
    using WireHelper = JobDeviceFilters_TasksEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_tasks();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.JobDeviceFilters)
  return target;
}

size_t JobDeviceFilters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.JobDeviceFilters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<int32, .tensorflow.TaskDeviceFilters> tasks = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_tasks_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< int32_t, ::tensorflow::TaskDeviceFilters >::const_iterator
      it = this->_internal_tasks().begin();
      it != this->_internal_tasks().end(); ++it) {
    total_size += JobDeviceFilters_TasksEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData JobDeviceFilters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    JobDeviceFilters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*JobDeviceFilters::GetClassData() const { return &_class_data_; }


void JobDeviceFilters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<JobDeviceFilters*>(&to_msg);
  auto& from = static_cast<const JobDeviceFilters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.JobDeviceFilters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tasks_.MergeFrom(from._impl_.tasks_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void JobDeviceFilters::CopyFrom(const JobDeviceFilters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.JobDeviceFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobDeviceFilters::IsInitialized() const {
  return true;
}

void JobDeviceFilters::InternalSwap(JobDeviceFilters* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tasks_.InternalSwap(&other->_impl_.tasks_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata JobDeviceFilters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto[2]);
}

// ===================================================================

class ClusterDeviceFilters::_Internal {
 public:
};

ClusterDeviceFilters::ClusterDeviceFilters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.ClusterDeviceFilters)
}
ClusterDeviceFilters::ClusterDeviceFilters(const ClusterDeviceFilters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ClusterDeviceFilters* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.jobs_){from._impl_.jobs_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.ClusterDeviceFilters)
}

inline void ClusterDeviceFilters::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.jobs_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ClusterDeviceFilters::~ClusterDeviceFilters() {
  // @@protoc_insertion_point(destructor:tensorflow.ClusterDeviceFilters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ClusterDeviceFilters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.jobs_.~RepeatedPtrField();
}

void ClusterDeviceFilters::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ClusterDeviceFilters::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.ClusterDeviceFilters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.jobs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ClusterDeviceFilters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.JobDeviceFilters jobs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_jobs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ClusterDeviceFilters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.ClusterDeviceFilters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.JobDeviceFilters jobs = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_jobs_size()); i < n; i++) {
    const auto& repfield = this->_internal_jobs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.ClusterDeviceFilters)
  return target;
}

size_t ClusterDeviceFilters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.ClusterDeviceFilters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.JobDeviceFilters jobs = 1;
  total_size += 1UL * this->_internal_jobs_size();
  for (const auto& msg : this->_impl_.jobs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ClusterDeviceFilters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ClusterDeviceFilters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ClusterDeviceFilters::GetClassData() const { return &_class_data_; }


void ClusterDeviceFilters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ClusterDeviceFilters*>(&to_msg);
  auto& from = static_cast<const ClusterDeviceFilters&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.ClusterDeviceFilters)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.jobs_.MergeFrom(from._impl_.jobs_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ClusterDeviceFilters::CopyFrom(const ClusterDeviceFilters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.ClusterDeviceFilters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClusterDeviceFilters::IsInitialized() const {
  return true;
}

void ClusterDeviceFilters::InternalSwap(ClusterDeviceFilters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.jobs_.InternalSwap(&other->_impl_.jobs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ClusterDeviceFilters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fdevice_5ffilters_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::TaskDeviceFilters*
Arena::CreateMaybeMessage< ::tensorflow::TaskDeviceFilters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::TaskDeviceFilters >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::JobDeviceFilters_TasksEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tensorflow::JobDeviceFilters_TasksEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::JobDeviceFilters_TasksEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::JobDeviceFilters*
Arena::CreateMaybeMessage< ::tensorflow::JobDeviceFilters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::JobDeviceFilters >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::ClusterDeviceFilters*
Arena::CreateMaybeMessage< ::tensorflow::ClusterDeviceFilters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::ClusterDeviceFilters >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
