// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/eager_service.proto

#include "tensorflow/core/protobuf/eager_service.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
namespace eager {
PROTOBUF_CONSTEXPR Operation_Input::Operation_Input(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Operation_InputDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Operation_InputDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Operation_InputDefaultTypeInternal() {}
  union {
    Operation_Input _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Operation_InputDefaultTypeInternal _Operation_Input_default_instance_;
PROTOBUF_CONSTEXPR Operation_AttrsEntry_DoNotUse::Operation_AttrsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct Operation_AttrsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Operation_AttrsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Operation_AttrsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Operation_AttrsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Operation_AttrsEntry_DoNotUseDefaultTypeInternal _Operation_AttrsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR Operation::Operation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.control_op_ids_)*/{}
  , /*decltype(_impl_._control_op_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_.attrs_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.op_inputs_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.device_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.id_)*/int64_t{0}
  , /*decltype(_impl_.func_step_id_)*/int64_t{0}
  , /*decltype(_impl_.is_component_function_)*/false
  , /*decltype(_impl_.is_function_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OperationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationDefaultTypeInternal() {}
  union {
    Operation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationDefaultTypeInternal _Operation_default_instance_;
PROTOBUF_CONSTEXPR QueueItem::QueueItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct QueueItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueueItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueueItemDefaultTypeInternal() {}
  union {
    QueueItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueueItemDefaultTypeInternal _QueueItem_default_instance_;
PROTOBUF_CONSTEXPR QueueResponse::QueueResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shape_)*/{}
  , /*decltype(_impl_.tensor_)*/{}
  , /*decltype(_impl_.device_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QueueResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QueueResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QueueResponseDefaultTypeInternal() {}
  union {
    QueueResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QueueResponseDefaultTypeInternal _QueueResponse_default_instance_;
PROTOBUF_CONSTEXPR CreateContextRequest::CreateContextRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cluster_device_attributes_)*/{}
  , /*decltype(_impl_.server_def_)*/nullptr
  , /*decltype(_impl_.version_def_)*/nullptr
  , /*decltype(_impl_.keep_alive_secs_)*/int64_t{0}
  , /*decltype(_impl_.context_id_)*/uint64_t{0u}
  , /*decltype(_impl_.context_view_id_)*/uint64_t{0u}
  , /*decltype(_impl_.async_)*/false
  , /*decltype(_impl_.lazy_copy_remote_function_inputs_)*/false
  , /*decltype(_impl_.clear_existing_contexts_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateContextRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateContextRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateContextRequestDefaultTypeInternal() {}
  union {
    CreateContextRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateContextRequestDefaultTypeInternal _CreateContextRequest_default_instance_;
PROTOBUF_CONSTEXPR CreateContextResponse::CreateContextResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_attributes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CreateContextResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CreateContextResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CreateContextResponseDefaultTypeInternal() {}
  union {
    CreateContextResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CreateContextResponseDefaultTypeInternal _CreateContextResponse_default_instance_;
PROTOBUF_CONSTEXPR UpdateContextRequest::UpdateContextRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.cluster_device_attributes_)*/{}
  , /*decltype(_impl_.server_def_)*/nullptr
  , /*decltype(_impl_.context_id_)*/uint64_t{0u}
  , /*decltype(_impl_.context_view_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateContextRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateContextRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateContextRequestDefaultTypeInternal() {}
  union {
    UpdateContextRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateContextRequestDefaultTypeInternal _UpdateContextRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateContextResponse::UpdateContextResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_attributes_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct UpdateContextResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateContextResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateContextResponseDefaultTypeInternal() {}
  union {
    UpdateContextResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateContextResponseDefaultTypeInternal _UpdateContextResponse_default_instance_;
PROTOBUF_CONSTEXPR EnqueueRequest::EnqueueRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.queue_)*/{}
  , /*decltype(_impl_.context_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnqueueRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnqueueRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnqueueRequestDefaultTypeInternal() {}
  union {
    EnqueueRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnqueueRequestDefaultTypeInternal _EnqueueRequest_default_instance_;
PROTOBUF_CONSTEXPR EnqueueResponse::EnqueueResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.queue_response_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EnqueueResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EnqueueResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EnqueueResponseDefaultTypeInternal() {}
  union {
    EnqueueResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EnqueueResponseDefaultTypeInternal _EnqueueResponse_default_instance_;
PROTOBUF_CONSTEXPR WaitQueueDoneRequest::WaitQueueDoneRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.op_id_)*/{}
  , /*decltype(_impl_._op_id_cached_byte_size_)*/{0}
  , /*decltype(_impl_.context_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WaitQueueDoneRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitQueueDoneRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitQueueDoneRequestDefaultTypeInternal() {}
  union {
    WaitQueueDoneRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitQueueDoneRequestDefaultTypeInternal _WaitQueueDoneRequest_default_instance_;
PROTOBUF_CONSTEXPR WaitQueueDoneResponse::WaitQueueDoneResponse(
    ::_pbi::ConstantInitialized) {}
struct WaitQueueDoneResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WaitQueueDoneResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WaitQueueDoneResponseDefaultTypeInternal() {}
  union {
    WaitQueueDoneResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WaitQueueDoneResponseDefaultTypeInternal _WaitQueueDoneResponse_default_instance_;
PROTOBUF_CONSTEXPR RunComponentFunctionRequest::RunComponentFunctionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.output_num_)*/{}
  , /*decltype(_impl_._output_num_cached_byte_size_)*/{0}
  , /*decltype(_impl_.operation_)*/nullptr
  , /*decltype(_impl_.context_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RunComponentFunctionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunComponentFunctionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunComponentFunctionRequestDefaultTypeInternal() {}
  union {
    RunComponentFunctionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunComponentFunctionRequestDefaultTypeInternal _RunComponentFunctionRequest_default_instance_;
PROTOBUF_CONSTEXPR RunComponentFunctionResponse::RunComponentFunctionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.shape_)*/{}
  , /*decltype(_impl_.tensor_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RunComponentFunctionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RunComponentFunctionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RunComponentFunctionResponseDefaultTypeInternal() {}
  union {
    RunComponentFunctionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RunComponentFunctionResponseDefaultTypeInternal _RunComponentFunctionResponse_default_instance_;
PROTOBUF_CONSTEXPR KeepAliveRequest::KeepAliveRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.context_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeepAliveRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeepAliveRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeepAliveRequestDefaultTypeInternal() {}
  union {
    KeepAliveRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeepAliveRequestDefaultTypeInternal _KeepAliveRequest_default_instance_;
PROTOBUF_CONSTEXPR KeepAliveResponse::KeepAliveResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.context_view_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct KeepAliveResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR KeepAliveResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~KeepAliveResponseDefaultTypeInternal() {}
  union {
    KeepAliveResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 KeepAliveResponseDefaultTypeInternal _KeepAliveResponse_default_instance_;
PROTOBUF_CONSTEXPR CloseContextRequest::CloseContextRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.context_id_)*/uint64_t{0u}
  , /*decltype(_impl_.context_view_id_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CloseContextRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloseContextRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloseContextRequestDefaultTypeInternal() {}
  union {
    CloseContextRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloseContextRequestDefaultTypeInternal _CloseContextRequest_default_instance_;
PROTOBUF_CONSTEXPR CloseContextResponse::CloseContextResponse(
    ::_pbi::ConstantInitialized) {}
struct CloseContextResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloseContextResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloseContextResponseDefaultTypeInternal() {}
  union {
    CloseContextResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloseContextResponseDefaultTypeInternal _CloseContextResponse_default_instance_;
PROTOBUF_CONSTEXPR RegisterFunctionOp::RegisterFunctionOp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.function_def_)*/nullptr
  , /*decltype(_impl_.library_)*/nullptr
  , /*decltype(_impl_.is_component_function_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RegisterFunctionOpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RegisterFunctionOpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RegisterFunctionOpDefaultTypeInternal() {}
  union {
    RegisterFunctionOp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RegisterFunctionOpDefaultTypeInternal _RegisterFunctionOp_default_instance_;
PROTOBUF_CONSTEXPR RemoveFunctionOp::RemoveFunctionOp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.function_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RemoveFunctionOpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RemoveFunctionOpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RemoveFunctionOpDefaultTypeInternal() {}
  union {
    RemoveFunctionOp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RemoveFunctionOpDefaultTypeInternal _RemoveFunctionOp_default_instance_;
PROTOBUF_CONSTEXPR CleanupFunctionOp::CleanupFunctionOp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.step_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CleanupFunctionOpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CleanupFunctionOpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CleanupFunctionOpDefaultTypeInternal() {}
  union {
    CleanupFunctionOp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CleanupFunctionOpDefaultTypeInternal _CleanupFunctionOp_default_instance_;
PROTOBUF_CONSTEXPR SyncRemoteExecutorForStream::SyncRemoteExecutorForStream(
    ::_pbi::ConstantInitialized) {}
struct SyncRemoteExecutorForStreamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncRemoteExecutorForStreamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncRemoteExecutorForStreamDefaultTypeInternal() {}
  union {
    SyncRemoteExecutorForStream _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncRemoteExecutorForStreamDefaultTypeInternal _SyncRemoteExecutorForStream_default_instance_;
PROTOBUF_CONSTEXPR SendTensorOp::SendTensorOp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tensors_)*/{}
  , /*decltype(_impl_.device_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.op_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendTensorOpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendTensorOpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendTensorOpDefaultTypeInternal() {}
  union {
    SendTensorOp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendTensorOpDefaultTypeInternal _SendTensorOp_default_instance_;
PROTOBUF_CONSTEXPR SendPackedHandleOp_LocalTensorHandle::SendPackedHandleOp_LocalTensorHandle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.tensor_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendPackedHandleOp_LocalTensorHandleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendPackedHandleOp_LocalTensorHandleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendPackedHandleOp_LocalTensorHandleDefaultTypeInternal() {}
  union {
    SendPackedHandleOp_LocalTensorHandle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendPackedHandleOp_LocalTensorHandleDefaultTypeInternal _SendPackedHandleOp_LocalTensorHandle_default_instance_;
PROTOBUF_CONSTEXPR SendPackedHandleOp_Handle::SendPackedHandleOp_Handle(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct SendPackedHandleOp_HandleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendPackedHandleOp_HandleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendPackedHandleOp_HandleDefaultTypeInternal() {}
  union {
    SendPackedHandleOp_Handle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendPackedHandleOp_HandleDefaultTypeInternal _SendPackedHandleOp_Handle_default_instance_;
PROTOBUF_CONSTEXPR SendPackedHandleOp::SendPackedHandleOp(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.handles_)*/{}
  , /*decltype(_impl_.device_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.op_id_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SendPackedHandleOpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SendPackedHandleOpDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SendPackedHandleOpDefaultTypeInternal() {}
  union {
    SendPackedHandleOp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SendPackedHandleOpDefaultTypeInternal _SendPackedHandleOp_default_instance_;
}  // namespace eager
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[27];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation_Input, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation_Input, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation_Input, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation_AttrsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation_AttrsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation_AttrsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation_AttrsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation, _impl_.op_inputs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation, _impl_.control_op_ids_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation, _impl_.attrs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation, _impl_.device_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation, _impl_.is_component_function_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation, _impl_.func_step_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::Operation, _impl_.is_function_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::QueueItem, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::QueueItem, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::QueueItem, _impl_.item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::QueueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::QueueResponse, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::QueueResponse, _impl_.device_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::QueueResponse, _impl_.tensor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextRequest, _impl_.server_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextRequest, _impl_.async_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextRequest, _impl_.keep_alive_secs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextRequest, _impl_.version_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextRequest, _impl_.cluster_device_attributes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextRequest, _impl_.context_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextRequest, _impl_.context_view_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextRequest, _impl_.lazy_copy_remote_function_inputs_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextRequest, _impl_.clear_existing_contexts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CreateContextResponse, _impl_.device_attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::UpdateContextRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::UpdateContextRequest, _impl_.server_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::UpdateContextRequest, _impl_.cluster_device_attributes_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::UpdateContextRequest, _impl_.context_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::UpdateContextRequest, _impl_.context_view_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::UpdateContextResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::UpdateContextResponse, _impl_.device_attributes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::EnqueueRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::EnqueueRequest, _impl_.context_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::EnqueueRequest, _impl_.queue_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::EnqueueResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::EnqueueResponse, _impl_.queue_response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::WaitQueueDoneRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::WaitQueueDoneRequest, _impl_.context_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::WaitQueueDoneRequest, _impl_.op_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::WaitQueueDoneResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RunComponentFunctionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RunComponentFunctionRequest, _impl_.context_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RunComponentFunctionRequest, _impl_.operation_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RunComponentFunctionRequest, _impl_.output_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RunComponentFunctionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RunComponentFunctionResponse, _impl_.shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RunComponentFunctionResponse, _impl_.tensor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::KeepAliveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::KeepAliveRequest, _impl_.context_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::KeepAliveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::KeepAliveResponse, _impl_.context_view_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CloseContextRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CloseContextRequest, _impl_.context_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CloseContextRequest, _impl_.context_view_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CloseContextResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RegisterFunctionOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RegisterFunctionOp, _impl_.function_def_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RegisterFunctionOp, _impl_.is_component_function_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RegisterFunctionOp, _impl_.library_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RemoveFunctionOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::RemoveFunctionOp, _impl_.function_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CleanupFunctionOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::CleanupFunctionOp, _impl_.step_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SyncRemoteExecutorForStream, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendTensorOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendTensorOp, _impl_.op_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendTensorOp, _impl_.tensors_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendTensorOp, _impl_.device_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle, _impl_.tensor_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle, _impl_.device_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendPackedHandleOp_Handle, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendPackedHandleOp_Handle, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendPackedHandleOp_Handle, _impl_.item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendPackedHandleOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendPackedHandleOp, _impl_.op_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendPackedHandleOp, _impl_.handles_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::eager::SendPackedHandleOp, _impl_.device_name_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::eager::Operation_Input)},
  { 9, 17, -1, sizeof(::tensorflow::eager::Operation_AttrsEntry_DoNotUse)},
  { 19, -1, -1, sizeof(::tensorflow::eager::Operation)},
  { 34, -1, -1, sizeof(::tensorflow::eager::QueueItem)},
  { 49, -1, -1, sizeof(::tensorflow::eager::QueueResponse)},
  { 58, -1, -1, sizeof(::tensorflow::eager::CreateContextRequest)},
  { 73, -1, -1, sizeof(::tensorflow::eager::CreateContextResponse)},
  { 80, -1, -1, sizeof(::tensorflow::eager::UpdateContextRequest)},
  { 90, -1, -1, sizeof(::tensorflow::eager::UpdateContextResponse)},
  { 97, -1, -1, sizeof(::tensorflow::eager::EnqueueRequest)},
  { 105, -1, -1, sizeof(::tensorflow::eager::EnqueueResponse)},
  { 112, -1, -1, sizeof(::tensorflow::eager::WaitQueueDoneRequest)},
  { 120, -1, -1, sizeof(::tensorflow::eager::WaitQueueDoneResponse)},
  { 126, -1, -1, sizeof(::tensorflow::eager::RunComponentFunctionRequest)},
  { 135, -1, -1, sizeof(::tensorflow::eager::RunComponentFunctionResponse)},
  { 143, -1, -1, sizeof(::tensorflow::eager::KeepAliveRequest)},
  { 150, -1, -1, sizeof(::tensorflow::eager::KeepAliveResponse)},
  { 157, -1, -1, sizeof(::tensorflow::eager::CloseContextRequest)},
  { 165, -1, -1, sizeof(::tensorflow::eager::CloseContextResponse)},
  { 171, -1, -1, sizeof(::tensorflow::eager::RegisterFunctionOp)},
  { 180, -1, -1, sizeof(::tensorflow::eager::RemoveFunctionOp)},
  { 187, -1, -1, sizeof(::tensorflow::eager::CleanupFunctionOp)},
  { 194, -1, -1, sizeof(::tensorflow::eager::SyncRemoteExecutorForStream)},
  { 200, -1, -1, sizeof(::tensorflow::eager::SendTensorOp)},
  { 209, -1, -1, sizeof(::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle)},
  { 217, -1, -1, sizeof(::tensorflow::eager::SendPackedHandleOp_Handle)},
  { 226, -1, -1, sizeof(::tensorflow::eager::SendPackedHandleOp)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::eager::_Operation_Input_default_instance_._instance,
  &::tensorflow::eager::_Operation_AttrsEntry_DoNotUse_default_instance_._instance,
  &::tensorflow::eager::_Operation_default_instance_._instance,
  &::tensorflow::eager::_QueueItem_default_instance_._instance,
  &::tensorflow::eager::_QueueResponse_default_instance_._instance,
  &::tensorflow::eager::_CreateContextRequest_default_instance_._instance,
  &::tensorflow::eager::_CreateContextResponse_default_instance_._instance,
  &::tensorflow::eager::_UpdateContextRequest_default_instance_._instance,
  &::tensorflow::eager::_UpdateContextResponse_default_instance_._instance,
  &::tensorflow::eager::_EnqueueRequest_default_instance_._instance,
  &::tensorflow::eager::_EnqueueResponse_default_instance_._instance,
  &::tensorflow::eager::_WaitQueueDoneRequest_default_instance_._instance,
  &::tensorflow::eager::_WaitQueueDoneResponse_default_instance_._instance,
  &::tensorflow::eager::_RunComponentFunctionRequest_default_instance_._instance,
  &::tensorflow::eager::_RunComponentFunctionResponse_default_instance_._instance,
  &::tensorflow::eager::_KeepAliveRequest_default_instance_._instance,
  &::tensorflow::eager::_KeepAliveResponse_default_instance_._instance,
  &::tensorflow::eager::_CloseContextRequest_default_instance_._instance,
  &::tensorflow::eager::_CloseContextResponse_default_instance_._instance,
  &::tensorflow::eager::_RegisterFunctionOp_default_instance_._instance,
  &::tensorflow::eager::_RemoveFunctionOp_default_instance_._instance,
  &::tensorflow::eager::_CleanupFunctionOp_default_instance_._instance,
  &::tensorflow::eager::_SyncRemoteExecutorForStream_default_instance_._instance,
  &::tensorflow::eager::_SendTensorOp_default_instance_._instance,
  &::tensorflow::eager::_SendPackedHandleOp_LocalTensorHandle_default_instance_._instance,
  &::tensorflow::eager::_SendPackedHandleOp_Handle_default_instance_._instance,
  &::tensorflow::eager::_SendPackedHandleOp_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n,tensorflow/core/protobuf/eager_service"
  ".proto\022\020tensorflow.eager\032*tensorflow/cor"
  "e/framework/attr_value.proto\0321tensorflow"
  "/core/framework/device_attributes.proto\032"
  "(tensorflow/core/framework/function.prot"
  "o\032&tensorflow/core/framework/tensor.prot"
  "o\032,tensorflow/core/framework/tensor_shap"
  "e.proto\032(tensorflow/core/framework/versi"
  "ons.proto\0323tensorflow/core/protobuf/remo"
  "te_tensor_handle.proto\0320tensorflow/core/"
  "protobuf/tensorflow_server.proto\"\312\003\n\tOpe"
  "ration\022\n\n\002id\030\001 \001(\003\022\014\n\004name\030\002 \001(\t\0224\n\top_i"
  "nputs\030\n \003(\0132!.tensorflow.eager.Operation"
  ".Input\022\026\n\016control_op_ids\030\004 \003(\003\0225\n\005attrs\030"
  "\005 \003(\0132&.tensorflow.eager.Operation.Attrs"
  "Entry\022\016\n\006device\030\006 \001(\t\022\035\n\025is_component_fu"
  "nction\030\007 \001(\010\022\024\n\014func_step_id\030\010 \001(\003\022\023\n\013is"
  "_function\030\t \001(\010\032y\n\005Input\022=\n\rremote_handl"
  "e\030\001 \001(\0132$.tensorflow.eager.RemoteTensorH"
  "andleH\000\022)\n\006tensor\030\002 \001(\0132\027.tensorflow.Ten"
  "sorProtoH\000B\006\n\004item\032C\n\nAttrsEntry\022\013\n\003key\030"
  "\001 \001(\t\022$\n\005value\030\002 \001(\0132\025.tensorflow.AttrVa"
  "lue:\0028\001J\004\010\003\020\004\"\237\004\n\tQueueItem\022@\n\020handle_to"
  "_decref\030\001 \001(\0132$.tensorflow.eager.RemoteT"
  "ensorHandleH\000\0220\n\toperation\030\002 \001(\0132\033.tenso"
  "rflow.eager.OperationH\000\0225\n\013send_tensor\030\003"
  " \001(\0132\036.tensorflow.eager.SendTensorOpH\000\022A"
  "\n\021register_function\030\004 \001(\0132$.tensorflow.e"
  "ager.RegisterFunctionOpH\000\022\?\n\020cleanup_fun"
  "ction\030\005 \001(\0132#.tensorflow.eager.CleanupFu"
  "nctionOpH\000\022X\n\037sync_remote_executor_for_s"
  "tream\030\006 \001(\0132-.tensorflow.eager.SyncRemot"
  "eExecutorForStreamH\000\022B\n\022send_packed_hand"
  "le\030\007 \001(\0132$.tensorflow.eager.SendPackedHa"
  "ndleOpH\000\022=\n\017remove_function\030\010 \001(\0132\".tens"
  "orflow.eager.RemoveFunctionOpH\000B\006\n\004item\""
  "u\n\rQueueResponse\022+\n\005shape\030\001 \003(\0132\034.tensor"
  "flow.TensorShapeProto\022\016\n\006device\030\003 \003(\t\022\'\n"
  "\006tensor\030\002 \003(\0132\027.tensorflow.TensorProto\"\325"
  "\002\n\024CreateContextRequest\022)\n\nserver_def\030\001 "
  "\001(\0132\025.tensorflow.ServerDef\022\r\n\005async\030\002 \001("
  "\010\022\027\n\017keep_alive_secs\030\003 \001(\003\022+\n\013version_de"
  "f\030\004 \001(\0132\026.tensorflow.VersionDef\022\?\n\031clust"
  "er_device_attributes\030\006 \003(\0132\034.tensorflow."
  "DeviceAttributes\022\022\n\ncontext_id\030\007 \001(\006\022\027\n\017"
  "context_view_id\030\010 \001(\006\022(\n lazy_copy_remot"
  "e_function_inputs\030\t \001(\010\022\037\n\027clear_existin"
  "g_contexts\030\n \001(\010J\004\010\005\020\006\"V\n\025CreateContextR"
  "esponse\0227\n\021device_attributes\030\002 \003(\0132\034.ten"
  "sorflow.DeviceAttributesJ\004\010\001\020\002\"\257\001\n\024Updat"
  "eContextRequest\022)\n\nserver_def\030\001 \001(\0132\025.te"
  "nsorflow.ServerDef\022\?\n\031cluster_device_att"
  "ributes\030\002 \003(\0132\034.tensorflow.DeviceAttribu"
  "tes\022\022\n\ncontext_id\030\003 \001(\006\022\027\n\017context_view_"
  "id\030\004 \001(\006\"P\n\025UpdateContextResponse\0227\n\021dev"
  "ice_attributes\030\001 \003(\0132\034.tensorflow.Device"
  "Attributes\"P\n\016EnqueueRequest\022\022\n\ncontext_"
  "id\030\001 \001(\006\022*\n\005queue\030\003 \003(\0132\033.tensorflow.eag"
  "er.QueueItem\"J\n\017EnqueueResponse\0227\n\016queue"
  "_response\030\001 \003(\0132\037.tensorflow.eager.Queue"
  "Response\"9\n\024WaitQueueDoneRequest\022\022\n\ncont"
  "ext_id\030\001 \001(\006\022\r\n\005op_id\030\002 \003(\003\"\027\n\025WaitQueue"
  "DoneResponse\"u\n\033RunComponentFunctionRequ"
  "est\022\022\n\ncontext_id\030\001 \001(\006\022.\n\toperation\030\002 \001"
  "(\0132\033.tensorflow.eager.Operation\022\022\n\noutpu"
  "t_num\030\003 \003(\005\"t\n\034RunComponentFunctionRespo"
  "nse\022+\n\005shape\030\001 \003(\0132\034.tensorflow.TensorSh"
  "apeProto\022\'\n\006tensor\030\002 \003(\0132\027.tensorflow.Te"
  "nsorProto\"&\n\020KeepAliveRequest\022\022\n\ncontext"
  "_id\030\001 \001(\006\",\n\021KeepAliveResponse\022\027\n\017contex"
  "t_view_id\030\001 \001(\006\"B\n\023CloseContextRequest\022\022"
  "\n\ncontext_id\030\001 \001(\006\022\027\n\017context_view_id\030\002 "
  "\001(\006\"\026\n\024CloseContextResponse\"\223\001\n\022Register"
  "FunctionOp\022-\n\014function_def\030\001 \001(\0132\027.tenso"
  "rflow.FunctionDef\022\035\n\025is_component_functi"
  "on\030\002 \001(\010\022/\n\007library\030\003 \001(\0132\036.tensorflow.F"
  "unctionDefLibrary\")\n\020RemoveFunctionOp\022\025\n"
  "\rfunction_name\030\001 \001(\t\"$\n\021CleanupFunctionO"
  "p\022\017\n\007step_id\030\001 \001(\003\"\035\n\033SyncRemoteExecutor"
  "ForStream\"\\\n\014SendTensorOp\022\r\n\005op_id\030\001 \001(\003"
  "\022(\n\007tensors\030\002 \003(\0132\027.tensorflow.TensorPro"
  "to\022\023\n\013device_name\030\003 \001(\t\"\346\002\n\022SendPackedHa"
  "ndleOp\022\r\n\005op_id\030\001 \001(\003\022<\n\007handles\030\002 \003(\0132+"
  ".tensorflow.eager.SendPackedHandleOp.Han"
  "dle\022\023\n\013device_name\030\003 \001(\t\032L\n\021LocalTensorH"
  "andle\022\'\n\006tensor\030\001 \001(\0132\027.tensorflow.Tenso"
  "rProto\022\016\n\006device\030\002 \001(\t\032\237\001\n\006Handle\022N\n\014loc"
  "al_handle\030\001 \001(\01326.tensorflow.eager.SendP"
  "ackedHandleOp.LocalTensorHandleH\000\022=\n\rrem"
  "ote_handle\030\002 \001(\0132$.tensorflow.eager.Remo"
  "teTensorHandleH\000B\006\n\004item2\235\006\n\014EagerServic"
  "e\022b\n\rCreateContext\022&.tensorflow.eager.Cr"
  "eateContextRequest\032\'.tensorflow.eager.Cr"
  "eateContextResponse\"\000\022b\n\rUpdateContext\022&"
  ".tensorflow.eager.UpdateContextRequest\032\'"
  ".tensorflow.eager.UpdateContextResponse\""
  "\000\022P\n\007Enqueue\022 .tensorflow.eager.EnqueueR"
  "equest\032!.tensorflow.eager.EnqueueRespons"
  "e\"\000\022]\n\020StreamingEnqueue\022 .tensorflow.eag"
  "er.EnqueueRequest\032!.tensorflow.eager.Enq"
  "ueueResponse\"\000(\0010\001\022b\n\rWaitQueueDone\022&.te"
  "nsorflow.eager.WaitQueueDoneRequest\032\'.te"
  "nsorflow.eager.WaitQueueDoneResponse\"\000\022w"
  "\n\024RunComponentFunction\022-.tensorflow.eage"
  "r.RunComponentFunctionRequest\032..tensorfl"
  "ow.eager.RunComponentFunctionResponse\"\000\022"
  "V\n\tKeepAlive\022\".tensorflow.eager.KeepAliv"
  "eRequest\032#.tensorflow.eager.KeepAliveRes"
  "ponse\"\000\022_\n\014CloseContext\022%.tensorflow.eag"
  "er.CloseContextRequest\032&.tensorflow.eage"
  "r.CloseContextResponse\"\000BWZUgithub.com/t"
  "ensorflow/tensorflow/tensorflow/go/core/"
  "protobuf/for_core_protos_go_protob\006proto"
  "3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_deps[8] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2fattr_5fvalue_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2fdevice_5fattributes_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ffunction_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2fversions_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2fremote_5ftensor_5fhandle_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fprotobuf_2ftensorflow_5fserver_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto = {
    false, false, 4521, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto,
    "tensorflow/core/protobuf/eager_service.proto",
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_deps, 8, 27,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto(&descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto);
namespace tensorflow {
namespace eager {

// ===================================================================

class Operation_Input::_Internal {
 public:
  static const ::tensorflow::eager::RemoteTensorHandle& remote_handle(const Operation_Input* msg);
  static const ::tensorflow::TensorProto& tensor(const Operation_Input* msg);
};

const ::tensorflow::eager::RemoteTensorHandle&
Operation_Input::_Internal::remote_handle(const Operation_Input* msg) {
  return *msg->_impl_.item_.remote_handle_;
}
const ::tensorflow::TensorProto&
Operation_Input::_Internal::tensor(const Operation_Input* msg) {
  return *msg->_impl_.item_.tensor_;
}
void Operation_Input::set_allocated_remote_handle(::tensorflow::eager::RemoteTensorHandle* remote_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (remote_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_handle));
    if (message_arena != submessage_arena) {
      remote_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_handle, submessage_arena);
    }
    set_has_remote_handle();
    _impl_.item_.remote_handle_ = remote_handle;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.Operation.Input.remote_handle)
}
void Operation_Input::clear_remote_handle() {
  if (_internal_has_remote_handle()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.remote_handle_;
    }
    clear_has_item();
  }
}
void Operation_Input::set_allocated_tensor(::tensorflow::TensorProto* tensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (tensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor));
    if (message_arena != submessage_arena) {
      tensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor, submessage_arena);
    }
    set_has_tensor();
    _impl_.item_.tensor_ = tensor;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.Operation.Input.tensor)
}
void Operation_Input::clear_tensor() {
  if (_internal_has_tensor()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.tensor_;
    }
    clear_has_item();
  }
}
Operation_Input::Operation_Input(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.Operation.Input)
}
Operation_Input::Operation_Input(const Operation_Input& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Operation_Input* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_item();
  switch (from.item_case()) {
    case kRemoteHandle: {
      _this->_internal_mutable_remote_handle()->::tensorflow::eager::RemoteTensorHandle::MergeFrom(
          from._internal_remote_handle());
      break;
    }
    case kTensor: {
      _this->_internal_mutable_tensor()->::tensorflow::TensorProto::MergeFrom(
          from._internal_tensor());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.Operation.Input)
}

inline void Operation_Input::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_item();
}

Operation_Input::~Operation_Input() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.Operation.Input)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Operation_Input::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_item()) {
    clear_item();
  }
}

void Operation_Input::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Operation_Input::clear_item() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.eager.Operation.Input)
  switch (item_case()) {
    case kRemoteHandle: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.remote_handle_;
      }
      break;
    }
    case kTensor: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.tensor_;
      }
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ITEM_NOT_SET;
}


void Operation_Input::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.Operation.Input)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_item();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Operation_Input::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.eager.RemoteTensorHandle remote_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.TensorProto tensor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Operation_Input::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.Operation.Input)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.eager.RemoteTensorHandle remote_handle = 1;
  if (_internal_has_remote_handle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::remote_handle(this),
        _Internal::remote_handle(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.TensorProto tensor = 2;
  if (_internal_has_tensor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tensor(this),
        _Internal::tensor(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.Operation.Input)
  return target;
}

size_t Operation_Input::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.Operation.Input)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (item_case()) {
    // .tensorflow.eager.RemoteTensorHandle remote_handle = 1;
    case kRemoteHandle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.remote_handle_);
      break;
    }
    // .tensorflow.TensorProto tensor = 2;
    case kTensor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.tensor_);
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Operation_Input::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Operation_Input::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Operation_Input::GetClassData() const { return &_class_data_; }


void Operation_Input::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Operation_Input*>(&to_msg);
  auto& from = static_cast<const Operation_Input&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.Operation.Input)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.item_case()) {
    case kRemoteHandle: {
      _this->_internal_mutable_remote_handle()->::tensorflow::eager::RemoteTensorHandle::MergeFrom(
          from._internal_remote_handle());
      break;
    }
    case kTensor: {
      _this->_internal_mutable_tensor()->::tensorflow::TensorProto::MergeFrom(
          from._internal_tensor());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Operation_Input::CopyFrom(const Operation_Input& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.Operation.Input)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation_Input::IsInitialized() const {
  return true;
}

void Operation_Input::InternalSwap(Operation_Input* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.item_, other->_impl_.item_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Operation_Input::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[0]);
}

// ===================================================================

Operation_AttrsEntry_DoNotUse::Operation_AttrsEntry_DoNotUse() {}
Operation_AttrsEntry_DoNotUse::Operation_AttrsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Operation_AttrsEntry_DoNotUse::MergeFrom(const Operation_AttrsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Operation_AttrsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[1]);
}

// ===================================================================

class Operation::_Internal {
 public:
};

void Operation::clear_attrs() {
  _impl_.attrs_.Clear();
}
Operation::Operation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &Operation::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.Operation)
}
Operation::Operation(const Operation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Operation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.control_op_ids_){from._impl_.control_op_ids_}
    , /*decltype(_impl_._control_op_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_.attrs_)*/{}
    , decltype(_impl_.op_inputs_){from._impl_.op_inputs_}
    , decltype(_impl_.name_){}
    , decltype(_impl_.device_){}
    , decltype(_impl_.id_){}
    , decltype(_impl_.func_step_id_){}
    , decltype(_impl_.is_component_function_){}
    , decltype(_impl_.is_function_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attrs_.MergeFrom(from._impl_.attrs_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device().empty()) {
    _this->_impl_.device_.Set(from._internal_device(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_function_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.is_function_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.Operation)
}

inline void Operation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.control_op_ids_){arena}
    , /*decltype(_impl_._control_op_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_.attrs_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.op_inputs_){arena}
    , decltype(_impl_.name_){}
    , decltype(_impl_.device_){}
    , decltype(_impl_.id_){int64_t{0}}
    , decltype(_impl_.func_step_id_){int64_t{0}}
    , decltype(_impl_.is_component_function_){false}
    , decltype(_impl_.is_function_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Operation::~Operation() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.Operation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void Operation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.control_op_ids_.~RepeatedField();
  _impl_.attrs_.Destruct();
  _impl_.attrs_.~MapField();
  _impl_.op_inputs_.~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.device_.Destroy();
}

void Operation::ArenaDtor(void* object) {
  Operation* _this = reinterpret_cast< Operation* >(object);
  _this->_impl_.attrs_.Destruct();
}
void Operation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Operation::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.Operation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.control_op_ids_.Clear();
  _impl_.attrs_.Clear();
  _impl_.op_inputs_.Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.device_.ClearToEmpty();
  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_function_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.is_function_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Operation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.eager.Operation.name"));
        } else
          goto handle_unusual;
        continue;
      // repeated int64 control_op_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_control_op_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_control_op_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .tensorflow.AttrValue> attrs = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attrs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string device = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_device();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.eager.Operation.device"));
        } else
          goto handle_unusual;
        continue;
      // bool is_component_function = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.is_component_function_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 func_step_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.func_step_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_function = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.is_function_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.eager.Operation.Input op_inputs = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_op_inputs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Operation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.Operation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.Operation.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated int64 control_op_ids = 4;
  {
    int byte_size = _impl_._control_op_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          4, _internal_control_op_ids(), byte_size, target);
    }
  }

  // map<string, .tensorflow.AttrValue> attrs = 5;
  if (!this->_internal_attrs().empty()) {
    using MapType = ::_pb::Map<std::string, ::tensorflow::AttrValue>;
    using WireHelper = Operation_AttrsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attrs();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "tensorflow.eager.Operation.AttrsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // string device = 6;
  if (!this->_internal_device().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.Operation.device");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_device(), target);
  }

  // bool is_component_function = 7;
  if (this->_internal_is_component_function() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_component_function(), target);
  }

  // int64 func_step_id = 8;
  if (this->_internal_func_step_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(8, this->_internal_func_step_id(), target);
  }

  // bool is_function = 9;
  if (this->_internal_is_function() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_is_function(), target);
  }

  // repeated .tensorflow.eager.Operation.Input op_inputs = 10;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_op_inputs_size()); i < n; i++) {
    const auto& repfield = this->_internal_op_inputs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(10, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.Operation)
  return target;
}

size_t Operation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.Operation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 control_op_ids = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.control_op_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._control_op_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, .tensorflow.AttrValue> attrs = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attrs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::tensorflow::AttrValue >::const_iterator
      it = this->_internal_attrs().begin();
      it != this->_internal_attrs().end(); ++it) {
    total_size += Operation_AttrsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .tensorflow.eager.Operation.Input op_inputs = 10;
  total_size += 1UL * this->_internal_op_inputs_size();
  for (const auto& msg : this->_impl_.op_inputs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string device = 6;
  if (!this->_internal_device().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device());
  }

  // int64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_id());
  }

  // int64 func_step_id = 8;
  if (this->_internal_func_step_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_func_step_id());
  }

  // bool is_component_function = 7;
  if (this->_internal_is_component_function() != 0) {
    total_size += 1 + 1;
  }

  // bool is_function = 9;
  if (this->_internal_is_function() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Operation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Operation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Operation::GetClassData() const { return &_class_data_; }


void Operation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Operation*>(&to_msg);
  auto& from = static_cast<const Operation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.Operation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.control_op_ids_.MergeFrom(from._impl_.control_op_ids_);
  _this->_impl_.attrs_.MergeFrom(from._impl_.attrs_);
  _this->_impl_.op_inputs_.MergeFrom(from._impl_.op_inputs_);
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_device().empty()) {
    _this->_internal_set_device(from._internal_device());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_func_step_id() != 0) {
    _this->_internal_set_func_step_id(from._internal_func_step_id());
  }
  if (from._internal_is_component_function() != 0) {
    _this->_internal_set_is_component_function(from._internal_is_component_function());
  }
  if (from._internal_is_function() != 0) {
    _this->_internal_set_is_function(from._internal_is_function());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Operation::CopyFrom(const Operation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.Operation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Operation::IsInitialized() const {
  return true;
}

void Operation::InternalSwap(Operation* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.control_op_ids_.InternalSwap(&other->_impl_.control_op_ids_);
  _impl_.attrs_.InternalSwap(&other->_impl_.attrs_);
  _impl_.op_inputs_.InternalSwap(&other->_impl_.op_inputs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_, lhs_arena,
      &other->_impl_.device_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Operation, _impl_.is_function_)
      + sizeof(Operation::_impl_.is_function_)
      - PROTOBUF_FIELD_OFFSET(Operation, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Operation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[2]);
}

// ===================================================================

class QueueItem::_Internal {
 public:
  static const ::tensorflow::eager::RemoteTensorHandle& handle_to_decref(const QueueItem* msg);
  static const ::tensorflow::eager::Operation& operation(const QueueItem* msg);
  static const ::tensorflow::eager::SendTensorOp& send_tensor(const QueueItem* msg);
  static const ::tensorflow::eager::RegisterFunctionOp& register_function(const QueueItem* msg);
  static const ::tensorflow::eager::CleanupFunctionOp& cleanup_function(const QueueItem* msg);
  static const ::tensorflow::eager::SyncRemoteExecutorForStream& sync_remote_executor_for_stream(const QueueItem* msg);
  static const ::tensorflow::eager::SendPackedHandleOp& send_packed_handle(const QueueItem* msg);
  static const ::tensorflow::eager::RemoveFunctionOp& remove_function(const QueueItem* msg);
};

const ::tensorflow::eager::RemoteTensorHandle&
QueueItem::_Internal::handle_to_decref(const QueueItem* msg) {
  return *msg->_impl_.item_.handle_to_decref_;
}
const ::tensorflow::eager::Operation&
QueueItem::_Internal::operation(const QueueItem* msg) {
  return *msg->_impl_.item_.operation_;
}
const ::tensorflow::eager::SendTensorOp&
QueueItem::_Internal::send_tensor(const QueueItem* msg) {
  return *msg->_impl_.item_.send_tensor_;
}
const ::tensorflow::eager::RegisterFunctionOp&
QueueItem::_Internal::register_function(const QueueItem* msg) {
  return *msg->_impl_.item_.register_function_;
}
const ::tensorflow::eager::CleanupFunctionOp&
QueueItem::_Internal::cleanup_function(const QueueItem* msg) {
  return *msg->_impl_.item_.cleanup_function_;
}
const ::tensorflow::eager::SyncRemoteExecutorForStream&
QueueItem::_Internal::sync_remote_executor_for_stream(const QueueItem* msg) {
  return *msg->_impl_.item_.sync_remote_executor_for_stream_;
}
const ::tensorflow::eager::SendPackedHandleOp&
QueueItem::_Internal::send_packed_handle(const QueueItem* msg) {
  return *msg->_impl_.item_.send_packed_handle_;
}
const ::tensorflow::eager::RemoveFunctionOp&
QueueItem::_Internal::remove_function(const QueueItem* msg) {
  return *msg->_impl_.item_.remove_function_;
}
void QueueItem::set_allocated_handle_to_decref(::tensorflow::eager::RemoteTensorHandle* handle_to_decref) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (handle_to_decref) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(handle_to_decref));
    if (message_arena != submessage_arena) {
      handle_to_decref = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, handle_to_decref, submessage_arena);
    }
    set_has_handle_to_decref();
    _impl_.item_.handle_to_decref_ = handle_to_decref;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.QueueItem.handle_to_decref)
}
void QueueItem::clear_handle_to_decref() {
  if (_internal_has_handle_to_decref()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.handle_to_decref_;
    }
    clear_has_item();
  }
}
void QueueItem::set_allocated_operation(::tensorflow::eager::Operation* operation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (operation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(operation);
    if (message_arena != submessage_arena) {
      operation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operation, submessage_arena);
    }
    set_has_operation();
    _impl_.item_.operation_ = operation;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.QueueItem.operation)
}
void QueueItem::set_allocated_send_tensor(::tensorflow::eager::SendTensorOp* send_tensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (send_tensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(send_tensor);
    if (message_arena != submessage_arena) {
      send_tensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_tensor, submessage_arena);
    }
    set_has_send_tensor();
    _impl_.item_.send_tensor_ = send_tensor;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.QueueItem.send_tensor)
}
void QueueItem::set_allocated_register_function(::tensorflow::eager::RegisterFunctionOp* register_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (register_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(register_function);
    if (message_arena != submessage_arena) {
      register_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_function, submessage_arena);
    }
    set_has_register_function();
    _impl_.item_.register_function_ = register_function;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.QueueItem.register_function)
}
void QueueItem::set_allocated_cleanup_function(::tensorflow::eager::CleanupFunctionOp* cleanup_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (cleanup_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cleanup_function);
    if (message_arena != submessage_arena) {
      cleanup_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cleanup_function, submessage_arena);
    }
    set_has_cleanup_function();
    _impl_.item_.cleanup_function_ = cleanup_function;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.QueueItem.cleanup_function)
}
void QueueItem::set_allocated_sync_remote_executor_for_stream(::tensorflow::eager::SyncRemoteExecutorForStream* sync_remote_executor_for_stream) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (sync_remote_executor_for_stream) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sync_remote_executor_for_stream);
    if (message_arena != submessage_arena) {
      sync_remote_executor_for_stream = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_remote_executor_for_stream, submessage_arena);
    }
    set_has_sync_remote_executor_for_stream();
    _impl_.item_.sync_remote_executor_for_stream_ = sync_remote_executor_for_stream;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.QueueItem.sync_remote_executor_for_stream)
}
void QueueItem::set_allocated_send_packed_handle(::tensorflow::eager::SendPackedHandleOp* send_packed_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (send_packed_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(send_packed_handle);
    if (message_arena != submessage_arena) {
      send_packed_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_packed_handle, submessage_arena);
    }
    set_has_send_packed_handle();
    _impl_.item_.send_packed_handle_ = send_packed_handle;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.QueueItem.send_packed_handle)
}
void QueueItem::set_allocated_remove_function(::tensorflow::eager::RemoveFunctionOp* remove_function) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (remove_function) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(remove_function);
    if (message_arena != submessage_arena) {
      remove_function = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remove_function, submessage_arena);
    }
    set_has_remove_function();
    _impl_.item_.remove_function_ = remove_function;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.QueueItem.remove_function)
}
QueueItem::QueueItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.QueueItem)
}
QueueItem::QueueItem(const QueueItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueueItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_item();
  switch (from.item_case()) {
    case kHandleToDecref: {
      _this->_internal_mutable_handle_to_decref()->::tensorflow::eager::RemoteTensorHandle::MergeFrom(
          from._internal_handle_to_decref());
      break;
    }
    case kOperation: {
      _this->_internal_mutable_operation()->::tensorflow::eager::Operation::MergeFrom(
          from._internal_operation());
      break;
    }
    case kSendTensor: {
      _this->_internal_mutable_send_tensor()->::tensorflow::eager::SendTensorOp::MergeFrom(
          from._internal_send_tensor());
      break;
    }
    case kRegisterFunction: {
      _this->_internal_mutable_register_function()->::tensorflow::eager::RegisterFunctionOp::MergeFrom(
          from._internal_register_function());
      break;
    }
    case kCleanupFunction: {
      _this->_internal_mutable_cleanup_function()->::tensorflow::eager::CleanupFunctionOp::MergeFrom(
          from._internal_cleanup_function());
      break;
    }
    case kSyncRemoteExecutorForStream: {
      _this->_internal_mutable_sync_remote_executor_for_stream()->::tensorflow::eager::SyncRemoteExecutorForStream::MergeFrom(
          from._internal_sync_remote_executor_for_stream());
      break;
    }
    case kSendPackedHandle: {
      _this->_internal_mutable_send_packed_handle()->::tensorflow::eager::SendPackedHandleOp::MergeFrom(
          from._internal_send_packed_handle());
      break;
    }
    case kRemoveFunction: {
      _this->_internal_mutable_remove_function()->::tensorflow::eager::RemoveFunctionOp::MergeFrom(
          from._internal_remove_function());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.QueueItem)
}

inline void QueueItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_item();
}

QueueItem::~QueueItem() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.QueueItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueueItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_item()) {
    clear_item();
  }
}

void QueueItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueueItem::clear_item() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.eager.QueueItem)
  switch (item_case()) {
    case kHandleToDecref: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.handle_to_decref_;
      }
      break;
    }
    case kOperation: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.operation_;
      }
      break;
    }
    case kSendTensor: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.send_tensor_;
      }
      break;
    }
    case kRegisterFunction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.register_function_;
      }
      break;
    }
    case kCleanupFunction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.cleanup_function_;
      }
      break;
    }
    case kSyncRemoteExecutorForStream: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.sync_remote_executor_for_stream_;
      }
      break;
    }
    case kSendPackedHandle: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.send_packed_handle_;
      }
      break;
    }
    case kRemoveFunction: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.remove_function_;
      }
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ITEM_NOT_SET;
}


void QueueItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.QueueItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_item();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueueItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.eager.RemoteTensorHandle handle_to_decref = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_handle_to_decref(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.eager.Operation operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_operation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.eager.SendTensorOp send_tensor = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_tensor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.eager.RegisterFunctionOp register_function = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.eager.CleanupFunctionOp cleanup_function = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cleanup_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.eager.SyncRemoteExecutorForStream sync_remote_executor_for_stream = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync_remote_executor_for_stream(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.eager.SendPackedHandleOp send_packed_handle = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_packed_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.eager.RemoveFunctionOp remove_function = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_remove_function(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueueItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.QueueItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.eager.RemoteTensorHandle handle_to_decref = 1;
  if (_internal_has_handle_to_decref()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::handle_to_decref(this),
        _Internal::handle_to_decref(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.eager.Operation operation = 2;
  if (_internal_has_operation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::operation(this),
        _Internal::operation(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.eager.SendTensorOp send_tensor = 3;
  if (_internal_has_send_tensor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::send_tensor(this),
        _Internal::send_tensor(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.eager.RegisterFunctionOp register_function = 4;
  if (_internal_has_register_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::register_function(this),
        _Internal::register_function(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.eager.CleanupFunctionOp cleanup_function = 5;
  if (_internal_has_cleanup_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cleanup_function(this),
        _Internal::cleanup_function(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.eager.SyncRemoteExecutorForStream sync_remote_executor_for_stream = 6;
  if (_internal_has_sync_remote_executor_for_stream()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::sync_remote_executor_for_stream(this),
        _Internal::sync_remote_executor_for_stream(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.eager.SendPackedHandleOp send_packed_handle = 7;
  if (_internal_has_send_packed_handle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::send_packed_handle(this),
        _Internal::send_packed_handle(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.eager.RemoveFunctionOp remove_function = 8;
  if (_internal_has_remove_function()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::remove_function(this),
        _Internal::remove_function(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.QueueItem)
  return target;
}

size_t QueueItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.QueueItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (item_case()) {
    // .tensorflow.eager.RemoteTensorHandle handle_to_decref = 1;
    case kHandleToDecref: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.handle_to_decref_);
      break;
    }
    // .tensorflow.eager.Operation operation = 2;
    case kOperation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.operation_);
      break;
    }
    // .tensorflow.eager.SendTensorOp send_tensor = 3;
    case kSendTensor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.send_tensor_);
      break;
    }
    // .tensorflow.eager.RegisterFunctionOp register_function = 4;
    case kRegisterFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.register_function_);
      break;
    }
    // .tensorflow.eager.CleanupFunctionOp cleanup_function = 5;
    case kCleanupFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.cleanup_function_);
      break;
    }
    // .tensorflow.eager.SyncRemoteExecutorForStream sync_remote_executor_for_stream = 6;
    case kSyncRemoteExecutorForStream: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.sync_remote_executor_for_stream_);
      break;
    }
    // .tensorflow.eager.SendPackedHandleOp send_packed_handle = 7;
    case kSendPackedHandle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.send_packed_handle_);
      break;
    }
    // .tensorflow.eager.RemoveFunctionOp remove_function = 8;
    case kRemoveFunction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.remove_function_);
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueueItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueueItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueueItem::GetClassData() const { return &_class_data_; }


void QueueItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueueItem*>(&to_msg);
  auto& from = static_cast<const QueueItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.QueueItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.item_case()) {
    case kHandleToDecref: {
      _this->_internal_mutable_handle_to_decref()->::tensorflow::eager::RemoteTensorHandle::MergeFrom(
          from._internal_handle_to_decref());
      break;
    }
    case kOperation: {
      _this->_internal_mutable_operation()->::tensorflow::eager::Operation::MergeFrom(
          from._internal_operation());
      break;
    }
    case kSendTensor: {
      _this->_internal_mutable_send_tensor()->::tensorflow::eager::SendTensorOp::MergeFrom(
          from._internal_send_tensor());
      break;
    }
    case kRegisterFunction: {
      _this->_internal_mutable_register_function()->::tensorflow::eager::RegisterFunctionOp::MergeFrom(
          from._internal_register_function());
      break;
    }
    case kCleanupFunction: {
      _this->_internal_mutable_cleanup_function()->::tensorflow::eager::CleanupFunctionOp::MergeFrom(
          from._internal_cleanup_function());
      break;
    }
    case kSyncRemoteExecutorForStream: {
      _this->_internal_mutable_sync_remote_executor_for_stream()->::tensorflow::eager::SyncRemoteExecutorForStream::MergeFrom(
          from._internal_sync_remote_executor_for_stream());
      break;
    }
    case kSendPackedHandle: {
      _this->_internal_mutable_send_packed_handle()->::tensorflow::eager::SendPackedHandleOp::MergeFrom(
          from._internal_send_packed_handle());
      break;
    }
    case kRemoveFunction: {
      _this->_internal_mutable_remove_function()->::tensorflow::eager::RemoveFunctionOp::MergeFrom(
          from._internal_remove_function());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueueItem::CopyFrom(const QueueItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.QueueItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueItem::IsInitialized() const {
  return true;
}

void QueueItem::InternalSwap(QueueItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.item_, other->_impl_.item_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueueItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[3]);
}

// ===================================================================

class QueueResponse::_Internal {
 public:
};

void QueueResponse::clear_shape() {
  _impl_.shape_.Clear();
}
void QueueResponse::clear_tensor() {
  _impl_.tensor_.Clear();
}
QueueResponse::QueueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.QueueResponse)
}
QueueResponse::QueueResponse(const QueueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  QueueResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){from._impl_.shape_}
    , decltype(_impl_.tensor_){from._impl_.tensor_}
    , decltype(_impl_.device_){from._impl_.device_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.QueueResponse)
}

inline void QueueResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){arena}
    , decltype(_impl_.tensor_){arena}
    , decltype(_impl_.device_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

QueueResponse::~QueueResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.QueueResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void QueueResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shape_.~RepeatedPtrField();
  _impl_.tensor_.~RepeatedPtrField();
  _impl_.device_.~RepeatedPtrField();
}

void QueueResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void QueueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.QueueResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shape_.Clear();
  _impl_.tensor_.Clear();
  _impl_.device_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QueueResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.TensorShapeProto shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shape(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.TensorProto tensor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string device = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_device();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "tensorflow.eager.QueueResponse.device"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QueueResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.QueueResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.TensorShapeProto shape = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shape_size()); i < n; i++) {
    const auto& repfield = this->_internal_shape(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tensorflow.TensorProto tensor = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tensor_size()); i < n; i++) {
    const auto& repfield = this->_internal_tensor(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated string device = 3;
  for (int i = 0, n = this->_internal_device_size(); i < n; i++) {
    const auto& s = this->_internal_device(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.QueueResponse.device");
    target = stream->WriteString(3, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.QueueResponse)
  return target;
}

size_t QueueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.QueueResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.TensorShapeProto shape = 1;
  total_size += 1UL * this->_internal_shape_size();
  for (const auto& msg : this->_impl_.shape_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.TensorProto tensor = 2;
  total_size += 1UL * this->_internal_tensor_size();
  for (const auto& msg : this->_impl_.tensor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string device = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.device_.size());
  for (int i = 0, n = _impl_.device_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.device_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QueueResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    QueueResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QueueResponse::GetClassData() const { return &_class_data_; }


void QueueResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<QueueResponse*>(&to_msg);
  auto& from = static_cast<const QueueResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.QueueResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shape_.MergeFrom(from._impl_.shape_);
  _this->_impl_.tensor_.MergeFrom(from._impl_.tensor_);
  _this->_impl_.device_.MergeFrom(from._impl_.device_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QueueResponse::CopyFrom(const QueueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.QueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueueResponse::IsInitialized() const {
  return true;
}

void QueueResponse::InternalSwap(QueueResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shape_.InternalSwap(&other->_impl_.shape_);
  _impl_.tensor_.InternalSwap(&other->_impl_.tensor_);
  _impl_.device_.InternalSwap(&other->_impl_.device_);
}

::PROTOBUF_NAMESPACE_ID::Metadata QueueResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[4]);
}

// ===================================================================

class CreateContextRequest::_Internal {
 public:
  static const ::tensorflow::ServerDef& server_def(const CreateContextRequest* msg);
  static const ::tensorflow::VersionDef& version_def(const CreateContextRequest* msg);
};

const ::tensorflow::ServerDef&
CreateContextRequest::_Internal::server_def(const CreateContextRequest* msg) {
  return *msg->_impl_.server_def_;
}
const ::tensorflow::VersionDef&
CreateContextRequest::_Internal::version_def(const CreateContextRequest* msg) {
  return *msg->_impl_.version_def_;
}
void CreateContextRequest::clear_server_def() {
  if (GetArenaForAllocation() == nullptr && _impl_.server_def_ != nullptr) {
    delete _impl_.server_def_;
  }
  _impl_.server_def_ = nullptr;
}
void CreateContextRequest::clear_version_def() {
  if (GetArenaForAllocation() == nullptr && _impl_.version_def_ != nullptr) {
    delete _impl_.version_def_;
  }
  _impl_.version_def_ = nullptr;
}
void CreateContextRequest::clear_cluster_device_attributes() {
  _impl_.cluster_device_attributes_.Clear();
}
CreateContextRequest::CreateContextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.CreateContextRequest)
}
CreateContextRequest::CreateContextRequest(const CreateContextRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateContextRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cluster_device_attributes_){from._impl_.cluster_device_attributes_}
    , decltype(_impl_.server_def_){nullptr}
    , decltype(_impl_.version_def_){nullptr}
    , decltype(_impl_.keep_alive_secs_){}
    , decltype(_impl_.context_id_){}
    , decltype(_impl_.context_view_id_){}
    , decltype(_impl_.async_){}
    , decltype(_impl_.lazy_copy_remote_function_inputs_){}
    , decltype(_impl_.clear_existing_contexts_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_server_def()) {
    _this->_impl_.server_def_ = new ::tensorflow::ServerDef(*from._impl_.server_def_);
  }
  if (from._internal_has_version_def()) {
    _this->_impl_.version_def_ = new ::tensorflow::VersionDef(*from._impl_.version_def_);
  }
  ::memcpy(&_impl_.keep_alive_secs_, &from._impl_.keep_alive_secs_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.clear_existing_contexts_) -
    reinterpret_cast<char*>(&_impl_.keep_alive_secs_)) + sizeof(_impl_.clear_existing_contexts_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.CreateContextRequest)
}

inline void CreateContextRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cluster_device_attributes_){arena}
    , decltype(_impl_.server_def_){nullptr}
    , decltype(_impl_.version_def_){nullptr}
    , decltype(_impl_.keep_alive_secs_){int64_t{0}}
    , decltype(_impl_.context_id_){uint64_t{0u}}
    , decltype(_impl_.context_view_id_){uint64_t{0u}}
    , decltype(_impl_.async_){false}
    , decltype(_impl_.lazy_copy_remote_function_inputs_){false}
    , decltype(_impl_.clear_existing_contexts_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateContextRequest::~CreateContextRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.CreateContextRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateContextRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cluster_device_attributes_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.server_def_;
  if (this != internal_default_instance()) delete _impl_.version_def_;
}

void CreateContextRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateContextRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.CreateContextRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cluster_device_attributes_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.server_def_ != nullptr) {
    delete _impl_.server_def_;
  }
  _impl_.server_def_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.version_def_ != nullptr) {
    delete _impl_.version_def_;
  }
  _impl_.version_def_ = nullptr;
  ::memset(&_impl_.keep_alive_secs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.clear_existing_contexts_) -
      reinterpret_cast<char*>(&_impl_.keep_alive_secs_)) + sizeof(_impl_.clear_existing_contexts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateContextRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.ServerDef server_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_def(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool async = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.async_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 keep_alive_secs = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.keep_alive_secs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.VersionDef version_def = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_version_def(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cluster_device_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // fixed64 context_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          _impl_.context_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // fixed64 context_view_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          _impl_.context_view_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // bool lazy_copy_remote_function_inputs = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.lazy_copy_remote_function_inputs_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool clear_existing_contexts = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.clear_existing_contexts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateContextRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.CreateContextRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.ServerDef server_def = 1;
  if (this->_internal_has_server_def()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::server_def(this),
        _Internal::server_def(this).GetCachedSize(), target, stream);
  }

  // bool async = 2;
  if (this->_internal_async() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_async(), target);
  }

  // int64 keep_alive_secs = 3;
  if (this->_internal_keep_alive_secs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_keep_alive_secs(), target);
  }

  // .tensorflow.VersionDef version_def = 4;
  if (this->_internal_has_version_def()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::version_def(this),
        _Internal::version_def(this).GetCachedSize(), target, stream);
  }

  // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cluster_device_attributes_size()); i < n; i++) {
    const auto& repfield = this->_internal_cluster_device_attributes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // fixed64 context_id = 7;
  if (this->_internal_context_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(7, this->_internal_context_id(), target);
  }

  // fixed64 context_view_id = 8;
  if (this->_internal_context_view_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(8, this->_internal_context_view_id(), target);
  }

  // bool lazy_copy_remote_function_inputs = 9;
  if (this->_internal_lazy_copy_remote_function_inputs() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(9, this->_internal_lazy_copy_remote_function_inputs(), target);
  }

  // bool clear_existing_contexts = 10;
  if (this->_internal_clear_existing_contexts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(10, this->_internal_clear_existing_contexts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.CreateContextRequest)
  return target;
}

size_t CreateContextRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.CreateContextRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 6;
  total_size += 1UL * this->_internal_cluster_device_attributes_size();
  for (const auto& msg : this->_impl_.cluster_device_attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tensorflow.ServerDef server_def = 1;
  if (this->_internal_has_server_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.server_def_);
  }

  // .tensorflow.VersionDef version_def = 4;
  if (this->_internal_has_version_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.version_def_);
  }

  // int64 keep_alive_secs = 3;
  if (this->_internal_keep_alive_secs() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_keep_alive_secs());
  }

  // fixed64 context_id = 7;
  if (this->_internal_context_id() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 context_view_id = 8;
  if (this->_internal_context_view_id() != 0) {
    total_size += 1 + 8;
  }

  // bool async = 2;
  if (this->_internal_async() != 0) {
    total_size += 1 + 1;
  }

  // bool lazy_copy_remote_function_inputs = 9;
  if (this->_internal_lazy_copy_remote_function_inputs() != 0) {
    total_size += 1 + 1;
  }

  // bool clear_existing_contexts = 10;
  if (this->_internal_clear_existing_contexts() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateContextRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateContextRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateContextRequest::GetClassData() const { return &_class_data_; }


void CreateContextRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateContextRequest*>(&to_msg);
  auto& from = static_cast<const CreateContextRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.CreateContextRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cluster_device_attributes_.MergeFrom(from._impl_.cluster_device_attributes_);
  if (from._internal_has_server_def()) {
    _this->_internal_mutable_server_def()->::tensorflow::ServerDef::MergeFrom(
        from._internal_server_def());
  }
  if (from._internal_has_version_def()) {
    _this->_internal_mutable_version_def()->::tensorflow::VersionDef::MergeFrom(
        from._internal_version_def());
  }
  if (from._internal_keep_alive_secs() != 0) {
    _this->_internal_set_keep_alive_secs(from._internal_keep_alive_secs());
  }
  if (from._internal_context_id() != 0) {
    _this->_internal_set_context_id(from._internal_context_id());
  }
  if (from._internal_context_view_id() != 0) {
    _this->_internal_set_context_view_id(from._internal_context_view_id());
  }
  if (from._internal_async() != 0) {
    _this->_internal_set_async(from._internal_async());
  }
  if (from._internal_lazy_copy_remote_function_inputs() != 0) {
    _this->_internal_set_lazy_copy_remote_function_inputs(from._internal_lazy_copy_remote_function_inputs());
  }
  if (from._internal_clear_existing_contexts() != 0) {
    _this->_internal_set_clear_existing_contexts(from._internal_clear_existing_contexts());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateContextRequest::CopyFrom(const CreateContextRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.CreateContextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateContextRequest::IsInitialized() const {
  return true;
}

void CreateContextRequest::InternalSwap(CreateContextRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cluster_device_attributes_.InternalSwap(&other->_impl_.cluster_device_attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateContextRequest, _impl_.clear_existing_contexts_)
      + sizeof(CreateContextRequest::_impl_.clear_existing_contexts_)
      - PROTOBUF_FIELD_OFFSET(CreateContextRequest, _impl_.server_def_)>(
          reinterpret_cast<char*>(&_impl_.server_def_),
          reinterpret_cast<char*>(&other->_impl_.server_def_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateContextRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[5]);
}

// ===================================================================

class CreateContextResponse::_Internal {
 public:
};

void CreateContextResponse::clear_device_attributes() {
  _impl_.device_attributes_.Clear();
}
CreateContextResponse::CreateContextResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.CreateContextResponse)
}
CreateContextResponse::CreateContextResponse(const CreateContextResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CreateContextResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_attributes_){from._impl_.device_attributes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.CreateContextResponse)
}

inline void CreateContextResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_attributes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CreateContextResponse::~CreateContextResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.CreateContextResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CreateContextResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_attributes_.~RepeatedPtrField();
}

void CreateContextResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CreateContextResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.CreateContextResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_attributes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateContextResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.DeviceAttributes device_attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_device_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateContextResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.CreateContextResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceAttributes device_attributes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_device_attributes_size()); i < n; i++) {
    const auto& repfield = this->_internal_device_attributes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.CreateContextResponse)
  return target;
}

size_t CreateContextResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.CreateContextResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceAttributes device_attributes = 2;
  total_size += 1UL * this->_internal_device_attributes_size();
  for (const auto& msg : this->_impl_.device_attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateContextResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CreateContextResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateContextResponse::GetClassData() const { return &_class_data_; }


void CreateContextResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CreateContextResponse*>(&to_msg);
  auto& from = static_cast<const CreateContextResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.CreateContextResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.device_attributes_.MergeFrom(from._impl_.device_attributes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateContextResponse::CopyFrom(const CreateContextResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.CreateContextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateContextResponse::IsInitialized() const {
  return true;
}

void CreateContextResponse::InternalSwap(CreateContextResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.device_attributes_.InternalSwap(&other->_impl_.device_attributes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateContextResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[6]);
}

// ===================================================================

class UpdateContextRequest::_Internal {
 public:
  static const ::tensorflow::ServerDef& server_def(const UpdateContextRequest* msg);
};

const ::tensorflow::ServerDef&
UpdateContextRequest::_Internal::server_def(const UpdateContextRequest* msg) {
  return *msg->_impl_.server_def_;
}
void UpdateContextRequest::clear_server_def() {
  if (GetArenaForAllocation() == nullptr && _impl_.server_def_ != nullptr) {
    delete _impl_.server_def_;
  }
  _impl_.server_def_ = nullptr;
}
void UpdateContextRequest::clear_cluster_device_attributes() {
  _impl_.cluster_device_attributes_.Clear();
}
UpdateContextRequest::UpdateContextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.UpdateContextRequest)
}
UpdateContextRequest::UpdateContextRequest(const UpdateContextRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateContextRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.cluster_device_attributes_){from._impl_.cluster_device_attributes_}
    , decltype(_impl_.server_def_){nullptr}
    , decltype(_impl_.context_id_){}
    , decltype(_impl_.context_view_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_server_def()) {
    _this->_impl_.server_def_ = new ::tensorflow::ServerDef(*from._impl_.server_def_);
  }
  ::memcpy(&_impl_.context_id_, &from._impl_.context_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.context_view_id_) -
    reinterpret_cast<char*>(&_impl_.context_id_)) + sizeof(_impl_.context_view_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.UpdateContextRequest)
}

inline void UpdateContextRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.cluster_device_attributes_){arena}
    , decltype(_impl_.server_def_){nullptr}
    , decltype(_impl_.context_id_){uint64_t{0u}}
    , decltype(_impl_.context_view_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateContextRequest::~UpdateContextRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.UpdateContextRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateContextRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.cluster_device_attributes_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.server_def_;
}

void UpdateContextRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateContextRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.UpdateContextRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.cluster_device_attributes_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.server_def_ != nullptr) {
    delete _impl_.server_def_;
  }
  _impl_.server_def_ = nullptr;
  ::memset(&_impl_.context_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.context_view_id_) -
      reinterpret_cast<char*>(&_impl_.context_id_)) + sizeof(_impl_.context_view_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateContextRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.ServerDef server_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_server_def(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cluster_device_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // fixed64 context_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.context_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // fixed64 context_view_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          _impl_.context_view_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateContextRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.UpdateContextRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.ServerDef server_def = 1;
  if (this->_internal_has_server_def()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::server_def(this),
        _Internal::server_def(this).GetCachedSize(), target, stream);
  }

  // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cluster_device_attributes_size()); i < n; i++) {
    const auto& repfield = this->_internal_cluster_device_attributes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // fixed64 context_id = 3;
  if (this->_internal_context_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(3, this->_internal_context_id(), target);
  }

  // fixed64 context_view_id = 4;
  if (this->_internal_context_view_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(4, this->_internal_context_view_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.UpdateContextRequest)
  return target;
}

size_t UpdateContextRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.UpdateContextRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceAttributes cluster_device_attributes = 2;
  total_size += 1UL * this->_internal_cluster_device_attributes_size();
  for (const auto& msg : this->_impl_.cluster_device_attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .tensorflow.ServerDef server_def = 1;
  if (this->_internal_has_server_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.server_def_);
  }

  // fixed64 context_id = 3;
  if (this->_internal_context_id() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 context_view_id = 4;
  if (this->_internal_context_view_id() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateContextRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateContextRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateContextRequest::GetClassData() const { return &_class_data_; }


void UpdateContextRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateContextRequest*>(&to_msg);
  auto& from = static_cast<const UpdateContextRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.UpdateContextRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.cluster_device_attributes_.MergeFrom(from._impl_.cluster_device_attributes_);
  if (from._internal_has_server_def()) {
    _this->_internal_mutable_server_def()->::tensorflow::ServerDef::MergeFrom(
        from._internal_server_def());
  }
  if (from._internal_context_id() != 0) {
    _this->_internal_set_context_id(from._internal_context_id());
  }
  if (from._internal_context_view_id() != 0) {
    _this->_internal_set_context_view_id(from._internal_context_view_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateContextRequest::CopyFrom(const UpdateContextRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.UpdateContextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateContextRequest::IsInitialized() const {
  return true;
}

void UpdateContextRequest::InternalSwap(UpdateContextRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.cluster_device_attributes_.InternalSwap(&other->_impl_.cluster_device_attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateContextRequest, _impl_.context_view_id_)
      + sizeof(UpdateContextRequest::_impl_.context_view_id_)
      - PROTOBUF_FIELD_OFFSET(UpdateContextRequest, _impl_.server_def_)>(
          reinterpret_cast<char*>(&_impl_.server_def_),
          reinterpret_cast<char*>(&other->_impl_.server_def_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateContextRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[7]);
}

// ===================================================================

class UpdateContextResponse::_Internal {
 public:
};

void UpdateContextResponse::clear_device_attributes() {
  _impl_.device_attributes_.Clear();
}
UpdateContextResponse::UpdateContextResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.UpdateContextResponse)
}
UpdateContextResponse::UpdateContextResponse(const UpdateContextResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  UpdateContextResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_attributes_){from._impl_.device_attributes_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.UpdateContextResponse)
}

inline void UpdateContextResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_attributes_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

UpdateContextResponse::~UpdateContextResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.UpdateContextResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateContextResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_attributes_.~RepeatedPtrField();
}

void UpdateContextResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateContextResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.UpdateContextResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_attributes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateContextResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.DeviceAttributes device_attributes = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_device_attributes(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateContextResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.UpdateContextResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceAttributes device_attributes = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_device_attributes_size()); i < n; i++) {
    const auto& repfield = this->_internal_device_attributes(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.UpdateContextResponse)
  return target;
}

size_t UpdateContextResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.UpdateContextResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.DeviceAttributes device_attributes = 1;
  total_size += 1UL * this->_internal_device_attributes_size();
  for (const auto& msg : this->_impl_.device_attributes_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateContextResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    UpdateContextResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateContextResponse::GetClassData() const { return &_class_data_; }


void UpdateContextResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<UpdateContextResponse*>(&to_msg);
  auto& from = static_cast<const UpdateContextResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.UpdateContextResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.device_attributes_.MergeFrom(from._impl_.device_attributes_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateContextResponse::CopyFrom(const UpdateContextResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.UpdateContextResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateContextResponse::IsInitialized() const {
  return true;
}

void UpdateContextResponse::InternalSwap(UpdateContextResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.device_attributes_.InternalSwap(&other->_impl_.device_attributes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateContextResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[8]);
}

// ===================================================================

class EnqueueRequest::_Internal {
 public:
};

EnqueueRequest::EnqueueRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.EnqueueRequest)
}
EnqueueRequest::EnqueueRequest(const EnqueueRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnqueueRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.queue_){from._impl_.queue_}
    , decltype(_impl_.context_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.context_id_ = from._impl_.context_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.EnqueueRequest)
}

inline void EnqueueRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.queue_){arena}
    , decltype(_impl_.context_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EnqueueRequest::~EnqueueRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.EnqueueRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnqueueRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.queue_.~RepeatedPtrField();
}

void EnqueueRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnqueueRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.EnqueueRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.queue_.Clear();
  _impl_.context_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnqueueRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 context_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.context_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.eager.QueueItem queue = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_queue(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnqueueRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.EnqueueRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 context_id = 1;
  if (this->_internal_context_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_context_id(), target);
  }

  // repeated .tensorflow.eager.QueueItem queue = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_queue_size()); i < n; i++) {
    const auto& repfield = this->_internal_queue(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.EnqueueRequest)
  return target;
}

size_t EnqueueRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.EnqueueRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.eager.QueueItem queue = 3;
  total_size += 1UL * this->_internal_queue_size();
  for (const auto& msg : this->_impl_.queue_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // fixed64 context_id = 1;
  if (this->_internal_context_id() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnqueueRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnqueueRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnqueueRequest::GetClassData() const { return &_class_data_; }


void EnqueueRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnqueueRequest*>(&to_msg);
  auto& from = static_cast<const EnqueueRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.EnqueueRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.queue_.MergeFrom(from._impl_.queue_);
  if (from._internal_context_id() != 0) {
    _this->_internal_set_context_id(from._internal_context_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnqueueRequest::CopyFrom(const EnqueueRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.EnqueueRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnqueueRequest::IsInitialized() const {
  return true;
}

void EnqueueRequest::InternalSwap(EnqueueRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.queue_.InternalSwap(&other->_impl_.queue_);
  swap(_impl_.context_id_, other->_impl_.context_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnqueueRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[9]);
}

// ===================================================================

class EnqueueResponse::_Internal {
 public:
};

EnqueueResponse::EnqueueResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.EnqueueResponse)
}
EnqueueResponse::EnqueueResponse(const EnqueueResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EnqueueResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.queue_response_){from._impl_.queue_response_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.EnqueueResponse)
}

inline void EnqueueResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.queue_response_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EnqueueResponse::~EnqueueResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.EnqueueResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EnqueueResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.queue_response_.~RepeatedPtrField();
}

void EnqueueResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EnqueueResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.EnqueueResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.queue_response_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnqueueResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.eager.QueueResponse queue_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_queue_response(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnqueueResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.EnqueueResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.eager.QueueResponse queue_response = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_queue_response_size()); i < n; i++) {
    const auto& repfield = this->_internal_queue_response(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.EnqueueResponse)
  return target;
}

size_t EnqueueResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.EnqueueResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.eager.QueueResponse queue_response = 1;
  total_size += 1UL * this->_internal_queue_response_size();
  for (const auto& msg : this->_impl_.queue_response_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnqueueResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EnqueueResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnqueueResponse::GetClassData() const { return &_class_data_; }


void EnqueueResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EnqueueResponse*>(&to_msg);
  auto& from = static_cast<const EnqueueResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.EnqueueResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.queue_response_.MergeFrom(from._impl_.queue_response_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnqueueResponse::CopyFrom(const EnqueueResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.EnqueueResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnqueueResponse::IsInitialized() const {
  return true;
}

void EnqueueResponse::InternalSwap(EnqueueResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.queue_response_.InternalSwap(&other->_impl_.queue_response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnqueueResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[10]);
}

// ===================================================================

class WaitQueueDoneRequest::_Internal {
 public:
};

WaitQueueDoneRequest::WaitQueueDoneRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.WaitQueueDoneRequest)
}
WaitQueueDoneRequest::WaitQueueDoneRequest(const WaitQueueDoneRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WaitQueueDoneRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.op_id_){from._impl_.op_id_}
    , /*decltype(_impl_._op_id_cached_byte_size_)*/{0}
    , decltype(_impl_.context_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.context_id_ = from._impl_.context_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.WaitQueueDoneRequest)
}

inline void WaitQueueDoneRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.op_id_){arena}
    , /*decltype(_impl_._op_id_cached_byte_size_)*/{0}
    , decltype(_impl_.context_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WaitQueueDoneRequest::~WaitQueueDoneRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.WaitQueueDoneRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WaitQueueDoneRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.op_id_.~RepeatedField();
}

void WaitQueueDoneRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WaitQueueDoneRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.WaitQueueDoneRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.op_id_.Clear();
  _impl_.context_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WaitQueueDoneRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 context_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.context_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // repeated int64 op_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt64Parser(_internal_mutable_op_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_op_id(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WaitQueueDoneRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.WaitQueueDoneRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 context_id = 1;
  if (this->_internal_context_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_context_id(), target);
  }

  // repeated int64 op_id = 2;
  {
    int byte_size = _impl_._op_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt64Packed(
          2, _internal_op_id(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.WaitQueueDoneRequest)
  return target;
}

size_t WaitQueueDoneRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.WaitQueueDoneRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int64 op_id = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int64Size(this->_impl_.op_id_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._op_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // fixed64 context_id = 1;
  if (this->_internal_context_id() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaitQueueDoneRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WaitQueueDoneRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaitQueueDoneRequest::GetClassData() const { return &_class_data_; }


void WaitQueueDoneRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WaitQueueDoneRequest*>(&to_msg);
  auto& from = static_cast<const WaitQueueDoneRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.WaitQueueDoneRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.op_id_.MergeFrom(from._impl_.op_id_);
  if (from._internal_context_id() != 0) {
    _this->_internal_set_context_id(from._internal_context_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WaitQueueDoneRequest::CopyFrom(const WaitQueueDoneRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.WaitQueueDoneRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaitQueueDoneRequest::IsInitialized() const {
  return true;
}

void WaitQueueDoneRequest::InternalSwap(WaitQueueDoneRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.op_id_.InternalSwap(&other->_impl_.op_id_);
  swap(_impl_.context_id_, other->_impl_.context_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WaitQueueDoneRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[11]);
}

// ===================================================================

class WaitQueueDoneResponse::_Internal {
 public:
};

WaitQueueDoneResponse::WaitQueueDoneResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.WaitQueueDoneResponse)
}
WaitQueueDoneResponse::WaitQueueDoneResponse(const WaitQueueDoneResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  WaitQueueDoneResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.WaitQueueDoneResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WaitQueueDoneResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WaitQueueDoneResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata WaitQueueDoneResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[12]);
}

// ===================================================================

class RunComponentFunctionRequest::_Internal {
 public:
  static const ::tensorflow::eager::Operation& operation(const RunComponentFunctionRequest* msg);
};

const ::tensorflow::eager::Operation&
RunComponentFunctionRequest::_Internal::operation(const RunComponentFunctionRequest* msg) {
  return *msg->_impl_.operation_;
}
RunComponentFunctionRequest::RunComponentFunctionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.RunComponentFunctionRequest)
}
RunComponentFunctionRequest::RunComponentFunctionRequest(const RunComponentFunctionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RunComponentFunctionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.output_num_){from._impl_.output_num_}
    , /*decltype(_impl_._output_num_cached_byte_size_)*/{0}
    , decltype(_impl_.operation_){nullptr}
    , decltype(_impl_.context_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_operation()) {
    _this->_impl_.operation_ = new ::tensorflow::eager::Operation(*from._impl_.operation_);
  }
  _this->_impl_.context_id_ = from._impl_.context_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.RunComponentFunctionRequest)
}

inline void RunComponentFunctionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.output_num_){arena}
    , /*decltype(_impl_._output_num_cached_byte_size_)*/{0}
    , decltype(_impl_.operation_){nullptr}
    , decltype(_impl_.context_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RunComponentFunctionRequest::~RunComponentFunctionRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.RunComponentFunctionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RunComponentFunctionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.output_num_.~RepeatedField();
  if (this != internal_default_instance()) delete _impl_.operation_;
}

void RunComponentFunctionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RunComponentFunctionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.RunComponentFunctionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.output_num_.Clear();
  if (GetArenaForAllocation() == nullptr && _impl_.operation_ != nullptr) {
    delete _impl_.operation_;
  }
  _impl_.operation_ = nullptr;
  _impl_.context_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunComponentFunctionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 context_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.context_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.eager.Operation operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_operation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 output_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_output_num(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          _internal_add_output_num(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RunComponentFunctionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.RunComponentFunctionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 context_id = 1;
  if (this->_internal_context_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_context_id(), target);
  }

  // .tensorflow.eager.Operation operation = 2;
  if (this->_internal_has_operation()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::operation(this),
        _Internal::operation(this).GetCachedSize(), target, stream);
  }

  // repeated int32 output_num = 3;
  {
    int byte_size = _impl_._output_num_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_output_num(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.RunComponentFunctionRequest)
  return target;
}

size_t RunComponentFunctionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.RunComponentFunctionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 output_num = 3;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.output_num_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._output_num_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .tensorflow.eager.Operation operation = 2;
  if (this->_internal_has_operation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.operation_);
  }

  // fixed64 context_id = 1;
  if (this->_internal_context_id() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunComponentFunctionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RunComponentFunctionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunComponentFunctionRequest::GetClassData() const { return &_class_data_; }


void RunComponentFunctionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RunComponentFunctionRequest*>(&to_msg);
  auto& from = static_cast<const RunComponentFunctionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.RunComponentFunctionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.output_num_.MergeFrom(from._impl_.output_num_);
  if (from._internal_has_operation()) {
    _this->_internal_mutable_operation()->::tensorflow::eager::Operation::MergeFrom(
        from._internal_operation());
  }
  if (from._internal_context_id() != 0) {
    _this->_internal_set_context_id(from._internal_context_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunComponentFunctionRequest::CopyFrom(const RunComponentFunctionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.RunComponentFunctionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunComponentFunctionRequest::IsInitialized() const {
  return true;
}

void RunComponentFunctionRequest::InternalSwap(RunComponentFunctionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.output_num_.InternalSwap(&other->_impl_.output_num_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RunComponentFunctionRequest, _impl_.context_id_)
      + sizeof(RunComponentFunctionRequest::_impl_.context_id_)
      - PROTOBUF_FIELD_OFFSET(RunComponentFunctionRequest, _impl_.operation_)>(
          reinterpret_cast<char*>(&_impl_.operation_),
          reinterpret_cast<char*>(&other->_impl_.operation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RunComponentFunctionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[13]);
}

// ===================================================================

class RunComponentFunctionResponse::_Internal {
 public:
};

void RunComponentFunctionResponse::clear_shape() {
  _impl_.shape_.Clear();
}
void RunComponentFunctionResponse::clear_tensor() {
  _impl_.tensor_.Clear();
}
RunComponentFunctionResponse::RunComponentFunctionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.RunComponentFunctionResponse)
}
RunComponentFunctionResponse::RunComponentFunctionResponse(const RunComponentFunctionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RunComponentFunctionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){from._impl_.shape_}
    , decltype(_impl_.tensor_){from._impl_.tensor_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.RunComponentFunctionResponse)
}

inline void RunComponentFunctionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.shape_){arena}
    , decltype(_impl_.tensor_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RunComponentFunctionResponse::~RunComponentFunctionResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.RunComponentFunctionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RunComponentFunctionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.shape_.~RepeatedPtrField();
  _impl_.tensor_.~RepeatedPtrField();
}

void RunComponentFunctionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RunComponentFunctionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.RunComponentFunctionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.shape_.Clear();
  _impl_.tensor_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RunComponentFunctionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.TensorShapeProto shape = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_shape(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.TensorProto tensor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RunComponentFunctionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.RunComponentFunctionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.TensorShapeProto shape = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_shape_size()); i < n; i++) {
    const auto& repfield = this->_internal_shape(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .tensorflow.TensorProto tensor = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tensor_size()); i < n; i++) {
    const auto& repfield = this->_internal_tensor(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.RunComponentFunctionResponse)
  return target;
}

size_t RunComponentFunctionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.RunComponentFunctionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.TensorShapeProto shape = 1;
  total_size += 1UL * this->_internal_shape_size();
  for (const auto& msg : this->_impl_.shape_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .tensorflow.TensorProto tensor = 2;
  total_size += 1UL * this->_internal_tensor_size();
  for (const auto& msg : this->_impl_.tensor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RunComponentFunctionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RunComponentFunctionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RunComponentFunctionResponse::GetClassData() const { return &_class_data_; }


void RunComponentFunctionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RunComponentFunctionResponse*>(&to_msg);
  auto& from = static_cast<const RunComponentFunctionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.RunComponentFunctionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.shape_.MergeFrom(from._impl_.shape_);
  _this->_impl_.tensor_.MergeFrom(from._impl_.tensor_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RunComponentFunctionResponse::CopyFrom(const RunComponentFunctionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.RunComponentFunctionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunComponentFunctionResponse::IsInitialized() const {
  return true;
}

void RunComponentFunctionResponse::InternalSwap(RunComponentFunctionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.shape_.InternalSwap(&other->_impl_.shape_);
  _impl_.tensor_.InternalSwap(&other->_impl_.tensor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RunComponentFunctionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[14]);
}

// ===================================================================

class KeepAliveRequest::_Internal {
 public:
};

KeepAliveRequest::KeepAliveRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.KeepAliveRequest)
}
KeepAliveRequest::KeepAliveRequest(const KeepAliveRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeepAliveRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.context_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.context_id_ = from._impl_.context_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.KeepAliveRequest)
}

inline void KeepAliveRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.context_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KeepAliveRequest::~KeepAliveRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.KeepAliveRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeepAliveRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KeepAliveRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeepAliveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.KeepAliveRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.context_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeepAliveRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 context_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.context_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeepAliveRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.KeepAliveRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 context_id = 1;
  if (this->_internal_context_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_context_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.KeepAliveRequest)
  return target;
}

size_t KeepAliveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.KeepAliveRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 context_id = 1;
  if (this->_internal_context_id() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeepAliveRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeepAliveRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeepAliveRequest::GetClassData() const { return &_class_data_; }


void KeepAliveRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeepAliveRequest*>(&to_msg);
  auto& from = static_cast<const KeepAliveRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.KeepAliveRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_context_id() != 0) {
    _this->_internal_set_context_id(from._internal_context_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeepAliveRequest::CopyFrom(const KeepAliveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.KeepAliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAliveRequest::IsInitialized() const {
  return true;
}

void KeepAliveRequest::InternalSwap(KeepAliveRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.context_id_, other->_impl_.context_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeepAliveRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[15]);
}

// ===================================================================

class KeepAliveResponse::_Internal {
 public:
};

KeepAliveResponse::KeepAliveResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.KeepAliveResponse)
}
KeepAliveResponse::KeepAliveResponse(const KeepAliveResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  KeepAliveResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.context_view_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.context_view_id_ = from._impl_.context_view_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.KeepAliveResponse)
}

inline void KeepAliveResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.context_view_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

KeepAliveResponse::~KeepAliveResponse() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.KeepAliveResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void KeepAliveResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void KeepAliveResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void KeepAliveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.KeepAliveResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.context_view_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KeepAliveResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 context_view_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.context_view_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KeepAliveResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.KeepAliveResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 context_view_id = 1;
  if (this->_internal_context_view_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_context_view_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.KeepAliveResponse)
  return target;
}

size_t KeepAliveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.KeepAliveResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 context_view_id = 1;
  if (this->_internal_context_view_id() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KeepAliveResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    KeepAliveResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KeepAliveResponse::GetClassData() const { return &_class_data_; }


void KeepAliveResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<KeepAliveResponse*>(&to_msg);
  auto& from = static_cast<const KeepAliveResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.KeepAliveResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_context_view_id() != 0) {
    _this->_internal_set_context_view_id(from._internal_context_view_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KeepAliveResponse::CopyFrom(const KeepAliveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.KeepAliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAliveResponse::IsInitialized() const {
  return true;
}

void KeepAliveResponse::InternalSwap(KeepAliveResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.context_view_id_, other->_impl_.context_view_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KeepAliveResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[16]);
}

// ===================================================================

class CloseContextRequest::_Internal {
 public:
};

CloseContextRequest::CloseContextRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.CloseContextRequest)
}
CloseContextRequest::CloseContextRequest(const CloseContextRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CloseContextRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.context_id_){}
    , decltype(_impl_.context_view_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.context_id_, &from._impl_.context_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.context_view_id_) -
    reinterpret_cast<char*>(&_impl_.context_id_)) + sizeof(_impl_.context_view_id_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.CloseContextRequest)
}

inline void CloseContextRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.context_id_){uint64_t{0u}}
    , decltype(_impl_.context_view_id_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CloseContextRequest::~CloseContextRequest() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.CloseContextRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloseContextRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CloseContextRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CloseContextRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.CloseContextRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.context_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.context_view_id_) -
      reinterpret_cast<char*>(&_impl_.context_id_)) + sizeof(_impl_.context_view_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloseContextRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // fixed64 context_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          _impl_.context_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      // fixed64 context_view_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.context_view_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint64_t>(ptr);
          ptr += sizeof(uint64_t);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloseContextRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.CloseContextRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // fixed64 context_id = 1;
  if (this->_internal_context_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(1, this->_internal_context_id(), target);
  }

  // fixed64 context_view_id = 2;
  if (this->_internal_context_view_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed64ToArray(2, this->_internal_context_view_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.CloseContextRequest)
  return target;
}

size_t CloseContextRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.CloseContextRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // fixed64 context_id = 1;
  if (this->_internal_context_id() != 0) {
    total_size += 1 + 8;
  }

  // fixed64 context_view_id = 2;
  if (this->_internal_context_view_id() != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseContextRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CloseContextRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseContextRequest::GetClassData() const { return &_class_data_; }


void CloseContextRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CloseContextRequest*>(&to_msg);
  auto& from = static_cast<const CloseContextRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.CloseContextRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_context_id() != 0) {
    _this->_internal_set_context_id(from._internal_context_id());
  }
  if (from._internal_context_view_id() != 0) {
    _this->_internal_set_context_view_id(from._internal_context_view_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloseContextRequest::CopyFrom(const CloseContextRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.CloseContextRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloseContextRequest::IsInitialized() const {
  return true;
}

void CloseContextRequest::InternalSwap(CloseContextRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CloseContextRequest, _impl_.context_view_id_)
      + sizeof(CloseContextRequest::_impl_.context_view_id_)
      - PROTOBUF_FIELD_OFFSET(CloseContextRequest, _impl_.context_id_)>(
          reinterpret_cast<char*>(&_impl_.context_id_),
          reinterpret_cast<char*>(&other->_impl_.context_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CloseContextRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[17]);
}

// ===================================================================

class CloseContextResponse::_Internal {
 public:
};

CloseContextResponse::CloseContextResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.CloseContextResponse)
}
CloseContextResponse::CloseContextResponse(const CloseContextResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  CloseContextResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.CloseContextResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloseContextResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloseContextResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata CloseContextResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[18]);
}

// ===================================================================

class RegisterFunctionOp::_Internal {
 public:
  static const ::tensorflow::FunctionDef& function_def(const RegisterFunctionOp* msg);
  static const ::tensorflow::FunctionDefLibrary& library(const RegisterFunctionOp* msg);
};

const ::tensorflow::FunctionDef&
RegisterFunctionOp::_Internal::function_def(const RegisterFunctionOp* msg) {
  return *msg->_impl_.function_def_;
}
const ::tensorflow::FunctionDefLibrary&
RegisterFunctionOp::_Internal::library(const RegisterFunctionOp* msg) {
  return *msg->_impl_.library_;
}
void RegisterFunctionOp::clear_function_def() {
  if (GetArenaForAllocation() == nullptr && _impl_.function_def_ != nullptr) {
    delete _impl_.function_def_;
  }
  _impl_.function_def_ = nullptr;
}
void RegisterFunctionOp::clear_library() {
  if (GetArenaForAllocation() == nullptr && _impl_.library_ != nullptr) {
    delete _impl_.library_;
  }
  _impl_.library_ = nullptr;
}
RegisterFunctionOp::RegisterFunctionOp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.RegisterFunctionOp)
}
RegisterFunctionOp::RegisterFunctionOp(const RegisterFunctionOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RegisterFunctionOp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.function_def_){nullptr}
    , decltype(_impl_.library_){nullptr}
    , decltype(_impl_.is_component_function_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_function_def()) {
    _this->_impl_.function_def_ = new ::tensorflow::FunctionDef(*from._impl_.function_def_);
  }
  if (from._internal_has_library()) {
    _this->_impl_.library_ = new ::tensorflow::FunctionDefLibrary(*from._impl_.library_);
  }
  _this->_impl_.is_component_function_ = from._impl_.is_component_function_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.RegisterFunctionOp)
}

inline void RegisterFunctionOp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.function_def_){nullptr}
    , decltype(_impl_.library_){nullptr}
    , decltype(_impl_.is_component_function_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

RegisterFunctionOp::~RegisterFunctionOp() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.RegisterFunctionOp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RegisterFunctionOp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.function_def_;
  if (this != internal_default_instance()) delete _impl_.library_;
}

void RegisterFunctionOp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RegisterFunctionOp::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.RegisterFunctionOp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.function_def_ != nullptr) {
    delete _impl_.function_def_;
  }
  _impl_.function_def_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.library_ != nullptr) {
    delete _impl_.library_;
  }
  _impl_.library_ = nullptr;
  _impl_.is_component_function_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RegisterFunctionOp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.FunctionDef function_def = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_function_def(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_component_function = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.is_component_function_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.FunctionDefLibrary library = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_library(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RegisterFunctionOp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.RegisterFunctionOp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.FunctionDef function_def = 1;
  if (this->_internal_has_function_def()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::function_def(this),
        _Internal::function_def(this).GetCachedSize(), target, stream);
  }

  // bool is_component_function = 2;
  if (this->_internal_is_component_function() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_is_component_function(), target);
  }

  // .tensorflow.FunctionDefLibrary library = 3;
  if (this->_internal_has_library()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::library(this),
        _Internal::library(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.RegisterFunctionOp)
  return target;
}

size_t RegisterFunctionOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.RegisterFunctionOp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.FunctionDef function_def = 1;
  if (this->_internal_has_function_def()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.function_def_);
  }

  // .tensorflow.FunctionDefLibrary library = 3;
  if (this->_internal_has_library()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.library_);
  }

  // bool is_component_function = 2;
  if (this->_internal_is_component_function() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RegisterFunctionOp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RegisterFunctionOp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RegisterFunctionOp::GetClassData() const { return &_class_data_; }


void RegisterFunctionOp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RegisterFunctionOp*>(&to_msg);
  auto& from = static_cast<const RegisterFunctionOp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.RegisterFunctionOp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_function_def()) {
    _this->_internal_mutable_function_def()->::tensorflow::FunctionDef::MergeFrom(
        from._internal_function_def());
  }
  if (from._internal_has_library()) {
    _this->_internal_mutable_library()->::tensorflow::FunctionDefLibrary::MergeFrom(
        from._internal_library());
  }
  if (from._internal_is_component_function() != 0) {
    _this->_internal_set_is_component_function(from._internal_is_component_function());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RegisterFunctionOp::CopyFrom(const RegisterFunctionOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.RegisterFunctionOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterFunctionOp::IsInitialized() const {
  return true;
}

void RegisterFunctionOp::InternalSwap(RegisterFunctionOp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RegisterFunctionOp, _impl_.is_component_function_)
      + sizeof(RegisterFunctionOp::_impl_.is_component_function_)
      - PROTOBUF_FIELD_OFFSET(RegisterFunctionOp, _impl_.function_def_)>(
          reinterpret_cast<char*>(&_impl_.function_def_),
          reinterpret_cast<char*>(&other->_impl_.function_def_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RegisterFunctionOp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[19]);
}

// ===================================================================

class RemoveFunctionOp::_Internal {
 public:
};

RemoveFunctionOp::RemoveFunctionOp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.RemoveFunctionOp)
}
RemoveFunctionOp::RemoveFunctionOp(const RemoveFunctionOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RemoveFunctionOp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.function_name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.function_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.function_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_function_name().empty()) {
    _this->_impl_.function_name_.Set(from._internal_function_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.RemoveFunctionOp)
}

inline void RemoveFunctionOp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.function_name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.function_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.function_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RemoveFunctionOp::~RemoveFunctionOp() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.RemoveFunctionOp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RemoveFunctionOp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.function_name_.Destroy();
}

void RemoveFunctionOp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RemoveFunctionOp::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.RemoveFunctionOp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.function_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RemoveFunctionOp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string function_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_function_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.eager.RemoveFunctionOp.function_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RemoveFunctionOp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.RemoveFunctionOp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string function_name = 1;
  if (!this->_internal_function_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_function_name().data(), static_cast<int>(this->_internal_function_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.RemoveFunctionOp.function_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_function_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.RemoveFunctionOp)
  return target;
}

size_t RemoveFunctionOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.RemoveFunctionOp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string function_name = 1;
  if (!this->_internal_function_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_function_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RemoveFunctionOp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RemoveFunctionOp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RemoveFunctionOp::GetClassData() const { return &_class_data_; }


void RemoveFunctionOp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RemoveFunctionOp*>(&to_msg);
  auto& from = static_cast<const RemoveFunctionOp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.RemoveFunctionOp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_function_name().empty()) {
    _this->_internal_set_function_name(from._internal_function_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RemoveFunctionOp::CopyFrom(const RemoveFunctionOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.RemoveFunctionOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveFunctionOp::IsInitialized() const {
  return true;
}

void RemoveFunctionOp::InternalSwap(RemoveFunctionOp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.function_name_, lhs_arena,
      &other->_impl_.function_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RemoveFunctionOp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[20]);
}

// ===================================================================

class CleanupFunctionOp::_Internal {
 public:
};

CleanupFunctionOp::CleanupFunctionOp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.CleanupFunctionOp)
}
CleanupFunctionOp::CleanupFunctionOp(const CleanupFunctionOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CleanupFunctionOp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.step_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.step_id_ = from._impl_.step_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.CleanupFunctionOp)
}

inline void CleanupFunctionOp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.step_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CleanupFunctionOp::~CleanupFunctionOp() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.CleanupFunctionOp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CleanupFunctionOp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CleanupFunctionOp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CleanupFunctionOp::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.CleanupFunctionOp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.step_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CleanupFunctionOp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 step_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.step_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CleanupFunctionOp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.CleanupFunctionOp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->_internal_step_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_step_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.CleanupFunctionOp)
  return target;
}

size_t CleanupFunctionOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.CleanupFunctionOp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 step_id = 1;
  if (this->_internal_step_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_step_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CleanupFunctionOp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CleanupFunctionOp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CleanupFunctionOp::GetClassData() const { return &_class_data_; }


void CleanupFunctionOp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CleanupFunctionOp*>(&to_msg);
  auto& from = static_cast<const CleanupFunctionOp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.CleanupFunctionOp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_step_id() != 0) {
    _this->_internal_set_step_id(from._internal_step_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CleanupFunctionOp::CopyFrom(const CleanupFunctionOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.CleanupFunctionOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanupFunctionOp::IsInitialized() const {
  return true;
}

void CleanupFunctionOp::InternalSwap(CleanupFunctionOp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.step_id_, other->_impl_.step_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CleanupFunctionOp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[21]);
}

// ===================================================================

class SyncRemoteExecutorForStream::_Internal {
 public:
};

SyncRemoteExecutorForStream::SyncRemoteExecutorForStream(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.SyncRemoteExecutorForStream)
}
SyncRemoteExecutorForStream::SyncRemoteExecutorForStream(const SyncRemoteExecutorForStream& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SyncRemoteExecutorForStream* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.SyncRemoteExecutorForStream)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncRemoteExecutorForStream::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncRemoteExecutorForStream::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SyncRemoteExecutorForStream::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[22]);
}

// ===================================================================

class SendTensorOp::_Internal {
 public:
};

void SendTensorOp::clear_tensors() {
  _impl_.tensors_.Clear();
}
SendTensorOp::SendTensorOp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.SendTensorOp)
}
SendTensorOp::SendTensorOp(const SendTensorOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendTensorOp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tensors_){from._impl_.tensors_}
    , decltype(_impl_.device_name_){}
    , decltype(_impl_.op_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_name().empty()) {
    _this->_impl_.device_name_.Set(from._internal_device_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.op_id_ = from._impl_.op_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.SendTensorOp)
}

inline void SendTensorOp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tensors_){arena}
    , decltype(_impl_.device_name_){}
    , decltype(_impl_.op_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendTensorOp::~SendTensorOp() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.SendTensorOp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendTensorOp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tensors_.~RepeatedPtrField();
  _impl_.device_name_.Destroy();
}

void SendTensorOp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendTensorOp::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.SendTensorOp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tensors_.Clear();
  _impl_.device_name_.ClearToEmpty();
  _impl_.op_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendTensorOp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 op_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.op_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.TensorProto tensors = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tensors(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string device_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_device_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.eager.SendTensorOp.device_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendTensorOp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.SendTensorOp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 op_id = 1;
  if (this->_internal_op_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_op_id(), target);
  }

  // repeated .tensorflow.TensorProto tensors = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tensors_size()); i < n; i++) {
    const auto& repfield = this->_internal_tensors(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string device_name = 3;
  if (!this->_internal_device_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.SendTensorOp.device_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.SendTensorOp)
  return target;
}

size_t SendTensorOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.SendTensorOp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.TensorProto tensors = 2;
  total_size += 1UL * this->_internal_tensors_size();
  for (const auto& msg : this->_impl_.tensors_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string device_name = 3;
  if (!this->_internal_device_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_name());
  }

  // int64 op_id = 1;
  if (this->_internal_op_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_op_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendTensorOp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendTensorOp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendTensorOp::GetClassData() const { return &_class_data_; }


void SendTensorOp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendTensorOp*>(&to_msg);
  auto& from = static_cast<const SendTensorOp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.SendTensorOp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tensors_.MergeFrom(from._impl_.tensors_);
  if (!from._internal_device_name().empty()) {
    _this->_internal_set_device_name(from._internal_device_name());
  }
  if (from._internal_op_id() != 0) {
    _this->_internal_set_op_id(from._internal_op_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendTensorOp::CopyFrom(const SendTensorOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.SendTensorOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendTensorOp::IsInitialized() const {
  return true;
}

void SendTensorOp::InternalSwap(SendTensorOp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tensors_.InternalSwap(&other->_impl_.tensors_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_name_, lhs_arena,
      &other->_impl_.device_name_, rhs_arena
  );
  swap(_impl_.op_id_, other->_impl_.op_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendTensorOp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[23]);
}

// ===================================================================

class SendPackedHandleOp_LocalTensorHandle::_Internal {
 public:
  static const ::tensorflow::TensorProto& tensor(const SendPackedHandleOp_LocalTensorHandle* msg);
};

const ::tensorflow::TensorProto&
SendPackedHandleOp_LocalTensorHandle::_Internal::tensor(const SendPackedHandleOp_LocalTensorHandle* msg) {
  return *msg->_impl_.tensor_;
}
void SendPackedHandleOp_LocalTensorHandle::clear_tensor() {
  if (GetArenaForAllocation() == nullptr && _impl_.tensor_ != nullptr) {
    delete _impl_.tensor_;
  }
  _impl_.tensor_ = nullptr;
}
SendPackedHandleOp_LocalTensorHandle::SendPackedHandleOp_LocalTensorHandle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
}
SendPackedHandleOp_LocalTensorHandle::SendPackedHandleOp_LocalTensorHandle(const SendPackedHandleOp_LocalTensorHandle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendPackedHandleOp_LocalTensorHandle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){}
    , decltype(_impl_.tensor_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device().empty()) {
    _this->_impl_.device_.Set(from._internal_device(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_tensor()) {
    _this->_impl_.tensor_ = new ::tensorflow::TensorProto(*from._impl_.tensor_);
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
}

inline void SendPackedHandleOp_LocalTensorHandle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.device_){}
    , decltype(_impl_.tensor_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.device_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendPackedHandleOp_LocalTensorHandle::~SendPackedHandleOp_LocalTensorHandle() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendPackedHandleOp_LocalTensorHandle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_.Destroy();
  if (this != internal_default_instance()) delete _impl_.tensor_;
}

void SendPackedHandleOp_LocalTensorHandle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendPackedHandleOp_LocalTensorHandle::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.tensor_ != nullptr) {
    delete _impl_.tensor_;
  }
  _impl_.tensor_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendPackedHandleOp_LocalTensorHandle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.TensorProto tensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string device = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_device();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.eager.SendPackedHandleOp.LocalTensorHandle.device"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendPackedHandleOp_LocalTensorHandle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TensorProto tensor = 1;
  if (this->_internal_has_tensor()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::tensor(this),
        _Internal::tensor(this).GetCachedSize(), target, stream);
  }

  // string device = 2;
  if (!this->_internal_device().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device().data(), static_cast<int>(this->_internal_device().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.SendPackedHandleOp.LocalTensorHandle.device");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_device(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
  return target;
}

size_t SendPackedHandleOp_LocalTensorHandle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device = 2;
  if (!this->_internal_device().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device());
  }

  // .tensorflow.TensorProto tensor = 1;
  if (this->_internal_has_tensor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tensor_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendPackedHandleOp_LocalTensorHandle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendPackedHandleOp_LocalTensorHandle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendPackedHandleOp_LocalTensorHandle::GetClassData() const { return &_class_data_; }


void SendPackedHandleOp_LocalTensorHandle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendPackedHandleOp_LocalTensorHandle*>(&to_msg);
  auto& from = static_cast<const SendPackedHandleOp_LocalTensorHandle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device().empty()) {
    _this->_internal_set_device(from._internal_device());
  }
  if (from._internal_has_tensor()) {
    _this->_internal_mutable_tensor()->::tensorflow::TensorProto::MergeFrom(
        from._internal_tensor());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendPackedHandleOp_LocalTensorHandle::CopyFrom(const SendPackedHandleOp_LocalTensorHandle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.SendPackedHandleOp.LocalTensorHandle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendPackedHandleOp_LocalTensorHandle::IsInitialized() const {
  return true;
}

void SendPackedHandleOp_LocalTensorHandle::InternalSwap(SendPackedHandleOp_LocalTensorHandle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_, lhs_arena,
      &other->_impl_.device_, rhs_arena
  );
  swap(_impl_.tensor_, other->_impl_.tensor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendPackedHandleOp_LocalTensorHandle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[24]);
}

// ===================================================================

class SendPackedHandleOp_Handle::_Internal {
 public:
  static const ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle& local_handle(const SendPackedHandleOp_Handle* msg);
  static const ::tensorflow::eager::RemoteTensorHandle& remote_handle(const SendPackedHandleOp_Handle* msg);
};

const ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle&
SendPackedHandleOp_Handle::_Internal::local_handle(const SendPackedHandleOp_Handle* msg) {
  return *msg->_impl_.item_.local_handle_;
}
const ::tensorflow::eager::RemoteTensorHandle&
SendPackedHandleOp_Handle::_Internal::remote_handle(const SendPackedHandleOp_Handle* msg) {
  return *msg->_impl_.item_.remote_handle_;
}
void SendPackedHandleOp_Handle::set_allocated_local_handle(::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle* local_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (local_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(local_handle);
    if (message_arena != submessage_arena) {
      local_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, local_handle, submessage_arena);
    }
    set_has_local_handle();
    _impl_.item_.local_handle_ = local_handle;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.SendPackedHandleOp.Handle.local_handle)
}
void SendPackedHandleOp_Handle::set_allocated_remote_handle(::tensorflow::eager::RemoteTensorHandle* remote_handle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_item();
  if (remote_handle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(remote_handle));
    if (message_arena != submessage_arena) {
      remote_handle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, remote_handle, submessage_arena);
    }
    set_has_remote_handle();
    _impl_.item_.remote_handle_ = remote_handle;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorflow.eager.SendPackedHandleOp.Handle.remote_handle)
}
void SendPackedHandleOp_Handle::clear_remote_handle() {
  if (_internal_has_remote_handle()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.item_.remote_handle_;
    }
    clear_has_item();
  }
}
SendPackedHandleOp_Handle::SendPackedHandleOp_Handle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.SendPackedHandleOp.Handle)
}
SendPackedHandleOp_Handle::SendPackedHandleOp_Handle(const SendPackedHandleOp_Handle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendPackedHandleOp_Handle* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_item();
  switch (from.item_case()) {
    case kLocalHandle: {
      _this->_internal_mutable_local_handle()->::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle::MergeFrom(
          from._internal_local_handle());
      break;
    }
    case kRemoteHandle: {
      _this->_internal_mutable_remote_handle()->::tensorflow::eager::RemoteTensorHandle::MergeFrom(
          from._internal_remote_handle());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.SendPackedHandleOp.Handle)
}

inline void SendPackedHandleOp_Handle::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_item();
}

SendPackedHandleOp_Handle::~SendPackedHandleOp_Handle() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.SendPackedHandleOp.Handle)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendPackedHandleOp_Handle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_item()) {
    clear_item();
  }
}

void SendPackedHandleOp_Handle::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendPackedHandleOp_Handle::clear_item() {
// @@protoc_insertion_point(one_of_clear_start:tensorflow.eager.SendPackedHandleOp.Handle)
  switch (item_case()) {
    case kLocalHandle: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.local_handle_;
      }
      break;
    }
    case kRemoteHandle: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.item_.remote_handle_;
      }
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ITEM_NOT_SET;
}


void SendPackedHandleOp_Handle::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.SendPackedHandleOp.Handle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_item();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendPackedHandleOp_Handle::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.eager.SendPackedHandleOp.LocalTensorHandle local_handle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_local_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.eager.RemoteTensorHandle remote_handle = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_remote_handle(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendPackedHandleOp_Handle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.SendPackedHandleOp.Handle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.eager.SendPackedHandleOp.LocalTensorHandle local_handle = 1;
  if (_internal_has_local_handle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::local_handle(this),
        _Internal::local_handle(this).GetCachedSize(), target, stream);
  }

  // .tensorflow.eager.RemoteTensorHandle remote_handle = 2;
  if (_internal_has_remote_handle()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::remote_handle(this),
        _Internal::remote_handle(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.SendPackedHandleOp.Handle)
  return target;
}

size_t SendPackedHandleOp_Handle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.SendPackedHandleOp.Handle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (item_case()) {
    // .tensorflow.eager.SendPackedHandleOp.LocalTensorHandle local_handle = 1;
    case kLocalHandle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.local_handle_);
      break;
    }
    // .tensorflow.eager.RemoteTensorHandle remote_handle = 2;
    case kRemoteHandle: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.item_.remote_handle_);
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendPackedHandleOp_Handle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendPackedHandleOp_Handle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendPackedHandleOp_Handle::GetClassData() const { return &_class_data_; }


void SendPackedHandleOp_Handle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendPackedHandleOp_Handle*>(&to_msg);
  auto& from = static_cast<const SendPackedHandleOp_Handle&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.SendPackedHandleOp.Handle)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.item_case()) {
    case kLocalHandle: {
      _this->_internal_mutable_local_handle()->::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle::MergeFrom(
          from._internal_local_handle());
      break;
    }
    case kRemoteHandle: {
      _this->_internal_mutable_remote_handle()->::tensorflow::eager::RemoteTensorHandle::MergeFrom(
          from._internal_remote_handle());
      break;
    }
    case ITEM_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendPackedHandleOp_Handle::CopyFrom(const SendPackedHandleOp_Handle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.SendPackedHandleOp.Handle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendPackedHandleOp_Handle::IsInitialized() const {
  return true;
}

void SendPackedHandleOp_Handle::InternalSwap(SendPackedHandleOp_Handle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.item_, other->_impl_.item_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendPackedHandleOp_Handle::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[25]);
}

// ===================================================================

class SendPackedHandleOp::_Internal {
 public:
};

SendPackedHandleOp::SendPackedHandleOp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.eager.SendPackedHandleOp)
}
SendPackedHandleOp::SendPackedHandleOp(const SendPackedHandleOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SendPackedHandleOp* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.handles_){from._impl_.handles_}
    , decltype(_impl_.device_name_){}
    , decltype(_impl_.op_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_name().empty()) {
    _this->_impl_.device_name_.Set(from._internal_device_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.op_id_ = from._impl_.op_id_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.eager.SendPackedHandleOp)
}

inline void SendPackedHandleOp::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.handles_){arena}
    , decltype(_impl_.device_name_){}
    , decltype(_impl_.op_id_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SendPackedHandleOp::~SendPackedHandleOp() {
  // @@protoc_insertion_point(destructor:tensorflow.eager.SendPackedHandleOp)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SendPackedHandleOp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.handles_.~RepeatedPtrField();
  _impl_.device_name_.Destroy();
}

void SendPackedHandleOp::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SendPackedHandleOp::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.eager.SendPackedHandleOp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.handles_.Clear();
  _impl_.device_name_.ClearToEmpty();
  _impl_.op_id_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendPackedHandleOp::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 op_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.op_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.eager.SendPackedHandleOp.Handle handles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_handles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string device_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_device_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.eager.SendPackedHandleOp.device_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SendPackedHandleOp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.eager.SendPackedHandleOp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 op_id = 1;
  if (this->_internal_op_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_op_id(), target);
  }

  // repeated .tensorflow.eager.SendPackedHandleOp.Handle handles = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_handles_size()); i < n; i++) {
    const auto& repfield = this->_internal_handles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string device_name = 3;
  if (!this->_internal_device_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_device_name().data(), static_cast<int>(this->_internal_device_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.eager.SendPackedHandleOp.device_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_device_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.eager.SendPackedHandleOp)
  return target;
}

size_t SendPackedHandleOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.eager.SendPackedHandleOp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.eager.SendPackedHandleOp.Handle handles = 2;
  total_size += 1UL * this->_internal_handles_size();
  for (const auto& msg : this->_impl_.handles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string device_name = 3;
  if (!this->_internal_device_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_device_name());
  }

  // int64 op_id = 1;
  if (this->_internal_op_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_op_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SendPackedHandleOp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SendPackedHandleOp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SendPackedHandleOp::GetClassData() const { return &_class_data_; }


void SendPackedHandleOp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SendPackedHandleOp*>(&to_msg);
  auto& from = static_cast<const SendPackedHandleOp&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.eager.SendPackedHandleOp)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.handles_.MergeFrom(from._impl_.handles_);
  if (!from._internal_device_name().empty()) {
    _this->_internal_set_device_name(from._internal_device_name());
  }
  if (from._internal_op_id() != 0) {
    _this->_internal_set_op_id(from._internal_op_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SendPackedHandleOp::CopyFrom(const SendPackedHandleOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.eager.SendPackedHandleOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendPackedHandleOp::IsInitialized() const {
  return true;
}

void SendPackedHandleOp::InternalSwap(SendPackedHandleOp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.handles_.InternalSwap(&other->_impl_.handles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.device_name_, lhs_arena,
      &other->_impl_.device_name_, rhs_arena
  );
  swap(_impl_.op_id_, other->_impl_.op_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendPackedHandleOp::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2feager_5fservice_2eproto[26]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace eager
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::eager::Operation_Input*
Arena::CreateMaybeMessage< ::tensorflow::eager::Operation_Input >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::Operation_Input >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::Operation_AttrsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::tensorflow::eager::Operation_AttrsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::Operation_AttrsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::Operation*
Arena::CreateMaybeMessage< ::tensorflow::eager::Operation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::Operation >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::QueueItem*
Arena::CreateMaybeMessage< ::tensorflow::eager::QueueItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::QueueItem >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::QueueResponse*
Arena::CreateMaybeMessage< ::tensorflow::eager::QueueResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::QueueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::CreateContextRequest*
Arena::CreateMaybeMessage< ::tensorflow::eager::CreateContextRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::CreateContextRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::CreateContextResponse*
Arena::CreateMaybeMessage< ::tensorflow::eager::CreateContextResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::CreateContextResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::UpdateContextRequest*
Arena::CreateMaybeMessage< ::tensorflow::eager::UpdateContextRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::UpdateContextRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::UpdateContextResponse*
Arena::CreateMaybeMessage< ::tensorflow::eager::UpdateContextResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::UpdateContextResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::EnqueueRequest*
Arena::CreateMaybeMessage< ::tensorflow::eager::EnqueueRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::EnqueueRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::EnqueueResponse*
Arena::CreateMaybeMessage< ::tensorflow::eager::EnqueueResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::EnqueueResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::WaitQueueDoneRequest*
Arena::CreateMaybeMessage< ::tensorflow::eager::WaitQueueDoneRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::WaitQueueDoneRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::WaitQueueDoneResponse*
Arena::CreateMaybeMessage< ::tensorflow::eager::WaitQueueDoneResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::WaitQueueDoneResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::RunComponentFunctionRequest*
Arena::CreateMaybeMessage< ::tensorflow::eager::RunComponentFunctionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::RunComponentFunctionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::RunComponentFunctionResponse*
Arena::CreateMaybeMessage< ::tensorflow::eager::RunComponentFunctionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::RunComponentFunctionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::KeepAliveRequest*
Arena::CreateMaybeMessage< ::tensorflow::eager::KeepAliveRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::KeepAliveRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::KeepAliveResponse*
Arena::CreateMaybeMessage< ::tensorflow::eager::KeepAliveResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::KeepAliveResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::CloseContextRequest*
Arena::CreateMaybeMessage< ::tensorflow::eager::CloseContextRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::CloseContextRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::CloseContextResponse*
Arena::CreateMaybeMessage< ::tensorflow::eager::CloseContextResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::CloseContextResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::RegisterFunctionOp*
Arena::CreateMaybeMessage< ::tensorflow::eager::RegisterFunctionOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::RegisterFunctionOp >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::RemoveFunctionOp*
Arena::CreateMaybeMessage< ::tensorflow::eager::RemoveFunctionOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::RemoveFunctionOp >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::CleanupFunctionOp*
Arena::CreateMaybeMessage< ::tensorflow::eager::CleanupFunctionOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::CleanupFunctionOp >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::SyncRemoteExecutorForStream*
Arena::CreateMaybeMessage< ::tensorflow::eager::SyncRemoteExecutorForStream >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::SyncRemoteExecutorForStream >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::SendTensorOp*
Arena::CreateMaybeMessage< ::tensorflow::eager::SendTensorOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::SendTensorOp >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle*
Arena::CreateMaybeMessage< ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::SendPackedHandleOp_LocalTensorHandle >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::SendPackedHandleOp_Handle*
Arena::CreateMaybeMessage< ::tensorflow::eager::SendPackedHandleOp_Handle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::SendPackedHandleOp_Handle >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::eager::SendPackedHandleOp*
Arena::CreateMaybeMessage< ::tensorflow::eager::SendPackedHandleOp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::eager::SendPackedHandleOp >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
