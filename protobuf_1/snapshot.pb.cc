// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/snapshot.proto

#include "tensorflow/core/protobuf/snapshot.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
namespace data {
namespace experimental {
PROTOBUF_CONSTEXPR SnapshotRecord::SnapshotRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tensor_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SnapshotRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotRecordDefaultTypeInternal() {}
  union {
    SnapshotRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotRecordDefaultTypeInternal _SnapshotRecord_default_instance_;
PROTOBUF_CONSTEXPR SnapshotMetadataRecord::SnapshotMetadataRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.dtype_)*/{}
  , /*decltype(_impl_._dtype_cached_byte_size_)*/{0}
  , /*decltype(_impl_.graph_hash_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.run_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.creation_timestamp_)*/int64_t{0}
  , /*decltype(_impl_.version_)*/int64_t{0}
  , /*decltype(_impl_.num_elements_)*/int64_t{0}
  , /*decltype(_impl_.finalized_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SnapshotMetadataRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotMetadataRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotMetadataRecordDefaultTypeInternal() {}
  union {
    SnapshotMetadataRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotMetadataRecordDefaultTypeInternal _SnapshotMetadataRecord_default_instance_;
PROTOBUF_CONSTEXPR TensorMetadata::TensorMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tensor_shape_)*/nullptr
  , /*decltype(_impl_.tensor_size_bytes_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct TensorMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TensorMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TensorMetadataDefaultTypeInternal() {}
  union {
    TensorMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TensorMetadataDefaultTypeInternal _TensorMetadata_default_instance_;
PROTOBUF_CONSTEXPR SnapshotTensorMetadata::SnapshotTensorMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.tensor_metadata_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SnapshotTensorMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SnapshotTensorMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SnapshotTensorMetadataDefaultTypeInternal() {}
  union {
    SnapshotTensorMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SnapshotTensorMetadataDefaultTypeInternal _SnapshotTensorMetadata_default_instance_;
PROTOBUF_CONSTEXPR DistributedSnapshotMetadata::DistributedSnapshotMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.element_spec_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.compression_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DistributedSnapshotMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DistributedSnapshotMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DistributedSnapshotMetadataDefaultTypeInternal() {}
  union {
    DistributedSnapshotMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DistributedSnapshotMetadataDefaultTypeInternal _DistributedSnapshotMetadata_default_instance_;
}  // namespace experimental
}  // namespace data
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::SnapshotRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::SnapshotRecord, _impl_.tensor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::SnapshotMetadataRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::SnapshotMetadataRecord, _impl_.graph_hash_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::SnapshotMetadataRecord, _impl_.run_id_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::SnapshotMetadataRecord, _impl_.creation_timestamp_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::SnapshotMetadataRecord, _impl_.version_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::SnapshotMetadataRecord, _impl_.dtype_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::SnapshotMetadataRecord, _impl_.num_elements_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::SnapshotMetadataRecord, _impl_.finalized_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::TensorMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::TensorMetadata, _impl_.tensor_shape_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::TensorMetadata, _impl_.tensor_size_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::SnapshotTensorMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::SnapshotTensorMetadata, _impl_.tensor_metadata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DistributedSnapshotMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DistributedSnapshotMetadata, _impl_.element_spec_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::data::experimental::DistributedSnapshotMetadata, _impl_.compression_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::data::experimental::SnapshotRecord)},
  { 7, -1, -1, sizeof(::tensorflow::data::experimental::SnapshotMetadataRecord)},
  { 20, -1, -1, sizeof(::tensorflow::data::experimental::TensorMetadata)},
  { 28, -1, -1, sizeof(::tensorflow::data::experimental::SnapshotTensorMetadata)},
  { 35, -1, -1, sizeof(::tensorflow::data::experimental::DistributedSnapshotMetadata)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::data::experimental::_SnapshotRecord_default_instance_._instance,
  &::tensorflow::data::experimental::_SnapshotMetadataRecord_default_instance_._instance,
  &::tensorflow::data::experimental::_TensorMetadata_default_instance_._instance,
  &::tensorflow::data::experimental::_SnapshotTensorMetadata_default_instance_._instance,
  &::tensorflow::data::experimental::_DistributedSnapshotMetadata_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\'tensorflow/core/protobuf/snapshot.prot"
  "o\022\034tensorflow.data.experimental\032&tensorf"
  "low/core/framework/tensor.proto\032,tensorf"
  "low/core/framework/tensor_shape.proto\032%t"
  "ensorflow/core/framework/types.proto\"9\n\016"
  "SnapshotRecord\022\'\n\006tensor\030\001 \003(\0132\027.tensorf"
  "low.TensorProto\"\270\001\n\026SnapshotMetadataReco"
  "rd\022\022\n\ngraph_hash\030\001 \001(\t\022\016\n\006run_id\030\002 \001(\t\022\032"
  "\n\022creation_timestamp\030\003 \001(\003\022\017\n\007version\030\004 "
  "\001(\003\022#\n\005dtype\030\005 \003(\0162\024.tensorflow.DataType"
  "\022\024\n\014num_elements\030\006 \001(\003\022\022\n\tfinalized\030\350\007 \001"
  "(\010\"_\n\016TensorMetadata\0222\n\014tensor_shape\030\002 \001"
  "(\0132\034.tensorflow.TensorShapeProto\022\031\n\021tens"
  "or_size_bytes\030\003 \001(\003\"_\n\026SnapshotTensorMet"
  "adata\022E\n\017tensor_metadata\030\001 \003(\0132,.tensorf"
  "low.data.experimental.TensorMetadata\"H\n\033"
  "DistributedSnapshotMetadata\022\024\n\014element_s"
  "pec\030\001 \001(\014\022\023\n\013compression\030\002 \001(\tBWZUgithub"
  ".com/tensorflow/tensorflow/tensorflow/go"
  "/core/protobuf/for_core_protos_go_protob"
  "\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto_deps[3] = {
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftensor_5fshape_2eproto,
  &::descriptor_table_tensorflow_2fcore_2fframework_2ftypes_2eproto,
};
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto = {
    false, false, 807, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto,
    "tensorflow/core/protobuf/snapshot.proto",
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto_once, descriptor_table_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto_deps, 3, 5,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto);
namespace tensorflow {
namespace data {
namespace experimental {

// ===================================================================

class SnapshotRecord::_Internal {
 public:
};

void SnapshotRecord::clear_tensor() {
  _impl_.tensor_.Clear();
}
SnapshotRecord::SnapshotRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.experimental.SnapshotRecord)
}
SnapshotRecord::SnapshotRecord(const SnapshotRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SnapshotRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tensor_){from._impl_.tensor_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.experimental.SnapshotRecord)
}

inline void SnapshotRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tensor_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SnapshotRecord::~SnapshotRecord() {
  // @@protoc_insertion_point(destructor:tensorflow.data.experimental.SnapshotRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SnapshotRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tensor_.~RepeatedPtrField();
}

void SnapshotRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SnapshotRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.experimental.SnapshotRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tensor_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapshotRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.TensorProto tensor = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tensor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnapshotRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.experimental.SnapshotRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.TensorProto tensor = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tensor_size()); i < n; i++) {
    const auto& repfield = this->_internal_tensor(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.experimental.SnapshotRecord)
  return target;
}

size_t SnapshotRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.experimental.SnapshotRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.TensorProto tensor = 1;
  total_size += 1UL * this->_internal_tensor_size();
  for (const auto& msg : this->_impl_.tensor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapshotRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SnapshotRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapshotRecord::GetClassData() const { return &_class_data_; }


void SnapshotRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SnapshotRecord*>(&to_msg);
  auto& from = static_cast<const SnapshotRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.experimental.SnapshotRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tensor_.MergeFrom(from._impl_.tensor_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnapshotRecord::CopyFrom(const SnapshotRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.experimental.SnapshotRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotRecord::IsInitialized() const {
  return true;
}

void SnapshotRecord::InternalSwap(SnapshotRecord* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tensor_.InternalSwap(&other->_impl_.tensor_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto[0]);
}

// ===================================================================

class SnapshotMetadataRecord::_Internal {
 public:
};

SnapshotMetadataRecord::SnapshotMetadataRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.experimental.SnapshotMetadataRecord)
}
SnapshotMetadataRecord::SnapshotMetadataRecord(const SnapshotMetadataRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SnapshotMetadataRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.dtype_){from._impl_.dtype_}
    , /*decltype(_impl_._dtype_cached_byte_size_)*/{0}
    , decltype(_impl_.graph_hash_){}
    , decltype(_impl_.run_id_){}
    , decltype(_impl_.creation_timestamp_){}
    , decltype(_impl_.version_){}
    , decltype(_impl_.num_elements_){}
    , decltype(_impl_.finalized_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.graph_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.graph_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_graph_hash().empty()) {
    _this->_impl_.graph_hash_.Set(from._internal_graph_hash(), 
      _this->GetArenaForAllocation());
  }
  _impl_.run_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.run_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_run_id().empty()) {
    _this->_impl_.run_id_.Set(from._internal_run_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.creation_timestamp_, &from._impl_.creation_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.finalized_) -
    reinterpret_cast<char*>(&_impl_.creation_timestamp_)) + sizeof(_impl_.finalized_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.experimental.SnapshotMetadataRecord)
}

inline void SnapshotMetadataRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.dtype_){arena}
    , /*decltype(_impl_._dtype_cached_byte_size_)*/{0}
    , decltype(_impl_.graph_hash_){}
    , decltype(_impl_.run_id_){}
    , decltype(_impl_.creation_timestamp_){int64_t{0}}
    , decltype(_impl_.version_){int64_t{0}}
    , decltype(_impl_.num_elements_){int64_t{0}}
    , decltype(_impl_.finalized_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.graph_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.graph_hash_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.run_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.run_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SnapshotMetadataRecord::~SnapshotMetadataRecord() {
  // @@protoc_insertion_point(destructor:tensorflow.data.experimental.SnapshotMetadataRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SnapshotMetadataRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.dtype_.~RepeatedField();
  _impl_.graph_hash_.Destroy();
  _impl_.run_id_.Destroy();
}

void SnapshotMetadataRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SnapshotMetadataRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.experimental.SnapshotMetadataRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dtype_.Clear();
  _impl_.graph_hash_.ClearToEmpty();
  _impl_.run_id_.ClearToEmpty();
  ::memset(&_impl_.creation_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.finalized_) -
      reinterpret_cast<char*>(&_impl_.creation_timestamp_)) + sizeof(_impl_.finalized_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapshotMetadataRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string graph_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_graph_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.data.experimental.SnapshotMetadataRecord.graph_hash"));
        } else
          goto handle_unusual;
        continue;
      // string run_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_run_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.data.experimental.SnapshotMetadataRecord.run_id"));
        } else
          goto handle_unusual;
        continue;
      // int64 creation_timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.creation_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .tensorflow.DataType dtype = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_dtype(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_dtype(static_cast<::tensorflow::DataType>(val));
        } else
          goto handle_unusual;
        continue;
      // int64 num_elements = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.num_elements_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool finalized = 1000;
      case 1000:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.finalized_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnapshotMetadataRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.experimental.SnapshotMetadataRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string graph_hash = 1;
  if (!this->_internal_graph_hash().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_graph_hash().data(), static_cast<int>(this->_internal_graph_hash().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.SnapshotMetadataRecord.graph_hash");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_graph_hash(), target);
  }

  // string run_id = 2;
  if (!this->_internal_run_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_run_id().data(), static_cast<int>(this->_internal_run_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.SnapshotMetadataRecord.run_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_run_id(), target);
  }

  // int64 creation_timestamp = 3;
  if (this->_internal_creation_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_creation_timestamp(), target);
  }

  // int64 version = 4;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(4, this->_internal_version(), target);
  }

  // repeated .tensorflow.DataType dtype = 5;
  {
    int byte_size = _impl_._dtype_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          5, _impl_.dtype_, byte_size, target);
    }
  }

  // int64 num_elements = 6;
  if (this->_internal_num_elements() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_num_elements(), target);
  }

  // bool finalized = 1000;
  if (this->_internal_finalized() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1000, this->_internal_finalized(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.experimental.SnapshotMetadataRecord)
  return target;
}

size_t SnapshotMetadataRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.experimental.SnapshotMetadataRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.DataType dtype = 5;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_dtype_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_dtype(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._dtype_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string graph_hash = 1;
  if (!this->_internal_graph_hash().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_graph_hash());
  }

  // string run_id = 2;
  if (!this->_internal_run_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_run_id());
  }

  // int64 creation_timestamp = 3;
  if (this->_internal_creation_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_creation_timestamp());
  }

  // int64 version = 4;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_version());
  }

  // int64 num_elements = 6;
  if (this->_internal_num_elements() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_num_elements());
  }

  // bool finalized = 1000;
  if (this->_internal_finalized() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapshotMetadataRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SnapshotMetadataRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapshotMetadataRecord::GetClassData() const { return &_class_data_; }


void SnapshotMetadataRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SnapshotMetadataRecord*>(&to_msg);
  auto& from = static_cast<const SnapshotMetadataRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.experimental.SnapshotMetadataRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.dtype_.MergeFrom(from._impl_.dtype_);
  if (!from._internal_graph_hash().empty()) {
    _this->_internal_set_graph_hash(from._internal_graph_hash());
  }
  if (!from._internal_run_id().empty()) {
    _this->_internal_set_run_id(from._internal_run_id());
  }
  if (from._internal_creation_timestamp() != 0) {
    _this->_internal_set_creation_timestamp(from._internal_creation_timestamp());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  if (from._internal_num_elements() != 0) {
    _this->_internal_set_num_elements(from._internal_num_elements());
  }
  if (from._internal_finalized() != 0) {
    _this->_internal_set_finalized(from._internal_finalized());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnapshotMetadataRecord::CopyFrom(const SnapshotMetadataRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.experimental.SnapshotMetadataRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotMetadataRecord::IsInitialized() const {
  return true;
}

void SnapshotMetadataRecord::InternalSwap(SnapshotMetadataRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dtype_.InternalSwap(&other->_impl_.dtype_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.graph_hash_, lhs_arena,
      &other->_impl_.graph_hash_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.run_id_, lhs_arena,
      &other->_impl_.run_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SnapshotMetadataRecord, _impl_.finalized_)
      + sizeof(SnapshotMetadataRecord::_impl_.finalized_)
      - PROTOBUF_FIELD_OFFSET(SnapshotMetadataRecord, _impl_.creation_timestamp_)>(
          reinterpret_cast<char*>(&_impl_.creation_timestamp_),
          reinterpret_cast<char*>(&other->_impl_.creation_timestamp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotMetadataRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto[1]);
}

// ===================================================================

class TensorMetadata::_Internal {
 public:
  static const ::tensorflow::TensorShapeProto& tensor_shape(const TensorMetadata* msg);
};

const ::tensorflow::TensorShapeProto&
TensorMetadata::_Internal::tensor_shape(const TensorMetadata* msg) {
  return *msg->_impl_.tensor_shape_;
}
void TensorMetadata::clear_tensor_shape() {
  if (GetArenaForAllocation() == nullptr && _impl_.tensor_shape_ != nullptr) {
    delete _impl_.tensor_shape_;
  }
  _impl_.tensor_shape_ = nullptr;
}
TensorMetadata::TensorMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.experimental.TensorMetadata)
}
TensorMetadata::TensorMetadata(const TensorMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TensorMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tensor_shape_){nullptr}
    , decltype(_impl_.tensor_size_bytes_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tensor_shape()) {
    _this->_impl_.tensor_shape_ = new ::tensorflow::TensorShapeProto(*from._impl_.tensor_shape_);
  }
  _this->_impl_.tensor_size_bytes_ = from._impl_.tensor_size_bytes_;
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.experimental.TensorMetadata)
}

inline void TensorMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tensor_shape_){nullptr}
    , decltype(_impl_.tensor_size_bytes_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

TensorMetadata::~TensorMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.data.experimental.TensorMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TensorMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.tensor_shape_;
}

void TensorMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TensorMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.experimental.TensorMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.tensor_shape_ != nullptr) {
    delete _impl_.tensor_shape_;
  }
  _impl_.tensor_shape_ = nullptr;
  _impl_.tensor_size_bytes_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TensorMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorflow.TensorShapeProto tensor_shape = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor_shape(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 tensor_size_bytes = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.tensor_size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TensorMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.experimental.TensorMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorflow.TensorShapeProto tensor_shape = 2;
  if (this->_internal_has_tensor_shape()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::tensor_shape(this),
        _Internal::tensor_shape(this).GetCachedSize(), target, stream);
  }

  // int64 tensor_size_bytes = 3;
  if (this->_internal_tensor_size_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_tensor_size_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.experimental.TensorMetadata)
  return target;
}

size_t TensorMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.experimental.TensorMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .tensorflow.TensorShapeProto tensor_shape = 2;
  if (this->_internal_has_tensor_shape()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.tensor_shape_);
  }

  // int64 tensor_size_bytes = 3;
  if (this->_internal_tensor_size_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_tensor_size_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TensorMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TensorMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TensorMetadata::GetClassData() const { return &_class_data_; }


void TensorMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TensorMetadata*>(&to_msg);
  auto& from = static_cast<const TensorMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.experimental.TensorMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tensor_shape()) {
    _this->_internal_mutable_tensor_shape()->::tensorflow::TensorShapeProto::MergeFrom(
        from._internal_tensor_shape());
  }
  if (from._internal_tensor_size_bytes() != 0) {
    _this->_internal_set_tensor_size_bytes(from._internal_tensor_size_bytes());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TensorMetadata::CopyFrom(const TensorMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.experimental.TensorMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorMetadata::IsInitialized() const {
  return true;
}

void TensorMetadata::InternalSwap(TensorMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TensorMetadata, _impl_.tensor_size_bytes_)
      + sizeof(TensorMetadata::_impl_.tensor_size_bytes_)
      - PROTOBUF_FIELD_OFFSET(TensorMetadata, _impl_.tensor_shape_)>(
          reinterpret_cast<char*>(&_impl_.tensor_shape_),
          reinterpret_cast<char*>(&other->_impl_.tensor_shape_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TensorMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto[2]);
}

// ===================================================================

class SnapshotTensorMetadata::_Internal {
 public:
};

SnapshotTensorMetadata::SnapshotTensorMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.experimental.SnapshotTensorMetadata)
}
SnapshotTensorMetadata::SnapshotTensorMetadata(const SnapshotTensorMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SnapshotTensorMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.tensor_metadata_){from._impl_.tensor_metadata_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.experimental.SnapshotTensorMetadata)
}

inline void SnapshotTensorMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.tensor_metadata_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SnapshotTensorMetadata::~SnapshotTensorMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.data.experimental.SnapshotTensorMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SnapshotTensorMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.tensor_metadata_.~RepeatedPtrField();
}

void SnapshotTensorMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SnapshotTensorMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.experimental.SnapshotTensorMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.tensor_metadata_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SnapshotTensorMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorflow.data.experimental.TensorMetadata tensor_metadata = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tensor_metadata(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SnapshotTensorMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.experimental.SnapshotTensorMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorflow.data.experimental.TensorMetadata tensor_metadata = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_tensor_metadata_size()); i < n; i++) {
    const auto& repfield = this->_internal_tensor_metadata(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.experimental.SnapshotTensorMetadata)
  return target;
}

size_t SnapshotTensorMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.experimental.SnapshotTensorMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorflow.data.experimental.TensorMetadata tensor_metadata = 1;
  total_size += 1UL * this->_internal_tensor_metadata_size();
  for (const auto& msg : this->_impl_.tensor_metadata_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SnapshotTensorMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SnapshotTensorMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SnapshotTensorMetadata::GetClassData() const { return &_class_data_; }


void SnapshotTensorMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SnapshotTensorMetadata*>(&to_msg);
  auto& from = static_cast<const SnapshotTensorMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.experimental.SnapshotTensorMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.tensor_metadata_.MergeFrom(from._impl_.tensor_metadata_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SnapshotTensorMetadata::CopyFrom(const SnapshotTensorMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.experimental.SnapshotTensorMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SnapshotTensorMetadata::IsInitialized() const {
  return true;
}

void SnapshotTensorMetadata::InternalSwap(SnapshotTensorMetadata* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.tensor_metadata_.InternalSwap(&other->_impl_.tensor_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SnapshotTensorMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto[3]);
}

// ===================================================================

class DistributedSnapshotMetadata::_Internal {
 public:
};

DistributedSnapshotMetadata::DistributedSnapshotMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.data.experimental.DistributedSnapshotMetadata)
}
DistributedSnapshotMetadata::DistributedSnapshotMetadata(const DistributedSnapshotMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  DistributedSnapshotMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.element_spec_){}
    , decltype(_impl_.compression_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.element_spec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.element_spec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_element_spec().empty()) {
    _this->_impl_.element_spec_.Set(from._internal_element_spec(), 
      _this->GetArenaForAllocation());
  }
  _impl_.compression_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.compression_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_compression().empty()) {
    _this->_impl_.compression_.Set(from._internal_compression(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorflow.data.experimental.DistributedSnapshotMetadata)
}

inline void DistributedSnapshotMetadata::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.element_spec_){}
    , decltype(_impl_.compression_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.element_spec_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.element_spec_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.compression_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.compression_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DistributedSnapshotMetadata::~DistributedSnapshotMetadata() {
  // @@protoc_insertion_point(destructor:tensorflow.data.experimental.DistributedSnapshotMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DistributedSnapshotMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.element_spec_.Destroy();
  _impl_.compression_.Destroy();
}

void DistributedSnapshotMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DistributedSnapshotMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.data.experimental.DistributedSnapshotMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.element_spec_.ClearToEmpty();
  _impl_.compression_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DistributedSnapshotMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes element_spec = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_element_spec();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string compression = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_compression();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.data.experimental.DistributedSnapshotMetadata.compression"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DistributedSnapshotMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.data.experimental.DistributedSnapshotMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes element_spec = 1;
  if (!this->_internal_element_spec().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_element_spec(), target);
  }

  // string compression = 2;
  if (!this->_internal_compression().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_compression().data(), static_cast<int>(this->_internal_compression().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.data.experimental.DistributedSnapshotMetadata.compression");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_compression(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.data.experimental.DistributedSnapshotMetadata)
  return target;
}

size_t DistributedSnapshotMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.data.experimental.DistributedSnapshotMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes element_spec = 1;
  if (!this->_internal_element_spec().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_element_spec());
  }

  // string compression = 2;
  if (!this->_internal_compression().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_compression());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DistributedSnapshotMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    DistributedSnapshotMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DistributedSnapshotMetadata::GetClassData() const { return &_class_data_; }


void DistributedSnapshotMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<DistributedSnapshotMetadata*>(&to_msg);
  auto& from = static_cast<const DistributedSnapshotMetadata&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.data.experimental.DistributedSnapshotMetadata)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_element_spec().empty()) {
    _this->_internal_set_element_spec(from._internal_element_spec());
  }
  if (!from._internal_compression().empty()) {
    _this->_internal_set_compression(from._internal_compression());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DistributedSnapshotMetadata::CopyFrom(const DistributedSnapshotMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.data.experimental.DistributedSnapshotMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistributedSnapshotMetadata::IsInitialized() const {
  return true;
}

void DistributedSnapshotMetadata::InternalSwap(DistributedSnapshotMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.element_spec_, lhs_arena,
      &other->_impl_.element_spec_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.compression_, lhs_arena,
      &other->_impl_.compression_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DistributedSnapshotMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fsnapshot_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace experimental
}  // namespace data
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::data::experimental::SnapshotRecord*
Arena::CreateMaybeMessage< ::tensorflow::data::experimental::SnapshotRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::experimental::SnapshotRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::data::experimental::SnapshotMetadataRecord*
Arena::CreateMaybeMessage< ::tensorflow::data::experimental::SnapshotMetadataRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::experimental::SnapshotMetadataRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::data::experimental::TensorMetadata*
Arena::CreateMaybeMessage< ::tensorflow::data::experimental::TensorMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::experimental::TensorMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::data::experimental::SnapshotTensorMetadata*
Arena::CreateMaybeMessage< ::tensorflow::data::experimental::SnapshotTensorMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::experimental::SnapshotTensorMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorflow::data::experimental::DistributedSnapshotMetadata*
Arena::CreateMaybeMessage< ::tensorflow::data::experimental::DistributedSnapshotMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::data::experimental::DistributedSnapshotMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
