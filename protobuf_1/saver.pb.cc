// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tensorflow/core/protobuf/saver.proto

#include "tensorflow/core/protobuf/saver.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace tensorflow {
PROTOBUF_CONSTEXPR SaverDef::SaverDef(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.filename_tensor_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.save_tensor_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.restore_op_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.max_to_keep_)*/0
  , /*decltype(_impl_.sharded_)*/false
  , /*decltype(_impl_.keep_checkpoint_every_n_hours_)*/0
  , /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SaverDefDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SaverDefDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SaverDefDefaultTypeInternal() {}
  union {
    SaverDef _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SaverDefDefaultTypeInternal _SaverDef_default_instance_;
}  // namespace tensorflow
static ::_pb::Metadata file_level_metadata_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto[1];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto = nullptr;

const uint32_t TableStruct_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SaverDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorflow::SaverDef, _impl_.filename_tensor_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SaverDef, _impl_.save_tensor_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SaverDef, _impl_.restore_op_name_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SaverDef, _impl_.max_to_keep_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SaverDef, _impl_.sharded_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SaverDef, _impl_.keep_checkpoint_every_n_hours_),
  PROTOBUF_FIELD_OFFSET(::tensorflow::SaverDef, _impl_.version_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorflow::SaverDef)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::tensorflow::_SaverDef_default_instance_._instance,
};

const char descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n$tensorflow/core/protobuf/saver.proto\022\n"
  "tensorflow\"\236\002\n\010SaverDef\022\034\n\024filename_tens"
  "or_name\030\001 \001(\t\022\030\n\020save_tensor_name\030\002 \001(\t\022"
  "\027\n\017restore_op_name\030\003 \001(\t\022\023\n\013max_to_keep\030"
  "\004 \001(\005\022\017\n\007sharded\030\005 \001(\010\022%\n\035keep_checkpoin"
  "t_every_n_hours\030\006 \001(\002\022=\n\007version\030\007 \001(\0162,"
  ".tensorflow.SaverDef.CheckpointFormatVer"
  "sion\"5\n\027CheckpointFormatVersion\022\n\n\006LEGAC"
  "Y\020\000\022\006\n\002V1\020\001\022\006\n\002V2\020\002B~\n\023org.tensorflow.ut"
  "ilB\013SaverProtosP\001ZUgithub.com/tensorflow"
  "/tensorflow/tensorflow/go/core/protobuf/"
  "for_core_protos_go_proto\370\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto = {
    false, false, 475, descriptor_table_protodef_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto,
    "tensorflow/core/protobuf/saver.proto",
    &descriptor_table_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto_once, nullptr, 0, 1,
    schemas, file_default_instances, TableStruct_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto::offsets,
    file_level_metadata_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto, file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto,
    file_level_service_descriptors_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto_getter() {
  return &descriptor_table_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto);
namespace tensorflow {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SaverDef_CheckpointFormatVersion_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto);
  return file_level_enum_descriptors_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto[0];
}
bool SaverDef_CheckpointFormatVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr SaverDef_CheckpointFormatVersion SaverDef::LEGACY;
constexpr SaverDef_CheckpointFormatVersion SaverDef::V1;
constexpr SaverDef_CheckpointFormatVersion SaverDef::V2;
constexpr SaverDef_CheckpointFormatVersion SaverDef::CheckpointFormatVersion_MIN;
constexpr SaverDef_CheckpointFormatVersion SaverDef::CheckpointFormatVersion_MAX;
constexpr int SaverDef::CheckpointFormatVersion_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class SaverDef::_Internal {
 public:
};

SaverDef::SaverDef(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:tensorflow.SaverDef)
}
SaverDef::SaverDef(const SaverDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SaverDef* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_tensor_name_){}
    , decltype(_impl_.save_tensor_name_){}
    , decltype(_impl_.restore_op_name_){}
    , decltype(_impl_.max_to_keep_){}
    , decltype(_impl_.sharded_){}
    , decltype(_impl_.keep_checkpoint_every_n_hours_){}
    , decltype(_impl_.version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.filename_tensor_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_tensor_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_filename_tensor_name().empty()) {
    _this->_impl_.filename_tensor_name_.Set(from._internal_filename_tensor_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.save_tensor_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.save_tensor_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_save_tensor_name().empty()) {
    _this->_impl_.save_tensor_name_.Set(from._internal_save_tensor_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.restore_op_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.restore_op_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_restore_op_name().empty()) {
    _this->_impl_.restore_op_name_.Set(from._internal_restore_op_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.max_to_keep_, &from._impl_.max_to_keep_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.version_) -
    reinterpret_cast<char*>(&_impl_.max_to_keep_)) + sizeof(_impl_.version_));
  // @@protoc_insertion_point(copy_constructor:tensorflow.SaverDef)
}

inline void SaverDef::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.filename_tensor_name_){}
    , decltype(_impl_.save_tensor_name_){}
    , decltype(_impl_.restore_op_name_){}
    , decltype(_impl_.max_to_keep_){0}
    , decltype(_impl_.sharded_){false}
    , decltype(_impl_.keep_checkpoint_every_n_hours_){0}
    , decltype(_impl_.version_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.filename_tensor_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.filename_tensor_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.save_tensor_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.save_tensor_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.restore_op_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.restore_op_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SaverDef::~SaverDef() {
  // @@protoc_insertion_point(destructor:tensorflow.SaverDef)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SaverDef::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.filename_tensor_name_.Destroy();
  _impl_.save_tensor_name_.Destroy();
  _impl_.restore_op_name_.Destroy();
}

void SaverDef::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SaverDef::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorflow.SaverDef)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.filename_tensor_name_.ClearToEmpty();
  _impl_.save_tensor_name_.ClearToEmpty();
  _impl_.restore_op_name_.ClearToEmpty();
  ::memset(&_impl_.max_to_keep_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.version_) -
      reinterpret_cast<char*>(&_impl_.max_to_keep_)) + sizeof(_impl_.version_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SaverDef::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string filename_tensor_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_filename_tensor_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.SaverDef.filename_tensor_name"));
        } else
          goto handle_unusual;
        continue;
      // string save_tensor_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_save_tensor_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.SaverDef.save_tensor_name"));
        } else
          goto handle_unusual;
        continue;
      // string restore_op_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_restore_op_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "tensorflow.SaverDef.restore_op_name"));
        } else
          goto handle_unusual;
        continue;
      // int32 max_to_keep = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.max_to_keep_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sharded = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.sharded_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float keep_checkpoint_every_n_hours = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.keep_checkpoint_every_n_hours_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .tensorflow.SaverDef.CheckpointFormatVersion version = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_version(static_cast<::tensorflow::SaverDef_CheckpointFormatVersion>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SaverDef::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorflow.SaverDef)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename_tensor_name = 1;
  if (!this->_internal_filename_tensor_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename_tensor_name().data(), static_cast<int>(this->_internal_filename_tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SaverDef.filename_tensor_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename_tensor_name(), target);
  }

  // string save_tensor_name = 2;
  if (!this->_internal_save_tensor_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_save_tensor_name().data(), static_cast<int>(this->_internal_save_tensor_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SaverDef.save_tensor_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_save_tensor_name(), target);
  }

  // string restore_op_name = 3;
  if (!this->_internal_restore_op_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_restore_op_name().data(), static_cast<int>(this->_internal_restore_op_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorflow.SaverDef.restore_op_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_restore_op_name(), target);
  }

  // int32 max_to_keep = 4;
  if (this->_internal_max_to_keep() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_to_keep(), target);
  }

  // bool sharded = 5;
  if (this->_internal_sharded() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_sharded(), target);
  }

  // float keep_checkpoint_every_n_hours = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_keep_checkpoint_every_n_hours = this->_internal_keep_checkpoint_every_n_hours();
  uint32_t raw_keep_checkpoint_every_n_hours;
  memcpy(&raw_keep_checkpoint_every_n_hours, &tmp_keep_checkpoint_every_n_hours, sizeof(tmp_keep_checkpoint_every_n_hours));
  if (raw_keep_checkpoint_every_n_hours != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_keep_checkpoint_every_n_hours(), target);
  }

  // .tensorflow.SaverDef.CheckpointFormatVersion version = 7;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorflow.SaverDef)
  return target;
}

size_t SaverDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorflow.SaverDef)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename_tensor_name = 1;
  if (!this->_internal_filename_tensor_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename_tensor_name());
  }

  // string save_tensor_name = 2;
  if (!this->_internal_save_tensor_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_save_tensor_name());
  }

  // string restore_op_name = 3;
  if (!this->_internal_restore_op_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_restore_op_name());
  }

  // int32 max_to_keep = 4;
  if (this->_internal_max_to_keep() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_to_keep());
  }

  // bool sharded = 5;
  if (this->_internal_sharded() != 0) {
    total_size += 1 + 1;
  }

  // float keep_checkpoint_every_n_hours = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_keep_checkpoint_every_n_hours = this->_internal_keep_checkpoint_every_n_hours();
  uint32_t raw_keep_checkpoint_every_n_hours;
  memcpy(&raw_keep_checkpoint_every_n_hours, &tmp_keep_checkpoint_every_n_hours, sizeof(tmp_keep_checkpoint_every_n_hours));
  if (raw_keep_checkpoint_every_n_hours != 0) {
    total_size += 1 + 4;
  }

  // .tensorflow.SaverDef.CheckpointFormatVersion version = 7;
  if (this->_internal_version() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SaverDef::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SaverDef::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SaverDef::GetClassData() const { return &_class_data_; }


void SaverDef::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SaverDef*>(&to_msg);
  auto& from = static_cast<const SaverDef&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tensorflow.SaverDef)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_filename_tensor_name().empty()) {
    _this->_internal_set_filename_tensor_name(from._internal_filename_tensor_name());
  }
  if (!from._internal_save_tensor_name().empty()) {
    _this->_internal_set_save_tensor_name(from._internal_save_tensor_name());
  }
  if (!from._internal_restore_op_name().empty()) {
    _this->_internal_set_restore_op_name(from._internal_restore_op_name());
  }
  if (from._internal_max_to_keep() != 0) {
    _this->_internal_set_max_to_keep(from._internal_max_to_keep());
  }
  if (from._internal_sharded() != 0) {
    _this->_internal_set_sharded(from._internal_sharded());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_keep_checkpoint_every_n_hours = from._internal_keep_checkpoint_every_n_hours();
  uint32_t raw_keep_checkpoint_every_n_hours;
  memcpy(&raw_keep_checkpoint_every_n_hours, &tmp_keep_checkpoint_every_n_hours, sizeof(tmp_keep_checkpoint_every_n_hours));
  if (raw_keep_checkpoint_every_n_hours != 0) {
    _this->_internal_set_keep_checkpoint_every_n_hours(from._internal_keep_checkpoint_every_n_hours());
  }
  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SaverDef::CopyFrom(const SaverDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorflow.SaverDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaverDef::IsInitialized() const {
  return true;
}

void SaverDef::InternalSwap(SaverDef* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.filename_tensor_name_, lhs_arena,
      &other->_impl_.filename_tensor_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.save_tensor_name_, lhs_arena,
      &other->_impl_.save_tensor_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.restore_op_name_, lhs_arena,
      &other->_impl_.restore_op_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SaverDef, _impl_.version_)
      + sizeof(SaverDef::_impl_.version_)
      - PROTOBUF_FIELD_OFFSET(SaverDef, _impl_.max_to_keep_)>(
          reinterpret_cast<char*>(&_impl_.max_to_keep_),
          reinterpret_cast<char*>(&other->_impl_.max_to_keep_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SaverDef::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto_getter, &descriptor_table_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto_once,
      file_level_metadata_tensorflow_2fcore_2fprotobuf_2fsaver_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorflow
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorflow::SaverDef*
Arena::CreateMaybeMessage< ::tensorflow::SaverDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorflow::SaverDef >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
